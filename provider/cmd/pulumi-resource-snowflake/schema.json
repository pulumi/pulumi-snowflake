{
    "name": "snowflake",
    "description": "A Pulumi package for creating and managing snowflake cloud resources.",
    "keywords": [
        "pulumi",
        "snowflake"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`snowflake` Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake).",
    "repository": "https://github.com/pulumi/pulumi-snowflake",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-snowflake/sdk/go/snowflake",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing snowflake cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "account": {
                "type": "string",
                "description": "Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced\nfrom the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ACCOUNT"
                    ]
                }
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,\nUsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable. It has to be set\nexplicitly to JWT for private key authentication.\n"
            },
            "browserAuth": {
                "type": "boolean",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_USE_BROWSER_AUTH"
                    ]
                },
                "deprecationMessage": "Use `authenticator` instead"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "boolean",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "boolean",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from\nthe `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be\nsourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from\nthe `SNOWFLAKE_HOST` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced\nfrom the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "oauthAccessToken": {
                "type": "string",
                "description": "Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_ACCESS_TOKEN"
                    ]
                },
                "deprecationMessage": "Use `token` instead",
                "secret": true
            },
            "oauthClientId": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_CLIENT_ID"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.client_id` instead",
                "secret": true
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_CLIENT_SECRET"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.client_secret` instead",
                "secret": true
            },
            "oauthEndpoint": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_ENDPOINT"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.token_endpoint` instead",
                "secret": true
            },
            "oauthRedirectUrl": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_REDIRECT_URL"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.redirect_uri` instead",
                "secret": true
            },
            "oauthRefreshToken": {
                "type": "string",
                "description": "Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with\n`oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_REFRESH_TOKEN"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.refresh_token` instead",
                "secret": true
            },
            "ocspFailOpen": {
                "type": "boolean",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment\nvariable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n"
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end\nof the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from\nthe `SNOWFLAKE_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or\n`password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PATH"
                    ]
                },
                "deprecationMessage": "use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead",
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "Snowflake region, such as \"eu-central-1\", with this parameter. However, since this parameter is deprecated, it is best\nto specify the region as part of the account parameter. For details, see the description of the account parameter.\n[Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy\nformat for the `account`\nidentifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)\nin the form of `\u003ccloud_region_id\u003e.\u003ccloud\u003e`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_REGION"
                    ]
                },
                "deprecationMessage": "Specify the region as part of the account parameter"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable. .\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "sessionParams": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n",
                "deprecationMessage": "Use `params` instead"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:config/tokenAccessor:tokenAccessor"
            },
            "user": {
                "type": "string",
                "description": "Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.\nRequired unless using `profile`.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_USER"
                    ]
                },
                "deprecationMessage": "Use `user` instead of `username`"
            },
            "validateDefaultParameters": {
                "type": "boolean",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        }
    },
    "types": {
        "snowflake:config/tokenAccessor:tokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedToUsers",
                        "comment",
                        "createdOn",
                        "grantedRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner"
                    ]
                }
            }
        },
        "snowflake:index/AlertAlertSchedule:AlertAlertSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for alert refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthClientIds",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthClientIds",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthClientIds",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/DatabaseOldReplicationConfiguration:DatabaseOldReplicationConfiguration": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreEditionCheck": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "accounts"
            ]
        },
        "snowflake:index/DatabaseReplication:DatabaseReplication": {
            "properties": {
                "enableToAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount"
                    },
                    "description": "Entry to enable replication and optionally failover for a given account identifier.\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.\n"
                }
            },
            "type": "object",
            "required": [
                "enableToAccounts"
            ]
        },
        "snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount": {
            "properties": {
                "accountIdentifier": {
                    "type": "string",
                    "description": "Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\"`.\n"
                },
                "withFailover": {
                    "type": "boolean",
                    "description": "Specifies if failover should be enabled for the specified account identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accountIdentifier"
            ]
        },
        "snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "grantedDatabaseRoles",
                        "grantedToDatabaseRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner",
                        "ownerRoleType"
                    ]
                }
            }
        },
        "snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag": {
            "properties": {
                "downstream": {
                    "type": "boolean",
                    "description": "Specifies whether the target lag time is downstream.\n"
                },
                "maximumDuration": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the dynamic table.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ExternalFunctionArg:ExternalFunctionArg": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Argument name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Argument type, e.g. VARCHAR\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Header value\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "externalOauthAllowedRolesLists",
                        "externalOauthAnyRoleModes",
                        "externalOauthAudienceLists",
                        "externalOauthBlockedRolesLists",
                        "externalOauthIssuers",
                        "externalOauthJwsKeysUrls",
                        "externalOauthRsaPublicKey2s",
                        "externalOauthRsaPublicKeys",
                        "externalOauthScopeDelimiters",
                        "externalOauthSnowflakeUserMappingAttributes",
                        "externalOauthTokenUserMappingClaims"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter": {
            "properties": {
                "externalOauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalOauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ExternalTableColumn:ExternalTableColumn": {
            "properties": {
                "as": {
                    "type": "string",
                    "description": "String that specifies the expression for the column. When queried, the column returns results derived from this expression.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "as",
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalTableTag:ExternalTableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Identifier for the primary failover group in the source account.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "sourceAccountName": {
                    "type": "string",
                    "description": "Source account from which you are enabling replication and failover of the specified objects.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "organizationName",
                "sourceAccountName"
            ]
        },
        "snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for secondary group refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/FunctionArgument:FunctionArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n"
                },
                "type": {
                    "type": "string",
                    "description": "The argument type\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/GrantOwnershipOn:GrantOwnershipOn": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "Specifies the identifier for the object on which you are transferring ownership.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject": {
            "properties": {
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectName",
                "objectType"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "exemptOtherPolicies",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/MaterializedViewTag:MaterializedViewTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedIpList",
                        "allowedNetworkRuleList",
                        "blockedIpList",
                        "blockedNetworkRuleList"
                    ]
                }
            }
        },
        "snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "entriesInAllowedIpList",
                        "entriesInAllowedNetworkRules",
                        "entriesInBlockedIpList",
                        "entriesInBlockedNetworkRules",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientId:OauthIntegrationForCustomClientsDescribeOutputOauthClientId"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientIds",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRedirectUris",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientId:OauthIntegrationForCustomClientsDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientIds",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRedirectUris",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the object was created in.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the object to set the parameter for.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the object was created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "snowflake:index/ProcedureArgument:ProcedureArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n"
                },
                "type": {
                    "type": "string",
                    "description": "The argument type\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "creditQuota",
                        "endTime",
                        "frequency",
                        "level",
                        "name",
                        "owner",
                        "remainingCredits",
                        "startTime",
                        "suspendAt",
                        "suspendImmediateAt",
                        "usedCredits"
                    ]
                }
            }
        },
        "snowflake:index/RoleShowOutput:RoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedToUsers",
                        "comment",
                        "createdOn",
                        "grantedRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "kind",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SnowflakeX509Certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert:Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl"
                    }
                },
                "saml2X509Certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2X509Cert:Saml2IntegrationDescribeOutputSaml2X509Cert"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedEmailPatterns",
                        "allowedUserDomains",
                        "comments",
                        "saml2DigestMethodsUseds",
                        "saml2EnableSpInitiateds",
                        "saml2ForceAuthns",
                        "saml2Issuers",
                        "saml2PostLogoutRedirectUrls",
                        "saml2Providers",
                        "saml2RequestedNameidFormats",
                        "saml2SignRequests",
                        "saml2SignatureMethodsUseds",
                        "saml2SnowflakeAcsUrls",
                        "saml2SnowflakeIssuerUrls",
                        "saml2SnowflakeMetadatas",
                        "saml2SnowflakeX509Certs",
                        "saml2SpInitiatedLoginPageLabels",
                        "saml2SsoUrls",
                        "saml2X509Certs"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert:Saml2IntegrationDescribeOutputSaml2SnowflakeX509Cert": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2X509Cert:Saml2IntegrationDescribeOutputSaml2X509Cert": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdOn",
                        "kind",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameter:SchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "catalogs",
                        "dataRetentionTimeInDays",
                        "defaultDdlCollations",
                        "enableConsoleOutputs",
                        "externalVolumes",
                        "logLevels",
                        "maxDataExtensionTimeInDays",
                        "pipeExecutionPauseds",
                        "quotedIdentifiersIgnoreCases",
                        "replaceInvalidCharacters",
                        "storageSerializationPolicies",
                        "suspendTaskAfterNumFailures",
                        "taskAutoRetryAttempts",
                        "traceLevels",
                        "userTaskManagedInitialWarehouseSizes",
                        "userTaskMinimumTriggerIntervalInSeconds",
                        "userTaskTimeoutMs"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaShowOutput:SchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "droppedOn",
                        "isCurrent",
                        "isDefault",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "retentionTime"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "runAsRoles",
                        "syncPasswords"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/StageTag:StageTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultPackages",
                        "externalAccessIntegrations",
                        "externalAccessSecrets",
                        "importUrls",
                        "mainFile",
                        "name",
                        "queryWarehouse",
                        "rootLocation",
                        "title",
                        "urlId",
                        "userPackages"
                    ]
                }
            }
        },
        "snowflake:index/StreamlitShowOutput:StreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "schemaName",
                        "title",
                        "urlId"
                    ]
                }
            }
        },
        "snowflake:index/TableColumn:TableColumn": {
            "properties": {
                "collate": {
                    "type": "string",
                    "description": "Column collation, e.g. utf8\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Column comment\n"
                },
                "default": {
                    "$ref": "#/types/snowflake:index/TableColumnDefault:TableColumnDefault",
                    "description": "Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied\n"
                },
                "identity": {
                    "$ref": "#/types/snowflake:index/TableColumnIdentity:TableColumnIdentity",
                    "description": "Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Masking policy to apply on column. It has to be a fully qualified name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n"
                },
                "nullable": {
                    "type": "boolean",
                    "description": "Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.\n"
                },
                "schemaEvolutionRecord": {
                    "type": "string",
                    "description": "Record of schema evolution.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "schemaEvolutionRecord",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/TableColumnDefault:TableColumnDefault": {
            "properties": {
                "constant": {
                    "type": "string",
                    "description": "The default constant value for the column\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The default expression value for the column\n"
                },
                "sequence": {
                    "type": "string",
                    "description": "The default sequence to use for the column\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableColumnIdentity:TableColumnIdentity": {
            "properties": {
                "startNum": {
                    "type": "integer",
                    "description": "The number to start incrementing at.\n"
                },
                "stepNum": {
                    "type": "integer",
                    "description": "Step size to increment by.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "The match type for the foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onDelete": {
                    "type": "string",
                    "description": "Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onUpdate": {
                    "type": "string",
                    "description": "Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "references": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences",
                    "description": "The table and columns that the foreign key references.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "references"
            ]
        },
        "snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences": {
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in foreign key reference\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "columns",
                "tableId"
            ]
        },
        "snowflake:index/TablePrimaryKey:TablePrimaryKey": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in primary key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "keys"
            ]
        },
        "snowflake:index/TableTag:TableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/TagAssociationObjectIdentifier:TagAssociationObjectIdentifier": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the object was created in.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the object to associate the tag with.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the object was created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "snowflake:index/UserParameter:UserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAutocommit:UserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLogLevel:UserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQueryTag:UserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSearchPath:UserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimezone:UserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekStart:UserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAutocommit:UserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLogLevel:UserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQueryTag:UserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSearchPath:UserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimezone:UserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekStart:UserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserShowOutput:UserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy": {
            "properties": {
                "entityKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns uniquely identify an entity within the view.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Aggregation policy name.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumn:ViewColumn": {
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "Specifies affected column name.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the column.\n"
                },
                "maskingPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy"
                },
                "projectionPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy"
                }
            },
            "type": "object",
            "required": [
                "columnName"
            ]
        },
        "snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the masking policy to set on a column.\n"
                },
                "usings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the projection policy to set on a column.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction": {
            "properties": {
                "functionName": {
                    "type": "string",
                    "description": "Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.\n"
                },
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.\n"
                },
                "scheduleStatus": {
                    "type": "string",
                    "description": "The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`\n"
                }
            },
            "type": "object",
            "required": [
                "functionName",
                "ons",
                "scheduleStatus"
            ]
        },
        "snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule": {
            "properties": {
                "minutes": {
                    "type": "integer",
                    "description": "Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field is not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.\n"
                },
                "usingCron": {
                    "type": "string",
                    "description": "Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ViewDescribeOutput:ViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "check",
                        "comment",
                        "default",
                        "expression",
                        "isNullable",
                        "isPrimary",
                        "isUnique",
                        "kind",
                        "name",
                        "policyName",
                        "privacyDomain",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy": {
            "properties": {
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns are affected by the policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Row access policy name.\n"
                }
            },
            "type": "object",
            "required": [
                "ons",
                "policyName"
            ]
        },
        "snowflake:index/ViewShowOutput:ViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "changeTracking",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "isMaterialized",
                        "isSecure",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "reserved",
                        "schemaName",
                        "text"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameter:WarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxConcurrencyLevels",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseShowOutput:WarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspend",
                        "available",
                        "comment",
                        "createdOn",
                        "enableQueryAcceleration",
                        "isCurrent",
                        "isDefault",
                        "maxClusterCount",
                        "minClusterCount",
                        "name",
                        "other",
                        "owner",
                        "ownerRoleType",
                        "provisioning",
                        "queryAccelerationMaxScaleFactor",
                        "queued",
                        "quiescing",
                        "resourceMonitor",
                        "resumedOn",
                        "running",
                        "scalingPolicy",
                        "size",
                        "startedClusters",
                        "state",
                        "type",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/getAccountsAccount:getAccountsAccount": {
            "properties": {
                "accountLocator": {
                    "type": "string",
                    "description": "System-assigned identifier of the acccount.\n"
                },
                "accountLocatorUrl": {
                    "type": "string",
                    "description": "Legacy Snowflake access URL syntax that includes the region_name and account_locator.\n"
                },
                "accountName": {
                    "type": "string",
                    "description": "User-defined name that identifies an account within the organization.\n"
                },
                "accountUrl": {
                    "type": "string",
                    "description": "Preferred Snowflake access URL that includes the values of organization_name and account_name.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the account.\n"
                },
                "consumptionBillingEntityName": {
                    "type": "string",
                    "description": "Name of the consumption billing entity.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the account was created.\n"
                },
                "edition": {
                    "type": "string",
                    "description": "Snowflake Edition of the account.\n"
                },
                "isOrgAdmin": {
                    "type": "boolean",
                    "description": "Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.\n"
                },
                "managedAccounts": {
                    "type": "integer",
                    "description": "Indicates how many managed accounts have been created by the account.\n"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string",
                    "description": "Name of the marketplace consumer billing entity.\n"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string",
                    "description": "Name of the marketplace provider billing entity.\n"
                },
                "oldAccountUrl": {
                    "type": "string",
                    "description": "The previous account URL for a given account.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of the organization.\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.\n"
                },
                "snowflakeRegion": {
                    "type": "string",
                    "description": "Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).\n"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountLocatorUrl",
                "accountName",
                "accountUrl",
                "comment",
                "consumptionBillingEntityName",
                "createdOn",
                "edition",
                "isOrgAdmin",
                "managedAccounts",
                "marketplaceConsumerBillingEntityName",
                "marketplaceProviderBillingEntityName",
                "oldAccountUrl",
                "organizationName",
                "regionGroup",
                "snowflakeRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAlertsAlert:getAlertsAlert": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The text of the SQL statement that should be executed when the alert is triggered.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The text of the SQL statement that serves as the condition when the alert should be triggered.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the alert is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the alert.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the alert is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "comment",
                "condition",
                "databaseName",
                "name",
                "owner",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Comment for the cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the cortex search service was created.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the cortex search service is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cortex search service.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the cortex search service is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASE ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "grantedDatabaseRoles",
                "grantedToDatabaseRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner",
                "ownerRoleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE DATABASE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR DATABASE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "integer"
                },
                "transient": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "kind",
                "name",
                "options",
                "origin",
                "owner",
                "ownerRoleType",
                "resourceGroup",
                "retentionTime",
                "transient"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesLimit:getDatabasesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDynamicTablesIn:getDynamicTablesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesLike:getDynamicTablesLike": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).\n"
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ]
        },
        "snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows to return.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord": {
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the dynamic table is stored.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dynamic table.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the dynamic table is stored.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "The maximum duration that the dynamic table’s content should lag behind real time.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse that provides the required resources to perform the incremental refreshes.\n"
                }
            },
            "type": "object",
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "comment",
                "createdOn",
                "dataTimestamp",
                "databaseName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "refreshMode",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schemaName",
                "targetLag",
                "text",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "language",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup": {
            "properties": {
                "accountLocator": {
                    "type": "string",
                    "description": "Account locator in a region.\n"
                },
                "accountName": {
                    "type": "string",
                    "description": "Name of the account.\n"
                },
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of accounts enabled for replication and failover.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of integration types that are enabled for replication.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment string.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time failover group was created.\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates whether the failover group is the primary group.\n"
                },
                "nextScheduledRefresh": {
                    "type": "string",
                    "description": "Date and time of the next scheduled refresh.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of specified object types enabled for replication and failover.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.\n"
                },
                "primary": {
                    "type": "string",
                    "description": "Name of the primary group.\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.\n"
                },
                "replicationSchedule": {
                    "type": "string",
                    "description": "Scheduled interval for refresh; NULL if no replication schedule is set.\n"
                },
                "secondaryState": {
                    "type": "string",
                    "description": "Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.\n"
                },
                "snowflakeRegion": {
                    "type": "string",
                    "description": "Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of group. Valid value is FAILOVER.\n"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountName",
                "allowedAccounts",
                "allowedIntegrationTypes",
                "comment",
                "createdOn",
                "isPrimary",
                "nextScheduledRefresh",
                "objectTypes",
                "organizationName",
                "owner",
                "primary",
                "regionGroup",
                "replicationSchedule",
                "secondaryState",
                "snowflakeRegion",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "formatType",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFunctionsFunction:getFunctionsFunction": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;schema*name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrant:getGrantsGrant": {
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "The date and time the grant was created.\n"
                },
                "grantOption": {
                    "type": "boolean",
                    "description": "Whether the grantee can grant the privilege to others.\n"
                },
                "grantedBy": {
                    "type": "string",
                    "description": "The role that granted the privilege.\n"
                },
                "grantedOn": {
                    "type": "string",
                    "description": "The object on which the privilege was granted.\n"
                },
                "grantedTo": {
                    "type": "string",
                    "description": "The role to which the privilege was granted.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The name of the role to which the privilege was granted.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the object on which the privilege was granted.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege granted.\n"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "grantOption",
                "grantedBy",
                "grantedOn",
                "grantedTo",
                "granteeName",
                "name",
                "privilege"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the account role has been granted.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the users and roles to which the application role has been granted. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the database role has been granted. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "share": {
                    "type": "string",
                    "description": "Lists all the accounts for the share and indicates the accounts that are using the share.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "Name of object to list privileges on.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to list privileges on.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the role.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application role. Must be a fully qualified name (\"\u0026lt;app*name\u0026gt;\".\"\u0026lt;app*role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the database role. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "share": {
                    "$ref": "#/types/snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare",
                    "description": "Lists all the privileges granted to the share.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare": {
            "properties": {
                "shareName": {
                    "type": "string",
                    "description": "Lists all of the privileges and roles granted to the specified share.\n"
                }
            },
            "type": "object",
            "required": [
                "shareName"
            ]
        },
        "snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE MASKING POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW MASKING POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "exemptOtherPolicies",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE NETWORK POLICIES.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW NETWORK POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedIpList",
                "allowedNetworkRuleList",
                "blockedIpList",
                "blockedNetworkRuleList"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "entriesInAllowedIpList",
                "entriesInAllowedNetworkRules",
                "entriesInBlockedIpList",
                "entriesInBlockedNetworkRules",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getParametersParameter:getParametersParameter": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value of the parameter\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the parameter\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the parameter\n"
                },
                "level": {
                    "type": "string",
                    "description": "The level of the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the parameter\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getPipesPipe:getPipesPipe": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "integration": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "integration",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getProceduresProcedure:getProceduresProcedure": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput"
                    },
                    "description": "Holds the output of SHOW RESOURCE MONITORS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "creditQuota",
                "endTime",
                "frequency",
                "level",
                "name",
                "owner",
                "remainingCredits",
                "startTime",
                "suspendAt",
                "suspendImmediateAt",
                "usedCredits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRolesRole:getRolesRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRolesRoleShowOutput:getRolesRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRolesRoleShowOutput:getRolesRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignedToUsers",
                "comment",
                "createdOn",
                "grantedRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE ROW ACCESS POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW ROW ACCESS POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "kind",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasIn:getSchemasIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getSchemasLimit:getSchemasLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getSchemasSchema:getSchemasSchema": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SCHEMA.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR SCHEMA.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput"
                    },
                    "description": "Holds the output of SHOW SCHEMAS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "pipeExecutionPauseds",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "retentionTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SECURITY INTEGRATIONS.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput"
                    },
                    "description": "Holds the output of SHOW SECURITY INTEGRATIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType"
                    }
                },
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientId:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientId"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUri"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SnowflakeX509Certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509Cert:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509Cert"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl"
                    }
                },
                "saml2X509Certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509Cert:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509Cert"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedEmailPatterns",
                "allowedUserDomains",
                "authTypes",
                "blockedRolesLists",
                "comments",
                "enableds",
                "externalOauthAllowedRolesLists",
                "externalOauthAnyRoleModes",
                "externalOauthAudienceLists",
                "externalOauthBlockedRolesLists",
                "externalOauthIssuers",
                "externalOauthJwsKeysUrls",
                "externalOauthRsaPublicKeys",
                "externalOauthRsaPublicKey2s",
                "externalOauthScopeDelimiters",
                "externalOauthSnowflakeUserMappingAttributes",
                "externalOauthTokenUserMappingClaims",
                "networkPolicies",
                "oauthAccessTokenValidities",
                "oauthAllowNonTlsRedirectUris",
                "oauthAllowedAuthorizationEndpoints",
                "oauthAllowedScopes",
                "oauthAllowedTokenEndpoints",
                "oauthAuthorizationEndpoints",
                "oauthClientAuthMethods",
                "oauthClientIds",
                "oauthClientRsaPublicKey2Fps",
                "oauthClientRsaPublicKeyFps",
                "oauthClientTypes",
                "oauthEnforcePkces",
                "oauthGrants",
                "oauthIssueRefreshTokens",
                "oauthRedirectUris",
                "oauthRefreshTokenValidities",
                "oauthTokenEndpoints",
                "oauthUseSecondaryRoles",
                "parentIntegrations",
                "preAuthorizedRolesLists",
                "runAsRoles",
                "saml2DigestMethodsUseds",
                "saml2EnableSpInitiateds",
                "saml2ForceAuthns",
                "saml2Issuers",
                "saml2PostLogoutRedirectUrls",
                "saml2Providers",
                "saml2RequestedNameidFormats",
                "saml2SignRequests",
                "saml2SignatureMethodsUseds",
                "saml2SnowflakeAcsUrls",
                "saml2SnowflakeIssuerUrls",
                "saml2SnowflakeMetadatas",
                "saml2SnowflakeX509Certs",
                "saml2SpInitiatedLoginPageLabels",
                "saml2SsoUrls",
                "saml2X509Certs",
                "syncPasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientId:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509Cert:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeX509Cert": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509Cert:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2X509Cert": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "comment",
                "createdOn",
                "enabled",
                "integrationType",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSequencesSequence:getSequencesSequence": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSharesShare:getSharesShare": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment on the share.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the share.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the share.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the share.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "For the OUTBOUND share, list of consumers.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "kind",
                "name",
                "owner",
                "tos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStagesStage:getStagesStage": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "storageIntegration": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema",
                "storageIntegration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "enabled",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsIn:getStreamlitsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getStreamlitsLimit:getStreamlitsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE STREAMLIT.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput"
                    },
                    "description": "Holds the output of SHOW STREAMLITS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultPackages",
                "externalAccessIntegrations",
                "externalAccessSecrets",
                "importUrls",
                "mainFile",
                "name",
                "queryWarehouse",
                "rootLocation",
                "title",
                "urlId",
                "userPackages"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "queryWarehouse",
                "schemaName",
                "title",
                "urlId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsStream:getStreamsStream": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema",
                "table"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTablesTable:getTablesTable": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTask:getTasksTask": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersLimit:getUsersLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getUsersUser:getUsersUser": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE USER.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameter:getUsersUserParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR USER.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput"
                    },
                    "description": "Holds the output of SHOW USERS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "customLandingPageUrl": {
                    "type": "string"
                },
                "customLandingPageUrlFlushNextUiLoad": {
                    "type": "boolean"
                },
                "daysToExpiry": {
                    "type": "number"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "loginName": {
                    "type": "string",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToBypassNetworkPolicy": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "passwordLastSetTime": {
                    "type": "string"
                },
                "rsaPublicKey": {
                    "type": "string"
                },
                "rsaPublicKey2": {
                    "type": "string"
                },
                "rsaPublicKey2Fp": {
                    "type": "string"
                },
                "rsaPublicKeyFp": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "snowflakeSupport": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "customLandingPageUrl",
                "customLandingPageUrlFlushNextUiLoad",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "lastName",
                "loginName",
                "middleName",
                "minsToBypassMfa",
                "minsToBypassNetworkPolicy",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "password",
                "passwordLastSetTime",
                "rsaPublicKey",
                "rsaPublicKey2",
                "rsaPublicKey2Fp",
                "rsaPublicKeyFp",
                "snowflakeLock",
                "snowflakeSupport"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameter:getUsersUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortDetachedQueries",
                "autocommits",
                "binaryInputFormats",
                "binaryOutputFormats",
                "clientMemoryLimits",
                "clientMetadataRequestUseConnectionCtxes",
                "clientPrefetchThreads",
                "clientResultChunkSizes",
                "clientResultColumnCaseInsensitives",
                "clientSessionKeepAlives",
                "clientSessionKeepAliveHeartbeatFrequencies",
                "clientTimestampTypeMappings",
                "dateInputFormats",
                "dateOutputFormats",
                "enableUnloadPhysicalTypeOptimizations",
                "enableUnredactedQuerySyntaxErrors",
                "errorOnNondeterministicMerges",
                "errorOnNondeterministicUpdates",
                "geographyOutputFormats",
                "geometryOutputFormats",
                "jdbcTreatDecimalAsInts",
                "jdbcTreatTimestampNtzAsUtcs",
                "jdbcUseSessionTimezones",
                "jsonIndents",
                "lockTimeouts",
                "logLevels",
                "multiStatementCounts",
                "networkPolicies",
                "noorderSequenceAsDefaults",
                "odbcTreatDecimalAsInts",
                "preventUnloadToInternalStages",
                "queryTags",
                "quotedIdentifiersIgnoreCases",
                "rowsPerResultsets",
                "s3StageVpceDnsNames",
                "searchPaths",
                "simulatedDataSharingConsumers",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutputs",
                "timeInputFormats",
                "timeOutputFormats",
                "timestampDayIsAlways24hs",
                "timestampInputFormats",
                "timestampLtzOutputFormats",
                "timestampNtzOutputFormats",
                "timestampOutputFormats",
                "timestampTypeMappings",
                "timestampTzOutputFormats",
                "timezones",
                "traceLevels",
                "transactionAbortOnErrors",
                "transactionDefaultIsolationLevels",
                "twoDigitCenturyStarts",
                "unsupportedDdlActions",
                "useCachedResults",
                "weekOfYearPolicies",
                "weekStarts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "expiresAtTime",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "hasPassword",
                "hasRsaPublicKey",
                "lastName",
                "lastSuccessLogin",
                "lockedUntilTime",
                "loginName",
                "minsToBypassMfa",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "owner",
                "snowflakeLock",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsIn:getViewsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getViewsLimit:getViewsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getViewsView:getViewsView": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE VIEW.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput"
                    },
                    "description": "Holds the output of SHOW VIEWS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "check",
                "comment",
                "default",
                "expression",
                "isNullable",
                "isPrimary",
                "isUnique",
                "kind",
                "name",
                "policyName",
                "privacyDomain",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "changeTracking",
                "comment",
                "createdOn",
                "databaseName",
                "isMaterialized",
                "isSecure",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "reserved",
                "schemaName",
                "text"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE WAREHOUSE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR WAREHOUSE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput"
                    },
                    "description": "Holds the output of SHOW WAREHOUSES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrencyLevels",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoResume",
                "autoSuspend",
                "available",
                "comment",
                "createdOn",
                "enableQueryAcceleration",
                "isCurrent",
                "isDefault",
                "maxClusterCount",
                "minClusterCount",
                "name",
                "other",
                "owner",
                "ownerRoleType",
                "provisioning",
                "queryAccelerationMaxScaleFactor",
                "queued",
                "quiescing",
                "resourceMonitor",
                "resumedOn",
                "running",
                "scalingPolicy",
                "size",
                "startedClusters",
                "state",
                "type",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the snowflake package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "account": {
                "type": "string",
                "description": "Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced\nfrom the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.\n"
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,\nUsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable. It has to be set\nexplicitly to JWT for private key authentication.\n"
            },
            "browserAuth": {
                "type": "boolean",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.\n",
                "deprecationMessage": "Use `authenticator` instead"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "boolean",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "boolean",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from\nthe `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be\nsourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from\nthe `SNOWFLAKE_HOST` environment variable.\n"
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced\nfrom the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "oauthAccessToken": {
                "type": "string",
                "description": "Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`\nenvironment variable.\n",
                "deprecationMessage": "Use `token` instead",
                "secret": true
            },
            "oauthClientId": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.\n",
                "deprecationMessage": "Use `token_accessor.0.client_id` instead",
                "secret": true
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment\nvariable.\n",
                "deprecationMessage": "Use `token_accessor.0.client_secret` instead",
                "secret": true
            },
            "oauthEndpoint": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.\n",
                "deprecationMessage": "Use `token_accessor.0.token_endpoint` instead",
                "secret": true
            },
            "oauthRedirectUrl": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment\nvariable.\n",
                "deprecationMessage": "Use `token_accessor.0.redirect_uri` instead",
                "secret": true
            },
            "oauthRefreshToken": {
                "type": "string",
                "description": "Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with\n`oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`\nenvironment variable.\n",
                "deprecationMessage": "Use `token_accessor.0.refresh_token` instead",
                "secret": true
            },
            "ocspFailOpen": {
                "type": "boolean",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment\nvariable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n"
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end\nof the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from\nthe `SNOWFLAKE_PASSWORD` environment variable.\n",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n"
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "secret": true
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or\n`password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.\n",
                "deprecationMessage": "use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead",
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.\n"
            },
            "region": {
                "type": "string",
                "description": "Snowflake region, such as \"eu-central-1\", with this parameter. However, since this parameter is deprecated, it is best\nto specify the region as part of the account parameter. For details, see the description of the account parameter.\n[Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy\nformat for the `account`\nidentifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)\nin the form of `\u003ccloud_region_id\u003e.\u003ccloud\u003e`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.\n",
                "deprecationMessage": "Specify the region as part of the account parameter"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable. .\n"
            },
            "sessionParams": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n",
                "deprecationMessage": "Use `params` instead"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "user": {
                "type": "string",
                "description": "Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.\nRequired unless using `profile`.\n",
                "deprecationMessage": "Use `user` instead of `username`"
            },
            "validateDefaultParameters": {
                "type": "boolean",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n"
            }
        },
        "inputProperties": {
            "account": {
                "type": "string",
                "description": "Specifies your Snowflake account identifier assigned, by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html). Can also be sourced\nfrom the `SNOWFLAKE_ACCOUNT` environment variable. Required unless using `profile`.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ACCOUNT"
                    ]
                }
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid values include: Snowflake, OAuth, ExternalBrowser, Okta, JWT, TokenAccessor,\nUsernamePasswordMFA. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable. It has to be set\nexplicitly to JWT for private key authentication.\n"
            },
            "browserAuth": {
                "type": "boolean",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_USE_BROWSER_AUTH"
                    ]
                },
                "deprecationMessage": "Use `authenticator` instead"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "boolean",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "boolean",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Default is 900 seconds. Can also be sourced from\nthe `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Should HTAP query context cache be disabled. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Indicates whether to disable telemetry. Can also be sourced from the `SNOWFLAKE_DISABLE_TELEMETRY` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Default is 120 seconds. Can also be\nsourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Supports passing in a custom host value to the snowflake go driver for use with privatelink. Can also be sourced from\nthe `SNOWFLAKE_HOST` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Default is 10 seconds. Can also be sourced\nfrom the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "oauthAccessToken": {
                "type": "string",
                "description": "Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_refresh_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_ACCESS_TOKEN"
                    ]
                },
                "deprecationMessage": "Use `token` instead",
                "secret": true
            },
            "oauthClientId": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_CLIENT_ID"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.client_id` instead",
                "secret": true
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_CLIENT_SECRET"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.client_secret` instead",
                "secret": true
            },
            "oauthEndpoint": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_ENDPOINT"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.token_endpoint` instead",
                "secret": true
            },
            "oauthRedirectUrl": {
                "type": "string",
                "description": "Required when `oauth_refresh_token` is used. Can also be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_REDIRECT_URL"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.redirect_uri` instead",
                "secret": true
            },
            "oauthRefreshToken": {
                "type": "string",
                "description": "Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with\n`oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,\n`private_key_path`, `oauth_access_token` or `password`. Can also be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_OAUTH_REFRESH_TOKEN"
                    ]
                },
                "deprecationMessage": "Use `token_accessor.0.refresh_token` instead",
                "secret": true
            },
            "ocspFailOpen": {
                "type": "boolean",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment\nvariable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n"
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded in the login password. Appends the MFA passcode to the end\nof the password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can also be sourced from\nthe `SNOWFLAKE_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Support custom port values to snowflake go driver for use with privatelink. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can also be sourced from\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or\n`password`. Can also be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PATH"
                    ]
                },
                "deprecationMessage": "use the [file Function](https://developer.hashicorp.com/terraform/language/functions/file) instead",
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "Either http or https, defaults to https. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "Snowflake region, such as \"eu-central-1\", with this parameter. However, since this parameter is deprecated, it is best\nto specify the region as part of the account parameter. For details, see the description of the account parameter.\n[Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy\nformat for the `account`\nidentifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)\nin the form of `\u003ccloud_region_id\u003e.\u003ccloud\u003e`. Can also be sourced from the `SNOWFLAKE_REGION` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_REGION"
                    ]
                },
                "deprecationMessage": "Specify the region as part of the account parameter"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable. .\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "sessionParams": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets session parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters)\n",
                "deprecationMessage": "Use `params` instead"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "user": {
                "type": "string",
                "description": "Username. Can also be sourced from the `SNOWFLAKE_USER` environment variable. Required unless using `profile`.\n"
            },
            "username": {
                "type": "string",
                "description": "Username for username+password authentication. Can also be sourced from the `SNOWFLAKE_USERNAME` environment variable.\nRequired unless using `profile`.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_USER"
                    ]
                },
                "deprecationMessage": "Use `user` instead of `username`"
            },
            "validateDefaultParameters": {
                "type": "boolean",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        }
    },
    "resources": {
        "snowflake:index/account:Account": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/account:Account account \u003caccount_locator\u003e\n```\n\n",
            "properties": {
                "adminName": {
                    "type": "string",
                    "description": "Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial administrative user of the account. Optional if the `ADMIN_RSA_PUBLIC_KEY` parameter is specified. For more information about passwords in Snowflake, see [Snowflake-provided Password Policy](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=Snowflake%2Dprovided%20Password%20Policy).\n",
                    "secret": true
                },
                "adminRsaPublicKey": {
                    "type": "string",
                    "description": "Assigns a public key to the initial administrative user of the account in order to implement [key pair authentication](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=key%20pair%20authentication) for the user. Optional if the `ADMIN_PASSWORD` parameter is specified.\n",
                    "secret": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n"
                },
                "edition": {
                    "type": "string",
                    "description": "[Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions.html) of the account. Valid values are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the initial administrative user of the account. This email address is used to send any notifications about the account.\n",
                    "secret": true
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the initial administrative user of the account\n",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days to wait before dropping the account. The default is 3 days.\n"
                },
                "isOrgAdmin": {
                    "type": "boolean",
                    "description": "Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the initial administrative user of the account\n",
                    "secret": true
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "Specifies whether the new user created to administer the account is forced to change their password upon first login into the account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account; must be unique within an organization, regardless of which Snowflake Region the account is in. In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n"
                }
            },
            "required": [
                "adminName",
                "edition",
                "email",
                "fullyQualifiedName",
                "isOrgAdmin",
                "name"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "description": "Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive.\n",
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial administrative user of the account. Optional if the `ADMIN_RSA_PUBLIC_KEY` parameter is specified. For more information about passwords in Snowflake, see [Snowflake-provided Password Policy](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=Snowflake%2Dprovided%20Password%20Policy).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "adminRsaPublicKey": {
                    "type": "string",
                    "description": "Assigns a public key to the initial administrative user of the account in order to implement [key pair authentication](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=key%20pair%20authentication) for the user. Optional if the `ADMIN_PASSWORD` parameter is specified.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n",
                    "willReplaceOnChanges": true
                },
                "edition": {
                    "type": "string",
                    "description": "[Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions.html) of the account. Valid values are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL\n",
                    "willReplaceOnChanges": true
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the initial administrative user of the account. This email address is used to send any notifications about the account.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the initial administrative user of the account\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days to wait before dropping the account. The default is 3 days.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the initial administrative user of the account\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "Specifies whether the new user created to administer the account is forced to change their password upon first login into the account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account; must be unique within an organization, regardless of which Snowflake Region the account is in. In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                    "willReplaceOnChanges": true
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "edition",
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "description": "Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Password for the initial administrative user of the account. Optional if the `ADMIN_RSA_PUBLIC_KEY` parameter is specified. For more information about passwords in Snowflake, see [Snowflake-provided Password Policy](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=Snowflake%2Dprovided%20Password%20Policy).\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "adminRsaPublicKey": {
                        "type": "string",
                        "description": "Assigns a public key to the initial administrative user of the account in order to implement [key pair authentication](https://docs.snowflake.com/en/sql-reference/sql/create-account.html#:~:text=key%20pair%20authentication) for the user. Optional if the `ADMIN_PASSWORD` parameter is specified.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "edition": {
                        "type": "string",
                        "description": "[Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions.html) of the account. Valid values are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL\n",
                        "willReplaceOnChanges": true
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the initial administrative user of the account. This email address is used to send any notifications about the account.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the initial administrative user of the account\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gracePeriodInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days to wait before dropping the account. The default is 3 days.\n"
                    },
                    "isOrgAdmin": {
                        "type": "boolean",
                        "description": "Indicates whether the ORGADMIN role is enabled in an account. If TRUE, the role is enabled.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the initial administrative user of the account\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "mustChangePassword": {
                        "type": "boolean",
                        "description": "Specifies whether the new user created to administer the account is forced to change their password upon first login into the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the account; must be unique within an organization, regardless of which Snowflake Region the account is in. In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                        "willReplaceOnChanges": true
                    },
                    "regionGroup": {
                        "type": "string",
                        "description": "ID of the Snowflake Region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountParameter:AccountParameter": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/accountParameter:AccountParameter p \u003cparameter_name\u003e\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountPasswordPolicyAttachment:AccountPasswordPolicyAttachment": {
            "properties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n"
                }
            },
            "required": [
                "passwordPolicy"
            ],
            "inputProperties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicy": {
                        "type": "string",
                        "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountRole:AccountRole": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/accountRole:AccountRole example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/alert:Alert": {
            "description": "\n\n## Import\n\nformat is database name | schema name | alert name\n\n```sh\n$ pulumi import snowflake:index/alert:Alert example 'dbName|schemaName|alertName'\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n"
                }
            },
            "required": [
                "action",
                "condition",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "warehouse"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "condition",
                "database",
                "schema",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                    },
                    "alertSchedule": {
                        "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                        "description": "The schedule for periodically running an alert.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the alert.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the alert will use.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithAuthorizationCodeGrant resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n"
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithClientCredentials resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n"
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithJwtBearer resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAssertionIssuer": {
                        "type": "string"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n"
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "description": "Specifies the client secret for the OAuth application in the ServiceNow instance from the previous step. The connector uses this to request an access token from the ServiceNow instance.\n"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiIntegration:ApiIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiIntegration:ApiIntegration example name\n```\n\n",
            "properties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "apiAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n"
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureConsentUrl": {
                    "type": "string"
                },
                "azureMultiTenantAppName": {
                    "type": "string"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the API integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n"
                }
            },
            "required": [
                "apiAllowedPrefixes",
                "apiAwsExternalId",
                "apiAwsIamUserArn",
                "apiGcpServiceAccount",
                "apiProvider",
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n",
                    "willReplaceOnChanges": true
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAllowedPrefixes",
                "apiProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiIntegration resources.\n",
                "properties": {
                    "apiAllowedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                    },
                    "apiAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "apiAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "apiAwsRoleArn": {
                        "type": "string",
                        "description": "ARN of a cloud platform role.\n"
                    },
                    "apiBlockedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                    },
                    "apiGcpServiceAccount": {
                        "type": "string",
                        "description": "The service account used for communication with the Google API Gateway.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key (also called a “subscription key”).\n",
                        "secret": true
                    },
                    "apiProvider": {
                        "type": "string",
                        "description": "Specifies the HTTPS proxy service type.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureAdApplicationId": {
                        "type": "string",
                        "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                    },
                    "azureConsentUrl": {
                        "type": "string"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the API integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "googleAudience": {
                        "type": "string",
                        "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/cortexSearchService:CortexSearchService": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/cortexSearchService:CortexSearchService example 'dbName|schemaName|fileFormatName'\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Creation date for the given Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n"
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "required": [
                "createdOn",
                "database",
                "fullyQualifiedName",
                "name",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "requiredInputs": [
                "database",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CortexSearchService resources.\n",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the Cortex search service.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Creation date for the given Cortex search service.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "type": "string",
                        "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetLag": {
                        "type": "string",
                        "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the Cortex search service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/database:Database": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/database:Database example 'database_name'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "dropPublicSchemaOnCreation": {
                        "type": "boolean",
                        "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "replication": {
                        "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                        "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/databaseOld:DatabaseOld": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/databaseOld:DatabaseOld example 'database_name'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "fromDatabase": {
                    "type": "string",
                    "description": "Specify a database to create a clone from.\n"
                },
                "fromReplica": {
                    "type": "string",
                    "description": "Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdb_name\u003e\"`. An example would be: `\"myorg1\".\"account1\".\"db1\"`\n"
                },
                "fromShare": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account.\n"
                },
                "replicationConfiguration": {
                    "$ref": "#/types/snowflake:index/DatabaseOldReplicationConfiguration:DatabaseOldReplicationConfiguration",
                    "description": "When set, specifies the configurations for database replication.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "fromDatabase": {
                    "type": "string",
                    "description": "Specify a database to create a clone from.\n",
                    "willReplaceOnChanges": true
                },
                "fromReplica": {
                    "type": "string",
                    "description": "Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdb_name\u003e\"`. An example would be: `\"myorg1\".\"account1\".\"db1\"`\n",
                    "willReplaceOnChanges": true
                },
                "fromShare": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.\n",
                    "willReplaceOnChanges": true
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account.\n"
                },
                "replicationConfiguration": {
                    "$ref": "#/types/snowflake:index/DatabaseOldReplicationConfiguration:DatabaseOldReplicationConfiguration",
                    "description": "When set, specifies the configurations for database replication.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseOld resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "fromDatabase": {
                        "type": "string",
                        "description": "Specify a database to create a clone from.\n",
                        "willReplaceOnChanges": true
                    },
                    "fromReplica": {
                        "type": "string",
                        "description": "Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdb_name\u003e\"`. An example would be: `\"myorg1\".\"account1\".\"db1\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "fromShare": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.\n",
                        "willReplaceOnChanges": true
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account.\n"
                    },
                    "replicationConfiguration": {
                        "$ref": "#/types/snowflake:index/DatabaseOldReplicationConfiguration:DatabaseOldReplicationConfiguration",
                        "description": "When set, specifies the configurations for database replication.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/databaseRole:DatabaseRole": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/databaseRole:DatabaseRole example '\"\u003cdatabase_name\u003e\".\"\u003cdatabase_role_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed whenever comment field changes.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database role.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed whenever comment field changes.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/dynamicTable:DynamicTable": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/dynamicTable:DynamicTable dt \"mydb|myschema|product\"\n```\n\n",
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Time when this dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "createdOn",
                "dataTimestamp",
                "database",
                "fullyQualifiedName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "query",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n",
                    "willReplaceOnChanges": true
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n",
                    "willReplaceOnChanges": true
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "requiredInputs": [
                "database",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicTable resources.\n",
                "properties": {
                    "automaticClustering": {
                        "type": "boolean",
                        "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                    },
                    "bytes": {
                        "type": "integer",
                        "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                    },
                    "clusterBy": {
                        "type": "string",
                        "description": "The clustering key for the dynamic table.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the dynamic table.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Time when this dynamic table was created.\n"
                    },
                    "dataTimestamp": {
                        "type": "string",
                        "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the dynamic table.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initialize": {
                        "type": "string",
                        "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n",
                        "willReplaceOnChanges": true
                    },
                    "isClone": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                    },
                    "isReplica": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                    },
                    "lastSuspendedOn": {
                        "type": "string",
                        "description": "Timestamp of last suspension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role that owns the dynamic table.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the dynamic table.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshMode": {
                        "type": "string",
                        "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshModeReason": {
                        "type": "string",
                        "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                    },
                    "rows": {
                        "type": "integer",
                        "description": "Number of rows in the table.\n"
                    },
                    "schedulingState": {
                        "type": "string",
                        "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the dynamic table.\n"
                    },
                    "targetLag": {
                        "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                        "description": "Specifies the target lag time for the dynamic table.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the dynamic table.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/emailNotificationIntegration:EmailNotificationIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/emailNotificationIntegration:EmailNotificationIntegration example name\n```\n\n",
            "properties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "enabled",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailNotificationIntegration resources.\n",
                "properties": {
                    "allowedRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that should receive notifications.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the email integration.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalFunction:ExternalFunction": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cexternal_function_name\u003e(\u003carg types, separated with ','\u003e)\n\n```sh\n$ pulumi import snowflake:index/externalFunction:ExternalFunction example 'dbName.schemaName.externalFunctionName(varchar, varchar, varchar)'\n```\n\n",
            "properties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n"
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the external function was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n"
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n"
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n"
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                }
            },
            "required": [
                "apiIntegration",
                "createdOn",
                "database",
                "fullyQualifiedName",
                "name",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n",
                    "willReplaceOnChanges": true
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                    "willReplaceOnChanges": true
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n",
                    "willReplaceOnChanges": true
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n",
                    "willReplaceOnChanges": true
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n",
                    "willReplaceOnChanges": true
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "willReplaceOnChanges": true
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiIntegration",
                "database",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalFunction resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "string",
                        "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                        },
                        "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "A description of the external function.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n",
                        "willReplaceOnChanges": true
                    },
                    "contextHeaders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Binds Snowflake context function results to HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the external function was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                        },
                        "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBatchRows": {
                        "type": "integer",
                        "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the external function when called with null inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "requestTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the request translator function\n",
                        "willReplaceOnChanges": true
                    },
                    "responseTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the response translator function.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n",
                        "willReplaceOnChanges": true
                    },
                    "returnNullAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the data type returned by the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "urlOfProxyAndResource": {
                        "type": "string",
                        "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalOauthIntegration:ExternalOauthIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/externalOauthIntegration:ExternalOauthIntegration example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST account parameter to FALSE.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                    },
                    "description": "Paramteres related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType",
                "fullyQualifiedName",
                "name",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST account parameter to FALSE.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalOauthIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                    },
                    "externalOauthAllowedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that the client can set as the primary role.\n"
                    },
                    "externalOauthAnyRoleMode": {
                        "type": "string",
                        "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                    },
                    "externalOauthAudienceLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                    },
                    "externalOauthBlockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST account parameter to FALSE.\n"
                    },
                    "externalOauthIssuer": {
                        "type": "string",
                        "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                    },
                    "externalOauthJwsKeysUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey": {
                        "type": "string",
                        "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthScopeDelimiter": {
                        "type": "string",
                        "description": "Specifies the scope delimiter in the authorization token.\n"
                    },
                    "externalOauthScopeMappingAttribute": {
                        "type": "string",
                        "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthSnowflakeUserMappingAttribute": {
                        "type": "string",
                        "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                    },
                    "externalOauthTokenUserMappingClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthType": {
                        "type": "string",
                        "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                        },
                        "description": "Paramteres related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalTable:ExternalTable": {
            "description": "\n\n## Import\n\nformat is database name | schema name | external table name\n\n```sh\n$ pulumi import snowflake:index/externalTable:ExternalTable example 'dbName|schemaName|externalTableName'\n```\n\n",
            "properties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n"
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the external table.\n"
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n"
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n"
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fileFormat",
                "fullyQualifiedName",
                "location",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n",
                    "willReplaceOnChanges": true
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n",
                    "willReplaceOnChanges": true
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "fileFormat",
                "location",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalTable resources.\n",
                "properties": {
                    "autoRefresh": {
                        "type": "boolean",
                        "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopic": {
                        "type": "string",
                        "description": "Specifies the aws sns topic for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                        },
                        "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "copyGrants": {
                        "type": "boolean",
                        "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Specifies a location for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the external table.\n"
                    },
                    "partitionBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies any partition columns to evaluate for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Specifies the file names and/or paths on the external stage to match.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshOnCreate": {
                        "type": "boolean",
                        "description": "Specifies weather to refresh when an external table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableFormat": {
                        "type": "string",
                        "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/failoverGroup:FailoverGroup": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/failoverGroup:FailoverGroup example 'fg1'\n```\n\n",
            "properties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form \\n\\n.\\n\\n\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form \\n\\n.\\n\\n\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                    "willReplaceOnChanges": true
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailoverGroup resources.\n",
                "properties": {
                    "allowedAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form \\n\\n.\\n\\n\n"
                    },
                    "allowedDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                    },
                    "allowedIntegrationTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                    },
                    "allowedShares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                    },
                    "fromReplica": {
                        "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                        "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreEditionCheck": {
                        "type": "boolean",
                        "description": "Allows replicating objects to accounts on lower editions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                    },
                    "replicationSchedule": {
                        "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                        "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/fileFormat:FileFormat": {
            "description": "\n\n## Import\n\nformat is database name | schema name | file format name\n\n```sh\n$ pulumi import snowflake:index/fileFormat:FileFormat example 'dbName|schemaName|fileFormatName'\n```\n\n",
            "properties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n"
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n"
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "required": [
                "binaryFormat",
                "compression",
                "database",
                "dateFormat",
                "encoding",
                "escape",
                "escapeUnenclosedField",
                "fieldDelimiter",
                "fieldOptionallyEnclosedBy",
                "formatType",
                "fullyQualifiedName",
                "name",
                "nullIfs",
                "recordDelimiter",
                "schema",
                "timeFormat",
                "timestampFormat"
            ],
            "inputProperties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                    "willReplaceOnChanges": true
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "requiredInputs": [
                "database",
                "formatType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFormat resources.\n",
                "properties": {
                    "allowDuplicate": {
                        "type": "boolean",
                        "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                    },
                    "binaryAsText": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                    },
                    "binaryFormat": {
                        "type": "string",
                        "description": "Defines the encoding format for binary input or output.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the file format.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "Specifies the current compression algorithm for the data file.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "dateFormat": {
                        "type": "string",
                        "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                    },
                    "disableAutoConvert": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                    },
                    "disableSnowflakeData": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                    },
                    "emptyFieldAsNull": {
                        "type": "boolean",
                        "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                    },
                    "enableOctal": {
                        "type": "boolean",
                        "description": "Boolean that enables parsing of octal numbers.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                    },
                    "errorOnColumnCountMismatch": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                    },
                    "escape": {
                        "type": "string",
                        "description": "Single character string used as the escape character for field values.\n"
                    },
                    "escapeUnenclosedField": {
                        "type": "string",
                        "description": "Single character string used as the escape character for unenclosed field values only.\n"
                    },
                    "fieldDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "fieldOptionallyEnclosedBy": {
                        "type": "string",
                        "description": "Character used to enclose strings.\n"
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "Specifies the extension for files unloaded to a stage.\n"
                    },
                    "formatType": {
                        "type": "string",
                        "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreUtf8Errors": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                    },
                    "nullIfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String used to convert to and from SQL NULL.\n"
                    },
                    "parseHeader": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                    },
                    "preserveSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                    },
                    "recordDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipBlankLines": {
                        "type": "boolean",
                        "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                    },
                    "skipByteOrderMark": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                    },
                    "skipHeader": {
                        "type": "integer",
                        "description": "Number of lines at the start of the file to skip.\n"
                    },
                    "stripNullValues": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                    },
                    "stripOuterArray": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                    },
                    "stripOuterElement": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                    },
                    "timestampFormat": {
                        "type": "string",
                        "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                    },
                    "trimSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to remove white space from fields.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/function:Function": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cfunction_name\u003e(\u003carg types, separated with ','\u003e)\n\n```sh\n$ pulumi import snowflake:index/function:Function example 'dbName.schemaName.functionName(varchar, varchar, varchar)'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionArgument:FunctionArgument"
                    },
                    "description": "List of the arguments for the function\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The handler method for Java / Python function.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the function is secure.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Specifies the language of the stored function code.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the function; does not have to be unique for the schema in which the function is created. Don't use the | character.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the function\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Required for Python functions. Specifies Python runtime version.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the javascript / java / scala / sql / python code used to create the function.\n"
                },
                "targetPath": {
                    "type": "string",
                    "description": "The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "returnType",
                "schema",
                "statement"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionArgument:FunctionArgument"
                    },
                    "description": "List of the arguments for the function\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The handler method for Java / Python function.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the function is secure.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Specifies the language of the stored function code.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the function; does not have to be unique for the schema in which the function is created. Don't use the | character.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n",
                    "willReplaceOnChanges": true
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the function\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Required for Python functions. Specifies Python runtime version.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the javascript / java / scala / sql / python code used to create the function.\n",
                    "willReplaceOnChanges": true
                },
                "targetPath": {
                    "type": "string",
                    "description": "The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "returnType",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionArgument:FunctionArgument"
                        },
                        "description": "List of the arguments for the function\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The handler method for Java / Python function.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "Specifies that the function is secure.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Specifies the language of the stored function code.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the function; does not have to be unique for the schema in which the function is created. Don't use the | character.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n",
                        "willReplaceOnChanges": true
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "The return type of the function\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Required for Python functions. Specifies Python runtime version.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the javascript / java / scala / sql / python code used to create the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetPath": {
                        "type": "string",
                        "description": "The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantAccountRole:GrantAccountRole": {
            "description": "\n\n## Import\n\nformat is role_name (string) | grantee_object_type (ROLE|USER) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantAccountRole:GrantAccountRole \"\\\"test_role\\\"|ROLE|\\\"test_parent_role\\\"\"\n```\n\n",
            "properties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted.\n"
                }
            },
            "required": [
                "roleName"
            ],
            "inputProperties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantAccountRole resources.\n",
                "properties": {
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The fully qualified name of the role which will be granted to the user or parent role.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The fully qualified name of the user on which specified role will be granted.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantApplicationRole:GrantApplicationRole": {
            "description": "\n\n## Import\n\nformat is application_role_name (string) | object_type (ACCOUNT_ROLE|APPLICATION) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantApplicationRole:GrantApplicationRole \\\"app_role_1\\\"|ACCOUNT_ROLE|\\\"my_role\\\"\"\n```\n\n",
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n"
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n"
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted.\n"
                }
            },
            "required": [
                "applicationRoleName"
            ],
            "inputProperties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n",
                    "willReplaceOnChanges": true
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantApplicationRole resources.\n",
                "properties": {
                    "applicationName": {
                        "type": "string",
                        "description": "The fully qualified name of the application on which application role will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationRoleName": {
                        "type": "string",
                        "description": "Specifies the identifier for the application role to grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentAccountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role on which application role will be granted.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantDatabaseRole:GrantDatabaseRole": {
            "description": "\n\n## Import\n\nformat is database_role_name (string) | object_type (ROLE|DATABASE ROLE|SHARE) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantDatabaseRole:GrantDatabaseRole \\\"test_db_role\\\"|ROLE|\\\"test_parent_role\\\"\"\n```\n\n",
            "properties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role.\n"
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\n"
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role.\n",
                    "willReplaceOnChanges": true
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\n",
                    "willReplaceOnChanges": true
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles.\n",
                    "willReplaceOnChanges": true
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabaseRole resources.\n",
                "properties": {
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role which will be granted to share or parent role.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentDatabaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "shareName": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantOwnership:GrantOwnership": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### OnObject on Schema ToAccountRole\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership \\\"schema_name\\\"\"`\n```\n\n#### OnObject on Schema ToDatabaseRole\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership \\\"schema_name\\\"\"`\n```\n\n#### OnObject on Table\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership \\\"table_name\\\"\"`\n```\n\n#### OnAll InDatabase\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership `\"ToAccountRole|\\\"account_role\\\"|REVOKE|OnAll|TABLES|InDatabase|\\\"database_name\\\"\"`\n```\n\n#### OnAll InSchema\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership \\\"schema_name\\\"\"`\n```\n\n#### OnFuture InDatabase\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership `\"ToAccountRole|\\\"account_role\\\"||OnFuture|TABLES|InDatabase|\\\"database_name\\\"\"`\n```\n\n#### OnFuture InSchema\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership \\\"schema_name\\\"\"`\n```\n\n",
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted.\n"
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n"
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n"
                }
            },
            "required": [
                "on"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                    "willReplaceOnChanges": true
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "on"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantOwnership resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                        "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                        "willReplaceOnChanges": true
                    },
                    "outboundPrivileges": {
                        "type": "string",
                        "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### Grant all privileges OnAccountObject (Database)\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole `\"\\\"test_db_role\\\"|false|false|ALL|OnAccountObject|DATABASE|\\\"test_db\\\"\"`\n```\n\n#### Grant list of privileges OnAllSchemasInDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole `\"\\\"test_db_role\\\"|false|false|CREATE TAG,CREATE TABLE|OnSchema|OnAllSchemasInDatabase|\\\"test_db\\\"\"`\n```\n\n#### Grant list of privileges on table\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole \\\"test_table\\\"\"`\n```\n\n#### Grant list of privileges OnAll tables in schema\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole \\\"test_schema\\\"\"`\n```\n\n",
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted.\n"
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the account role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the privileges will be granted on the account.\n"
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Specifies whether the grantee can grant the privileges to other users.\n"
                }
            },
            "required": [
                "accountRoleName"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the account role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the privileges will be granted on the account.\n",
                    "willReplaceOnChanges": true
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Specifies whether the grantee can grant the privileges to other users.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToAccountRole resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "Grant all privileges on the account role.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "If true, the privileges will be granted on the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccountObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                        "description": "Specifies the account object on which privileges will be granted\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the account role.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Specifies whether the grantee can grant the privileges to other users.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### Grant all privileges OnDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole \\\"test_db_role\\\"|false|false|ALL|OnDatabase|\\\"test_db\\\"\"`\n```\n\n#### Grant list of privileges OnAllSchemasInDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole \\\"test_db_role\\\"|false|false|CREATE TAG,CREATE TABLE|OnSchema|OnAllSchemasInDatabase|\\\"test_db\\\"\"`\n```\n\n#### Grant list of privileges on table\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole \\\"test_table\\\"\"`\n```\n\n#### Grant list of privileges OnAll tables in schema\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole \\\"test_schema\\\"\"`\n```\n\n",
            "properties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted.\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "If specified, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "If specified, allows the recipient role to grant the privileges to other roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToDatabaseRole resources.\n",
                "properties": {
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "Grant all privileges on the database role.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the database role.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "If specified, allows the recipient role to grant the privileges to other roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare": {
            "description": "\n\n## Import\n\n### OnView\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare \u003cview_name\u003e\"`\n```\n\n",
            "properties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted.\n"
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n"
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted.\n"
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted.\n"
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted.\n"
                }
            },
            "required": [
                "privileges",
                "toShare"
            ],
            "inputProperties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privileges",
                "toShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToShare resources.\n",
                "properties": {
                    "onAllTablesInSchema": {
                        "type": "string",
                        "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onFunction": {
                        "type": "string",
                        "description": "The fully qualified name of the function on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "type": "string",
                        "description": "The fully qualified name of the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTable": {
                        "type": "string",
                        "description": "The fully qualified name of the table on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTag": {
                        "type": "string",
                        "description": "The fully qualified name of the tag on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onView": {
                        "type": "string",
                        "description": "The fully qualified name of the view on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                    },
                    "toShare": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/managedAccount:ManagedAccount": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/managedAccount:ManagedAccount example name\n```\n\n",
            "properties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "Cloud in which the managed account is located.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the managed account was created.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "locator": {
                    "type": "string",
                    "description": "Display name of the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Snowflake Region in which the managed account is located.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL for accessing the managed account, particularly through the web interface.\n"
                }
            },
            "required": [
                "adminName",
                "adminPassword",
                "cloud",
                "createdOn",
                "fullyQualifiedName",
                "locator",
                "name",
                "region",
                "url"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n",
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "adminPassword"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedAccount resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "Cloud in which the managed account is located.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the managed account was created.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "locator": {
                        "type": "string",
                        "description": "Display name of the managed account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the managed account; must be unique for your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Snowflake Region in which the managed account is located.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for accessing the managed account, particularly through the web interface.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/maskingPolicy:MaskingPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/maskingPolicy:MaskingPolicy example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cmasking_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is chenged, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW MASKING POLICY` for the given masking policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "returnDataType",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is chenged, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "returnDataType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                        },
                        "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the masking policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                    },
                    "exemptOtherPolicies": {
                        "type": "string",
                        "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is chenged, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "returnDataType": {
                        "type": "string",
                        "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW MASKING POLICY` for the given masking policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/materializedView:MaterializedView": {
            "description": "\n\n## Import\n\nformat is database name | schema name | view name\n\n```sh\n$ pulumi import snowflake:index/materializedView:MaterializedView example 'dbName|schemaName|viewName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "statement",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "Specifies that the view is secure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Overwrites the View if it exists.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicy:NetworkPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkPolicy:NetworkPolicy example \"name\"\n```\n\n",
            "properties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicy resources.\n",
                "properties": {
                    "allowedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                    },
                    "allowedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake.\n"
                    },
                    "blockedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                    },
                    "blockedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network policy.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment example attachment_policyname\n```\n\n",
            "properties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "required": [
                "networkPolicyName"
            ],
            "inputProperties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                    "willReplaceOnChanges": true
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "requiredInputs": [
                "networkPolicyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicyAttachment resources.\n",
                "properties": {
                    "networkPolicyName": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "setForAccount": {
                        "type": "boolean",
                        "description": "Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which users the network policy should be attached to\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkRule:NetworkRule": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkRule:NetworkRule example 'databaseName|schemaName|networkRuleName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "mode",
                "name",
                "schema",
                "type",
                "valueLists"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mode",
                "schema",
                "type",
                "valueLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRule resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network rule.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/notificationIntegration:NotificationIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/notificationIntegration:NotificationIntegration example name\n```\n\n",
            "properties": {
                "awsSnsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                },
                "awsSnsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the notification integration was created.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gcpPubsubServiceAccount": {
                    "type": "string",
                    "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n"
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n"
                },
                "name": {
                    "type": "string"
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n"
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "required": [
                "awsSnsExternalId",
                "awsSnsIamUserArn",
                "awsSqsExternalId",
                "awsSqsIamUserArn",
                "createdOn",
                "fullyQualifiedName",
                "gcpPubsubServiceAccount",
                "name",
                "notificationProvider"
            ],
            "inputProperties": {
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n",
                    "willReplaceOnChanges": true
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                    "willReplaceOnChanges": true
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "requiredInputs": [
                "notificationProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationIntegration resources.\n",
                "properties": {
                    "awsSnsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                    },
                    "awsSnsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "awsSnsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                    },
                    "awsSqsArn": {
                        "type": "string",
                        "description": "AWS SQS queue ARN for notification integration to connect to\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "azureStorageQueuePrimaryUri": {
                        "type": "string",
                        "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n",
                        "willReplaceOnChanges": true
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the integration\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the notification integration was created.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gcpPubsubServiceAccount": {
                        "type": "string",
                        "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                    },
                    "gcpPubsubSubscriptionName": {
                        "type": "string",
                        "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcpPubsubTopicName": {
                        "type": "string",
                        "description": "The topic id that Snowflake will use to push notifications.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "notificationProvider": {
                        "type": "string",
                        "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of integration\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegration:OauthIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/oauthIntegration:OauthIntegration example name\n```\n\n",
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the OAuth integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this OAuth integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n"
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Specifies the OAuth client type.\n"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "boolean",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.\n"
                }
            },
            "required": [
                "createdOn",
                "name",
                "oauthClient"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this OAuth integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n",
                    "willReplaceOnChanges": true
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Specifies the OAuth client type.\n"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "boolean",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.\n"
                }
            },
            "requiredInputs": [
                "oauthClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegration resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the OAuth integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this OAuth integration is enabled or disabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthClient": {
                        "type": "string",
                        "description": "Specifies the OAuth client type.\n"
                    },
                    "oauthClientType": {
                        "type": "string",
                        "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients.\n"
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "boolean",
                        "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients example \"name\"\n```\n\n",
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n"
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "blockedRolesLists",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClientType",
                "oauthRedirectUri",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating.\n"
                }
            },
            "requiredInputs": [
                "blockedRolesLists",
                "oauthClientType",
                "oauthRedirectUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForCustomClients resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token.\n"
                    },
                    "oauthAllowNonTlsRedirectUri": {
                        "type": "string",
                        "description": "If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthClientRsaPublicKey": {
                        "type": "string"
                    },
                    "oauthClientRsaPublicKey2": {
                        "type": "string"
                    },
                    "oauthClientType": {
                        "type": "string",
                        "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthEnforcePkce": {
                        "type": "string",
                        "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "preAuthorizedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications example \"name\"\n```\n\n",
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "blockedRolesLists",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClient",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string"
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                }
            },
            "requiredInputs": [
                "blockedRolesLists",
                "oauthClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForPartnerApplications resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthClient": {
                        "type": "string",
                        "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string"
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/objectParameter:ObjectParameter": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/objectParameter:ObjectParameter s \u003ckey\u003e❄️\u003cobject_type\u003e❄️\u003cobject_identifier\u003e\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n"
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                    "willReplaceOnChanges": true
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n",
                    "willReplaceOnChanges": true
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                        "willReplaceOnChanges": true
                    },
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                        },
                        "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "If true, the object parameter will be set on the account level.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/passwordPolicy:PasswordPolicy": {
            "description": "A password policy specifies the requirements that must be met to create and reset a password to authenticate to Snowflake.\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "history": {
                    "type": "integer",
                    "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "history": {
                    "type": "integer",
                    "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordPolicy resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "history": {
                        "type": "integer",
                        "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                    },
                    "ifNotExists": {
                        "type": "boolean",
                        "description": "Prevent overwriting a previous password policy with the same name.\n"
                    },
                    "lockoutTimeMins": {
                        "type": "integer",
                        "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                    },
                    "maxAgeDays": {
                        "type": "integer",
                        "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                    },
                    "minAgeDays": {
                        "type": "integer",
                        "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                    },
                    "minLowerCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minNumericChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minSpecialChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minUpperCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the password policy; must be unique for your account.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Whether to override a previous password policy with the same name.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/pipe:Pipe": {
            "description": "\n\n## Import\n\nformat is database name | schema name | pipe name\n\n```sh\n$ pulumi import snowflake:index/pipe:Pipe example 'dbName|schemaName|pipeName'\n```\n\n",
            "properties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                },
                "notificationChannel": {
                    "type": "string",
                    "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the pipe.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n"
                }
            },
            "required": [
                "copyStatement",
                "database",
                "fullyQualifiedName",
                "name",
                "notificationChannel",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "copyStatement",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipe resources.\n",
                "properties": {
                    "autoIngest": {
                        "type": "boolean",
                        "description": "Specifies a auto_ingest param for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the pipe.\n"
                    },
                    "copyStatement": {
                        "type": "string",
                        "description": "Specifies the copy statement for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "integration": {
                        "type": "string",
                        "description": "Specifies an integration for the pipe.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationChannel": {
                        "type": "string",
                        "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the pipe.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedure:Procedure": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cprocedure_name\u003e(\u003carg types, separated with ','\u003e)\n\n```sh\n$ pulumi import snowflake:index/procedure:Procedure example 'dbName.schemaName.procedureName(varchar, varchar, varchar)'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureArgument:ProcedureArgument"
                    },
                    "description": "List of the arguments for the procedure\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Don't use the | character.\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Sets execution context. Allowed values are CALLER and OWNER (consult a proper section in the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#id1)). For more information see [caller's rights and owner's rights](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The handler method for Java / Python procedures.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Imports for Java / Python procedures. For Java this a list of jar files, for Python this is a list of Python files.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Specifies the language of the stored procedure code.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don't use the | character.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of package imports to use for Java / Python procedures. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "deprecationMessage": "These keywords are deprecated for stored procedures. These keywords are not intended to apply to stored procedures. In a future release, these keywords will be removed from the documentation."
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the procedure\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Required for Python procedures. Specifies Python runtime version.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Don't use the | character.\n"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see Protecting Sensitive Information with Secure UDFs and Stored Procedures.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the code used to create the procedure.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "returnType",
                "schema",
                "statement"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureArgument:ProcedureArgument"
                    },
                    "description": "List of the arguments for the procedure\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "executeAs": {
                    "type": "string",
                    "description": "Sets execution context. Allowed values are CALLER and OWNER (consult a proper section in the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#id1)). For more information see [caller's rights and owner's rights](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The handler method for Java / Python procedures.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Imports for Java / Python procedures. For Java this a list of jar files, for Python this is a list of Python files.\n",
                    "willReplaceOnChanges": true
                },
                "language": {
                    "type": "string",
                    "description": "Specifies the language of the stored procedure code.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don't use the | character.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of package imports to use for Java / Python procedures. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n",
                    "willReplaceOnChanges": true
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "deprecationMessage": "These keywords are deprecated for stored procedures. These keywords are not intended to apply to stored procedures. In a future release, these keywords will be removed from the documentation.",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the procedure\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Required for Python procedures. Specifies Python runtime version.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "secure": {
                    "type": "boolean",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see Protecting Sensitive Information with Secure UDFs and Stored Procedures.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the code used to create the procedure.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "returnType",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Procedure resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureArgument:ProcedureArgument"
                        },
                        "description": "List of the arguments for the procedure\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Sets execution context. Allowed values are CALLER and OWNER (consult a proper section in the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#id1)). For more information see [caller's rights and owner's rights](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The handler method for Java / Python procedures.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Imports for Java / Python procedures. For Java this a list of jar files, for Python this is a list of Python files.\n",
                        "willReplaceOnChanges": true
                    },
                    "language": {
                        "type": "string",
                        "description": "Specifies the language of the stored procedure code.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the procedure; does not have to be unique for the schema in which the procedure is created. Don't use the | character.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of package imports to use for Java / Python procedures. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: ('numpy','pandas','xgboost==1.5.0').\n",
                        "willReplaceOnChanges": true
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n",
                        "deprecationMessage": "These keywords are deprecated for stored procedures. These keywords are not intended to apply to stored procedures. In a future release, these keywords will be removed from the documentation.",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "The return type of the procedure\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Required for Python procedures. Specifies Python runtime version.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "secure": {
                        "type": "boolean",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see Protecting Sensitive Information with Secure UDFs and Stored Procedures.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the code used to create the procedure.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/resourceMonitor:ResourceMonitor": {
            "description": "\n\n## Import\n\nformat is the resource monitor name\n\n```sh\n$ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example 'resourceMonitorName'\n```\n\n",
            "properties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                    },
                    "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceMonitor resources.\n",
                "properties": {
                    "creditQuota": {
                        "type": "integer",
                        "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "notifyTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                    },
                    "notifyUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                        },
                        "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                    },
                    "suspendImmediateTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                    },
                    "suspendTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/role:Role": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/role:Role example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RoleShowOutput:RoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RoleShowOutput:RoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/rowAccessPolicy:RowAccessPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/rowAccessPolicy:RowAccessPolicy example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003crow_access_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROW ACCESS POLICY` for the given row access policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RowAccessPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                        },
                        "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the row access policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROW ACCESS POLICY` for the given row access policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/saml2Integration:Saml2Integration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/saml2Integration:Saml2Integration example \"name\"\n```\n\n",
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                }
            },
            "requiredInputs": [
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Saml2Integration resources.\n",
                "properties": {
                    "allowedEmailPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "allowedUserDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "saml2EnableSpInitiated": {
                        "type": "string",
                        "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2ForceAuthn": {
                        "type": "string",
                        "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2Issuer": {
                        "type": "string",
                        "description": "The string containing the IdP EntityID / Issuer.\n"
                    },
                    "saml2PostLogoutRedirectUrl": {
                        "type": "string",
                        "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                    },
                    "saml2Provider": {
                        "type": "string",
                        "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                    },
                    "saml2RequestedNameidFormat": {
                        "type": "string",
                        "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                    },
                    "saml2SignRequest": {
                        "type": "string",
                        "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2SnowflakeAcsUrl": {
                        "type": "string",
                        "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SnowflakeIssuerUrl": {
                        "type": "string",
                        "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SpInitiatedLoginPageLabel": {
                        "type": "string",
                        "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "saml2SsoUrl": {
                        "type": "string",
                        "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                    },
                    "saml2X509Cert": {
                        "type": "string",
                        "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/samlIntegration:SamlIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/samlIntegration:SamlIntegration example name\n```\n\n",
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the SAML integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n"
                },
                "saml2DigestMethodsUsed": {
                    "type": "string"
                },
                "saml2EnableSpInitiated": {
                    "type": "boolean",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.\n"
                },
                "saml2ForceAuthn": {
                    "type": "boolean",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. One of the following: OKTA, ADFS, Custom.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .\n"
                },
                "saml2SignRequest": {
                    "type": "boolean",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.\n"
                },
                "saml2SignatureMethodsUsed": {
                    "type": "string"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://\\n\\n.\\n\\n.snowflakecomputing.com/fed/login\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.\n"
                },
                "saml2SnowflakeMetadata": {
                    "type": "string",
                    "description": "Metadata created by Snowflake to provide to SAML2 provider.\n"
                },
                "saml2SnowflakeX509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                }
            },
            "required": [
                "createdOn",
                "name",
                "saml2DigestMethodsUsed",
                "saml2Issuer",
                "saml2Provider",
                "saml2SignatureMethodsUsed",
                "saml2SnowflakeAcsUrl",
                "saml2SnowflakeIssuerUrl",
                "saml2SnowflakeMetadata",
                "saml2SnowflakeX509Cert",
                "saml2SsoUrl",
                "saml2X509Cert"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n",
                    "willReplaceOnChanges": true
                },
                "saml2EnableSpInitiated": {
                    "type": "boolean",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.\n"
                },
                "saml2ForceAuthn": {
                    "type": "boolean",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. One of the following: OKTA, ADFS, Custom.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .\n"
                },
                "saml2SignRequest": {
                    "type": "boolean",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://\\n\\n.\\n\\n.snowflakecomputing.com/fed/login\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.\n"
                },
                "saml2SnowflakeX509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                }
            },
            "requiredInputs": [
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SamlIntegration resources.\n",
                "properties": {
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the SAML integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "saml2DigestMethodsUsed": {
                        "type": "string"
                    },
                    "saml2EnableSpInitiated": {
                        "type": "boolean",
                        "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in WIth button on the login page.  FALSE: does not display the Log in With button on the login page.\n"
                    },
                    "saml2ForceAuthn": {
                        "type": "boolean",
                        "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake.\n"
                    },
                    "saml2Issuer": {
                        "type": "string",
                        "description": "The string containing the IdP EntityID / Issuer.\n"
                    },
                    "saml2PostLogoutRedirectUrl": {
                        "type": "string",
                        "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                    },
                    "saml2Provider": {
                        "type": "string",
                        "description": "The string describing the IdP. One of the following: OKTA, ADFS, Custom.\n"
                    },
                    "saml2RequestedNameidFormat": {
                        "type": "string",
                        "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. If a value is not specified, Snowflake sends the urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress value in the authentication request to the IdP. NameID must be one of the following values: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified, urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress, urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName, urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName, urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos, urn:oasis:names:tc:SAML:2.0:nameid-format:persistent, urn:oasis:names:tc:SAML:2.0:nameid-format:transient .\n"
                    },
                    "saml2SignRequest": {
                        "type": "boolean",
                        "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed.\n"
                    },
                    "saml2SignatureMethodsUsed": {
                        "type": "string"
                    },
                    "saml2SnowflakeAcsUrl": {
                        "type": "string",
                        "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Default: https://\\n\\n.\\n\\n.snowflakecomputing.com/fed/login\n"
                    },
                    "saml2SnowflakeIssuerUrl": {
                        "type": "string",
                        "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.\n"
                    },
                    "saml2SnowflakeMetadata": {
                        "type": "string",
                        "description": "Metadata created by Snowflake to provide to SAML2 provider.\n"
                    },
                    "saml2SnowflakeX509Cert": {
                        "type": "string",
                        "description": "The Base64 encoded self-signed certificate generated by Snowflake for use with Encrypting SAML Assertions and Signed SAML Requests. You must have at least one of these features (encrypted SAML assertions or signed SAML responses) enabled in your Snowflake account to access the certificate value.\n"
                    },
                    "saml2SpInitiatedLoginPageLabel": {
                        "type": "string",
                        "description": "The string containing the label to display after the Log In With button on the login page.\n"
                    },
                    "saml2SsoUrl": {
                        "type": "string",
                        "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                    },
                    "saml2X509Cert": {
                        "type": "string",
                        "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/schema:Schema": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e\n\n```sh\n$ pulumi import snowflake:index/schema:Schema example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\"'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient privileges, e.g. grant*ownership on all objects in the schema.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "database",
                "defaultDdlCollation",
                "describeOutputs",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "parameters",
                "pipeExecutionPaused",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "showOutputs",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema.\n",
                    "willReplaceOnChanges": true
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the schema.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient privileges, e.g. grant*ownership on all objects in the schema.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "string",
                        "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                    },
                    "pipeExecutionPaused": {
                        "type": "boolean",
                        "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "withManagedAccess": {
                        "type": "string",
                        "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/scimIntegration:ScimIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/scimIntegration:ScimIntegration example \"name\"\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n"
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "syncPassword": {
                    "type": "string",
                    "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "runAsRole",
                "scimClient",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                    "willReplaceOnChanges": true
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                    "willReplaceOnChanges": true
                },
                "syncPassword": {
                    "type": "string",
                    "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "runAsRole",
                "scimClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScimIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specify whether the security integration is enabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy that controls SCIM network traffic.\n"
                    },
                    "runAsRole": {
                        "type": "string",
                        "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "scimClient": {
                        "type": "string",
                        "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "syncPassword": {
                        "type": "string",
                        "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secondaryDatabase:SecondaryDatabase": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secondaryDatabase:SecondaryDatabase example 'secondary_database_name'\n```\n\n",
            "properties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`.\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "asReplicaOf",
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`.\n",
                    "willReplaceOnChanges": true
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "requiredInputs": [
                "asReplicaOf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryDatabase resources.\n",
                "properties": {
                    "asReplicaOf": {
                        "type": "string",
                        "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sequence:Sequence": {
            "description": "\n\n## Import\n\nformat is database name | schema name | sequence name\n\n```sh\n$ pulumi import snowflake:index/sequence:Sequence example 'dbName|schemaName|sequenceName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n"
                },
                "nextValue": {
                    "type": "integer",
                    "description": "The increment sequence interval.\n"
                },
                "ordering": {
                    "type": "string",
                    "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "nextValue",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n",
                    "willReplaceOnChanges": true
                },
                "ordering": {
                    "type": "string",
                    "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sequence resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the sequence.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "increment": {
                        "type": "integer",
                        "description": "The amount the sequence will increase by each time it is used\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for the sequence.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextValue": {
                        "type": "integer",
                        "description": "The increment sequence interval.\n",
                        "willReplaceOnChanges": true
                    },
                    "ordering": {
                        "type": "string",
                        "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sessionParameter:SessionParameter": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/sessionParameter:SessionParameter s \u003cparameter_name\u003e\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the session parameter will be set on the account level.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to set the session parameter for. Required if on_account is false\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).\n",
                    "willReplaceOnChanges": true
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the session parameter will be set on the account level.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to set the session parameter for. Required if on_account is false\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SessionParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of session parameter. Valid values are those in [session parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#session-parameters).\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "If true, the session parameter will be set on the account level.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to set the session parameter for. Required if on_account is false\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of session parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/share:Share": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/share:Share example name\n```\n\n",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Share resources.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sharedDatabase:SharedDatabase": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/sharedDatabase:SharedDatabase example 'shared_database_name'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fromShare",
                "fullyQualifiedName",
                "logLevel",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                    "willReplaceOnChanges": true
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                    "willReplaceOnChanges": true
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                    "willReplaceOnChanges": true
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                    "willReplaceOnChanges": true
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                    "willReplaceOnChanges": true
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                    "willReplaceOnChanges": true
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                    "willReplaceOnChanges": true
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fromShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedDatabase resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                        "willReplaceOnChanges": true
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                        "willReplaceOnChanges": true
                    },
                    "fromShare": {
                        "type": "string",
                        "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                        "willReplaceOnChanges": true
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                        "willReplaceOnChanges": true
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                        "willReplaceOnChanges": true
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stage:Stage": {
            "description": "\n\n## Import\n\nformat is database name | schema name | stage name\n\n```sh\n$ pulumi import snowflake:index/stage:Stage example 'dbName|schemaName|stageName'\n```\n\n",
            "properties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n"
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n"
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "required": [
                "awsExternalId",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "snowflakeIamUser"
            ],
            "inputProperties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n",
                    "willReplaceOnChanges": true
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stage resources.\n",
                "properties": {
                    "awsExternalId": {
                        "type": "string",
                        "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stage.\n"
                    },
                    "copyOptions": {
                        "type": "string",
                        "description": "Specifies the copy options for the stage.\n"
                    },
                    "credentials": {
                        "type": "string",
                        "description": "Specifies the credentials for the stage.\n",
                        "secret": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "directory": {
                        "type": "string",
                        "description": "Specifies the directory settings for the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryption": {
                        "type": "string",
                        "description": "Specifies the encryption settings for the stage.\n"
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the stage.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "snowflakeIamUser": {
                        "type": "string",
                        "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                    },
                    "storageIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StageTag:StageTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL for the stage.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/storageIntegration:StorageIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/storageIntegration:StorageIntegration example name\n```\n\n",
            "properties": {
                "azureConsentUrl": {
                    "type": "string",
                    "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n"
                },
                "azureMultiTenantAppName": {
                    "type": "string",
                    "description": "This is the name of the Snowflake client application created for your account.\n"
                },
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the storage integration was created.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string"
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "storageAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageGcpServiceAccount": {
                    "type": "string",
                    "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                },
                "storageProvider": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "fullyQualifiedName",
                "name",
                "storageAllowedLocations",
                "storageAwsExternalId",
                "storageAwsIamUserArn",
                "storageGcpServiceAccount",
                "storageProvider"
            ],
            "inputProperties": {
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageProvider": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAllowedLocations",
                "storageProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageIntegration resources.\n",
                "properties": {
                    "azureConsentUrl": {
                        "type": "string",
                        "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string",
                        "description": "This is the name of the Snowflake client application created for your account.\n"
                    },
                    "azureTenantId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the storage integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "storageAllowedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                    },
                    "storageAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "storageAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "storageAwsObjectAcl": {
                        "type": "string",
                        "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                    },
                    "storageAwsRoleArn": {
                        "type": "string"
                    },
                    "storageBlockedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                    },
                    "storageGcpServiceAccount": {
                        "type": "string",
                        "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                    },
                    "storageProvider": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stream:Stream": {
            "description": "\n\n## Import\n\nformat is database name | schema name | stream name\n\n```sh\n$ pulumi import snowflake:index/stream:Stream example 'dbName|schemaName|streamName'\n```\n\n",
            "properties": {
                "appendOnly": {
                    "type": "boolean",
                    "description": "Type of the stream that will be created.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "insertOnly": {
                    "type": "boolean",
                    "description": "Create an insert only stream type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n"
                },
                "onStage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor.\n"
                },
                "onView": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the stream.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream.\n"
                },
                "showInitialRows": {
                    "type": "boolean",
                    "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "boolean",
                    "description": "Type of the stream that will be created.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream.\n",
                    "willReplaceOnChanges": true
                },
                "insertOnly": {
                    "type": "boolean",
                    "description": "Create an insert only stream type.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n",
                    "willReplaceOnChanges": true
                },
                "onStage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor.\n",
                    "willReplaceOnChanges": true
                },
                "onTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor.\n",
                    "willReplaceOnChanges": true
                },
                "onView": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream.\n",
                    "willReplaceOnChanges": true
                },
                "showInitialRows": {
                    "type": "boolean",
                    "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stream resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "boolean",
                        "description": "Type of the stream that will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "insertOnly": {
                        "type": "boolean",
                        "description": "Create an insert only stream type.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "onStage": {
                        "type": "string",
                        "description": "Specifies an identifier for the stage the stream will monitor.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTable": {
                        "type": "string",
                        "description": "Specifies an identifier for the table the stream will monitor.\n",
                        "willReplaceOnChanges": true
                    },
                    "onView": {
                        "type": "string",
                        "description": "Specifies an identifier for the view the stream will monitor.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the stream.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream.\n",
                        "willReplaceOnChanges": true
                    },
                    "showInitialRows": {
                        "type": "boolean",
                        "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamlit:Streamlit": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cstreamlit_name\u003e\n\n```sh\n$ pulumi import snowflake:index/streamlit:Streamlit example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstreamlit_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "mainFile",
                "name",
                "schema",
                "showOutputs",
                "stage"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit\n",
                    "willReplaceOnChanges": true
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mainFile",
                "schema",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Streamlit resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the streamlit.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the streamlit\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                    },
                    "directoryLocation": {
                        "type": "string",
                        "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "External access integrations connected to the Streamlit.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mainFile": {
                        "type": "string",
                        "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `root_location`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account.\n"
                    },
                    "queryWarehouse": {
                        "type": "string",
                        "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the streamlit.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "The stage in which streamlit files are located.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/table:Table": {
            "description": "\n\n## Import\n\nformat is database name | schema name | table name\n\n```sh\n$ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'\n```\n\n",
            "properties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the table.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fullyQualifiedName",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "changeTracking": {
                        "type": "boolean",
                        "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                    },
                    "clusterBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                        },
                        "description": "Definitions of a column to create in the table. Minimum one required.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the table.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the table.\n"
                    },
                    "primaryKey": {
                        "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                        "description": "Definitions of primary key constraint to create on table\n",
                        "deprecationMessage": "Use snowflake.TableConstraint instead"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableTag:TableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n"
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n"
                }
            },
            "required": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "inputProperties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                    "willReplaceOnChanges": true
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableColumnMaskingPolicyApplication resources.\n",
                "properties": {
                    "column": {
                        "type": "string",
                        "description": "The column to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    },
                    "maskingPolicy": {
                        "type": "string",
                        "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                        "willReplaceOnChanges": true
                    },
                    "table": {
                        "type": "string",
                        "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableConstraint:TableConstraint": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/tableConstraint:TableConstraint example 'myconstraintfk❄️FOREIGN KEY❄️databaseName|schemaName|tableName'\n```\n\n",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "Whether the constraint is deferrable\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Whether the constraint is enforced\n"
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n"
                },
                "initially": {
                    "type": "string",
                    "description": "Whether the constraint is initially deferred or immediate\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n"
                }
            },
            "required": [
                "columns",
                "name",
                "tableId",
                "type"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "Whether the constraint is deferrable\n",
                    "willReplaceOnChanges": true
                },
                "enable": {
                    "type": "boolean",
                    "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                    "willReplaceOnChanges": true
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Whether the constraint is enforced\n",
                    "willReplaceOnChanges": true
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "initially": {
                    "type": "string",
                    "description": "Whether the constraint is initially deferred or immediate\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                    "willReplaceOnChanges": true
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "columns",
                "tableId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableConstraint resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Columns to use in constraint key\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the table constraint\n",
                        "deprecationMessage": "Not used. Will be removed."
                    },
                    "deferrable": {
                        "type": "boolean",
                        "description": "Whether the constraint is deferrable\n",
                        "willReplaceOnChanges": true
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                        "willReplaceOnChanges": true
                    },
                    "enforced": {
                        "type": "boolean",
                        "description": "Whether the constraint is enforced\n",
                        "willReplaceOnChanges": true
                    },
                    "foreignKeyProperties": {
                        "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                        "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                        "willReplaceOnChanges": true
                    },
                    "initially": {
                        "type": "string",
                        "description": "Whether the constraint is initially deferred or immediate\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of constraint\n"
                    },
                    "rely": {
                        "type": "boolean",
                        "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableId": {
                        "type": "string",
                        "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tag:Tag": {
            "description": "\n\n## Import\n\nformat is database name | schema name | tag name\n\n```sh\n$ pulumi import snowflake:index/tag:Tag example 'dbName|schemaName|tagName'\n```\n\n",
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema"
            ],
            "inputProperties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "allowedValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed values for the tag.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the tag.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the tag.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tagAssociation:TagAssociation": {
            "description": "\n\n## Import\n\nformat is dbName.schemaName.tagName or dbName.schemaName.tagName\n\n```sh\n$ pulumi import snowflake:index/tagAssociation:TagAssociation example 'dbName.schemaName.tagName'\n```\n\n",
            "properties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TagAssociationObjectIdentifier:TagAssociationObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the tag association.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "Specifies the object identifier for the tag association.\n",
                    "deprecationMessage": "Use `object_identifier` instead"
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE INTEGRATION NETWORK POLICY ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT EXTERNAL FUNCTION EXTERNAL TABLE GIT REPOSITORY ICEBERG TABLE MATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PROCEDURE STAGE STREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                }
            },
            "required": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "inputProperties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TagAssociationObjectIdentifier:TagAssociationObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the tag association.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "Specifies the object identifier for the tag association.\n",
                    "deprecationMessage": "Use `object_identifier` instead",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE INTEGRATION NETWORK POLICY ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT EXTERNAL FUNCTION EXTERNAL TABLE GIT REPOSITORY ICEBERG TABLE MATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PROCEDURE STAGE STREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n",
                    "willReplaceOnChanges": true
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagAssociation resources.\n",
                "properties": {
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TagAssociationObjectIdentifier:TagAssociationObjectIdentifier"
                        },
                        "description": "Specifies the object identifier for the tag association.\n"
                    },
                    "objectName": {
                        "type": "string",
                        "description": "Specifies the object identifier for the tag association.\n",
                        "deprecationMessage": "Use `object_identifier` instead",
                        "willReplaceOnChanges": true
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE INTEGRATION NETWORK POLICY ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT EXTERNAL FUNCTION EXTERNAL TABLE GIT REPOSITORY ICEBERG TABLE MATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PROCEDURE STAGE STREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "If true, skips validation of the tag association.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n",
                        "willReplaceOnChanges": true
                    },
                    "tagValue": {
                        "type": "string",
                        "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tagMaskingPolicyAssociation:TagMaskingPolicyAssociation": {
            "description": "\n\n## Import\n\nformat is tag database name | tag schema name | tag name | masking policy database | masking policy schema | masking policy name\n\n```sh\n$ pulumi import snowflake:index/tagMaskingPolicyAssociation:TagMaskingPolicyAssociation example 'tag_db|tag_schema|tag_name|mp_db|mp_schema|mp_name'\n```\n\n",
            "properties": {
                "maskingPolicyId": {
                    "type": "string",
                    "description": "The resource id of the masking policy\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n"
                }
            },
            "required": [
                "maskingPolicyId",
                "tagId"
            ],
            "inputProperties": {
                "maskingPolicyId": {
                    "type": "string",
                    "description": "The resource id of the masking policy\n",
                    "willReplaceOnChanges": true
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "maskingPolicyId",
                "tagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagMaskingPolicyAssociation resources.\n",
                "properties": {
                    "maskingPolicyId": {
                        "type": "string",
                        "description": "The resource id of the masking policy\n",
                        "willReplaceOnChanges": true
                    },
                    "tagId": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag. Note: format must follow: \"databaseName\".\"schemaName\".\"tagName\" or \"databaseName.schemaName.tagName\" or \"databaseName|schemaName.tagName\" (snowflake_tag.tag.id)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/task:Task": {
            "description": "\n\n## Import\n\nformat is database name | schema name | task name\n\n```sh\n$ pulumi import snowflake:index/task:Task example 'dbName|schemaName|taskName'\n```\n\n",
            "properties": {
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to create a DAG of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies.\n"
                },
                "allowOverlappingExecution": {
                    "type": "boolean",
                    "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task.\n"
                },
                "sessionParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user*task*managed*initial*warehouse_size)\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "sqlStatement"
            ],
            "inputProperties": {
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to create a DAG of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies.\n"
                },
                "allowOverlappingExecution": {
                    "type": "boolean",
                    "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task.\n",
                    "willReplaceOnChanges": true
                },
                "sessionParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user*task*managed*initial*warehouse_size)\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "sqlStatement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Task resources.\n",
                "properties": {
                    "afters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more predecessor tasks for the current task. Use this option to create a DAG of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies.\n"
                    },
                    "allowOverlappingExecution": {
                        "type": "boolean",
                        "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the task.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the task.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflict with after)\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the task.\n",
                        "willReplaceOnChanges": true
                    },
                    "sessionParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                    },
                    "sqlStatement": {
                        "type": "string",
                        "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. (Conflicts with warehouse)\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. (Conflicts with user*task*managed*initial*warehouse_size)\n"
                    },
                    "when": {
                        "type": "string",
                        "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/unsafeExecute:UnsafeExecute": {
            "properties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked after creation and every time it is changed.\n"
                },
                "queryResults": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "required": [
                "execute",
                "queryResults",
                "revert"
            ],
            "inputProperties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked after creation and every time it is changed.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "requiredInputs": [
                "execute",
                "revert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UnsafeExecute resources.\n",
                "properties": {
                    "execute": {
                        "type": "string",
                        "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "Optional SQL statement to do a read. Invoked after creation and every time it is changed.\n"
                    },
                    "queryResults": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.\n"
                    },
                    "revert": {
                        "type": "string",
                        "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/user:User": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/user:User example userName\n```\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists.\n"
                    },
                    "disableMfa": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user.\n",
                        "secret": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user.\n",
                        "secret": true
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name of the user.\n",
                        "secret": true
                    },
                    "minsToBypassMfa": {
                        "type": "integer"
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "mustChangePassword": {
                        "type": "string",
                        "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment example \"MY_DATABASE|MY_SCHEMA|PASSWORD_POLICY_NAME|USER_NAME\"\n```\n\n",
            "properties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n"
                }
            },
            "required": [
                "passwordPolicyName",
                "userName"
            ],
            "inputProperties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicyName": {
                        "type": "string",
                        "description": "Fully qualified name of the password policy\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the user you want to attach the password policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPublicKeys:UserPublicKeys": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPublicKeys resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/view:View": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/view:View example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cview_name\u003e\"'\n```\n\n",
            "properties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.\n"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isRecursive": {
                    "type": "string",
                    "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                    },
                    "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "statement"
            ],
            "inputProperties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.\n"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "isRecursive": {
                    "type": "string",
                    "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "aggregationPolicy": {
                        "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                        "description": "Specifies the aggregation policy to set on a view.\n"
                    },
                    "changeTracking": {
                        "type": "string",
                        "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                        },
                        "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "copyGrants": {
                        "type": "boolean",
                        "description": "Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.\n"
                    },
                    "dataMetricFunctions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                        },
                        "description": "Data metric functions used for the view.\n"
                    },
                    "dataMetricSchedule": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                        "description": "Specifies the schedule to run the data metric functions periodically.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isRecursive": {
                        "type": "string",
                        "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "isTemporary": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "rowAccessPolicy": {
                        "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                        "description": "Specifies the row access policy to set on a view.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                        },
                        "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/warehouse:Warehouse": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/warehouse:Warehouse example warehouseName\n```\n\n",
            "properties": {
                "autoResume": {
                    "type": "string",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                    },
                    "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "maxConcurrencyLevel",
                "name",
                "parameters",
                "showOutputs",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "string",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Warehouse resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "string",
                        "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autoSuspend": {
                        "type": "integer",
                        "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the warehouse.\n"
                    },
                    "enableQueryAcceleration": {
                        "type": "string",
                        "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initiallySuspended": {
                        "type": "boolean",
                        "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                    },
                    "maxClusterCount": {
                        "type": "integer",
                        "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                    },
                    "maxConcurrencyLevel": {
                        "type": "integer",
                        "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                    },
                    "minClusterCount": {
                        "type": "integer",
                        "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `\"`\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                    },
                    "queryAccelerationMaxScaleFactor": {
                        "type": "integer",
                        "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                    },
                    "resourceMonitor": {
                        "type": "string",
                        "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                    },
                    "scalingPolicy": {
                        "type": "string",
                        "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                        },
                        "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                    },
                    "warehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                    },
                    "warehouseType": {
                        "type": "string",
                        "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "snowflake:index/getAccounts:getAccounts": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccounts.\n",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Specifies an account name pattern. If a pattern is specified, only accounts matching the pattern are returned.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccounts.\n",
                "properties": {
                    "accounts": {
                        "description": "List of all the accounts available in the organization.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getAccountsAccount:getAccountsAccount"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "Specifies an account name pattern. If a pattern is specified, only accounts matching the pattern are returned.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accounts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAlerts:getAlerts": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getAlerts({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_alerts(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetAlerts.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetAlerts(ctx, \u0026snowflake.GetAlertsArgs{\n\t\t\tDatabase: pulumi.StringRef(\"MYDB\"),\n\t\t\tSchema:   pulumi.StringRef(\"MYSCHEMA\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetAlertsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getAlerts\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlerts.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the alerts from.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Filters the command output by object name.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the alerts from.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlerts.\n",
                "properties": {
                    "alerts": {
                        "description": "Lists alerts for the current/specified database or schema, or across the entire account.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getAlertsAlert:getAlertsAlert"
                        },
                        "type": "array"
                    },
                    "database": {
                        "description": "The database from which to return the alerts from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "Filters the command output by object name.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the alerts from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "alerts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCortexSearchServices:getCortexSearchServices": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\n// Simple usage\nconst simple = snowflake.getCortexSearchServices({});\nexport const simpleOutput = simple.then(simple =\u003e simple.cortexSearchServices);\n// Filtering (like)\nconst like = snowflake.getCortexSearchServices({\n    like: \"some-name\",\n});\nexport const likeOutput = like.then(like =\u003e like.cortexSearchServices);\n// Filtering (starts_with)\nconst startsWith = snowflake.getCortexSearchServices({\n    startsWith: \"prefix-\",\n});\nexport const startsWithOutput = startsWith.then(startsWith =\u003e startsWith.cortexSearchServices);\n// Filtering (limit)\nconst limit = snowflake.getCortexSearchServices({\n    limit: {\n        rows: 10,\n        from: \"prefix-\",\n    },\n});\nexport const limitOutput = limit.then(limit =\u003e limit.cortexSearchServices);\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\n# Simple usage\nsimple = snowflake.get_cortex_search_services()\npulumi.export(\"simpleOutput\", simple.cortex_search_services)\n# Filtering (like)\nlike = snowflake.get_cortex_search_services(like=\"some-name\")\npulumi.export(\"likeOutput\", like.cortex_search_services)\n# Filtering (starts_with)\nstarts_with = snowflake.get_cortex_search_services(starts_with=\"prefix-\")\npulumi.export(\"startsWithOutput\", starts_with.cortex_search_services)\n# Filtering (limit)\nlimit = snowflake.get_cortex_search_services(limit={\n    \"rows\": 10,\n    \"from_\": \"prefix-\",\n})\npulumi.export(\"limitOutput\", limit.cortex_search_services)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Simple usage\n    var simple = Snowflake.GetCortexSearchServices.Invoke();\n\n    // Filtering (like)\n    var like = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        Like = \"some-name\",\n    });\n\n    // Filtering (starts_with)\n    var startsWith = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        StartsWith = \"prefix-\",\n    });\n\n    // Filtering (limit)\n    var limit = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        Limit = new Snowflake.Inputs.GetCortexSearchServicesLimitInputArgs\n        {\n            Rows = 10,\n            From = \"prefix-\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"simpleOutput\"] = simple.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"likeOutput\"] = like.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"startsWithOutput\"] = startsWith.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"limitOutput\"] = limit.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Simple usage\n\t\tsimple, err := snowflake.GetCortexSearchServices(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"simpleOutput\", simple.CortexSearchServices)\n\t\t// Filtering (like)\n\t\tlike, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tLike: pulumi.StringRef(\"some-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"likeOutput\", like.CortexSearchServices)\n\t\t// Filtering (starts_with)\n\t\tstartsWith, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tStartsWith: pulumi.StringRef(\"prefix-\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"startsWithOutput\", startsWith.CortexSearchServices)\n\t\t// Filtering (limit)\n\t\tlimit, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tLimit: snowflake.GetCortexSearchServicesLimit{\n\t\t\t\tRows: 10,\n\t\t\t\tFrom: pulumi.StringRef(\"prefix-\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"limitOutput\", limit.CortexSearchServices)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;\nimport com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Simple usage\n        final var simple = SnowflakeFunctions.getCortexSearchServices();\n\n        ctx.export(\"simpleOutput\", simple.applyValue(getCortexSearchServicesResult -\u003e getCortexSearchServicesResult.cortexSearchServices()));\n        // Filtering (like)\n        final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .like(\"some-name\")\n            .build());\n\n        ctx.export(\"likeOutput\", like.applyValue(getCortexSearchServicesResult -\u003e getCortexSearchServicesResult.cortexSearchServices()));\n        // Filtering (starts_with)\n        final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .startsWith(\"prefix-\")\n            .build());\n\n        ctx.export(\"startsWithOutput\", startsWith.applyValue(getCortexSearchServicesResult -\u003e getCortexSearchServicesResult.cortexSearchServices()));\n        // Filtering (limit)\n        final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .limit(GetCortexSearchServicesLimitArgs.builder()\n                .rows(10)\n                .from(\"prefix-\")\n                .build())\n            .build());\n\n        ctx.export(\"limitOutput\", limit.applyValue(getCortexSearchServicesResult -\u003e getCortexSearchServicesResult.cortexSearchServices()));\n    }\n}\n```\n```yaml\nvariables:\n  # Simple usage\n  simple:\n    fn::invoke:\n      Function: snowflake:getCortexSearchServices\n      Arguments: {}\n  # Filtering (like)\n  like:\n    fn::invoke:\n      Function: snowflake:getCortexSearchServices\n      Arguments:\n        like: some-name\n  # Filtering (starts_with)\n  startsWith:\n    fn::invoke:\n      Function: snowflake:getCortexSearchServices\n      Arguments:\n        startsWith: prefix-\n  # Filtering (limit)\n  limit:\n    fn::invoke:\n      Function: snowflake:getCortexSearchServices\n      Arguments:\n        limit:\n          rows: 10\n          from: prefix-\noutputs:\n  simpleOutput: ${simple.cortexSearchServices}\n  likeOutput: ${like.cortexSearchServices}\n  startsWithOutput: ${startsWith.cortexSearchServices}\n  limitOutput: ${limit.cortexSearchServices}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCortexSearchServices.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn",
                        "description": "IN clause to filter the list of cortex search services.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCortexSearchServices.\n",
                "properties": {
                    "cortexSearchServices": {
                        "description": "Holds the output of SHOW CORTEX SEARCH SERVICES.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn",
                        "description": "IN clause to filter the list of cortex search services.\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "cortexSearchServices",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentAccount:getCurrentAccount": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst this = snowflake.getCurrentAccount({});\nconst snowflakeAccountUrl = new aws.index.SsmParameter(\"snowflake_account_url\", {\n    name: \"/snowflake/account_url\",\n    type: \"String\",\n    value: _this.url,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_current_account()\nsnowflake_account_url = aws.index.SsmParameter(\"snowflake_account_url\",\n    name=/snowflake/account_url,\n    type=String,\n    value=this.url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetCurrentAccount.Invoke();\n\n    var snowflakeAccountUrl = new Aws.Index.SsmParameter(\"snowflake_account_url\", new()\n    {\n        Name = \"/snowflake/account_url\",\n        Type = \"String\",\n        Value = @this.Apply(getCurrentAccountResult =\u003e getCurrentAccountResult.Url),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws\"\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := snowflake.GetCurrentAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewSsmParameter(ctx, \"snowflake_account_url\", \u0026aws.SsmParameterArgs{\n\t\t\tName:  \"/snowflake/account_url\",\n\t\t\tType:  \"String\",\n\t\t\tValue: this.Url,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.aws.ssmParameter;\nimport com.pulumi.aws.SsmParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getCurrentAccount();\n\n        var snowflakeAccountUrl = new SsmParameter(\"snowflakeAccountUrl\", SsmParameterArgs.builder()\n            .name(\"/snowflake/account_url\")\n            .type(\"String\")\n            .value(this_.url())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  snowflakeAccountUrl:\n    type: aws:ssmParameter\n    name: snowflake_account_url\n    properties:\n      name: /snowflake/account_url\n      type: String\n      value: ${this.url}\nvariables:\n  this:\n    fn::invoke:\n      Function: snowflake:getCurrentAccount\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "account": {
                        "description": "The Snowflake Account ID; as returned by CURRENT_ACCOUNT().\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The Snowflake Region; as returned by CURRENT_REGION()\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "The Snowflake URL.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "account",
                    "region",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentRole:getCurrentRole": {
            "outputs": {
                "description": "A collection of values returned by getCurrentRole.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the [primary role](https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#label-access-control-role-enforcement) in use for the current session.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabase:getDatabase": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst this = snowflake.getDatabase({\n    name: \"DEMO_DB\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_database(name=\"DEMO_DB\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetDatabase.Invoke(new()\n    {\n        Name = \"DEMO_DB\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.LookupDatabase(ctx, \u0026snowflake.LookupDatabaseArgs{\n\t\t\tName: \"DEMO_DB\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()\n            .name(\"DEMO_DB\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: snowflake:getDatabase\n      Arguments:\n        name: DEMO_DB\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The database from which to return its metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isCurrent": {
                        "type": "boolean"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The database from which to return its metadata.\n",
                        "type": "string"
                    },
                    "options": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "retentionTime": {
                        "type": "integer"
                    }
                },
                "required": [
                    "comment",
                    "createdOn",
                    "isCurrent",
                    "isDefault",
                    "name",
                    "options",
                    "origin",
                    "owner",
                    "retentionTime",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRole:getDatabaseRole": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst dbRole = snowflake.getDatabaseRole({\n    database: \"MYDB\",\n    name: \"DBROLE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ndb_role = snowflake.get_database_role(database=\"MYDB\",\n    name=\"DBROLE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbRole = Snowflake.GetDatabaseRole.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Name = \"DBROLE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.LookupDatabaseRole(ctx, \u0026snowflake.LookupDatabaseRoleArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tName:     \"DBROLE\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()\n            .database(\"MYDB\")\n            .name(\"DBROLE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dbRole:\n    fn::invoke:\n      Function: snowflake:getDatabaseRole\n      Arguments:\n        database: MYDB\n        name: DBROLE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRole.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the database role from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database role name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRole.\n",
                "properties": {
                    "comment": {
                        "description": "The comment on the role\n",
                        "type": "string"
                    },
                    "database": {
                        "description": "The database from which to return the database role from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Database role name.\n",
                        "type": "string"
                    },
                    "owner": {
                        "description": "The owner of the role\n",
                        "type": "string"
                    }
                },
                "required": [
                    "comment",
                    "database",
                    "name",
                    "owner",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRoles:getDatabaseRoles": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRoles.\n",
                "properties": {
                    "inDatabase": {
                        "type": "string",
                        "description": "The database from which to return the database roles from.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "inDatabase"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRoles.\n",
                "properties": {
                    "databaseRoles": {
                        "description": "Holds the aggregated output of all database role details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inDatabase": {
                        "description": "The database from which to return the database roles from.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    }
                },
                "required": [
                    "databaseRoles",
                    "inDatabase",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabases:getDatabases": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "Runs SHOW PARAMETERS FOR DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "description": "Holds the aggregated output of all database details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabasesDatabase:getDatabasesDatabase"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "Runs DESC DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "Runs SHOW PARAMETERS FOR DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "databases",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDynamicTables:getDynamicTables": {
            "inputs": {
                "description": "A collection of arguments for invoking getDynamicTables.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn",
                        "description": "IN clause to filter the list of dynamic tables.\n"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike",
                        "description": "LIKE clause to filter the list of dynamic tables.\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit",
                        "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDynamicTables.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn",
                        "description": "IN clause to filter the list of dynamic tables.\n"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike",
                        "description": "LIKE clause to filter the list of dynamic tables.\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit",
                        "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).\n"
                    },
                    "records": {
                        "description": "The list of dynamic tables.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "description": "Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "records",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalFunctions:getExternalFunctions": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getExternalFunctions({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_external_functions(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetExternalFunctions.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetExternalFunctions(ctx, \u0026snowflake.GetExternalFunctionsArgs{\n\t\t\tDatabase: pulumi.StringRef(\"MYDB\"),\n\t\t\tSchema:   pulumi.StringRef(\"MYSCHEMA\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getExternalFunctions\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the external functions from.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "externalFunctions": {
                        "description": "The external functions in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the external functions from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "externalFunctions",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalTables:getExternalTables": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getExternalTables({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_external_tables(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetExternalTables.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetExternalTables(ctx, \u0026snowflake.GetExternalTablesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetExternalTablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getExternalTables\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExternalTables.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the external tables from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExternalTables.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "externalTables": {
                        "description": "The external tables in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the external tables from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "externalTables",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFailoverGroups:getFailoverGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getFailoverGroups.\n",
                "properties": {
                    "inAccount": {
                        "type": "string",
                        "description": "Specifies the identifier for the account\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFailoverGroups.\n",
                "properties": {
                    "failoverGroups": {
                        "description": "List of all the failover groups available in the system.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inAccount": {
                        "description": "Specifies the identifier for the account\n",
                        "type": "string"
                    }
                },
                "required": [
                    "failoverGroups",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFileFormats:getFileFormats": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getFileFormats({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_file_formats(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetFileFormats.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetFileFormats(ctx, \u0026snowflake.GetFileFormatsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetFileFormatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getFileFormats\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFileFormats.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the file formats from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFileFormats.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "fileFormats": {
                        "description": "The file formats in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the file formats from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "fileFormats",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFunctions:getFunctions": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getFunctions({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_functions(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetFunctions.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetFunctions(ctx, \u0026snowflake.GetFunctionsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetFunctionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getFunctions\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the functions from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctions.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "functions": {
                        "description": "The functions in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFunctionsFunction:getFunctionsFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the functions from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "functions",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getGrants:getGrants": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\n//#################################\n//## SHOW GRANTS ON ...\n//#################################\n// account\nconst exampleOnAccount = snowflake.getGrants({\n    grantsOn: {\n        account: true,\n    },\n});\n// account object (e.g. database)\nconst exampleOnAccountObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"some_database\",\n        objectType: \"DATABASE\",\n    },\n});\n// database object (e.g. schema)\nconst exampleOnDatabaseObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"\\\"some_database\\\".\\\"some_schema\\\"\",\n        objectType: \"SCHEMA\",\n    },\n});\n// schema object (e.g. table)\nconst exampleOnSchemaObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n        objectType: \"TABLE\",\n    },\n});\n// application\nconst exampleToApplication = snowflake.getGrants({\n    grantsTo: {\n        application: \"some_application\",\n    },\n});\n// application role\nconst exampleToApplicationRole = snowflake.getGrants({\n    grantsTo: {\n        applicationRole: \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n    },\n});\n// account role\nconst exampleToRole = snowflake.getGrants({\n    grantsTo: {\n        accountRole: \"some_role\",\n    },\n});\n// database role\nconst exampleToDatabaseRole = snowflake.getGrants({\n    grantsTo: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n// share\nconst exampleToShare = snowflake.getGrants({\n    grantsTo: {\n        share: {\n            shareName: \"some_share\",\n        },\n    },\n});\n// user\nconst exampleToUser = snowflake.getGrants({\n    grantsTo: {\n        user: \"some_user\",\n    },\n});\n// application role\nconst exampleOfApplicationRole = snowflake.getGrants({\n    grantsOf: {\n        applicationRole: \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n    },\n});\n// database role\nconst exampleOfDatabaseRole = snowflake.getGrants({\n    grantsOf: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n// account role\nconst exampleOfRole = snowflake.getGrants({\n    grantsOf: {\n        accountRole: \"some_role\",\n    },\n});\n// share\nconst exampleOfShare = snowflake.getGrants({\n    grantsOf: {\n        share: \"some_share\",\n    },\n});\n// database\nconst exampleFutureInDatabase = snowflake.getGrants({\n    futureGrantsIn: {\n        database: \"some_database\",\n    },\n});\n// schema\nconst exampleFutureInSchema = snowflake.getGrants({\n    futureGrantsIn: {\n        schema: \"\\\"some_database\\\".\\\"some_schema\\\"\",\n    },\n});\n// account role\nconst exampleFutureToRole = snowflake.getGrants({\n    futureGrantsTo: {\n        accountRole: \"some_role\",\n    },\n});\n// database role\nconst exampleFutureToDatabaseRole = snowflake.getGrants({\n    futureGrantsTo: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\n##################################\n### SHOW GRANTS ON ...\n##################################\n# account\nexample_on_account = snowflake.get_grants(grants_on={\n    \"account\": True,\n})\n# account object (e.g. database)\nexample_on_account_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"some_database\",\n    \"object_type\": \"DATABASE\",\n})\n# database object (e.g. schema)\nexample_on_database_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"\\\"some_database\\\".\\\"some_schema\\\"\",\n    \"object_type\": \"SCHEMA\",\n})\n# schema object (e.g. table)\nexample_on_schema_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n    \"object_type\": \"TABLE\",\n})\n# application\nexample_to_application = snowflake.get_grants(grants_to={\n    \"application\": \"some_application\",\n})\n# application role\nexample_to_application_role = snowflake.get_grants(grants_to={\n    \"application_role\": \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n})\n# account role\nexample_to_role = snowflake.get_grants(grants_to={\n    \"account_role\": \"some_role\",\n})\n# database role\nexample_to_database_role = snowflake.get_grants(grants_to={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n# share\nexample_to_share = snowflake.get_grants(grants_to={\n    \"share\": {\n        \"share_name\": \"some_share\",\n    },\n})\n# user\nexample_to_user = snowflake.get_grants(grants_to={\n    \"user\": \"some_user\",\n})\n# application role\nexample_of_application_role = snowflake.get_grants(grants_of={\n    \"application_role\": \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n})\n# database role\nexample_of_database_role = snowflake.get_grants(grants_of={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n# account role\nexample_of_role = snowflake.get_grants(grants_of={\n    \"account_role\": \"some_role\",\n})\n# share\nexample_of_share = snowflake.get_grants(grants_of={\n    \"share\": \"some_share\",\n})\n# database\nexample_future_in_database = snowflake.get_grants(future_grants_in={\n    \"database\": \"some_database\",\n})\n# schema\nexample_future_in_schema = snowflake.get_grants(future_grants_in={\n    \"schema\": \"\\\"some_database\\\".\\\"some_schema\\\"\",\n})\n# account role\nexample_future_to_role = snowflake.get_grants(future_grants_to={\n    \"account_role\": \"some_role\",\n})\n# database role\nexample_future_to_database_role = snowflake.get_grants(future_grants_to={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //#################################\n    //## SHOW GRANTS ON ...\n    //#################################\n    // account\n    var exampleOnAccount = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            Account = true,\n        },\n    });\n\n    // account object (e.g. database)\n    var exampleOnAccountObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"some_database\",\n            ObjectType = \"DATABASE\",\n        },\n    });\n\n    // database object (e.g. schema)\n    var exampleOnDatabaseObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"\\\"some_database\\\".\\\"some_schema\\\"\",\n            ObjectType = \"SCHEMA\",\n        },\n    });\n\n    // schema object (e.g. table)\n    var exampleOnSchemaObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n            ObjectType = \"TABLE\",\n        },\n    });\n\n    // application\n    var exampleToApplication = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            Application = \"some_application\",\n        },\n    });\n\n    // application role\n    var exampleToApplicationRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            ApplicationRole = \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n        },\n    });\n\n    // account role\n    var exampleToRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // database role\n    var exampleToDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n    // share\n    var exampleToShare = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            Share = new Snowflake.Inputs.GetGrantsGrantsToShareInputArgs\n            {\n                ShareName = \"some_share\",\n            },\n        },\n    });\n\n    // user\n    var exampleToUser = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            User = \"some_user\",\n        },\n    });\n\n    // application role\n    var exampleOfApplicationRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            ApplicationRole = \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n        },\n    });\n\n    // database role\n    var exampleOfDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n    // account role\n    var exampleOfRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // share\n    var exampleOfShare = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            Share = \"some_share\",\n        },\n    });\n\n    // database\n    var exampleFutureInDatabase = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsIn = new Snowflake.Inputs.GetGrantsFutureGrantsInInputArgs\n        {\n            Database = \"some_database\",\n        },\n    });\n\n    // schema\n    var exampleFutureInSchema = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsIn = new Snowflake.Inputs.GetGrantsFutureGrantsInInputArgs\n        {\n            Schema = \"\\\"some_database\\\".\\\"some_schema\\\"\",\n        },\n    });\n\n    // account role\n    var exampleFutureToRole = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsTo = new Snowflake.Inputs.GetGrantsFutureGrantsToInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // database role\n    var exampleFutureToDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsTo = new Snowflake.Inputs.GetGrantsFutureGrantsToInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// #################################\n\t\t// ## SHOW GRANTS ON ...\n\t\t// #################################\n\t\t// account\n\t\t_, err := snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tAccount: pulumi.BoolRef(true),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account object (e.g. database)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"some_database\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"DATABASE\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database object (e.g. schema)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\"\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"SCHEMA\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// schema object (e.g. table)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"TABLE\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tApplication: pulumi.StringRef(\"some_application\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tApplicationRole: pulumi.StringRef(\"\\\"some_application\\\".\\\"some_application_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// share\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tShare: snowflake.GetGrantsGrantsToShare{\n\t\t\t\t\tShareName: \"some_share\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// user\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tUser: pulumi.StringRef(\"some_user\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tApplicationRole: pulumi.StringRef(\"\\\"some_application\\\".\\\"some_application_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// share\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tShare: pulumi.StringRef(\"some_share\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsIn: snowflake.GetGrantsFutureGrantsIn{\n\t\t\t\tDatabase: pulumi.StringRef(\"some_database\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// schema\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsIn: snowflake.GetGrantsFutureGrantsIn{\n\t\t\t\tSchema: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsTo: snowflake.GetGrantsFutureGrantsTo{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsTo: snowflake.GetGrantsFutureGrantsTo{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetGrantsArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //#################################\n        //## SHOW GRANTS ON ...\n        //#################################\n        // account\n        final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .account(true)\n                .build())\n            .build());\n\n        // account object (e.g. database)\n        final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"some_database\")\n                .objectType(\"DATABASE\")\n                .build())\n            .build());\n\n        // database object (e.g. schema)\n        final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"\\\"some_database\\\".\\\"some_schema\\\"\")\n                .objectType(\"SCHEMA\")\n                .build())\n            .build());\n\n        // schema object (e.g. table)\n        final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\")\n                .objectType(\"TABLE\")\n                .build())\n            .build());\n\n        // application\n        final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .application(\"some_application\")\n                .build())\n            .build());\n\n        // application role\n        final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .applicationRole(\"\\\"some_application\\\".\\\"some_application_role\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n        // share\n        final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .share(GetGrantsGrantsToShareArgs.builder()\n                    .shareName(\"some_share\")\n                    .build())\n                .build())\n            .build());\n\n        // user\n        final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .user(\"some_user\")\n                .build())\n            .build());\n\n        // application role\n        final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .applicationRole(\"\\\"some_application\\\".\\\"some_application_role\\\"\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // share\n        final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .share(\"some_share\")\n                .build())\n            .build());\n\n        // database\n        final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()\n                .database(\"some_database\")\n                .build())\n            .build());\n\n        // schema\n        final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()\n                .schema(\"\\\"some_database\\\".\\\"some_schema\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ##################################\n  ### SHOW GRANTS ON ...\n  ##################################\n\n  # account\n  exampleOnAccount:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOn:\n          account: true\n  # account object (e.g. database)\n  exampleOnAccountObject:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOn:\n          objectName: some_database\n          objectType: DATABASE\n  # database object (e.g. schema)\n  exampleOnDatabaseObject:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOn:\n          objectName: '\"some_database\".\"some_schema\"'\n          objectType: SCHEMA\n  # schema object (e.g. table)\n  exampleOnSchemaObject: ##################################\n  ### SHOW GRANTS TO ...\n  ##################################\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOn:\n          objectName: '\"some_database\".\"some_schema\".\"some_table\"'\n          objectType: TABLE\n  # application\n  exampleToApplication:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          application: some_application\n  # application role\n  exampleToApplicationRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          applicationRole: '\"some_application\".\"some_application_role\"'\n  # account role\n  exampleToRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          accountRole: some_role\n  # database role\n  exampleToDatabaseRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n  # share\n  exampleToShare:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          share:\n            shareName: some_share\n  # user\n  exampleToUser: ##################################\n  ### SHOW GRANTS OF ...\n  ##################################\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsTo:\n          user: some_user\n  # application role\n  exampleOfApplicationRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOf:\n          applicationRole: '\"some_application\".\"some_application_role\"'\n  # database role\n  exampleOfDatabaseRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOf:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n  # account role\n  exampleOfRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOf:\n          accountRole: some_role\n  # share\n  exampleOfShare: ##################################\n  ### SHOW FUTURE GRANTS IN ...\n  ##################################\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        grantsOf:\n          share: some_share\n  # database\n  exampleFutureInDatabase:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        futureGrantsIn:\n          database: some_database\n  # schema\n  exampleFutureInSchema: ##################################\n  ### SHOW FUTURE GRANTS TO ...\n  ##################################\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        futureGrantsIn:\n          schema: '\"some_database\".\"some_schema\"'\n  # account role\n  exampleFutureToRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        futureGrantsTo:\n          accountRole: some_role\n  # database role\n  exampleFutureToDatabaseRole:\n    fn::invoke:\n      Function: snowflake:getGrants\n      Arguments:\n        futureGrantsTo:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn",
                        "description": "Lists all privileges on new (i.e. future) objects.\n"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo",
                        "description": "Lists all privileges granted to the object on new (i.e. future) objects.\n"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf",
                        "description": "Lists all objects to which the given object has been granted.\n"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn",
                        "description": "Lists all privileges that have been granted on an object or on an account.\n"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo",
                        "description": "Lists all privileges granted to the object.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn",
                        "description": "Lists all privileges on new (i.e. future) objects.\n"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo",
                        "description": "Lists all privileges granted to the object on new (i.e. future) objects.\n"
                    },
                    "grants": {
                        "description": "The list of grants\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getGrantsGrant:getGrantsGrant"
                        },
                        "type": "array"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf",
                        "description": "Lists all objects to which the given object has been granted.\n"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn",
                        "description": "Lists all privileges that have been granted on an object or on an account.\n"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo",
                        "description": "Lists all privileges granted to the object.\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "grants",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaskingPolicies:getMaskingPolicies": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMaskingPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn",
                        "description": "IN clause to filter the list of masking policies\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC MASKING POLICY for each masking policy returned by SHOW MASKING POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMaskingPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn",
                        "description": "IN clause to filter the list of masking policies\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "maskingPolicies": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC MASKING POLICY for each masking policy returned by SHOW MASKING POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "maskingPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaterializedViews:getMaterializedViews": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getMaterializedViews({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_materialized_views(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetMaterializedViews.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetMaterializedViews(ctx, \u0026snowflake.GetMaterializedViewsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getMaterializedViews\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the views from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "materializedViews": {
                        "description": "The views in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the views from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "materializedViews",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getNetworkPolicies:getNetworkPolicies": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkPolicies.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC NETWORK POLICY for each network policy returned by SHOW NETWORK POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "networkPolicies": {
                        "description": "Holds the aggregated output of all network policies details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC NETWORK POLICY for each network policy returned by SHOW NETWORK POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "networkPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getParameters:getParameters": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst d = new snowflake.Database(\"d\", {name: \"TEST_DB\"});\n// read all object parameters in database TEST_DB\nconst p = snowflake.getParametersOutput({\n    parameterType: \"OBJECT\",\n    objectType: \"DATABASE\",\n    objectName: d.name,\n});\n// read all account parameters with the pattern '%TIMESTAMP%'\nconst p2 = snowflake.getParameters({\n    parameterType: \"ACCOUNT\",\n    pattern: \"%TIMESTAMP%\",\n});\n// read the exact session parameter ROWS_PER_RESULTSET\nconst p3 = snowflake.getParameters({\n    parameterType: \"SESSION\",\n    pattern: \"ROWS_PER_RESULTSET\",\n    user: \"TEST_USER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nd = snowflake.Database(\"d\", name=\"TEST_DB\")\n# read all object parameters in database TEST_DB\np = snowflake.get_parameters_output(parameter_type=\"OBJECT\",\n    object_type=\"DATABASE\",\n    object_name=d.name)\n# read all account parameters with the pattern '%TIMESTAMP%'\np2 = snowflake.get_parameters(parameter_type=\"ACCOUNT\",\n    pattern=\"%TIMESTAMP%\")\n# read the exact session parameter ROWS_PER_RESULTSET\np3 = snowflake.get_parameters(parameter_type=\"SESSION\",\n    pattern=\"ROWS_PER_RESULTSET\",\n    user=\"TEST_USER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var d = new Snowflake.Database(\"d\", new()\n    {\n        Name = \"TEST_DB\",\n    });\n\n    // read all object parameters in database TEST_DB\n    var p = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"OBJECT\",\n        ObjectType = \"DATABASE\",\n        ObjectName = d.Name,\n    });\n\n    // read all account parameters with the pattern '%TIMESTAMP%'\n    var p2 = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"ACCOUNT\",\n        Pattern = \"%TIMESTAMP%\",\n    });\n\n    // read the exact session parameter ROWS_PER_RESULTSET\n    var p3 = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"SESSION\",\n        Pattern = \"ROWS_PER_RESULTSET\",\n        User = \"TEST_USER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\td, err := snowflake.NewDatabase(ctx, \"d\", \u0026snowflake.DatabaseArgs{\n\t\t\tName: pulumi.String(\"TEST_DB\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// read all object parameters in database TEST_DB\n\t\t_ = snowflake.GetParametersOutput(ctx, snowflake.GetParametersOutputArgs{\n\t\t\tParameterType: pulumi.String(\"OBJECT\"),\n\t\t\tObjectType:    pulumi.String(\"DATABASE\"),\n\t\t\tObjectName:    d.Name,\n\t\t}, nil)\n\t\t// read all account parameters with the pattern '%TIMESTAMP%'\n\t\t_, err = snowflake.GetParameters(ctx, \u0026snowflake.GetParametersArgs{\n\t\t\tParameterType: pulumi.StringRef(\"ACCOUNT\"),\n\t\t\tPattern:       pulumi.StringRef(\"%TIMESTAMP%\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// read the exact session parameter ROWS_PER_RESULTSET\n\t\t_, err = snowflake.GetParameters(ctx, \u0026snowflake.GetParametersArgs{\n\t\t\tParameterType: pulumi.StringRef(\"SESSION\"),\n\t\t\tPattern:       pulumi.StringRef(\"ROWS_PER_RESULTSET\"),\n\t\t\tUser:          pulumi.StringRef(\"TEST_USER\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.Database;\nimport com.pulumi.snowflake.DatabaseArgs;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetParametersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var d = new Database(\"d\", DatabaseArgs.builder()\n            .name(\"TEST_DB\")\n            .build());\n\n        // read all object parameters in database TEST_DB\n        final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"OBJECT\")\n            .objectType(\"DATABASE\")\n            .objectName(d.name())\n            .build());\n\n        // read all account parameters with the pattern '%TIMESTAMP%'\n        final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"ACCOUNT\")\n            .pattern(\"%TIMESTAMP%\")\n            .build());\n\n        // read the exact session parameter ROWS_PER_RESULTSET\n        final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"SESSION\")\n            .pattern(\"ROWS_PER_RESULTSET\")\n            .user(\"TEST_USER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  d:\n    type: snowflake:Database\n    properties:\n      name: TEST_DB\nvariables:\n  # read all object parameters in database TEST_DB\n  p:\n    fn::invoke:\n      Function: snowflake:getParameters\n      Arguments:\n        parameterType: OBJECT\n        objectType: DATABASE\n        objectName: ${d.name}\n  # read all account parameters with the pattern '%TIMESTAMP%'\n  p2:\n    fn::invoke:\n      Function: snowflake:getParameters\n      Arguments:\n        parameterType: ACCOUNT\n        pattern: '%TIMESTAMP%'\n  # read the exact session parameter ROWS_PER_RESULTSET\n  p3:\n    fn::invoke:\n      Function: snowflake:getParameters\n      Arguments:\n        parameterType: SESSION\n        pattern: ROWS_PER_RESULTSET\n        user: TEST_USER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getParameters.\n",
                "properties": {
                    "objectName": {
                        "type": "string",
                        "description": "If parameter*type is set to \"OBJECT\" then object*name is the name of the object to display object parameters for.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "If parameter*type is set to \"OBJECT\" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE\n"
                    },
                    "parameterType": {
                        "type": "string",
                        "description": "The type of parameter to filter by. Valid values are: \"ACCOUNT\", \"SESSION\", \"OBJECT\".\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "If parameter_type is set to \"SESSION\" then user is the name of the user to display session parameters for.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getParameters.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "objectName": {
                        "description": "If parameter*type is set to \"OBJECT\" then object*name is the name of the object to display object parameters for.\n",
                        "type": "string"
                    },
                    "objectType": {
                        "description": "If parameter*type is set to \"OBJECT\" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE\n",
                        "type": "string"
                    },
                    "parameterType": {
                        "description": "The type of parameter to filter by. Valid values are: \"ACCOUNT\", \"SESSION\", \"OBJECT\".\n",
                        "type": "string"
                    },
                    "parameters": {
                        "description": "The pipes in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getParametersParameter:getParametersParameter"
                        },
                        "type": "array"
                    },
                    "pattern": {
                        "description": "Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)\n",
                        "type": "string"
                    },
                    "user": {
                        "description": "If parameter_type is set to \"SESSION\" then user is the name of the user to display session parameters for.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "parameters",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getPipes:getPipes": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getPipes({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_pipes(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetPipes.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetPipes(ctx, \u0026snowflake.GetPipesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetPipesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getPipes\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipes.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the pipes from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipes.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pipes": {
                        "description": "The pipes in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getPipesPipe:getPipesPipe"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the pipes from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "pipes",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getProcedures:getProcedures": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getProcedures({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_procedures(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetProcedures.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetProcedures(ctx, \u0026snowflake.GetProceduresArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetProceduresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getProcedures\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProcedures.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the procedures from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProcedures.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "procedures": {
                        "description": "The procedures in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getProceduresProcedure:getProceduresProcedure"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the procedures from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "procedures",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getResourceMonitors:getResourceMonitors": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceMonitors.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceMonitors.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "resourceMonitors": {
                        "description": "Holds the aggregated output of all resource monitor details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resourceMonitors",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getRole:getRole": {
            "description": "\u003e **Deprecation** This resource is deprecated and will be removed in a future major version release. Please use snowflake.getRoles instead. \u003cdeprecation\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst this = snowflake.getRole({\n    name: \"role1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_role(name=\"role1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetRole.Invoke(new()\n    {\n        Name = \"role1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.LookupRole(ctx, \u0026snowflake.LookupRoleArgs{\n\t\t\tName: \"role1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getRole(GetRoleArgs.builder()\n            .name(\"role1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: snowflake:getRole\n      Arguments:\n        name: role1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The role for which to return metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "comment": {
                        "description": "The comment on the role\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The role for which to return metadata.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "comment",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getRoles:getRoles": {
            "description": "!\u003e **V1 release candidate** This datasource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "inClass": {
                        "type": "string",
                        "description": "Filters the SHOW GRANTS output by class name.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inClass": {
                        "description": "Filters the SHOW GRANTS output by class name.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "roles": {
                        "description": "Holds the aggregated output of all role details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getRolesRole:getRolesRole"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "roles",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getRowAccessPolicies:getRowAccessPolicies": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRowAccessPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn",
                        "description": "IN clause to filter the list of row access policies\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRowAccessPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn",
                        "description": "IN clause to filter the list of row access policies\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "rowAccessPolicies": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "rowAccessPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSchemas:getSchemas": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemas.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemas.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "schemas": {
                        "description": "Holds the aggregated output of all SCHEMA details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSchemasSchema:getSchemasSchema"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "schemas",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSecurityIntegrations:getSecurityIntegrations": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered security integrations. Filtering is aligned with the current possibilities for [SHOW SECURITY INTEGRATIONS](https://docs.snowflake.com/en/sql-reference/sql/show-integrations) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `security_integrations`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityIntegrations.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC SECURITY INTEGRATION for each security integration returned by SHOW SECURITY INTEGRATIONS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "securityIntegrations": {
                        "description": "Holds the aggregated output of all security integrations details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC SECURITY INTEGRATION for each security integration returned by SHOW SECURITY INTEGRATIONS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "securityIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSequences:getSequences": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getSequences({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_sequences(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetSequences.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSequences(ctx, \u0026snowflake.GetSequencesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSequencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getSequences\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the sequences from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSequences.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the sequences from.\n",
                        "type": "string"
                    },
                    "sequences": {
                        "description": "The sequences in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSequencesSequence:getSequencesSequence"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "sequences",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getShares:getShares": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst this = snowflake.getShares({});\nconst ad = snowflake.getShares({\n    pattern: \"usage\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_shares()\nad = snowflake.get_shares(pattern=\"usage\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetShares.Invoke();\n\n    var ad = Snowflake.GetShares.Invoke(new()\n    {\n        Pattern = \"usage\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetShares(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.GetShares(ctx, \u0026snowflake.GetSharesArgs{\n\t\t\tPattern: pulumi.StringRef(\"usage\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSharesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getShares();\n\n        final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()\n            .pattern(\"usage\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: snowflake:getShares\n      Arguments: {}\n  ad:\n    fn::invoke:\n      Function: snowflake:getShares\n      Arguments:\n        pattern: usage\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getShares.\n",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Filters the command output by object name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getShares.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "Filters the command output by object name.\n",
                        "type": "string"
                    },
                    "shares": {
                        "description": "List of all the shares available in the system.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSharesShare:getSharesShare"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "shares",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStages:getStages": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getStages({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_stages(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetStages.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetStages(ctx, \u0026snowflake.GetStagesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetStagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getStages\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStages.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the stages from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStages.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the stages from.\n",
                        "type": "string"
                    },
                    "stages": {
                        "description": "The stages in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStagesStage:getStagesStage"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "stages",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStorageIntegrations:getStorageIntegrations": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getStorageIntegrations({});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_storage_integrations()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetStorageIntegrations.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetStorageIntegrations(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getStorageIntegrations();\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getStorageIntegrations\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getStorageIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "storageIntegrations": {
                        "description": "The storage integrations in the database\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "storageIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreamlits:getStreamlits": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStreamlits.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStreamlits.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "streamlits": {
                        "description": "Holds the aggregated output of all streamlits details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "streamlits",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreams:getStreams": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getStreams({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_streams(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetStreams.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetStreams(ctx, \u0026snowflake.GetStreamsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetStreamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getStreams(GetStreamsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getStreams\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStreams.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the streams from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the streams from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStreams.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the streams from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the streams from.\n",
                        "type": "string"
                    },
                    "streams": {
                        "description": "The streams in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamsStream:getStreamsStream"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "streams",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst scim = snowflake.getSystemGenerateScimAccessToken({\n    integrationName: \"AAD_PROVISIONING\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nscim = snowflake.get_system_generate_scim_access_token(integration_name=\"AAD_PROVISIONING\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var scim = Snowflake.GetSystemGenerateScimAccessToken.Invoke(new()\n    {\n        IntegrationName = \"AAD_PROVISIONING\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSystemGenerateScimAccessToken(ctx, \u0026snowflake.GetSystemGenerateScimAccessTokenArgs{\n\t\t\tIntegrationName: \"AAD_PROVISIONING\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()\n            .integrationName(\"AAD_PROVISIONING\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  scim:\n    fn::invoke:\n      Function: snowflake:getSystemGenerateScimAccessToken\n      Arguments:\n        integrationName: AAD_PROVISIONING\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "integrationName": {
                        "type": "string",
                        "description": "SCIM Integration Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "accessToken": {
                        "description": "SCIM Access Token\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "integrationName": {
                        "description": "SCIM Integration Name\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessToken",
                    "integrationName",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst snowflakePolicy = snowflake.getSystemGetAwsSnsIamPolicy({\n    awsSnsTopicArn: \"\u003caws_sns_topic_arn\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nsnowflake_policy = snowflake.get_system_get_aws_sns_iam_policy(aws_sns_topic_arn=\"\u003caws_sns_topic_arn\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snowflakePolicy = Snowflake.GetSystemGetAwsSnsIamPolicy.Invoke(new()\n    {\n        AwsSnsTopicArn = \"\u003caws_sns_topic_arn\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSystemGetAwsSnsIamPolicy(ctx, \u0026snowflake.GetSystemGetAwsSnsIamPolicyArgs{\n\t\t\tAwsSnsTopicArn: \"\u003caws_sns_topic_arn\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()\n            .awsSnsTopicArn(\"\u003caws_sns_topic_arn\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  snowflakePolicy:\n    fn::invoke:\n      Function: snowflake:getSystemGetAwsSnsIamPolicy\n      Arguments:\n        awsSnsTopicArn: \u003caws_sns_topic_arn\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsSnsTopicArn"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n",
                        "type": "string"
                    },
                    "awsSnsTopicPolicyJson": {
                        "description": "IAM policy for Snowflake’s SQS queue to subscribe to this topic\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "awsSnsTopicArn",
                    "awsSnsTopicPolicyJson",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst snowflakePrivateLink = snowflake.getSystemGetPrivateLinkConfig({});\nconst snowflakePrivateLinkSecurityGroup = new aws.index.SecurityGroup(\"snowflake_private_link\", {\n    vpcId: vpcId,\n    ingress: [\n        {\n            fromPort: 80,\n            toPort: 80,\n            cidrBlocks: vpcCidr,\n            protocol: \"tcp\",\n        },\n        {\n            fromPort: 443,\n            toPort: 443,\n            cidrBlocks: vpcCidr,\n            protocol: \"tcp\",\n        },\n    ],\n});\nconst snowflakePrivateLinkVpcEndpoint = new aws.index.VpcEndpoint(\"snowflake_private_link\", {\n    vpcId: vpcId,\n    serviceName: snowflakePrivateLink.awsVpceId,\n    vpcEndpointType: \"Interface\",\n    securityGroupIds: [snowflakePrivateLinkSecurityGroup.id],\n    subnetIds: subnetIds,\n    privateDnsEnabled: false,\n});\nconst snowflakePrivateLinkRoute53Zone = new aws.index.Route53Zone(\"snowflake_private_link\", {\n    name: \"privatelink.snowflakecomputing.com\",\n    vpc: [{\n        vpcId: vpcId,\n    }],\n});\nconst snowflakePrivateLinkUrl = new aws.index.Route53Record(\"snowflake_private_link_url\", {\n    zoneId: snowflakePrivateLinkRoute53Zone.zoneId,\n    name: snowflakePrivateLink.accountUrl,\n    type: \"CNAME\",\n    ttl: \"300\",\n    records: [snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name],\n});\nconst snowflakePrivateLinkOcspUrl = new aws.index.Route53Record(\"snowflake_private_link_ocsp_url\", {\n    zoneId: snowflakePrivateLinkRoute53Zone.zoneId,\n    name: snowflakePrivateLink.ocspUrl,\n    type: \"CNAME\",\n    ttl: \"300\",\n    records: [snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_snowflake as snowflake\n\nsnowflake_private_link = snowflake.get_system_get_private_link_config()\nsnowflake_private_link_security_group = aws.index.SecurityGroup(\"snowflake_private_link\",\n    vpc_id=vpc_id,\n    ingress=[\n        {\n            fromPort: 80,\n            toPort: 80,\n            cidrBlocks: vpc_cidr,\n            protocol: tcp,\n        },\n        {\n            fromPort: 443,\n            toPort: 443,\n            cidrBlocks: vpc_cidr,\n            protocol: tcp,\n        },\n    ])\nsnowflake_private_link_vpc_endpoint = aws.index.VpcEndpoint(\"snowflake_private_link\",\n    vpc_id=vpc_id,\n    service_name=snowflake_private_link.aws_vpce_id,\n    vpc_endpoint_type=Interface,\n    security_group_ids=[snowflake_private_link_security_group.id],\n    subnet_ids=subnet_ids,\n    private_dns_enabled=False)\nsnowflake_private_link_route53_zone = aws.index.Route53Zone(\"snowflake_private_link\",\n    name=privatelink.snowflakecomputing.com,\n    vpc=[{\n        vpcId: vpc_id,\n    }])\nsnowflake_private_link_url = aws.index.Route53Record(\"snowflake_private_link_url\",\n    zone_id=snowflake_private_link_route53_zone.zone_id,\n    name=snowflake_private_link.account_url,\n    type=CNAME,\n    ttl=300,\n    records=[snowflake_private_link_vpc_endpoint.dns_entry[0].dns_name])\nsnowflake_private_link_ocsp_url = aws.index.Route53Record(\"snowflake_private_link_ocsp_url\",\n    zone_id=snowflake_private_link_route53_zone.zone_id,\n    name=snowflake_private_link.ocsp_url,\n    type=CNAME,\n    ttl=300,\n    records=[snowflake_private_link_vpc_endpoint.dns_entry[0].dns_name])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snowflakePrivateLink = Snowflake.GetSystemGetPrivateLinkConfig.Invoke();\n\n    var snowflakePrivateLinkSecurityGroup = new Aws.Index.SecurityGroup(\"snowflake_private_link\", new()\n    {\n        VpcId = vpcId,\n        Ingress = new[]\n        {\n            \n            {\n                { \"fromPort\", 80 },\n                { \"toPort\", 80 },\n                { \"cidrBlocks\", vpcCidr },\n                { \"protocol\", \"tcp\" },\n            },\n            \n            {\n                { \"fromPort\", 443 },\n                { \"toPort\", 443 },\n                { \"cidrBlocks\", vpcCidr },\n                { \"protocol\", \"tcp\" },\n            },\n        },\n    });\n\n    var snowflakePrivateLinkVpcEndpoint = new Aws.Index.VpcEndpoint(\"snowflake_private_link\", new()\n    {\n        VpcId = vpcId,\n        ServiceName = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.AwsVpceId),\n        VpcEndpointType = \"Interface\",\n        SecurityGroupIds = new[]\n        {\n            snowflakePrivateLinkSecurityGroup.Id,\n        },\n        SubnetIds = subnetIds,\n        PrivateDnsEnabled = false,\n    });\n\n    var snowflakePrivateLinkRoute53Zone = new Aws.Index.Route53Zone(\"snowflake_private_link\", new()\n    {\n        Name = \"privatelink.snowflakecomputing.com\",\n        Vpc = new[]\n        {\n            \n            {\n                { \"vpcId\", vpcId },\n            },\n        },\n    });\n\n    var snowflakePrivateLinkUrl = new Aws.Index.Route53Record(\"snowflake_private_link_url\", new()\n    {\n        ZoneId = snowflakePrivateLinkRoute53Zone.ZoneId,\n        Name = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.AccountUrl),\n        Type = \"CNAME\",\n        Ttl = \"300\",\n        Records = new[]\n        {\n            snowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n        },\n    });\n\n    var snowflakePrivateLinkOcspUrl = new Aws.Index.Route53Record(\"snowflake_private_link_ocsp_url\", new()\n    {\n        ZoneId = snowflakePrivateLinkRoute53Zone.ZoneId,\n        Name = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.OcspUrl),\n        Type = \"CNAME\",\n        Ttl = \"300\",\n        Records = new[]\n        {\n            snowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws\"\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsnowflakePrivateLink, err := snowflake.GetSystemGetPrivateLinkConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkSecurityGroup, err := aws.NewSecurityGroup(ctx, \"snowflake_private_link\", \u0026aws.SecurityGroupArgs{\n\t\t\tVpcId: vpcId,\n\t\t\tIngress: []interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"fromPort\":   80,\n\t\t\t\t\t\"toPort\":     80,\n\t\t\t\t\t\"cidrBlocks\": vpcCidr,\n\t\t\t\t\t\"protocol\":   \"tcp\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"fromPort\":   443,\n\t\t\t\t\t\"toPort\":     443,\n\t\t\t\t\t\"cidrBlocks\": vpcCidr,\n\t\t\t\t\t\"protocol\":   \"tcp\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkVpcEndpoint, err := aws.NewVpcEndpoint(ctx, \"snowflake_private_link\", \u0026aws.VpcEndpointArgs{\n\t\t\tVpcId:           vpcId,\n\t\t\tServiceName:     snowflakePrivateLink.AwsVpceId,\n\t\t\tVpcEndpointType: \"Interface\",\n\t\t\tSecurityGroupIds: []interface{}{\n\t\t\t\tsnowflakePrivateLinkSecurityGroup.Id,\n\t\t\t},\n\t\t\tSubnetIds:         subnetIds,\n\t\t\tPrivateDnsEnabled: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkRoute53Zone, err := aws.NewRoute53Zone(ctx, \"snowflake_private_link\", \u0026aws.Route53ZoneArgs{\n\t\t\tName: \"privatelink.snowflakecomputing.com\",\n\t\t\tVpc: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"vpcId\": vpcId,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewRoute53Record(ctx, \"snowflake_private_link_url\", \u0026aws.Route53RecordArgs{\n\t\t\tZoneId: snowflakePrivateLinkRoute53Zone.ZoneId,\n\t\t\tName:   snowflakePrivateLink.AccountUrl,\n\t\t\tType:   \"CNAME\",\n\t\t\tTtl:    \"300\",\n\t\t\tRecords: []interface{}{\n\t\t\t\tsnowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewRoute53Record(ctx, \"snowflake_private_link_ocsp_url\", \u0026aws.Route53RecordArgs{\n\t\t\tZoneId: snowflakePrivateLinkRoute53Zone.ZoneId,\n\t\t\tName:   snowflakePrivateLink.OcspUrl,\n\t\t\tType:   \"CNAME\",\n\t\t\tTtl:    \"300\",\n\t\t\tRecords: []interface{}{\n\t\t\t\tsnowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.aws.securityGroup;\nimport com.pulumi.aws.SecurityGroupArgs;\nimport com.pulumi.aws.vpcEndpoint;\nimport com.pulumi.aws.VpcEndpointArgs;\nimport com.pulumi.aws.route53Zone;\nimport com.pulumi.aws.Route53ZoneArgs;\nimport com.pulumi.aws.route53Record;\nimport com.pulumi.aws.Route53RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig();\n\n        var snowflakePrivateLinkSecurityGroup = new SecurityGroup(\"snowflakePrivateLinkSecurityGroup\", SecurityGroupArgs.builder()\n            .vpcId(vpcId)\n            .ingress(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint(\"snowflakePrivateLinkVpcEndpoint\", VpcEndpointArgs.builder()\n            .vpcId(vpcId)\n            .serviceName(snowflakePrivateLink.applyValue(getSystemGetPrivateLinkConfigResult -\u003e getSystemGetPrivateLinkConfigResult.awsVpceId()))\n            .vpcEndpointType(\"Interface\")\n            .securityGroupIds(snowflakePrivateLinkSecurityGroup.id())\n            .subnetIds(subnetIds)\n            .privateDnsEnabled(false)\n            .build());\n\n        var snowflakePrivateLinkRoute53Zone = new Route53Zone(\"snowflakePrivateLinkRoute53Zone\", Route53ZoneArgs.builder()\n            .name(\"privatelink.snowflakecomputing.com\")\n            .vpc(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var snowflakePrivateLinkUrl = new Route53Record(\"snowflakePrivateLinkUrl\", Route53RecordArgs.builder()\n            .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())\n            .name(snowflakePrivateLink.applyValue(getSystemGetPrivateLinkConfigResult -\u003e getSystemGetPrivateLinkConfigResult.accountUrl()))\n            .type(\"CNAME\")\n            .ttl(\"300\")\n            .records(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name())\n            .build());\n\n        var snowflakePrivateLinkOcspUrl = new Route53Record(\"snowflakePrivateLinkOcspUrl\", Route53RecordArgs.builder()\n            .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())\n            .name(snowflakePrivateLink.applyValue(getSystemGetPrivateLinkConfigResult -\u003e getSystemGetPrivateLinkConfigResult.ocspUrl()))\n            .type(\"CNAME\")\n            .ttl(\"300\")\n            .records(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  snowflakePrivateLinkSecurityGroup:\n    type: aws:securityGroup\n    name: snowflake_private_link\n    properties:\n      vpcId: ${vpcId}\n      ingress:\n        - fromPort: 80\n          toPort: 80\n          cidrBlocks: ${vpcCidr}\n          protocol: tcp\n        - fromPort: 443\n          toPort: 443\n          cidrBlocks: ${vpcCidr}\n          protocol: tcp\n  snowflakePrivateLinkVpcEndpoint:\n    type: aws:vpcEndpoint\n    name: snowflake_private_link\n    properties:\n      vpcId: ${vpcId}\n      serviceName: ${snowflakePrivateLink.awsVpceId}\n      vpcEndpointType: Interface\n      securityGroupIds:\n        - ${snowflakePrivateLinkSecurityGroup.id}\n      subnetIds: ${subnetIds}\n      privateDnsEnabled: false\n  snowflakePrivateLinkRoute53Zone:\n    type: aws:route53Zone\n    name: snowflake_private_link\n    properties:\n      name: privatelink.snowflakecomputing.com\n      vpc:\n        - vpcId: ${vpcId}\n  snowflakePrivateLinkUrl:\n    type: aws:route53Record\n    name: snowflake_private_link_url\n    properties:\n      zoneId: ${snowflakePrivateLinkRoute53Zone.zoneId}\n      name: ${snowflakePrivateLink.accountUrl}\n      type: CNAME\n      ttl: '300'\n      records:\n        - ${snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name}\n  snowflakePrivateLinkOcspUrl:\n    type: aws:route53Record\n    name: snowflake_private_link_ocsp_url\n    properties:\n      zoneId: ${snowflakePrivateLinkRoute53Zone.zoneId}\n      name: ${snowflakePrivateLink.ocspUrl}\n      type: CNAME\n      ttl: '300'\n      records:\n        - ${snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name}\nvariables:\n  snowflakePrivateLink:\n    fn::invoke:\n      Function: snowflake:getSystemGetPrivateLinkConfig\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getSystemGetPrivateLinkConfig.\n",
                "properties": {
                    "accountName": {
                        "description": "The name of your Snowflake account.\n",
                        "type": "string"
                    },
                    "accountUrl": {
                        "description": "The URL used to connect to Snowflake through AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "awsVpceId": {
                        "description": "The AWS VPCE ID for your account.\n",
                        "type": "string"
                    },
                    "azurePlsId": {
                        "description": "The Azure Private Link Service ID for your account.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "internalStage": {
                        "description": "The endpoint to connect to your Snowflake internal stage using AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "ocspUrl": {
                        "description": "The OCSP URL corresponding to your Snowflake account that uses AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "regionlessAccountUrl": {
                        "description": "The regionless URL to connect to your Snowflake account using AWS PrivateLink, Azure Private Link, or Google Cloud Private Service Connect.\n",
                        "type": "string"
                    },
                    "regionlessSnowsightUrl": {
                        "description": "The URL for your organization to access Snowsight using Private Connectivity to the Snowflake Service.\n",
                        "type": "string"
                    },
                    "snowsightUrl": {
                        "description": "The URL containing the cloud region to access Snowsight and the Snowflake Marketplace using Private Connectivity to the Snowflake Service.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountName",
                    "accountUrl",
                    "awsVpceId",
                    "azurePlsId",
                    "internalStage",
                    "ocspUrl",
                    "regionlessAccountUrl",
                    "regionlessSnowsightUrl",
                    "snowsightUrl",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo": {
            "outputs": {
                "description": "A collection of values returned by getSystemGetSnowflakePlatformInfo.\n",
                "properties": {
                    "awsVpcIds": {
                        "description": "Snowflake AWS Virtual Private Cloud IDs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "azureVnetSubnetIds": {
                        "description": "Snowflake Azure Virtual Network Subnet IDs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "awsVpcIds",
                    "azureVnetSubnetIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTables:getTables": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getTables({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_tables(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetTables.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetTables(ctx, \u0026snowflake.GetTablesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetTablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getTables(GetTablesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getTables\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTables.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the tables from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTables.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the tables from.\n",
                        "type": "string"
                    },
                    "tables": {
                        "description": "The tables in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getTablesTable:getTablesTable"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "tables",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTasks:getTasks": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getTasks({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_tasks(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetTasks.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetTasks(ctx, \u0026snowflake.GetTasksArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetTasksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getTasks(GetTasksArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: snowflake:getTasks\n      Arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTasks.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the tasks from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTasks.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the tasks from.\n",
                        "type": "string"
                    },
                    "tasks": {
                        "description": "The tasks in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getTasksTask:getTasksTask"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "tasks",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getUsers:getUsers": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered users. Filtering is aligned with the current possibilities for [SHOW USERS](https://docs.snowflake.com/en/sql-reference/sql/show-users) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection. Important note is that when querying users you don't have permissions to, the querying options are limited. You won't get almost any field in `show_output` (only empty or default values), the DESCRIBE command cannot be called, so you have to set `with_describe = false`. Only `parameters` output is not affected by the lack of privileges.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC USER for each user returned by SHOW USERS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "Runs SHOW PARAMETERS FOR USER for each user returned by SHOW USERS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "users": {
                        "description": "Holds the aggregated output of all user details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC USER for each user returned by SHOW USERS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "Runs SHOW PARAMETERS FOR USER for each user returned by SHOW USERS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getViews:getViews": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getViews.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn",
                        "description": "IN clause to filter the list of views\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC VIEW for each view returned by SHOW VIEWS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getViews.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn",
                        "description": "IN clause to filter the list of views\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "views": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getViewsView:getViewsView"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC VIEW for each view returned by SHOW VIEWS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "views",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getWarehouses:getWarehouses": {
            "description": "!\u003e **V1 release candidate** This data source was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the data source if needed. Any errors reported will be resolved with a higher priority. We encourage checking this data source out before the V1 release. Please follow the migration guide to use it.\n\nDatasource used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWarehouses.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "Runs DESC WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "Runs SHOW PARAMETERS FOR WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWarehouses.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "warehouses": {
                        "description": "Holds the aggregated output of all warehouse details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "Runs DESC WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "Runs SHOW PARAMETERS FOR WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "warehouses",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}