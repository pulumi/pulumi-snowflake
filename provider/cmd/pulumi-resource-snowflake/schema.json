{
    "name": "snowflake",
    "description": "A Pulumi package for creating and managing snowflake cloud resources.",
    "keywords": [
        "pulumi",
        "snowflake"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`snowflake` Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake).",
    "repository": "https://github.com/pulumi/pulumi-snowflake",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing snowflake cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.\n"
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |\n`TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.\n"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the\n`SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.\n"
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |\n`warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_HOST` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment\nvariable.\n"
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the\n`SNOWFLAKE_MAX_RETRY_COUNT` environment variable.\n"
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more\nin Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the\n`SNOWFLAKE_OKTA_URL` environment variable.\n"
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).\nThis field can not be set with environmental variables.\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the\n`SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced\nfrom the `SNOWFLAKE_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the\n`SNOWFLAKE_PROTOCOL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as\nthe permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting\nthe proper privileges - see the section below. Can also be sourced from the\n`SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.\n"
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from\nthe `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:config/tokenAccessor:tokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new\nformat. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment\nvariable.\n"
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.\n"
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        }
    },
    "types": {
        "snowflake:config/tokenAccessor:tokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedToUsers",
                        "comment",
                        "createdOn",
                        "grantedRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner"
                    ]
                }
            }
        },
        "snowflake:index/AccountShowOutput:AccountShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountLocatorUrl": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "accountOldUrlLastUsed": {
                    "type": "string"
                },
                "accountOldUrlSavedOn": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "consumptionBillingEntityName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "isEventsAccount": {
                    "type": "boolean"
                },
                "isOrgAdmin": {
                    "type": "boolean"
                },
                "isOrganizationAccount": {
                    "type": "boolean"
                },
                "managedAccounts": {
                    "type": "integer"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string"
                },
                "movedOn": {
                    "type": "string"
                },
                "movedToOrganization": {
                    "type": "string"
                },
                "oldAccountUrl": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationOldUrl": {
                    "type": "string"
                },
                "organizationOldUrlLastUsed": {
                    "type": "string"
                },
                "organizationOldUrlSavedOn": {
                    "type": "string"
                },
                "organizationUrlExpirationOn": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "restoredOn": {
                    "type": "string"
                },
                "scheduledDeletionTime": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountLocatorUrl",
                        "accountName",
                        "accountOldUrlLastUsed",
                        "accountOldUrlSavedOn",
                        "accountUrl",
                        "comment",
                        "consumptionBillingEntityName",
                        "createdOn",
                        "droppedOn",
                        "edition",
                        "isEventsAccount",
                        "isOrgAdmin",
                        "isOrganizationAccount",
                        "managedAccounts",
                        "marketplaceConsumerBillingEntityName",
                        "marketplaceProviderBillingEntityName",
                        "movedOn",
                        "movedToOrganization",
                        "oldAccountUrl",
                        "organizationName",
                        "organizationOldUrl",
                        "organizationOldUrlLastUsed",
                        "organizationOldUrlSavedOn",
                        "organizationUrlExpirationOn",
                        "regionGroup",
                        "restoredOn",
                        "scheduledDeletionTime",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/AlertAlertSchedule:AlertAlertSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for alert refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput": {
            "properties": {
                "authenticationMethods": {
                    "type": "string"
                },
                "clientTypes": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "mfaAuthenticationMethods": {
                    "type": "string"
                },
                "mfaEnrollment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "securityIntegrations": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationMethods",
                        "clientTypes",
                        "comment",
                        "mfaAuthenticationMethods",
                        "mfaEnrollment",
                        "name",
                        "owner",
                        "securityIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/DatabaseReplication:DatabaseReplication": {
            "properties": {
                "enableToAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount"
                    },
                    "description": "Entry to enable replication and optionally failover for a given account identifier.\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.\n"
                }
            },
            "type": "object",
            "required": [
                "enableToAccounts"
            ]
        },
        "snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount": {
            "properties": {
                "accountIdentifier": {
                    "type": "string",
                    "description": "Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "withFailover": {
                    "type": "boolean",
                    "description": "Specifies if failover should be enabled for the specified account identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accountIdentifier"
            ]
        },
        "snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "grantedDatabaseRoles",
                        "grantedToDatabaseRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner",
                        "ownerRoleType"
                    ]
                }
            }
        },
        "snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag": {
            "properties": {
                "downstream": {
                    "type": "boolean",
                    "description": "Specifies whether the target lag time is downstream.\n"
                },
                "maximumDuration": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the dynamic table.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ExternalFunctionArg:ExternalFunctionArg": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Argument name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Argument type, e.g. VARCHAR\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Header value\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "externalOauthAllowedRolesLists",
                        "externalOauthAnyRoleModes",
                        "externalOauthAudienceLists",
                        "externalOauthBlockedRolesLists",
                        "externalOauthIssuers",
                        "externalOauthJwsKeysUrls",
                        "externalOauthRsaPublicKey2s",
                        "externalOauthRsaPublicKeys",
                        "externalOauthScopeDelimiters",
                        "externalOauthSnowflakeUserMappingAttributes",
                        "externalOauthTokenUserMappingClaims"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter": {
            "properties": {
                "externalOauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalOauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ExternalTableColumn:ExternalTableColumn": {
            "properties": {
                "as": {
                    "type": "string",
                    "description": "String that specifies the expression for the column. When queried, the column returns results derived from this expression.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "as",
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalTableTag:ExternalTableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "parent",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput": {
            "properties": {
                "allowWrites": {
                    "type": "boolean"
                },
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowWrites",
                        "comment",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation": {
            "properties": {
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.\n"
                },
                "encryptionKmsKeyId": {
                    "type": "string",
                    "description": "Specifies the ID for the KMS-managed key used to encrypt files.\n"
                },
                "encryptionType": {
                    "type": "string",
                    "description": "Specifies the encryption type used.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "External ID that Snowflake uses to establish a trust relationship with AWS.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string",
                    "description": "Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.\n"
                },
                "storageBaseUrl": {
                    "type": "string",
                    "description": "Specifies the base URL for your cloud storage location.\n"
                },
                "storageLocationName": {
                    "type": "string"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.\n"
                }
            },
            "type": "object",
            "required": [
                "storageBaseUrl",
                "storageLocationName",
                "storageProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "storageAwsExternalId",
                        "storageBaseUrl",
                        "storageLocationName",
                        "storageProvider"
                    ]
                }
            }
        },
        "snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Identifier for the primary failover group in the source account.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "sourceAccountName": {
                    "type": "string",
                    "description": "Source account from which you are enabling replication and failover of the specified objects.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "organizationName",
                "sourceAccountName"
            ]
        },
        "snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for secondary group refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/FunctionJavaArgument:FunctionJavaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionJavaImport:FunctionJavaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionJavaParameter:FunctionJavaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterEnableConsoleOutput:FunctionJavaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterLogLevel:FunctionJavaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterMetricLevel:FunctionJavaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterTraceLevel:FunctionJavaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterEnableConsoleOutput:FunctionJavaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterLogLevel:FunctionJavaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterMetricLevel:FunctionJavaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterTraceLevel:FunctionJavaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaSecret:FunctionJavaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterEnableConsoleOutput:FunctionJavascriptParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterLogLevel:FunctionJavascriptParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterMetricLevel:FunctionJavascriptParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterTraceLevel:FunctionJavascriptParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterEnableConsoleOutput:FunctionJavascriptParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterLogLevel:FunctionJavascriptParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterMetricLevel:FunctionJavascriptParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterTraceLevel:FunctionJavascriptParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonArgument:FunctionPythonArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionPythonImport:FunctionPythonImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionPythonParameter:FunctionPythonParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterEnableConsoleOutput:FunctionPythonParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterLogLevel:FunctionPythonParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterMetricLevel:FunctionPythonParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterTraceLevel:FunctionPythonParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterEnableConsoleOutput:FunctionPythonParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterLogLevel:FunctionPythonParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterMetricLevel:FunctionPythonParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterTraceLevel:FunctionPythonParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonSecret:FunctionPythonSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaArgument:FunctionScalaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionScalaImport:FunctionScalaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionScalaParameter:FunctionScalaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterEnableConsoleOutput:FunctionScalaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterLogLevel:FunctionScalaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterMetricLevel:FunctionScalaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterTraceLevel:FunctionScalaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterEnableConsoleOutput:FunctionScalaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterLogLevel:FunctionScalaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterMetricLevel:FunctionScalaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterTraceLevel:FunctionScalaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaSecret:FunctionScalaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionSqlArgument:FunctionSqlArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionSqlParameter:FunctionSqlParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterEnableConsoleOutput:FunctionSqlParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterLogLevel:FunctionSqlParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterMetricLevel:FunctionSqlParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterTraceLevel:FunctionSqlParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterEnableConsoleOutput:FunctionSqlParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterLogLevel:FunctionSqlParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterMetricLevel:FunctionSqlParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterTraceLevel:FunctionSqlParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/GrantOwnershipOn:GrantOwnershipOn": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "Specifies the identifier for the object on which you are transferring ownership.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | RESOURCE MONITOR | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject": {
            "properties": {
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | COMPUTE POOL | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP | EXTERNAL VOLUME\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectName",
                "objectType"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterAbortDetachedQuery:LegacyServiceUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterAutocommit:LegacyServiceUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterBinaryInputFormat:LegacyServiceUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterBinaryOutputFormat:LegacyServiceUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientMemoryLimit:LegacyServiceUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx:LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientPrefetchThread:LegacyServiceUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientResultChunkSize:LegacyServiceUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientResultColumnCaseInsensitive:LegacyServiceUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientSessionKeepAlife:LegacyServiceUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientTimestampTypeMapping:LegacyServiceUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterDateInputFormat:LegacyServiceUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterDateOutputFormat:LegacyServiceUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization:LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterEnableUnredactedQuerySyntaxError:LegacyServiceUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicMerge:LegacyServiceUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicUpdate:LegacyServiceUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterGeographyOutputFormat:LegacyServiceUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterGeometryOutputFormat:LegacyServiceUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcTreatDecimalAsInt:LegacyServiceUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc:LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcUseSessionTimezone:LegacyServiceUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJsonIndent:LegacyServiceUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterLockTimeout:LegacyServiceUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterLogLevel:LegacyServiceUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterMultiStatementCount:LegacyServiceUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterNetworkPolicy:LegacyServiceUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterNoorderSequenceAsDefault:LegacyServiceUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterOdbcTreatDecimalAsInt:LegacyServiceUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterPreventUnloadToInternalStage:LegacyServiceUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterQueryTag:LegacyServiceUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterQuotedIdentifiersIgnoreCase:LegacyServiceUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterRowsPerResultset:LegacyServiceUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterS3StageVpceDnsName:LegacyServiceUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterSearchPath:LegacyServiceUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterSimulatedDataSharingConsumer:LegacyServiceUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStatementQueuedTimeoutInSecond:LegacyServiceUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStatementTimeoutInSecond:LegacyServiceUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStrictJsonOutput:LegacyServiceUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimeInputFormat:LegacyServiceUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimeOutputFormat:LegacyServiceUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampDayIsAlways24h:LegacyServiceUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampInputFormat:LegacyServiceUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampLtzOutputFormat:LegacyServiceUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampNtzOutputFormat:LegacyServiceUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampOutputFormat:LegacyServiceUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampTypeMapping:LegacyServiceUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampTzOutputFormat:LegacyServiceUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimezone:LegacyServiceUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTraceLevel:LegacyServiceUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTransactionAbortOnError:LegacyServiceUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTransactionDefaultIsolationLevel:LegacyServiceUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTwoDigitCenturyStart:LegacyServiceUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterUnsupportedDdlAction:LegacyServiceUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterUseCachedResult:LegacyServiceUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterWeekOfYearPolicy:LegacyServiceUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterWeekStart:LegacyServiceUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterAbortDetachedQuery:LegacyServiceUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterAutocommit:LegacyServiceUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterBinaryInputFormat:LegacyServiceUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterBinaryOutputFormat:LegacyServiceUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientMemoryLimit:LegacyServiceUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx:LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientPrefetchThread:LegacyServiceUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientResultChunkSize:LegacyServiceUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientResultColumnCaseInsensitive:LegacyServiceUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientSessionKeepAlife:LegacyServiceUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientTimestampTypeMapping:LegacyServiceUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterDateInputFormat:LegacyServiceUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterDateOutputFormat:LegacyServiceUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization:LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterEnableUnredactedQuerySyntaxError:LegacyServiceUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicMerge:LegacyServiceUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicUpdate:LegacyServiceUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterGeographyOutputFormat:LegacyServiceUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterGeometryOutputFormat:LegacyServiceUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcTreatDecimalAsInt:LegacyServiceUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc:LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcUseSessionTimezone:LegacyServiceUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJsonIndent:LegacyServiceUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterLockTimeout:LegacyServiceUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterLogLevel:LegacyServiceUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterMultiStatementCount:LegacyServiceUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterNetworkPolicy:LegacyServiceUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterNoorderSequenceAsDefault:LegacyServiceUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterOdbcTreatDecimalAsInt:LegacyServiceUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterPreventUnloadToInternalStage:LegacyServiceUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterQueryTag:LegacyServiceUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterQuotedIdentifiersIgnoreCase:LegacyServiceUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterRowsPerResultset:LegacyServiceUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterS3StageVpceDnsName:LegacyServiceUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterSearchPath:LegacyServiceUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterSimulatedDataSharingConsumer:LegacyServiceUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStatementQueuedTimeoutInSecond:LegacyServiceUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStatementTimeoutInSecond:LegacyServiceUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStrictJsonOutput:LegacyServiceUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimeInputFormat:LegacyServiceUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimeOutputFormat:LegacyServiceUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampDayIsAlways24h:LegacyServiceUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampInputFormat:LegacyServiceUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampLtzOutputFormat:LegacyServiceUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampNtzOutputFormat:LegacyServiceUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampOutputFormat:LegacyServiceUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampTypeMapping:LegacyServiceUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampTzOutputFormat:LegacyServiceUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimezone:LegacyServiceUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTraceLevel:LegacyServiceUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTransactionAbortOnError:LegacyServiceUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTransactionDefaultIsolationLevel:LegacyServiceUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTwoDigitCenturyStart:LegacyServiceUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterUnsupportedDdlAction:LegacyServiceUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterUseCachedResult:LegacyServiceUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterWeekOfYearPolicy:LegacyServiceUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterWeekStart:LegacyServiceUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "exemptOtherPolicies",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/MaterializedViewTag:MaterializedViewTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedIpList",
                        "allowedNetworkRuleList",
                        "blockedIpList",
                        "blockedNetworkRuleList"
                    ]
                }
            }
        },
        "snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "entriesInAllowedIpList",
                        "entriesInAllowedNetworkRules",
                        "entriesInBlockedIpList",
                        "entriesInBlockedNetworkRules",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter": {
            "properties": {
                "oauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter": {
            "properties": {
                "oauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the object was created in.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the object to set the parameter for.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the object was created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountName",
                        "comment",
                        "connectionUrl",
                        "createdOn",
                        "failoverAllowedToAccounts",
                        "isPrimary",
                        "name",
                        "organizationName",
                        "primary",
                        "regionGroup",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureJavaImport:ProcedureJavaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterEnableConsoleOutput:ProcedureJavaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterLogLevel:ProcedureJavaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterMetricLevel:ProcedureJavaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterTraceLevel:ProcedureJavaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterEnableConsoleOutput:ProcedureJavaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterLogLevel:ProcedureJavaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterMetricLevel:ProcedureJavaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterTraceLevel:ProcedureJavaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterEnableConsoleOutput:ProcedureJavascriptParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterLogLevel:ProcedureJavascriptParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterMetricLevel:ProcedureJavascriptParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterTraceLevel:ProcedureJavascriptParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterEnableConsoleOutput:ProcedureJavascriptParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterLogLevel:ProcedureJavascriptParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterMetricLevel:ProcedureJavascriptParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterTraceLevel:ProcedureJavascriptParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedurePythonImport:ProcedurePythonImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterEnableConsoleOutput:ProcedurePythonParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterLogLevel:ProcedurePythonParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterMetricLevel:ProcedurePythonParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterTraceLevel:ProcedurePythonParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterEnableConsoleOutput:ProcedurePythonParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterLogLevel:ProcedurePythonParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterMetricLevel:ProcedurePythonParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterTraceLevel:ProcedurePythonParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureScalaImport:ProcedureScalaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterEnableConsoleOutput:ProcedureScalaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterLogLevel:ProcedureScalaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterMetricLevel:ProcedureScalaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterTraceLevel:ProcedureScalaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterEnableConsoleOutput:ProcedureScalaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterLogLevel:ProcedureScalaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterMetricLevel:ProcedureScalaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterTraceLevel:ProcedureScalaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterEnableConsoleOutput:ProcedureSqlParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterLogLevel:ProcedureSqlParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterMetricLevel:ProcedureSqlParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterTraceLevel:ProcedureSqlParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterEnableConsoleOutput:ProcedureSqlParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterLogLevel:ProcedureSqlParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterMetricLevel:ProcedureSqlParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterTraceLevel:ProcedureSqlParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "creditQuota",
                        "endTime",
                        "frequency",
                        "level",
                        "name",
                        "owner",
                        "remainingCredits",
                        "startTime",
                        "suspendAt",
                        "suspendImmediateAt",
                        "usedCredits"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "kind",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedEmailPatterns",
                        "allowedUserDomains",
                        "comments",
                        "saml2DigestMethodsUseds",
                        "saml2EnableSpInitiateds",
                        "saml2ForceAuthns",
                        "saml2Issuers",
                        "saml2PostLogoutRedirectUrls",
                        "saml2Providers",
                        "saml2RequestedNameidFormats",
                        "saml2SignRequests",
                        "saml2SignatureMethodsUseds",
                        "saml2SnowflakeAcsUrls",
                        "saml2SnowflakeIssuerUrls",
                        "saml2SnowflakeMetadatas",
                        "saml2SpInitiatedLoginPageLabels",
                        "saml2SsoUrls"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdOn",
                        "kind",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameter:SchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "catalogs",
                        "dataRetentionTimeInDays",
                        "defaultDdlCollations",
                        "enableConsoleOutputs",
                        "externalVolumes",
                        "logLevels",
                        "maxDataExtensionTimeInDays",
                        "pipeExecutionPauseds",
                        "quotedIdentifiersIgnoreCases",
                        "replaceInvalidCharacters",
                        "storageSerializationPolicies",
                        "suspendTaskAfterNumFailures",
                        "taskAutoRetryAttempts",
                        "traceLevels",
                        "userTaskManagedInitialWarehouseSizes",
                        "userTaskMinimumTriggerIntervalInSeconds",
                        "userTaskTimeoutMs"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaShowOutput:SchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "droppedOn",
                        "isCurrent",
                        "isDefault",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "retentionTime"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "runAsRoles",
                        "syncPasswords"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountName",
                        "comment",
                        "connectionUrl",
                        "createdOn",
                        "failoverAllowedToAccounts",
                        "isPrimary",
                        "name",
                        "organizationName",
                        "primary",
                        "regionGroup",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameter:ServiceUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterAbortDetachedQuery:ServiceUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterAutocommit:ServiceUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterBinaryInputFormat:ServiceUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterBinaryOutputFormat:ServiceUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientMemoryLimit:ServiceUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientMetadataRequestUseConnectionCtx:ServiceUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientPrefetchThread:ServiceUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientResultChunkSize:ServiceUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientResultColumnCaseInsensitive:ServiceUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientSessionKeepAlife:ServiceUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientTimestampTypeMapping:ServiceUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterDateInputFormat:ServiceUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterDateOutputFormat:ServiceUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterEnableUnloadPhysicalTypeOptimization:ServiceUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterEnableUnredactedQuerySyntaxError:ServiceUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterErrorOnNondeterministicMerge:ServiceUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterErrorOnNondeterministicUpdate:ServiceUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterGeographyOutputFormat:ServiceUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterGeometryOutputFormat:ServiceUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcTreatDecimalAsInt:ServiceUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcTreatTimestampNtzAsUtc:ServiceUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcUseSessionTimezone:ServiceUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJsonIndent:ServiceUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterLockTimeout:ServiceUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterLogLevel:ServiceUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterMultiStatementCount:ServiceUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterNetworkPolicy:ServiceUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterNoorderSequenceAsDefault:ServiceUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterOdbcTreatDecimalAsInt:ServiceUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterPreventUnloadToInternalStage:ServiceUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterQueryTag:ServiceUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterQuotedIdentifiersIgnoreCase:ServiceUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterRowsPerResultset:ServiceUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterS3StageVpceDnsName:ServiceUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterSearchPath:ServiceUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterSimulatedDataSharingConsumer:ServiceUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStatementQueuedTimeoutInSecond:ServiceUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStatementTimeoutInSecond:ServiceUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStrictJsonOutput:ServiceUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimeInputFormat:ServiceUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimeOutputFormat:ServiceUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampDayIsAlways24h:ServiceUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampInputFormat:ServiceUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampLtzOutputFormat:ServiceUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampNtzOutputFormat:ServiceUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampOutputFormat:ServiceUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampTypeMapping:ServiceUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampTzOutputFormat:ServiceUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimezone:ServiceUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTraceLevel:ServiceUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTransactionAbortOnError:ServiceUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTransactionDefaultIsolationLevel:ServiceUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTwoDigitCenturyStart:ServiceUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterUnsupportedDdlAction:ServiceUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterUseCachedResult:ServiceUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterWeekOfYearPolicy:ServiceUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterWeekStart:ServiceUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterAbortDetachedQuery:ServiceUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterAutocommit:ServiceUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterBinaryInputFormat:ServiceUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterBinaryOutputFormat:ServiceUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientMemoryLimit:ServiceUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientMetadataRequestUseConnectionCtx:ServiceUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientPrefetchThread:ServiceUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientResultChunkSize:ServiceUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientResultColumnCaseInsensitive:ServiceUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientSessionKeepAlife:ServiceUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientTimestampTypeMapping:ServiceUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterDateInputFormat:ServiceUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterDateOutputFormat:ServiceUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterEnableUnloadPhysicalTypeOptimization:ServiceUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterEnableUnredactedQuerySyntaxError:ServiceUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterErrorOnNondeterministicMerge:ServiceUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterErrorOnNondeterministicUpdate:ServiceUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterGeographyOutputFormat:ServiceUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterGeometryOutputFormat:ServiceUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcTreatDecimalAsInt:ServiceUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcTreatTimestampNtzAsUtc:ServiceUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcUseSessionTimezone:ServiceUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJsonIndent:ServiceUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterLockTimeout:ServiceUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterLogLevel:ServiceUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterMultiStatementCount:ServiceUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterNetworkPolicy:ServiceUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterNoorderSequenceAsDefault:ServiceUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterOdbcTreatDecimalAsInt:ServiceUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterPreventUnloadToInternalStage:ServiceUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterQueryTag:ServiceUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterQuotedIdentifiersIgnoreCase:ServiceUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterRowsPerResultset:ServiceUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterS3StageVpceDnsName:ServiceUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterSearchPath:ServiceUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterSimulatedDataSharingConsumer:ServiceUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStatementQueuedTimeoutInSecond:ServiceUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStatementTimeoutInSecond:ServiceUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStrictJsonOutput:ServiceUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimeInputFormat:ServiceUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimeOutputFormat:ServiceUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampDayIsAlways24h:ServiceUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampInputFormat:ServiceUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampLtzOutputFormat:ServiceUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampNtzOutputFormat:ServiceUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampOutputFormat:ServiceUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampTypeMapping:ServiceUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampTzOutputFormat:ServiceUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimezone:ServiceUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTraceLevel:ServiceUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTransactionAbortOnError:ServiceUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTransactionDefaultIsolationLevel:ServiceUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTwoDigitCenturyStart:ServiceUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterUnsupportedDdlAction:ServiceUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterUseCachedResult:ServiceUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterWeekOfYearPolicy:ServiceUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterWeekStart:ServiceUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StageTag:StageTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnTableAt:StreamOnTableAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnTableBefore:StreamOnTableBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnViewAt:StreamOnViewAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnViewBefore:StreamOnViewBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultPackages",
                        "externalAccessIntegrations",
                        "externalAccessSecrets",
                        "importUrls",
                        "mainFile",
                        "name",
                        "queryWarehouse",
                        "rootLocation",
                        "title",
                        "urlId",
                        "userPackages"
                    ]
                }
            }
        },
        "snowflake:index/StreamlitShowOutput:StreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "schemaName",
                        "title",
                        "urlId"
                    ]
                }
            }
        },
        "snowflake:index/TableColumn:TableColumn": {
            "properties": {
                "collate": {
                    "type": "string",
                    "description": "Column collation, e.g. utf8\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Column comment\n"
                },
                "default": {
                    "$ref": "#/types/snowflake:index/TableColumnDefault:TableColumnDefault",
                    "description": "Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied\n"
                },
                "identity": {
                    "$ref": "#/types/snowflake:index/TableColumnIdentity:TableColumnIdentity",
                    "description": "Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Masking policy to apply on column. It has to be a fully qualified name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n"
                },
                "nullable": {
                    "type": "boolean",
                    "description": "Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.\n"
                },
                "schemaEvolutionRecord": {
                    "type": "string",
                    "description": "Record of schema evolution.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "schemaEvolutionRecord",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/TableColumnDefault:TableColumnDefault": {
            "properties": {
                "constant": {
                    "type": "string",
                    "description": "The default constant value for the column\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The default expression value for the column\n"
                },
                "sequence": {
                    "type": "string",
                    "description": "The default sequence to use for the column\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableColumnIdentity:TableColumnIdentity": {
            "properties": {
                "startNum": {
                    "type": "integer",
                    "description": "The number to start incrementing at.\n"
                },
                "stepNum": {
                    "type": "integer",
                    "description": "Step size to increment by.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "The match type for the foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onDelete": {
                    "type": "string",
                    "description": "Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onUpdate": {
                    "type": "string",
                    "description": "Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "references": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences",
                    "description": "The table and columns that the foreign key references.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "references"
            ]
        },
        "snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences": {
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in foreign key reference\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "columns",
                "tableId"
            ]
        },
        "snowflake:index/TablePrimaryKey:TablePrimaryKey": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in primary key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "keys"
            ]
        },
        "snowflake:index/TableTag:TableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/TagShowOutput:TagShowOutput": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedValues",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameter:TaskParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterAbortDetachedQuery:TaskParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterAutocommit:TaskParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterBinaryInputFormat:TaskParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterBinaryOutputFormat:TaskParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientMemoryLimit:TaskParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientMetadataRequestUseConnectionCtx:TaskParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientPrefetchThread:TaskParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientResultChunkSize:TaskParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientResultColumnCaseInsensitive:TaskParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientSessionKeepAliveHeartbeatFrequency:TaskParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientSessionKeepAlife:TaskParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientTimestampTypeMapping:TaskParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterDateInputFormat:TaskParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterDateOutputFormat:TaskParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterEnableUnloadPhysicalTypeOptimization:TaskParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterErrorOnNondeterministicMerge:TaskParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterErrorOnNondeterministicUpdate:TaskParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterGeographyOutputFormat:TaskParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterGeometryOutputFormat:TaskParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJdbcTreatTimestampNtzAsUtc:TaskParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJdbcUseSessionTimezone:TaskParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJsonIndent:TaskParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterLockTimeout:TaskParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterLogLevel:TaskParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterMultiStatementCount:TaskParameterMultiStatementCount"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterNoorderSequenceAsDefault:TaskParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterOdbcTreatDecimalAsInt:TaskParameterOdbcTreatDecimalAsInt"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterQueryTag:TaskParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterQuotedIdentifiersIgnoreCase:TaskParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterRowsPerResultset:TaskParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterS3StageVpceDnsName:TaskParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterSearchPath:TaskParameterSearchPath"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStatementQueuedTimeoutInSecond:TaskParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStatementTimeoutInSecond:TaskParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStrictJsonOutput:TaskParameterStrictJsonOutput"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterSuspendTaskAfterNumFailure:TaskParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTaskAutoRetryAttempt:TaskParameterTaskAutoRetryAttempt"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimeInputFormat:TaskParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimeOutputFormat:TaskParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampDayIsAlways24h:TaskParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampInputFormat:TaskParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampLtzOutputFormat:TaskParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampNtzOutputFormat:TaskParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampOutputFormat:TaskParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampTypeMapping:TaskParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampTzOutputFormat:TaskParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimezone:TaskParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTraceLevel:TaskParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTransactionAbortOnError:TaskParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTransactionDefaultIsolationLevel:TaskParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTwoDigitCenturyStart:TaskParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUnsupportedDdlAction:TaskParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUseCachedResult:TaskParameterUseCachedResult"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskManagedInitialWarehouseSize:TaskParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskMinimumTriggerIntervalInSecond:TaskParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskTimeoutM:TaskParameterUserTaskTimeoutM"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterWeekOfYearPolicy:TaskParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterWeekStart:TaskParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "suspendTaskAfterNumFailures",
                        "taskAutoRetryAttempts",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "userTaskManagedInitialWarehouseSizes",
                        "userTaskMinimumTriggerIntervalInSeconds",
                        "userTaskTimeoutMs",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterAbortDetachedQuery:TaskParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterAutocommit:TaskParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterBinaryInputFormat:TaskParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterBinaryOutputFormat:TaskParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientMemoryLimit:TaskParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientMetadataRequestUseConnectionCtx:TaskParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientPrefetchThread:TaskParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientResultChunkSize:TaskParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientResultColumnCaseInsensitive:TaskParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientSessionKeepAlife:TaskParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientSessionKeepAliveHeartbeatFrequency:TaskParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientTimestampTypeMapping:TaskParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterDateInputFormat:TaskParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterDateOutputFormat:TaskParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterEnableUnloadPhysicalTypeOptimization:TaskParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterErrorOnNondeterministicMerge:TaskParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterErrorOnNondeterministicUpdate:TaskParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterGeographyOutputFormat:TaskParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterGeometryOutputFormat:TaskParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJdbcTreatTimestampNtzAsUtc:TaskParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJdbcUseSessionTimezone:TaskParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJsonIndent:TaskParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterLockTimeout:TaskParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterLogLevel:TaskParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterMultiStatementCount:TaskParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterNoorderSequenceAsDefault:TaskParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterOdbcTreatDecimalAsInt:TaskParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterQueryTag:TaskParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterQuotedIdentifiersIgnoreCase:TaskParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterRowsPerResultset:TaskParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterS3StageVpceDnsName:TaskParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterSearchPath:TaskParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStatementQueuedTimeoutInSecond:TaskParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStatementTimeoutInSecond:TaskParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStrictJsonOutput:TaskParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterSuspendTaskAfterNumFailure:TaskParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTaskAutoRetryAttempt:TaskParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimeInputFormat:TaskParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimeOutputFormat:TaskParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampDayIsAlways24h:TaskParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampInputFormat:TaskParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampLtzOutputFormat:TaskParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampNtzOutputFormat:TaskParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampOutputFormat:TaskParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampTypeMapping:TaskParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampTzOutputFormat:TaskParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimezone:TaskParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTraceLevel:TaskParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTransactionAbortOnError:TaskParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTransactionDefaultIsolationLevel:TaskParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTwoDigitCenturyStart:TaskParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUnsupportedDdlAction:TaskParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUseCachedResult:TaskParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskManagedInitialWarehouseSize:TaskParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskMinimumTriggerIntervalInSecond:TaskParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskTimeoutM:TaskParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterWeekOfYearPolicy:TaskParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterWeekStart:TaskParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskSchedule:TaskSchedule": {
            "properties": {
                "minutes": {
                    "type": "integer",
                    "description": "Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)\n"
                },
                "usingCron": {
                    "type": "string",
                    "description": "Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TaskShowOutput:TaskShowOutput": {
            "properties": {
                "allowOverlappingExecution": {
                    "type": "boolean"
                },
                "budget": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "definition": {
                    "type": "string"
                },
                "errorIntegration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastCommittedOn": {
                    "type": "string"
                },
                "lastSuspendedOn": {
                    "type": "string"
                },
                "lastSuspendedReason": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "taskRelations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskShowOutputTaskRelation:TaskShowOutputTaskRelation"
                    }
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowOverlappingExecution",
                        "budget",
                        "comment",
                        "condition",
                        "config",
                        "createdOn",
                        "databaseName",
                        "definition",
                        "errorIntegration",
                        "id",
                        "lastCommittedOn",
                        "lastSuspendedOn",
                        "lastSuspendedReason",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "predecessors",
                        "schedule",
                        "schemaName",
                        "state",
                        "taskRelations",
                        "warehouse"
                    ]
                }
            }
        },
        "snowflake:index/TaskShowOutputTaskRelation:TaskShowOutputTaskRelation": {
            "properties": {
                "finalizedRootTask": {
                    "type": "string"
                },
                "finalizer": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "finalizedRootTask",
                        "finalizer",
                        "predecessors"
                    ]
                }
            }
        },
        "snowflake:index/UserParameter:UserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAutocommit:UserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLogLevel:UserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQueryTag:UserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSearchPath:UserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimezone:UserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekStart:UserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAutocommit:UserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLogLevel:UserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQueryTag:UserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSearchPath:UserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimezone:UserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekStart:UserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserShowOutput:UserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy": {
            "properties": {
                "entityKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns uniquely identify an entity within the view.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Aggregation policy name.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumn:ViewColumn": {
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "Specifies affected column name.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the column.\n"
                },
                "maskingPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy"
                },
                "projectionPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy"
                }
            },
            "type": "object",
            "required": [
                "columnName"
            ]
        },
        "snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the masking policy to set on a column. For more information about this resource, see docs.\n"
                },
                "usings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the projection policy to set on a column.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction": {
            "properties": {
                "functionName": {
                    "type": "string",
                    "description": "Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.\n"
                },
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.\n"
                },
                "scheduleStatus": {
                    "type": "string",
                    "description": "The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`\n"
                }
            },
            "type": "object",
            "required": [
                "functionName",
                "ons",
                "scheduleStatus"
            ]
        },
        "snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule": {
            "properties": {
                "minutes": {
                    "type": "integer"
                },
                "usingCron": {
                    "type": "string",
                    "description": "Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ViewDescribeOutput:ViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "check",
                        "comment",
                        "default",
                        "expression",
                        "isNullable",
                        "isPrimary",
                        "isUnique",
                        "kind",
                        "name",
                        "policyName",
                        "privacyDomain",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy": {
            "properties": {
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns are affected by the policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Row access policy name. For more information about this resource, see docs.\n"
                }
            },
            "type": "object",
            "required": [
                "ons",
                "policyName"
            ]
        },
        "snowflake:index/ViewShowOutput:ViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "changeTracking",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "isMaterialized",
                        "isSecure",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "reserved",
                        "schemaName",
                        "text"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameter:WarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxConcurrencyLevels",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseShowOutput:WarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspend",
                        "available",
                        "comment",
                        "createdOn",
                        "enableQueryAcceleration",
                        "isCurrent",
                        "isDefault",
                        "maxClusterCount",
                        "minClusterCount",
                        "name",
                        "other",
                        "owner",
                        "ownerRoleType",
                        "provisioning",
                        "queryAccelerationMaxScaleFactor",
                        "queued",
                        "quiescing",
                        "resourceMonitor",
                        "resumedOn",
                        "running",
                        "scalingPolicy",
                        "size",
                        "startedClusters",
                        "state",
                        "type",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/getAccountRolesAccountRole:getAccountRolesAccountRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getAccountRolesAccountRoleShowOutput:getAccountRolesAccountRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountRolesAccountRoleShowOutput:getAccountRolesAccountRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignedToUsers",
                "comment",
                "createdOn",
                "grantedRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountsAccount:getAccountsAccount": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getAccountsAccountShowOutput:getAccountsAccountShowOutput"
                    },
                    "description": "Holds the output of SHOW ACCOUNTS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountsAccountShowOutput:getAccountsAccountShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountLocatorUrl": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "accountOldUrlLastUsed": {
                    "type": "string"
                },
                "accountOldUrlSavedOn": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "consumptionBillingEntityName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "isEventsAccount": {
                    "type": "boolean"
                },
                "isOrgAdmin": {
                    "type": "boolean"
                },
                "isOrganizationAccount": {
                    "type": "boolean"
                },
                "managedAccounts": {
                    "type": "integer"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string"
                },
                "movedOn": {
                    "type": "string"
                },
                "movedToOrganization": {
                    "type": "string"
                },
                "oldAccountUrl": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationOldUrl": {
                    "type": "string"
                },
                "organizationOldUrlLastUsed": {
                    "type": "string"
                },
                "organizationOldUrlSavedOn": {
                    "type": "string"
                },
                "organizationUrlExpirationOn": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "restoredOn": {
                    "type": "string"
                },
                "scheduledDeletionTime": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountLocatorUrl",
                "accountName",
                "accountOldUrlLastUsed",
                "accountOldUrlSavedOn",
                "accountUrl",
                "comment",
                "consumptionBillingEntityName",
                "createdOn",
                "droppedOn",
                "edition",
                "isEventsAccount",
                "isOrgAdmin",
                "isOrganizationAccount",
                "managedAccounts",
                "marketplaceConsumerBillingEntityName",
                "marketplaceProviderBillingEntityName",
                "movedOn",
                "movedToOrganization",
                "oldAccountUrl",
                "organizationName",
                "organizationOldUrl",
                "organizationOldUrlLastUsed",
                "organizationOldUrlSavedOn",
                "organizationUrlExpirationOn",
                "regionGroup",
                "restoredOn",
                "scheduledDeletionTime",
                "snowflakeRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAlertsAlert:getAlertsAlert": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The text of the SQL statement that should be executed when the alert is triggered.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The text of the SQL statement that serves as the condition when the alert should be triggered.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the alert is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the alert.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the alert is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "comment",
                "condition",
                "databaseName",
                "name",
                "owner",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getConnectionsConnection:getConnectionsConnection": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getConnectionsConnectionShowOutput:getConnectionsConnectionShowOutput"
                    },
                    "description": "Holds the output of SHOW CONNECTIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getConnectionsConnectionShowOutput:getConnectionsConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountName",
                "comment",
                "connectionUrl",
                "createdOn",
                "failoverAllowedToAccounts",
                "isPrimary",
                "name",
                "organizationName",
                "primary",
                "regionGroup",
                "snowflakeRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Comment for the cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the cortex search service was created.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the cortex search service is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cortex search service.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the cortex search service is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASE ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "grantedDatabaseRoles",
                "grantedToDatabaseRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner",
                "ownerRoleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE DATABASE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR DATABASE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "integer"
                },
                "transient": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "kind",
                "name",
                "options",
                "origin",
                "owner",
                "ownerRoleType",
                "resourceGroup",
                "retentionTime",
                "transient"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesLimit:getDatabasesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDynamicTablesIn:getDynamicTablesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesLike:getDynamicTablesLike": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).\n"
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ]
        },
        "snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows to return.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord": {
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the dynamic table is stored.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dynamic table.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the dynamic table is stored.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "The maximum duration that the dynamic table’s content should lag behind real time.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse that provides the required resources to perform the incremental refreshes.\n"
                }
            },
            "type": "object",
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "comment",
                "createdOn",
                "dataTimestamp",
                "databaseName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "refreshMode",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schemaName",
                "targetLag",
                "text",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "language",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup": {
            "properties": {
                "accountLocator": {
                    "type": "string",
                    "description": "Account locator in a region.\n"
                },
                "accountName": {
                    "type": "string",
                    "description": "Name of the account.\n"
                },
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of accounts enabled for replication and failover.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of integration types that are enabled for replication.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment string.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time failover group was created.\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates whether the failover group is the primary group.\n"
                },
                "nextScheduledRefresh": {
                    "type": "string",
                    "description": "Date and time of the next scheduled refresh.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of specified object types enabled for replication and failover.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.\n"
                },
                "primary": {
                    "type": "string",
                    "description": "Name of the primary group.\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.\n"
                },
                "replicationSchedule": {
                    "type": "string",
                    "description": "Scheduled interval for refresh; NULL if no replication schedule is set.\n"
                },
                "secondaryState": {
                    "type": "string",
                    "description": "Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.\n"
                },
                "snowflakeRegion": {
                    "type": "string",
                    "description": "Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of group. Valid value is FAILOVER.\n"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountName",
                "allowedAccounts",
                "allowedIntegrationTypes",
                "comment",
                "createdOn",
                "isPrimary",
                "nextScheduledRefresh",
                "objectTypes",
                "organizationName",
                "owner",
                "primary",
                "regionGroup",
                "replicationSchedule",
                "secondaryState",
                "snowflakeRegion",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "formatType",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFunctionsFunction:getFunctionsFunction": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name (\"\u0026lt;db_name\u0026gt;\".\"\u0026lt;schema_name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name (\"\u0026lt;db_name\u0026gt;\".\"\u0026lt;database_role_name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrant:getGrantsGrant": {
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "The date and time the grant was created.\n"
                },
                "grantOption": {
                    "type": "boolean",
                    "description": "Whether the grantee can grant the privilege to others.\n"
                },
                "grantedBy": {
                    "type": "string",
                    "description": "The role that granted the privilege.\n"
                },
                "grantedOn": {
                    "type": "string",
                    "description": "The object on which the privilege was granted.\n"
                },
                "grantedTo": {
                    "type": "string",
                    "description": "The role to which the privilege was granted.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The name of the role to which the privilege was granted.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the object on which the privilege was granted.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege granted.\n"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "grantOption",
                "grantedBy",
                "grantedOn",
                "grantedTo",
                "granteeName",
                "name",
                "privilege"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the account role has been granted.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the users and roles to which the application role has been granted. Must be a fully qualified name (\"\u0026lt;db_name\u0026gt;\".\"\u0026lt;database_role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the database role has been granted. Must be a fully qualified name (\"\u0026lt;db_name\u0026gt;\".\"\u0026lt;database_role_name\u0026gt;\").\n"
                },
                "share": {
                    "type": "string",
                    "description": "Lists all the accounts for the share and indicates the accounts that are using the share.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "Name of object to list privileges on.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to list privileges on.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the role.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application role. Must be a fully qualified name (\"\u0026lt;app_name\u0026gt;\".\"\u0026lt;app_role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the database role. Must be a fully qualified name (\"\u0026lt;db_name\u0026gt;\".\"\u0026lt;database_role_name\u0026gt;\").\n"
                },
                "share": {
                    "$ref": "#/types/snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare",
                    "description": "Lists all the privileges granted to the share.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare": {
            "properties": {
                "shareName": {
                    "type": "string",
                    "description": "Lists all of the privileges and roles granted to the specified share.\n"
                }
            },
            "type": "object",
            "required": [
                "shareName"
            ]
        },
        "snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE MASKING POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW MASKING POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "exemptOtherPolicies",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE NETWORK POLICIES.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW NETWORK POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedIpList",
                "allowedNetworkRuleList",
                "blockedIpList",
                "blockedNetworkRuleList"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "entriesInAllowedIpList",
                "entriesInAllowedNetworkRules",
                "entriesInBlockedIpList",
                "entriesInBlockedNetworkRules",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getParametersParameter:getParametersParameter": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value of the parameter\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the parameter\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the parameter\n"
                },
                "level": {
                    "type": "string",
                    "description": "The level of the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the parameter\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getPipesPipe:getPipesPipe": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "integration": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "integration",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getProceduresProcedure:getProceduresProcedure": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput"
                    },
                    "description": "Holds the output of SHOW RESOURCE MONITORS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "creditQuota",
                "endTime",
                "frequency",
                "level",
                "name",
                "owner",
                "remainingCredits",
                "startTime",
                "suspendAt",
                "suspendImmediateAt",
                "usedCredits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE ROW ACCESS POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW ROW ACCESS POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "kind",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasIn:getSchemasIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getSchemasLimit:getSchemasLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getSchemasSchema:getSchemasSchema": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SCHEMA.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR SCHEMA.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput"
                    },
                    "description": "Holds the output of SHOW SCHEMAS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "pipeExecutionPauseds",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "retentionTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsIn:getSecretsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getSecretsSecret:getSecretsSecret": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecretsSecretDescribeOutput:getSecretsSecretDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SECRET.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecretsSecretShowOutput:getSecretsSecretShowOutput"
                    },
                    "description": "Holds the output of SHOW SECRETS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsSecretDescribeOutput:getSecretsSecretDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "integrationName",
                "name",
                "oauthAccessTokenExpiryTime",
                "oauthRefreshTokenExpiryTime",
                "oauthScopes",
                "owner",
                "schemaName",
                "secretType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsSecretShowOutput:getSecretsSecretShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "oauthScopes",
                "owner",
                "ownerRoleType",
                "schemaName",
                "secretType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SECURITY INTEGRATIONS.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput"
                    },
                    "description": "Holds the output of SHOW SECURITY INTEGRATIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType"
                    }
                },
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedEmailPatterns",
                "allowedUserDomains",
                "authTypes",
                "blockedRolesLists",
                "comments",
                "enableds",
                "externalOauthAllowedRolesLists",
                "externalOauthAnyRoleModes",
                "externalOauthAudienceLists",
                "externalOauthBlockedRolesLists",
                "externalOauthIssuers",
                "externalOauthJwsKeysUrls",
                "externalOauthRsaPublicKeys",
                "externalOauthRsaPublicKey2s",
                "externalOauthScopeDelimiters",
                "externalOauthSnowflakeUserMappingAttributes",
                "externalOauthTokenUserMappingClaims",
                "networkPolicies",
                "oauthAccessTokenValidities",
                "oauthAllowNonTlsRedirectUris",
                "oauthAllowedAuthorizationEndpoints",
                "oauthAllowedScopes",
                "oauthAllowedTokenEndpoints",
                "oauthAuthorizationEndpoints",
                "oauthClientAuthMethods",
                "oauthClientRsaPublicKey2Fps",
                "oauthClientRsaPublicKeyFps",
                "oauthClientTypes",
                "oauthEnforcePkces",
                "oauthGrants",
                "oauthIssueRefreshTokens",
                "oauthRefreshTokenValidities",
                "oauthTokenEndpoints",
                "oauthUseSecondaryRoles",
                "parentIntegrations",
                "preAuthorizedRolesLists",
                "runAsRoles",
                "saml2DigestMethodsUseds",
                "saml2EnableSpInitiateds",
                "saml2ForceAuthns",
                "saml2Issuers",
                "saml2PostLogoutRedirectUrls",
                "saml2Providers",
                "saml2RequestedNameidFormats",
                "saml2SignRequests",
                "saml2SignatureMethodsUseds",
                "saml2SnowflakeAcsUrls",
                "saml2SnowflakeIssuerUrls",
                "saml2SnowflakeMetadatas",
                "saml2SpInitiatedLoginPageLabels",
                "saml2SsoUrls",
                "syncPasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "comment",
                "createdOn",
                "enabled",
                "integrationType",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSequencesSequence:getSequencesSequence": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSharesShare:getSharesShare": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment on the share.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the share.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the share.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the share.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "For the OUTBOUND share, list of consumers.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "kind",
                "name",
                "owner",
                "tos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStagesStage:getStagesStage": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "storageIntegration": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema",
                "storageIntegration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "enabled",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsIn:getStreamlitsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getStreamlitsLimit:getStreamlitsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE STREAMLIT.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput"
                    },
                    "description": "Holds the output of SHOW STREAMLITS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultPackages",
                "externalAccessIntegrations",
                "externalAccessSecrets",
                "importUrls",
                "mainFile",
                "name",
                "queryWarehouse",
                "rootLocation",
                "title",
                "urlId",
                "userPackages"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "queryWarehouse",
                "schemaName",
                "title",
                "urlId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsIn:getStreamsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getStreamsLimit:getStreamsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getStreamsStream:getStreamsStream": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamsStreamDescribeOutput:getStreamsStreamDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE STREAM.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamsStreamShowOutput:getStreamsStreamShowOutput"
                    },
                    "description": "Holds the output of SHOW STREAMS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsStreamDescribeOutput:getStreamsStreamDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseTables",
                "comment",
                "createdOn",
                "databaseName",
                "invalidReason",
                "mode",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName",
                "sourceType",
                "stale",
                "staleAfter",
                "tableName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsStreamShowOutput:getStreamsStreamShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseTables",
                "comment",
                "createdOn",
                "databaseName",
                "invalidReason",
                "mode",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName",
                "sourceType",
                "stale",
                "staleAfter",
                "tableName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTablesTable:getTablesTable": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTagsIn:getTagsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getTagsTag:getTagsTag": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTagsTagShowOutput:getTagsTagShowOutput"
                    },
                    "description": "Holds the output of SHOW TAGS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTagsTagShowOutput:getTagsTagShowOutput": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedValues",
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksIn:getTasksIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getTasksLimit:getTasksLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getTasksTask:getTasksTask": {
            "properties": {
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameter:getTasksTaskParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR TASK.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskShowOutput:getTasksTaskShowOutput"
                    },
                    "description": "Holds the output of SHOW TASKS.\n"
                }
            },
            "type": "object",
            "required": [
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameter:getTasksTaskParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterAbortDetachedQuery:getTasksTaskParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterAutocommit:getTasksTaskParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterBinaryInputFormat:getTasksTaskParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterBinaryOutputFormat:getTasksTaskParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientMemoryLimit:getTasksTaskParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientMetadataRequestUseConnectionCtx:getTasksTaskParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientPrefetchThread:getTasksTaskParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientResultChunkSize:getTasksTaskParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientResultColumnCaseInsensitive:getTasksTaskParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency:getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientSessionKeepAlife:getTasksTaskParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientTimestampTypeMapping:getTasksTaskParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterDateInputFormat:getTasksTaskParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterDateOutputFormat:getTasksTaskParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterEnableUnloadPhysicalTypeOptimization:getTasksTaskParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterErrorOnNondeterministicMerge:getTasksTaskParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterErrorOnNondeterministicUpdate:getTasksTaskParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterGeographyOutputFormat:getTasksTaskParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterGeometryOutputFormat:getTasksTaskParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJdbcTreatTimestampNtzAsUtc:getTasksTaskParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJdbcUseSessionTimezone:getTasksTaskParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJsonIndent:getTasksTaskParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterLockTimeout:getTasksTaskParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterLogLevel:getTasksTaskParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterMultiStatementCount:getTasksTaskParameterMultiStatementCount"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterNoorderSequenceAsDefault:getTasksTaskParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterOdbcTreatDecimalAsInt:getTasksTaskParameterOdbcTreatDecimalAsInt"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterQueryTag:getTasksTaskParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterQuotedIdentifiersIgnoreCase:getTasksTaskParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterRowsPerResultset:getTasksTaskParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterS3StageVpceDnsName:getTasksTaskParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterSearchPath:getTasksTaskParameterSearchPath"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStatementQueuedTimeoutInSecond:getTasksTaskParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStatementTimeoutInSecond:getTasksTaskParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStrictJsonOutput:getTasksTaskParameterStrictJsonOutput"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterSuspendTaskAfterNumFailure:getTasksTaskParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTaskAutoRetryAttempt:getTasksTaskParameterTaskAutoRetryAttempt"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimeInputFormat:getTasksTaskParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimeOutputFormat:getTasksTaskParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampDayIsAlways24h:getTasksTaskParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampInputFormat:getTasksTaskParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampLtzOutputFormat:getTasksTaskParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampNtzOutputFormat:getTasksTaskParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampOutputFormat:getTasksTaskParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampTypeMapping:getTasksTaskParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampTzOutputFormat:getTasksTaskParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimezone:getTasksTaskParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTraceLevel:getTasksTaskParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTransactionAbortOnError:getTasksTaskParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTransactionDefaultIsolationLevel:getTasksTaskParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTwoDigitCenturyStart:getTasksTaskParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUnsupportedDdlAction:getTasksTaskParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUseCachedResult:getTasksTaskParameterUseCachedResult"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskManagedInitialWarehouseSize:getTasksTaskParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond:getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskTimeoutM:getTasksTaskParameterUserTaskTimeoutM"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterWeekOfYearPolicy:getTasksTaskParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterWeekStart:getTasksTaskParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortDetachedQueries",
                "autocommits",
                "binaryInputFormats",
                "binaryOutputFormats",
                "clientMemoryLimits",
                "clientMetadataRequestUseConnectionCtxes",
                "clientPrefetchThreads",
                "clientResultChunkSizes",
                "clientResultColumnCaseInsensitives",
                "clientSessionKeepAlives",
                "clientSessionKeepAliveHeartbeatFrequencies",
                "clientTimestampTypeMappings",
                "dateInputFormats",
                "dateOutputFormats",
                "enableUnloadPhysicalTypeOptimizations",
                "errorOnNondeterministicMerges",
                "errorOnNondeterministicUpdates",
                "geographyOutputFormats",
                "geometryOutputFormats",
                "jdbcTreatTimestampNtzAsUtcs",
                "jdbcUseSessionTimezones",
                "jsonIndents",
                "lockTimeouts",
                "logLevels",
                "multiStatementCounts",
                "noorderSequenceAsDefaults",
                "odbcTreatDecimalAsInts",
                "queryTags",
                "quotedIdentifiersIgnoreCases",
                "rowsPerResultsets",
                "s3StageVpceDnsNames",
                "searchPaths",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutputs",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormats",
                "timeOutputFormats",
                "timestampDayIsAlways24hs",
                "timestampInputFormats",
                "timestampLtzOutputFormats",
                "timestampNtzOutputFormats",
                "timestampOutputFormats",
                "timestampTypeMappings",
                "timestampTzOutputFormats",
                "timezones",
                "traceLevels",
                "transactionAbortOnErrors",
                "transactionDefaultIsolationLevels",
                "twoDigitCenturyStarts",
                "unsupportedDdlActions",
                "useCachedResults",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicies",
                "weekStarts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterAbortDetachedQuery:getTasksTaskParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterAutocommit:getTasksTaskParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterBinaryInputFormat:getTasksTaskParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterBinaryOutputFormat:getTasksTaskParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientMemoryLimit:getTasksTaskParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientMetadataRequestUseConnectionCtx:getTasksTaskParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientPrefetchThread:getTasksTaskParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientResultChunkSize:getTasksTaskParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientResultColumnCaseInsensitive:getTasksTaskParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientSessionKeepAlife:getTasksTaskParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency:getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientTimestampTypeMapping:getTasksTaskParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterDateInputFormat:getTasksTaskParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterDateOutputFormat:getTasksTaskParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterEnableUnloadPhysicalTypeOptimization:getTasksTaskParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterErrorOnNondeterministicMerge:getTasksTaskParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterErrorOnNondeterministicUpdate:getTasksTaskParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterGeographyOutputFormat:getTasksTaskParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterGeometryOutputFormat:getTasksTaskParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJdbcTreatTimestampNtzAsUtc:getTasksTaskParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJdbcUseSessionTimezone:getTasksTaskParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJsonIndent:getTasksTaskParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterLockTimeout:getTasksTaskParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterLogLevel:getTasksTaskParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterMultiStatementCount:getTasksTaskParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterNoorderSequenceAsDefault:getTasksTaskParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterOdbcTreatDecimalAsInt:getTasksTaskParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterQueryTag:getTasksTaskParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterQuotedIdentifiersIgnoreCase:getTasksTaskParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterRowsPerResultset:getTasksTaskParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterS3StageVpceDnsName:getTasksTaskParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterSearchPath:getTasksTaskParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStatementQueuedTimeoutInSecond:getTasksTaskParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStatementTimeoutInSecond:getTasksTaskParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStrictJsonOutput:getTasksTaskParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterSuspendTaskAfterNumFailure:getTasksTaskParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTaskAutoRetryAttempt:getTasksTaskParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimeInputFormat:getTasksTaskParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimeOutputFormat:getTasksTaskParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampDayIsAlways24h:getTasksTaskParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampInputFormat:getTasksTaskParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampLtzOutputFormat:getTasksTaskParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampNtzOutputFormat:getTasksTaskParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampOutputFormat:getTasksTaskParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampTypeMapping:getTasksTaskParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampTzOutputFormat:getTasksTaskParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimezone:getTasksTaskParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTraceLevel:getTasksTaskParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTransactionAbortOnError:getTasksTaskParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTransactionDefaultIsolationLevel:getTasksTaskParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTwoDigitCenturyStart:getTasksTaskParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUnsupportedDdlAction:getTasksTaskParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUseCachedResult:getTasksTaskParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskManagedInitialWarehouseSize:getTasksTaskParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond:getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskTimeoutM:getTasksTaskParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterWeekOfYearPolicy:getTasksTaskParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterWeekStart:getTasksTaskParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskShowOutput:getTasksTaskShowOutput": {
            "properties": {
                "allowOverlappingExecution": {
                    "type": "boolean"
                },
                "budget": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "definition": {
                    "type": "string"
                },
                "errorIntegration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastCommittedOn": {
                    "type": "string"
                },
                "lastSuspendedOn": {
                    "type": "string"
                },
                "lastSuspendedReason": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "taskRelations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskShowOutputTaskRelation:getTasksTaskShowOutputTaskRelation"
                    }
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowOverlappingExecution",
                "budget",
                "comment",
                "condition",
                "config",
                "createdOn",
                "databaseName",
                "definition",
                "errorIntegration",
                "id",
                "lastCommittedOn",
                "lastSuspendedOn",
                "lastSuspendedReason",
                "name",
                "owner",
                "ownerRoleType",
                "predecessors",
                "schedule",
                "schemaName",
                "state",
                "taskRelations",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskShowOutputTaskRelation:getTasksTaskShowOutputTaskRelation": {
            "properties": {
                "finalizedRootTask": {
                    "type": "string"
                },
                "finalizer": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "finalizedRootTask",
                "finalizer",
                "predecessors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersLimit:getUsersLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getUsersUser:getUsersUser": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE USER.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameter:getUsersUserParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR USER.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput"
                    },
                    "description": "Holds the output of SHOW USERS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "customLandingPageUrl": {
                    "type": "string"
                },
                "customLandingPageUrlFlushNextUiLoad": {
                    "type": "boolean"
                },
                "daysToExpiry": {
                    "type": "number"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToBypassNetworkPolicy": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "passwordLastSetTime": {
                    "type": "string"
                },
                "rsaPublicKey": {
                    "type": "string"
                },
                "rsaPublicKey2": {
                    "type": "string"
                },
                "rsaPublicKey2Fp": {
                    "type": "string"
                },
                "rsaPublicKeyFp": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "snowflakeSupport": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "customLandingPageUrl",
                "customLandingPageUrlFlushNextUiLoad",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "lastName",
                "loginName",
                "middleName",
                "minsToBypassMfa",
                "minsToBypassNetworkPolicy",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "passwordLastSetTime",
                "rsaPublicKey",
                "rsaPublicKey2",
                "rsaPublicKey2Fp",
                "rsaPublicKeyFp",
                "snowflakeLock",
                "snowflakeSupport",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameter:getUsersUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortDetachedQueries",
                "autocommits",
                "binaryInputFormats",
                "binaryOutputFormats",
                "clientMemoryLimits",
                "clientMetadataRequestUseConnectionCtxes",
                "clientPrefetchThreads",
                "clientResultChunkSizes",
                "clientResultColumnCaseInsensitives",
                "clientSessionKeepAlives",
                "clientSessionKeepAliveHeartbeatFrequencies",
                "clientTimestampTypeMappings",
                "dateInputFormats",
                "dateOutputFormats",
                "enableUnloadPhysicalTypeOptimizations",
                "enableUnredactedQuerySyntaxErrors",
                "errorOnNondeterministicMerges",
                "errorOnNondeterministicUpdates",
                "geographyOutputFormats",
                "geometryOutputFormats",
                "jdbcTreatDecimalAsInts",
                "jdbcTreatTimestampNtzAsUtcs",
                "jdbcUseSessionTimezones",
                "jsonIndents",
                "lockTimeouts",
                "logLevels",
                "multiStatementCounts",
                "networkPolicies",
                "noorderSequenceAsDefaults",
                "odbcTreatDecimalAsInts",
                "preventUnloadToInternalStages",
                "queryTags",
                "quotedIdentifiersIgnoreCases",
                "rowsPerResultsets",
                "s3StageVpceDnsNames",
                "searchPaths",
                "simulatedDataSharingConsumers",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutputs",
                "timeInputFormats",
                "timeOutputFormats",
                "timestampDayIsAlways24hs",
                "timestampInputFormats",
                "timestampLtzOutputFormats",
                "timestampNtzOutputFormats",
                "timestampOutputFormats",
                "timestampTypeMappings",
                "timestampTzOutputFormats",
                "timezones",
                "traceLevels",
                "transactionAbortOnErrors",
                "transactionDefaultIsolationLevels",
                "twoDigitCenturyStarts",
                "unsupportedDdlActions",
                "useCachedResults",
                "weekOfYearPolicies",
                "weekStarts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "expiresAtTime",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "hasPassword",
                "hasRsaPublicKey",
                "lastName",
                "lastSuccessLogin",
                "lockedUntilTime",
                "loginName",
                "minsToBypassMfa",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "owner",
                "snowflakeLock",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsIn:getViewsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getViewsLimit:getViewsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getViewsView:getViewsView": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE VIEW.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput"
                    },
                    "description": "Holds the output of SHOW VIEWS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "check",
                "comment",
                "default",
                "expression",
                "isNullable",
                "isPrimary",
                "isUnique",
                "kind",
                "name",
                "policyName",
                "privacyDomain",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "changeTracking",
                "comment",
                "createdOn",
                "databaseName",
                "isMaterialized",
                "isSecure",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "reserved",
                "schemaName",
                "text"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE WAREHOUSE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR WAREHOUSE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput"
                    },
                    "description": "Holds the output of SHOW WAREHOUSES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrencyLevels",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoResume",
                "autoSuspend",
                "available",
                "comment",
                "createdOn",
                "enableQueryAcceleration",
                "isCurrent",
                "isDefault",
                "maxClusterCount",
                "minClusterCount",
                "name",
                "other",
                "owner",
                "ownerRoleType",
                "provisioning",
                "queryAccelerationMaxScaleFactor",
                "queued",
                "quiescing",
                "resourceMonitor",
                "resumedOn",
                "running",
                "scalingPolicy",
                "size",
                "startedClusters",
                "state",
                "type",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the snowflake package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.\n"
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |\n`TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.\n"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the\n`SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.\n"
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |\n`warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_HOST` environment variable.\n"
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment\nvariable.\n"
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the\n`SNOWFLAKE_MAX_RETRY_COUNT` environment variable.\n"
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more\nin Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the\n`SNOWFLAKE_OKTA_URL` environment variable.\n"
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).\nThis field can not be set with environmental variables.\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the\n`SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced\nfrom the `SNOWFLAKE_PASSWORD` environment variable.\n",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n"
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the\n`SNOWFLAKE_PROTOCOL` environment variable.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable.\n"
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as\nthe permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting\nthe proper privileges - see the section below. Can also be sourced from the\n`SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.\n"
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from\nthe `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new\nformat. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment\nvariable.\n"
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.\n"
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n"
            }
        },
        "inputProperties": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.\n"
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when\nconnecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` |\n`TOKENACCESSOR` | `USERNAMEPASSWORDMFA`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.\n"
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.\n"
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also\nbe sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.\n"
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be\nsourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.\n"
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_CLIENT_TIMEOUT` environment variable.\n"
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the\n`SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.\n"
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE`\nenvironment variable.\n"
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.\n"
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` |\n`warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.\n"
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.\n"
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_HOST` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment\nvariable.\n"
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the\ndefault value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE`\nenvironment variable.\n"
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the\n`SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.\n"
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.\n"
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the\n`SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.\n"
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_LOGIN_TIMEOUT` environment variable.\n"
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the\n`SNOWFLAKE_MAX_RETRY_COUNT` environment variable.\n"
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be\nsourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.\n"
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more\nin Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the\n`SNOWFLAKE_OKTA_URL` environment variable.\n"
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the\n[Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required\nunless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.\n"
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters).\nThis field can not be set with environmental variables.\n"
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from\nthe `SNOWFLAKE_PASSCODE` environment variable.\n",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the\n`SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for user + password auth. Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced\nfrom the `SNOWFLAKE_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the\n`SNOWFLAKE_PORT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the\n`SNOWFLAKE_PRIVATE_KEY` environment variable.\n",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and\ndes-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment\nvariable.\n"
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the\n`SNOWFLAKE_PROTOCOL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the\n`SNOWFLAKE_REQUEST_TIMEOUT` environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the\n`SNOWFLAKE_ROLE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as\nthe permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting\nthe proper privileges - see the section below. Can also be sourced from the\n`SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.\n"
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from\nthe `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new\nformat. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment\nvariable.\n"
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.\n"
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a\nconnection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.\n"
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced\nfrom the `SNOWFLAKE_WAREHOUSE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:snowflake/terraformConfig"
        }
    },
    "resources": {
        "snowflake:index/account:Account": {
            "properties": {
                "adminName": {
                    "type": "string",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "secret": true
                },
                "adminRsaPublicKey": {
                    "type": "string"
                },
                "adminUserType": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n"
                },
                "edition": {
                    "type": "string",
                    "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official\ndocumentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` |\n`BUSINESS_CRITICAL`\n"
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the\nmaximum is 90 days.\n"
                },
                "isOrgAdmin": {
                    "type": "string",
                    "description": "Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization\nadministrator (i.e. user with the ORGADMIN role) can set the property.\n"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "mustChangePassword": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which\nSnowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special\ncharacters except for underscores (_). Note that if the account name includes underscores, features that do not accept\naccount names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes\nhyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids)\nof the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake\nRegion as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your\norganization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For\ninformation about when you might need to specify region group, see [Region\ngroups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AccountShowOutput:AccountShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ACCOUNTS` for the given account.\n"
                }
            },
            "required": [
                "adminName",
                "edition",
                "email",
                "fullyQualifiedName",
                "gracePeriodInDays",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "secret": true
                },
                "adminRsaPublicKey": {
                    "type": "string"
                },
                "adminUserType": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n",
                    "willReplaceOnChanges": true
                },
                "edition": {
                    "type": "string",
                    "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official\ndocumentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` |\n`BUSINESS_CRITICAL`\n",
                    "willReplaceOnChanges": true
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the\nmaximum is 90 days.\n"
                },
                "isOrgAdmin": {
                    "type": "string",
                    "description": "Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization\nadministrator (i.e. user with the ORGADMIN role) can set the property.\n"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "mustChangePassword": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which\nSnowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special\ncharacters except for underscores (_). Note that if the account name includes underscores, features that do not accept\naccount names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes\nhyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids)\nof the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake\nRegion as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                    "willReplaceOnChanges": true
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your\norganization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For\ninformation about when you might need to specify region group, see [Region\ngroups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "edition",
                "email",
                "gracePeriodInDays"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "secret": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "adminRsaPublicKey": {
                        "type": "string"
                    },
                    "adminUserType": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "edition": {
                        "type": "string",
                        "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official\ndocumentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` |\n`BUSINESS_CRITICAL`\n",
                        "willReplaceOnChanges": true
                    },
                    "email": {
                        "type": "string",
                        "secret": true
                    },
                    "firstName": {
                        "type": "string",
                        "secret": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gracePeriodInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the\nmaximum is 90 days.\n"
                    },
                    "isOrgAdmin": {
                        "type": "string",
                        "description": "Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization\nadministrator (i.e. user with the ORGADMIN role) can set the property.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "secret": true
                    },
                    "mustChangePassword": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which\nSnowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special\ncharacters except for underscores (_). Note that if the account name includes underscores, features that do not accept\naccount names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes\nhyphens (-) for the underscores.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids)\nof the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake\nRegion as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                        "willReplaceOnChanges": true
                    },
                    "regionGroup": {
                        "type": "string",
                        "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your\norganization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For\ninformation about when you might need to specify region group, see [Region\ngroups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AccountShowOutput:AccountShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ACCOUNTS` for the given account.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountAuthenticationPolicyAttachment:AccountAuthenticationPolicyAttachment": {
            "properties": {
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n"
                }
            },
            "required": [
                "authenticationPolicy"
            ],
            "inputProperties": {
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authenticationPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountAuthenticationPolicyAttachment resources.\n",
                "properties": {
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountParameter:AccountParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` |\n`CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` |\n`ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` |\n`ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` |\n`INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` |\n`OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` |\n`PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` |\n`REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER`\n| `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` |\n`CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` |\n`CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` |\n`CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` |\n`ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` |\n`DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` |\n`GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` |\n`JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` |\n`LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` |\n`PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` |\n`ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` |\n`STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` |\n`TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT`\n| `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` |\n`TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` |\n`UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` |\n`DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` |\n`MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` |\n`REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` |\n`SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` |\n`USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` |\n`ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are\nnot supported in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake\ndocumentation. The parameter values are validated in Snowflake.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` |\n`CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` |\n`ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` |\n`ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` |\n`INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` |\n`OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` |\n`PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` |\n`REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER`\n| `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` |\n`CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` |\n`CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` |\n`CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` |\n`ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` |\n`DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` |\n`GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` |\n`JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` |\n`LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` |\n`PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` |\n`ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` |\n`STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` |\n`TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT`\n| `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` |\n`TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` |\n`UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` |\n`DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` |\n`MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` |\n`REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` |\n`SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` |\n`USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` |\n`ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are\nnot supported in the provider.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake\ndocumentation. The parameter values are validated in Snowflake.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` |\n`CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` |\n`ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` |\n`ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` |\n`ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` |\n`INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` |\n`OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` |\n`PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` |\n`REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER`\n| `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` |\n`CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` |\n`CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` |\n`CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` |\n`ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` |\n`DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` |\n`GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` |\n`JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` |\n`LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` |\n`PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` |\n`ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` |\n`STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` |\n`TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT`\n| `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` |\n`TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` |\n`UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` |\n`DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` |\n`MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` |\n`REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` |\n`SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` |\n`USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` |\n`ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are\nnot supported in the provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake\ndocumentation. The parameter values are validated in Snowflake.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountPasswordPolicyAttachment:AccountPasswordPolicyAttachment": {
            "properties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n"
                }
            },
            "required": [
                "passwordPolicy"
            ],
            "inputProperties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicy": {
                        "type": "string",
                        "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountRole:AccountRole": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/alert:Alert": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n"
                }
            },
            "required": [
                "action",
                "condition",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "warehouse"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "condition",
                "database",
                "schema",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                    },
                    "alertSchedule": {
                        "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                        "description": "The schedule for periodically running an alert.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the alert.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the alert will use.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithAuthorizationCodeGrant resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithClientCredentials resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during\nthe OAuth client credentials flow.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithJwtBearer resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAssertionIssuer": {
                        "type": "string"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the\nresource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or\nrefresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an\naccess token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiIntegration:ApiIntegration": {
            "properties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and\nresources within those proxies.\n"
                },
                "apiAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "apiAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n"
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureConsentUrl": {
                    "type": "string"
                },
                "azureMultiTenantAppName": {
                    "type": "string"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the API integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function\nthat relies on it will not work.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique\namong api integrations in your account.\n"
                }
            },
            "required": [
                "apiAllowedPrefixes",
                "apiAwsExternalId",
                "apiAwsIamUserArn",
                "apiGcpServiceAccount",
                "apiProvider",
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and\nresources within those proxies.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n",
                    "willReplaceOnChanges": true
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function\nthat relies on it will not work.\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique\namong api integrations in your account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAllowedPrefixes",
                "apiProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiIntegration resources.\n",
                "properties": {
                    "apiAllowedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and\nresources within those proxies.\n"
                    },
                    "apiAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "apiAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "apiAwsRoleArn": {
                        "type": "string",
                        "description": "ARN of a cloud platform role.\n"
                    },
                    "apiBlockedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                    },
                    "apiGcpServiceAccount": {
                        "type": "string",
                        "description": "The service account used for communication with the Google API Gateway.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key (also called a “subscription key”).\n",
                        "secret": true
                    },
                    "apiProvider": {
                        "type": "string",
                        "description": "Specifies the HTTPS proxy service type.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureAdApplicationId": {
                        "type": "string",
                        "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                    },
                    "azureConsentUrl": {
                        "type": "string"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the API integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function\nthat relies on it will not work.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "googleAudience": {
                        "type": "string",
                        "description": "The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique\namong api integrations in your account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/authenticationPolicy:AuthenticationPolicy": {
            "properties": {
                "authenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following\nvalues: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                },
                "clientTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the\nvalid CLIENT_TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The\nCLIENT_TYPES property of an authentication policy is a best effort method to block user logins based on specific\nclients. It should not be used as the sole control to establish a security boundary.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the authentication policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mfaAuthenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not\nlisted in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                },
                "mfaEnrollment": {
                    "type": "string",
                    "description": "Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When\nREQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT_TYPES parameter must\ninclude SNOWFLAKE_UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "securityIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or\nOAUTH are not in the AUTHENTICATION_METHODS list. All values in the SECURITY_INTEGRATIONS list must be compatible with\nthe values in the AUTHENTICATION_METHODS list. For example, if SECURITY_INTEGRATIONS contains a SAML security\nintegration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all\nsecurity integrations use ALL as parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "authenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following\nvalues: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                },
                "clientTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the\nvalid CLIENT_TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The\nCLIENT_TYPES property of an authentication policy is a best effort method to block user logins based on specific\nclients. It should not be used as the sole control to establish a security boundary.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the authentication policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "mfaAuthenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not\nlisted in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                },
                "mfaEnrollment": {
                    "type": "string",
                    "description": "Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When\nREQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT_TYPES parameter must\ninclude SNOWFLAKE_UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "securityIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or\nOAUTH are not in the AUTHENTICATION_METHODS list. All values in the SECURITY_INTEGRATIONS list must be compatible with\nthe values in the AUTHENTICATION_METHODS list. For example, if SECURITY_INTEGRATIONS contains a SAML security\nintegration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all\nsecurity integrations use ALL as parameter.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthenticationPolicy resources.\n",
                "properties": {
                    "authenticationMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following\nvalues: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                    },
                    "clientTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the\nvalid CLIENT_TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The\nCLIENT_TYPES property of an authentication policy is a best effort method to block user logins based on specific\nclients. It should not be used as the sole control to establish a security boundary.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the authentication policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mfaAuthenticationMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not\nlisted in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                    },
                    "mfaEnrollment": {
                        "type": "string",
                        "description": "Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When\nREQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT_TYPES parameter must\ninclude SNOWFLAKE_UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or\nOAUTH are not in the AUTHENTICATION_METHODS list. All values in the SECURITY_INTEGRATIONS list must be compatible with\nthe values in the AUTHENTICATION_METHODS list. For example, if SECURITY_INTEGRATIONS contains a SAML security\nintegration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all\nsecurity integrations use ALL as parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/cortexSearchService:CortexSearchService": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Creation date for the given Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n"
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "required": [
                "createdOn",
                "database",
                "fullyQualifiedName",
                "name",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "requiredInputs": [
                "database",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CortexSearchService resources.\n",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the Cortex search service.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Creation date for the given Cortex search service.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "type": "string",
                        "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetLag": {
                        "type": "string",
                        "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the Cortex search service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/database:Database": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created\nwon't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary\ndatabase for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts\nto query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created\nwon't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary\ndatabase for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts\nto query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "dropPublicSchemaOnCreation": {
                        "type": "boolean",
                        "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created\nwon't have any effect.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "replication": {
                        "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                        "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary\ndatabase for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts\nto query objects in each secondary (i.e. replica) database.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/databaseRole:DatabaseRole": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed\nwhenever comment field changes.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database role.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed\nwhenever comment field changes.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/dynamicTable:DynamicTable": {
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Time when this dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON_CREATE and ON_SCHEDULE.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is\ncreated.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake\ndecide.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "createdOn",
                "dataTimestamp",
                "database",
                "fullyQualifiedName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "query",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON_CREATE and ON_SCHEDULE.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is\ncreated.\n",
                    "willReplaceOnChanges": true
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n",
                    "willReplaceOnChanges": true
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake\ndecide.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "requiredInputs": [
                "database",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicTable resources.\n",
                "properties": {
                    "automaticClustering": {
                        "type": "boolean",
                        "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                    },
                    "bytes": {
                        "type": "integer",
                        "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                    },
                    "clusterBy": {
                        "type": "string",
                        "description": "The clustering key for the dynamic table.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the dynamic table.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Time when this dynamic table was created.\n"
                    },
                    "dataTimestamp": {
                        "type": "string",
                        "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the dynamic table.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initialize": {
                        "type": "string",
                        "description": "Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON_CREATE and ON_SCHEDULE.\n",
                        "willReplaceOnChanges": true
                    },
                    "isClone": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                    },
                    "isReplica": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                    },
                    "lastSuspendedOn": {
                        "type": "string",
                        "description": "Timestamp of last suspension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is\ncreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Specifies whether to replace the dynamic table if it already exists.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role that owns the dynamic table.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the dynamic table.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshMode": {
                        "type": "string",
                        "description": "INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake\ndecide.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshModeReason": {
                        "type": "string",
                        "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                    },
                    "rows": {
                        "type": "integer",
                        "description": "Number of rows in the table.\n"
                    },
                    "schedulingState": {
                        "type": "string",
                        "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the dynamic table.\n"
                    },
                    "targetLag": {
                        "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                        "description": "Specifies the target lag time for the dynamic table.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the dynamic table.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/emailNotificationIntegration:EmailNotificationIntegration": {
            "properties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "enabled",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailNotificationIntegration resources.\n",
                "properties": {
                    "allowedRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that should receive notifications.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the email integration.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/execute:Execute": {
            "properties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                    "language": {
                        "csharp": {
                            "name": "ExecuteSQL"
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                },
                "queryResults": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an\nerror.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "required": [
                "execute",
                "queryResults",
                "revert"
            ],
            "inputProperties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                    "language": {
                        "csharp": {
                            "name": "ExecuteSQL"
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "requiredInputs": [
                "execute",
                "revert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Execute resources.\n",
                "properties": {
                    "execute": {
                        "type": "string",
                        "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                        "language": {
                            "csharp": {
                                "name": "ExecuteSQL"
                            }
                        }
                    },
                    "query": {
                        "type": "string",
                        "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                    },
                    "queryResults": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an\nerror.\n"
                    },
                    "revert": {
                        "type": "string",
                        "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalFunction:ExternalFunction": {
            "properties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote\nservice expects.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the\nproxy service to Snowflake.\n"
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the external function was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as\nwell as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n"
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n"
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n"
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                }
            },
            "required": [
                "apiIntegration",
                "createdOn",
                "database",
                "fullyQualifiedName",
                "name",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote\nservice expects.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the\nproxy service to Snowflake.\n",
                    "willReplaceOnChanges": true
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as\nwell as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                    "willReplaceOnChanges": true
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n",
                    "willReplaceOnChanges": true
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n",
                    "willReplaceOnChanges": true
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n",
                    "willReplaceOnChanges": true
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "willReplaceOnChanges": true
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiIntegration",
                "database",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalFunction resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "string",
                        "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                        },
                        "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote\nservice expects.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "A description of the external function.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the\nproxy service to Snowflake.\n",
                        "willReplaceOnChanges": true
                    },
                    "contextHeaders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Binds Snowflake context function results to HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the external function was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                        },
                        "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBatchRows": {
                        "type": "integer",
                        "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as\nwell as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the external function when called with null inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "requestTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the request translator function\n",
                        "willReplaceOnChanges": true
                    },
                    "responseTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the response translator function.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n",
                        "willReplaceOnChanges": true
                    },
                    "returnNullAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the data type returned by the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "urlOfProxyAndResource": {
                        "type": "string",
                        "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalOauthIntegration:ExternalOauthIntegration": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see\ndocs.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values\nare (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's\nSnowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the\nACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT\ncommand to set the EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more information\nabout this resource, see docs.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External\nOAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the\nresource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.\nIf removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for\nkey rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is\nrecreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid\nvalues are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If\nremoved from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom\nOAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should\nbe unique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType",
                "fullyQualifiedName",
                "name",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see\ndocs.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values\nare (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's\nSnowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the\nACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT\ncommand to set the EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more information\nabout this resource, see docs.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External\nOAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the\nresource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.\nIf removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for\nkey rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is\nrecreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid\nvalues are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If\nremoved from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom\nOAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should\nbe unique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalOauthIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                    },
                    "externalOauthAllowedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see\ndocs.\n"
                    },
                    "externalOauthAnyRoleMode": {
                        "type": "string",
                        "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values\nare (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                    },
                    "externalOauthAudienceLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's\nSnowflake Account URL\n"
                    },
                    "externalOauthBlockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the\nACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT\ncommand to set the EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more information\nabout this resource, see docs.\n"
                    },
                    "externalOauthIssuer": {
                        "type": "string",
                        "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                    },
                    "externalOauthJwsKeysUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External\nOAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the\nresource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey": {
                        "type": "string",
                        "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers.\nIf removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for\nkey rotation. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthScopeDelimiter": {
                        "type": "string",
                        "description": "Specifies the scope delimiter in the authorization token.\n"
                    },
                    "externalOauthScopeMappingAttribute": {
                        "type": "string",
                        "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is\nrecreated.\n"
                    },
                    "externalOauthSnowflakeUserMappingAttribute": {
                        "type": "string",
                        "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid\nvalues are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                    },
                    "externalOauthTokenUserMappingClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If\nremoved from the config, the resource is recreated.\n"
                    },
                    "externalOauthType": {
                        "type": "string",
                        "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom\nOAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should\nbe unique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalTable:ExternalTable": {
            "properties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is\ncreated.\n"
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE\nOR REPLACE TABLE variant\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or\npopulate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable\nis created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the external table.\n"
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n"
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n"
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fileFormat",
                "fullyQualifiedName",
                "location",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is\ncreated.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE\nOR REPLACE TABLE variant\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or\npopulate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable\nis created.\n",
                    "willReplaceOnChanges": true
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n",
                    "willReplaceOnChanges": true
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "fileFormat",
                "location",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalTable resources.\n",
                "properties": {
                    "autoRefresh": {
                        "type": "boolean",
                        "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is\ncreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopic": {
                        "type": "string",
                        "description": "Specifies the aws sns topic for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                        },
                        "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "copyGrants": {
                        "type": "boolean",
                        "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE\nOR REPLACE TABLE variant\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or\npopulate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable\nis created.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the external table.\n"
                    },
                    "partitionBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies any partition columns to evaluate for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Specifies the file names and/or paths on the external stage to match.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshOnCreate": {
                        "type": "boolean",
                        "description": "Specifies weather to refresh when an external table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableFormat": {
                        "type": "string",
                        "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalVolume:ExternalVolume": {
            "properties": {
                "allowWrites": {
                    "type": "string",
                    "description": "Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use\nSnowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external volume.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput"
                    },
                    "description": "Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.\n"
                },
                "storageLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                    },
                    "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The\norder of the list is important as it impacts the active storage location, and updates will be triggered if it changes.\nNote that not all parameter combinations are valid as they depend on the given storage_provider. Consult [the\ndocs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams)\nfor more details on this.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "showOutputs",
                "storageLocations"
            ],
            "inputProperties": {
                "allowWrites": {
                    "type": "string",
                    "description": "Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use\nSnowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external volume.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "storageLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                    },
                    "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The\norder of the list is important as it impacts the active storage location, and updates will be triggered if it changes.\nNote that not all parameter combinations are valid as they depend on the given storage_provider. Consult [the\ndocs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams)\nfor more details on this.\n"
                }
            },
            "requiredInputs": [
                "storageLocations"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalVolume resources.\n",
                "properties": {
                    "allowWrites": {
                        "type": "string",
                        "description": "Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use\nSnowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external volume.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput"
                        },
                        "description": "Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.\n"
                    },
                    "storageLocations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                        },
                        "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The\norder of the list is important as it impacts the active storage location, and updates will be triggered if it changes.\nNote that not all parameter combinations are valid as they depend on the given storage_provider. Consult [the\ndocs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams)\nfor more details on this.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/failoverGroup:FailoverGroup": {
            "properties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the\nsource account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the\nprimary failover group in case of failover. Expected in the form \u003corg_name\u003e.\u003ctarget_account_name\u003e\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account\nto the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target\naccount. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following\nintegration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS\nINTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the\ntarget account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot\ncontain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\").\nIdentifiers enclosed in double quotes are also case-sensitive.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account.\nThe following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\",\n\"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the\nsource account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the\nprimary failover group in case of failover. Expected in the form \u003corg_name\u003e.\u003ctarget_account_name\u003e\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account\nto the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target\naccount. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following\nintegration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS\nINTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the\ntarget account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                    "willReplaceOnChanges": true
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot\ncontain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\").\nIdentifiers enclosed in double quotes are also case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account.\nThe following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\",\n\"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailoverGroup resources.\n",
                "properties": {
                    "allowedAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the\nsource account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the\nprimary failover group in case of failover. Expected in the form \u003corg_name\u003e.\u003ctarget_account_name\u003e\n"
                    },
                    "allowedDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account\nto the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                    },
                    "allowedIntegrationTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target\naccount. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following\nintegration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS\nINTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                    },
                    "allowedShares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the\ntarget account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                    },
                    "fromReplica": {
                        "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                        "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreEditionCheck": {
                        "type": "boolean",
                        "description": "Allows replicating objects to accounts on lower editions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot\ncontain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\").\nIdentifiers enclosed in double quotes are also case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account.\nThe following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\",\n\"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                    },
                    "replicationSchedule": {
                        "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                        "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/fileFormat:FileFormat": {
            "properties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n"
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to\nnative representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive\ndelimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input\nfile does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or\nunloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is\ncreated.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or\nunloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n"
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate\ndocuments.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "required": [
                "binaryFormat",
                "compression",
                "database",
                "dateFormat",
                "encoding",
                "escape",
                "escapeUnenclosedField",
                "fieldDelimiter",
                "fieldOptionallyEnclosedBy",
                "formatType",
                "fullyQualifiedName",
                "name",
                "nullIfs",
                "recordDelimiter",
                "schema",
                "timeFormat",
                "timestampFormat"
            ],
            "inputProperties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to\nnative representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive\ndelimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input\nfile does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or\nunloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                    "willReplaceOnChanges": true
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is\ncreated.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or\nunloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate\ndocuments.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "requiredInputs": [
                "database",
                "formatType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFormat resources.\n",
                "properties": {
                    "allowDuplicate": {
                        "type": "boolean",
                        "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                    },
                    "binaryAsText": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                    },
                    "binaryFormat": {
                        "type": "string",
                        "description": "Defines the encoding format for binary input or output.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the file format.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "Specifies the current compression algorithm for the data file.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "dateFormat": {
                        "type": "string",
                        "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                    },
                    "disableAutoConvert": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to\nnative representation.\n"
                    },
                    "disableSnowflakeData": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                    },
                    "emptyFieldAsNull": {
                        "type": "boolean",
                        "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive\ndelimiters.\n"
                    },
                    "enableOctal": {
                        "type": "boolean",
                        "description": "Boolean that enables parsing of octal numbers.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                    },
                    "errorOnColumnCountMismatch": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input\nfile does not match the number of columns in the corresponding table.\n"
                    },
                    "escape": {
                        "type": "string",
                        "description": "Single character string used as the escape character for field values.\n"
                    },
                    "escapeUnenclosedField": {
                        "type": "string",
                        "description": "Single character string used as the escape character for unenclosed field values only.\n"
                    },
                    "fieldDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or\nunloaded file (data unloading).\n"
                    },
                    "fieldOptionallyEnclosedBy": {
                        "type": "string",
                        "description": "Character used to enclose strings.\n"
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "Specifies the extension for files unloaded to a stage.\n"
                    },
                    "formatType": {
                        "type": "string",
                        "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreUtf8Errors": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is\ncreated.\n"
                    },
                    "nullIfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String used to convert to and from SQL NULL.\n"
                    },
                    "parseHeader": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                    },
                    "preserveSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                    },
                    "recordDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or\nunloaded file (data unloading).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipBlankLines": {
                        "type": "boolean",
                        "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                    },
                    "skipByteOrderMark": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                    },
                    "skipHeader": {
                        "type": "integer",
                        "description": "Number of lines at the start of the file to skip.\n"
                    },
                    "stripNullValues": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                    },
                    "stripOuterArray": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                    },
                    "stripOuterElement": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate\ndocuments.\n"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                    },
                    "timestampFormat": {
                        "type": "string",
                        "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                    },
                    "trimSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to remove white space from fields.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionJava:FunctionJava": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Java source code. For more information, see [Introduction\nto Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the\nfile is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface)\nis not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java\nUDFs can also read non-JAR files. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameter:FunctionJavaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is\nnot set, Java JDK 11 is used.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Java source code. For more information, see [Introduction\nto Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the\nfile is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface)\nis not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java\nUDFs can also read non-JAR files. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is\nnot set, Java JDK 11 is used.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionJava resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                        },
                        "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Java source code. For more information, see [Introduction\nto Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the\nfile is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface)\nis not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java\nUDFs can also read non-JAR files. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaParameter:FunctionJavaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is\nnot set, Java JDK 11 is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the\nHANDLER value should be the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionJavascript:FunctionJavascript": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be JavaScript source code. For more information, see\n[Introduction to JavaScript\nUDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionDefinition",
                "functionLanguage",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be JavaScript source code. For more information, see\n[Introduction to JavaScript\nUDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "functionDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionJavascript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                        },
                        "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be JavaScript source code. For more information, see\n[Introduction to JavaScript\nUDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionPython:FunctionPython": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Python source code. For more information, see [Introduction\nto Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the\nHANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use\nthe function name alone. When the handler code is referenced at a stage, this value should be qualified with the module\nname, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should\nbe the name of a handler class.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.\nPython UDFs can also read non-Python files, such as text files. For an example, see [Reading a\nfile](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n"
                },
                "isAggregate": {
                    "type": "string",
                    "description": "Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see\n[Python user-defined aggregate\nfunctions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of packages required as dependencies. The value should be of the form\n`package_name==version_number`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameter:FunctionPythonParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Python source code. For more information, see [Introduction\nto Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the\nHANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use\nthe function name alone. When the handler code is referenced at a stage, this value should be qualified with the module\nname, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should\nbe the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.\nPython UDFs can also read non-Python files, such as text files. For an example, see [Reading a\nfile](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n",
                    "willReplaceOnChanges": true
                },
                "isAggregate": {
                    "type": "string",
                    "description": "Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see\n[Python user-defined aggregate\nfunctions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of packages required as dependencies. The value should be of the form\n`package_name==version_number`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionPython resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                        },
                        "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Python source code. For more information, see [Introduction\nto Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the\nHANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use\nthe function name alone. When the handler code is referenced at a stage, this value should be qualified with the module\nname, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should\nbe the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file.\nPython UDFs can also read non-Python files, such as text files. For an example, see [Reading a\nfile](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n",
                        "willReplaceOnChanges": true
                    },
                    "isAggregate": {
                        "type": "string",
                        "description": "Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see\n[Python user-defined aggregate\nfunctions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of packages required as dependencies. The value should be of the form\n`package_name==version_number`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonParameter:FunctionPythonParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionScala:FunctionScala": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction\nto Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might\ncontain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java\nNative Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java\nbytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameter:FunctionScalaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction\nto Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might\ncontain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java\nNative Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java\nbytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionScala resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                        },
                        "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis function’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction\nto Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on\nthis field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might\ncontain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java\nNative Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java\nbytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in\nIMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).\nConsult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form\n`package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaParameter:FunctionScalaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER\nvalue should be a method name, as in the following form: `MyClass.myMethod`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionSql:FunctionSql": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to\nSQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameter:FunctionSqlParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionDefinition",
                "functionLanguage",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                    },
                    "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to\nSQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "functionDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionSql resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                        },
                        "description": "List of the arguments for the function. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).\nFor more information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;\ndo not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to\nSQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created\nbecause UDFs are identified and resolved by the combination of the name and argument types. Check the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlParameter:FunctionSqlParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |\n`IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar\nUDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a\ntable UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult\nthe [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantAccountRole:GrantAccountRole": {
            "properties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more\ninformation about this resource, see docs.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this\nresource, see docs.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource,\nsee docs.\n"
                }
            },
            "required": [
                "roleName"
            ],
            "inputProperties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more\ninformation about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource,\nsee docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantAccountRole resources.\n",
                "properties": {
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more\ninformation about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource,\nsee docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantApplicationRole:GrantApplicationRole": {
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n"
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n"
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted. For more information about this\nresource, see docs.\n"
                }
            },
            "required": [
                "applicationRoleName"
            ],
            "inputProperties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n",
                    "willReplaceOnChanges": true
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantApplicationRole resources.\n",
                "properties": {
                    "applicationName": {
                        "type": "string",
                        "description": "The fully qualified name of the application on which application role will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationRoleName": {
                        "type": "string",
                        "description": "Specifies the identifier for the application role to grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentAccountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role on which application role will be granted. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantDatabaseRole:GrantDatabaseRole": {
            "properties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about\nthis resource, see docs.\n"
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\nFor more information about this resource, see docs.\n"
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For\nmore information about this resource, see docs.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about\nthis resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\nFor more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For\nmore information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabaseRole resources.\n",
                "properties": {
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about\nthis resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentDatabaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles.\nFor more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For\nmore information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "shareName": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantOwnership:GrantOwnership": {
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n"
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n"
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to\na new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For\nmore information head over to [Snowflake\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n"
                }
            },
            "required": [
                "on"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                    "willReplaceOnChanges": true
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to\na new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For\nmore information head over to [Snowflake\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "on"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantOwnership resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                        "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                        "willReplaceOnChanges": true
                    },
                    "outboundPrivileges": {
                        "type": "string",
                        "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to\na new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For\nmore information head over to [Snowflake\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole": {
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n"
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which\nis aligned with the Snowsight behavior.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the privileges will be granted on the account.\n"
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Specifies whether the grantee can grant the privileges to other users.\n"
                }
            },
            "required": [
                "accountRoleName"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which\nis aligned with the Snowsight behavior.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the privileges will be granted on the account.\n",
                    "willReplaceOnChanges": true
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Specifies whether the grantee can grant the privileges to other users.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToAccountRole resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which\nis aligned with the Snowsight behavior.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "If true, the privileges will be granted on the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccountObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                        "description": "Specifies the account object on which privileges will be granted\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Specifies whether the grantee can grant the privileges to other users.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole": {
            "properties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "If specified, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "If specified, allows the recipient role to grant the privileges to other roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToDatabaseRole resources.\n",
                "properties": {
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "Grant all privileges on the database role.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the\nalways_apply field.\n"
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this\nresource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the database role.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "If specified, allows the recipient role to grant the privileges to other roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare": {
            "properties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n"
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n"
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource,\nsee docs.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see\ndocs.\n"
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see\ndocs.\n"
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see\ndocs.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges:\nhttps://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n"
                }
            },
            "required": [
                "privileges",
                "toShare"
            ],
            "inputProperties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                    "willReplaceOnChanges": true
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                    "willReplaceOnChanges": true
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                    "willReplaceOnChanges": true
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                    "willReplaceOnChanges": true
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges:\nhttps://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privileges",
                "toShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToShare resources.\n",
                "properties": {
                    "onAllTablesInSchema": {
                        "type": "string",
                        "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onFunction": {
                        "type": "string",
                        "description": "The fully qualified name of the function on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "type": "string",
                        "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource,\nsee docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTable": {
                        "type": "string",
                        "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTag": {
                        "type": "string",
                        "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onView": {
                        "type": "string",
                        "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the share. See available list of privileges:\nhttps://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                    },
                    "toShare": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see\ndocs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/legacyServiceUser:LegacyServiceUser": {
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LegacyServiceUser resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "mustChangePassword": {
                        "type": "string",
                        "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/managedAccount:ManagedAccount": {
            "properties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account\nadministrator for the account.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password\npolicy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "Cloud in which the managed account is located.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the managed account was created.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "locator": {
                    "type": "string",
                    "description": "Display name of the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Snowflake Region in which the managed account is located.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL for accessing the managed account, particularly through the web interface.\n"
                }
            },
            "required": [
                "adminName",
                "adminPassword",
                "cloud",
                "createdOn",
                "fullyQualifiedName",
                "locator",
                "name",
                "region",
                "url"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account\nadministrator for the account.\n",
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password\npolicy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "adminPassword"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedAccount resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account\nadministrator for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Password for the initial user in the managed account. Check [Snowflake-provided password\npolicy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "Cloud in which the managed account is located.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the managed account was created.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "locator": {
                        "type": "string",
                        "description": "Display name of the managed account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the managed account; must be unique for your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Snowflake Region in which the managed account is located.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for accessing the managed account, particularly through the web interface.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/maskingPolicy:MaskingPolicy": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type\nvalues to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the\nfirst column argument in a conditional masking policy.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank\ncharacters with a space. This can lead to false positives in cases where a change in case or run of whitespace is\nsemantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected\nby a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy\nis created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more\ninformation about data types, check [Snowflake\ndocs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW MASKING POLICIES` for the given masking policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "returnDataType",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type\nvalues to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the\nfirst column argument in a conditional masking policy.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank\ncharacters with a space. This can lead to false positives in cases where a change in case or run of whitespace is\nsemantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected\nby a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy\nis created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more\ninformation about data types, check [Snowflake\ndocs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "returnDataType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                        },
                        "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type\nvalues to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the\nfirst column argument in a conditional masking policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank\ncharacters with a space. This can lead to false positives in cases where a change in case or run of whitespace is\nsemantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the masking policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                    },
                    "exemptOtherPolicies": {
                        "type": "string",
                        "description": "Specifies whether the row access policy or conditional masking policy can reference a column that is already protected\nby a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options\nare: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means\nto use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy\nis created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "returnDataType": {
                        "type": "string",
                        "description": "The return data type must match the input data type of the first column that is specified as an input column. For more\ninformation about data types, check [Snowflake\ndocs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW MASKING POLICIES` for the given masking policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/materializedView:MaterializedView": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "statement",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "Specifies that the view is secure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Overwrites the View if it exists.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicy:NetworkPolicy": {
            "properties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to\nSnowflake. For more information about this resource, see docs.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add\n`0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP\naddresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to\nSnowflake. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to\nSnowflake. For more information about this resource, see docs.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add\n`0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP\naddresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to\nSnowflake. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicy resources.\n",
                "properties": {
                    "allowedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                    },
                    "allowedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to\nSnowflake. For more information about this resource, see docs.\n"
                    },
                    "blockedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add\n`0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP\naddresses to `allowed_ip_list`.\n"
                    },
                    "blockedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to\nSnowflake. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network policy.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment": {
            "properties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                },
                "setForAccount": {
                    "type": "boolean"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "required": [
                "networkPolicyName"
            ],
            "inputProperties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                    "willReplaceOnChanges": true
                },
                "setForAccount": {
                    "type": "boolean"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "requiredInputs": [
                "networkPolicyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicyAttachment resources.\n",
                "properties": {
                    "networkPolicyName": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "setForAccount": {
                        "type": "boolean"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which users the network policy should be attached to\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkRule:NetworkRule": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see\nhttps://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is\ncreated.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed\nvalues are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule;\nsee https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type\nof network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for\ndetails.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "mode",
                "name",
                "schema",
                "type",
                "valueLists"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see\nhttps://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is\ncreated.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed\nvalues are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule;\nsee https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type\nof network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for\ndetails.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mode",
                "schema",
                "type",
                "valueLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRule resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network rule.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see\nhttps://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is\ncreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed\nvalues are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule;\nsee https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type\nof network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for\ndetails.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/notificationIntegration:NotificationIntegration": {
            "properties": {
                "awsSnsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                },
                "awsSnsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE_STORAGE_QUEUE\nprovider\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE_STORAGE_QUEUE provider\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the notification integration was created.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gcpPubsubServiceAccount": {
                    "type": "string",
                    "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n"
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n"
                },
                "name": {
                    "type": "string"
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE_STORAGE_QUEUE, AWS_SNS, GCP_PUBSUB; AWS_SQS is\ndeprecated and will be removed in the future provider versions)\n"
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "required": [
                "awsSnsExternalId",
                "awsSnsIamUserArn",
                "awsSqsExternalId",
                "awsSqsIamUserArn",
                "createdOn",
                "fullyQualifiedName",
                "gcpPubsubServiceAccount",
                "name",
                "notificationProvider"
            ],
            "inputProperties": {
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE_STORAGE_QUEUE\nprovider\n",
                    "willReplaceOnChanges": true
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE_STORAGE_QUEUE provider\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                    "willReplaceOnChanges": true
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE_STORAGE_QUEUE, AWS_SNS, GCP_PUBSUB; AWS_SQS is\ndeprecated and will be removed in the future provider versions)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "requiredInputs": [
                "notificationProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationIntegration resources.\n",
                "properties": {
                    "awsSnsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                    },
                    "awsSnsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "awsSnsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                    },
                    "awsSqsArn": {
                        "type": "string",
                        "description": "AWS SQS queue ARN for notification integration to connect to\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "azureStorageQueuePrimaryUri": {
                        "type": "string",
                        "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE_STORAGE_QUEUE\nprovider\n",
                        "willReplaceOnChanges": true
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE_STORAGE_QUEUE provider\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the integration\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the notification integration was created.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gcpPubsubServiceAccount": {
                        "type": "string",
                        "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                    },
                    "gcpPubsubSubscriptionName": {
                        "type": "string",
                        "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcpPubsubTopicName": {
                        "type": "string",
                        "description": "The topic id that Snowflake will use to push notifications.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "notificationProvider": {
                        "type": "string",
                        "description": "The third-party cloud message queuing service (supported values: AZURE_STORAGE_QUEUE, AWS_SNS, GCP_PUBSUB; AWS_SQS is\ndeprecated and will be removed in the future provider versions)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of integration\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an\nauthorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more\ninformation about this resource, see docs.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "If true, allows setting oauth_redirect_uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options\nare: `PUBLIC` | `CONFIDENTIAL`.\n"
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more\ninformation about this resource, see docs.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClientType",
                "oauthRedirectUri",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an\nauthorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more\ninformation about this resource, see docs.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "If true, allows setting oauth_redirect_uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options\nare: `PUBLIC` | `CONFIDENTIAL`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more\ninformation about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "oauthClientType",
                "oauthRedirectUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForCustomClients resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an\nauthorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more\ninformation about this resource, see docs.\n"
                    },
                    "oauthAllowNonTlsRedirectUri": {
                        "type": "string",
                        "description": "If true, allows setting oauth_redirect_uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                    },
                    "oauthClientRsaPublicKey": {
                        "type": "string"
                    },
                    "oauthClientRsaPublicKey2": {
                        "type": "string"
                    },
                    "oauthClientType": {
                        "type": "string",
                        "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options\nare: `PUBLIC` | `CONFIDENTIAL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthEnforcePkce": {
                        "type": "string",
                        "description": "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "preAuthorizedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more\ninformation about this resource, see docs.\n"
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP`\n| `TABLEAU_SERVER`.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be\nonly set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClient",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP`\n| `TABLEAU_SERVER`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be\nonly set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                }
            },
            "requiredInputs": [
                "oauthClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForPartnerApplications resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list\nincludes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the\nALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST account parameter to FALSE. For more\ninformation about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthClient": {
                        "type": "string",
                        "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP`\n| `TABLEAU_SERVER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be\nonly set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies how long refresh tokens should be valid (in seconds). OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being\nopened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/objectParameter:ObjectParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object\nparameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n"
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to\nsetting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object\ntypes](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the\nresource will default to setting the object parameter at account level.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object\nparameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                    "willReplaceOnChanges": true
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to\nsetting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object\ntypes](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the\nresource will default to setting the object parameter at account level.\n",
                    "willReplaceOnChanges": true
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of object parameter. Valid values are those in [object\nparameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                        "willReplaceOnChanges": true
                    },
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                        },
                        "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to\nsetting the object parameter at account level.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Type of object to which the parameter applies. Valid values are those in [object\ntypes](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the\nresource will default to setting the object parameter at account level.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "If true, the object parameter will be set on the account level.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/passwordPolicy:PasswordPolicy": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "history": {
                    "type": "integer",
                    "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when\na user updates their password value. The current password value does not count towards the history. When you increase\nthe history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values\nup to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake\nstores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password\nretries (i.e. PASSWORD_MAX_RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value\nof zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this\nvalue for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your\ninternal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the\nsum of PASSWORD_MIN_LENGTH, PASSWORD_MIN_UPPER_CASE_CHARS, and PASSWORD_MIN_LOWER_CASE_CHARS. Supported range: 8 to 256,\ninclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10,\ninclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported\nrange: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "history": {
                    "type": "integer",
                    "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when\na user updates their password value. The current password value does not count towards the history. When you increase\nthe history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values\nup to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake\nstores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password\nretries (i.e. PASSWORD_MAX_RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value\nof zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this\nvalue for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your\ninternal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the\nsum of PASSWORD_MIN_LENGTH, PASSWORD_MIN_UPPER_CASE_CHARS, and PASSWORD_MIN_LOWER_CASE_CHARS. Supported range: 8 to 256,\ninclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10,\ninclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported\nrange: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordPolicy resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "history": {
                        "type": "integer",
                        "description": "Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when\na user updates their password value. The current password value does not count towards the history. When you increase\nthe history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values\nup to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake\nstores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                    },
                    "ifNotExists": {
                        "type": "boolean",
                        "description": "Prevent overwriting a previous password policy with the same name.\n"
                    },
                    "lockoutTimeMins": {
                        "type": "integer",
                        "description": "Specifies the number of minutes the user account will be locked after exhausting the designated number of password\nretries (i.e. PASSWORD_MAX_RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                    },
                    "maxAgeDays": {
                        "type": "integer",
                        "description": "Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value\nof zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this\nvalue for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your\ninternal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the\nsum of PASSWORD_MIN_LENGTH, PASSWORD_MIN_UPPER_CASE_CHARS, and PASSWORD_MIN_LOWER_CASE_CHARS. Supported range: 8 to 256,\ninclusive. Default: 256\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10,\ninclusive. Default: 5\n"
                    },
                    "minAgeDays": {
                        "type": "integer",
                        "description": "Specifies the number of days the user must wait before a recently changed password can be changed again. Supported\nrange: 0 to 999, inclusive. Default: 0\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                    },
                    "minLowerCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                    },
                    "minNumericChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                    },
                    "minSpecialChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                    },
                    "minUpperCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive.\nDefault: 1\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the password policy; must be unique for your account.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Whether to override a previous password policy with the same name.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/pipe:Pipe": {
            "properties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                },
                "notificationChannel": {
                    "type": "string",
                    "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the pipe.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n"
                }
            },
            "required": [
                "copyStatement",
                "database",
                "fullyQualifiedName",
                "name",
                "notificationChannel",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "copyStatement",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipe resources.\n",
                "properties": {
                    "autoIngest": {
                        "type": "boolean",
                        "description": "Specifies a auto_ingest param for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the pipe.\n"
                    },
                    "copyStatement": {
                        "type": "string",
                        "description": "Specifies the copy statement for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "integration": {
                        "type": "string",
                        "description": "Specifies an integration for the pipe.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationChannel": {
                        "type": "string",
                        "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the pipe.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/primaryConnection:PrimaryConnection": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the connection.\n"
                },
                "enableFailoverToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a\nsecondary connection for this primary connection can be promoted to serve as the primary connection. Include your\norganization name for each account in the list. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a primary connection, the name must be unique\nacross connection names and account names in the organization. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput"
                    },
                    "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "isPrimary",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the connection.\n"
                },
                "enableFailoverToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a\nsecondary connection for this primary connection can be promoted to serve as the primary connection. Include your\norganization name for each account in the list. For more information about this resource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a primary connection, the name must be unique\nacross connection names and account names in the organization. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrimaryConnection resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the connection.\n"
                    },
                    "enableFailoverToAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a\nsecondary connection for this primary connection can be promoted to serve as the primary connection. Include your\norganization name for each account in the list. For more information about this resource, see docs.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isPrimary": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a primary connection, the name must be unique\nacross connection names and account names in the organization. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput"
                        },
                        "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureJava:ProcedureJava": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For\nmore information, see [Java (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Java Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For\nmore information, see [Java (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Java Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureJava resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For\nmore information, see [Java (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff\non this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a\nchange in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Java Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form\n`com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the\nobject or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureJavascript:ProcedureJavascript": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source\ncode. For more information, see\n[JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL and JavaScript data type\nmapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureDefinition",
                "procedureLanguage",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source\ncode. For more information, see\n[JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL and JavaScript data type\nmapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "procedureDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureJavascript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source\ncode. For more information, see\n[JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL and JavaScript data type\nmapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedurePython:ProcedurePython": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or\nreferenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from\na stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will\nbe on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference\nvariables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique\nname, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Python source code.\nFor more information, see [Python (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Python Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or\nreferenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from\na stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will\nbe on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference\nvariables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique\nname, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Python source code.\nFor more information, see [Python (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Python Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedurePython resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or\nreferenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from\na stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will\nbe on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference\nvariables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique\nname, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Python source code.\nFor more information, see [Python (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Python Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureScala:ProcedureScala": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code.\nFor more information, see [Scala (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Scala Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code.\nFor more information, see [Scala (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Scala Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureScala resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access\nintegrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for\nthis procedure’s handler code to access external networks. An external access integration specifies [network\nrules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and\n[secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials\n(if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your\ncode depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure\nwith a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.\nThe IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in\nthe IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution\nenvironment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package`\nattribute. For more information about Snowpark, see [Snowpark\nAPI](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code.\nFor more information, see [Scala (using\nSnowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate\npermadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases\nwhere a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL-Scala Data Type\nMappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)).\nFor `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the\nreturned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run\ntime), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you\ncan use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you\nspecify here must be allowed by the [external access\nintegration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of\nthis CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about\nSnowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following\nform: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package\ncontaining the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureSql:ProcedureSql": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For\nmore information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To\nmitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives\nin cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL data\ntype](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ]\n] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types.\nOtherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e.\n`TABLE ()`).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureDefinition",
                "procedureLanguage",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For\nmore information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To\nmitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives\nin cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL data\ntype](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ]\n] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types.\nOtherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e.\n`TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "procedureDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureSql resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the\n[docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For\nmore information, check [ENABLE_CONSOLE_OUTPUT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored\nprocedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the\nstatement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights\nprocedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights\nprocedure. For more information, see [Understanding caller’s rights and owner’s rights stored\nprocedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are\n(case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive\nInformation with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).\nAvailable options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\"\nthere which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created\nbecause stored procedures are [identified and resolved by the combination of the name and argument\ntypes](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).\nDue to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON\nNULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are\nadded by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For\nmore information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To\nmitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives\nin cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type\nthat corresponds to the type of the language that you are using (see [SQL data\ntype](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ]\n] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types.\nOtherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e.\n`TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/resourceMonitor:ResourceMonitor": {
            "properties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses\nassigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be\nat 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` |\n`WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If\nyou specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from\nthe config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to\nSnowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the\nnotify_users field will be notified (to receive the notification they should have notifications enabled). Values over\n100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more\ninformation about this resource, see docs.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                    },
                    "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a\n`start_timestamp` for a resource monitor, you must also set `frequency`. After removing this field from the config, the\npreviously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation\nand the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this\naction sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new\nqueries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition,\nthis action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses\nassigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be\nat 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` |\n`WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If\nyou specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from\nthe config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to\nSnowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the\nnotify_users field will be notified (to receive the notification they should have notifications enabled). Values over\n100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more\ninformation about this resource, see docs.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a\n`start_timestamp` for a resource monitor, you must also set `frequency`. After removing this field from the config, the\npreviously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation\nand the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this\naction sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new\nqueries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition,\nthis action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceMonitor resources.\n",
                "properties": {
                    "creditQuota": {
                        "type": "integer",
                        "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses\nassigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be\nat 100% of quota.\n"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` |\n`WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If\nyou specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from\nthe config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to\nSnowflake limitation and the lack of unset functionality for this parameter.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "notifyTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the\nnotify_users field will be notified (to receive the notification they should have notifications enabled). Values over\n100 are supported.\n"
                    },
                    "notifyUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more\ninformation about this resource, see docs.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                        },
                        "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a\n`start_timestamp` for a resource monitor, you must also set `frequency`. After removing this field from the config, the\npreviously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation\nand the lack of unset functionality for this parameter.\n"
                    },
                    "suspendImmediateTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this\naction sends a notification to all users who have enabled notifications for themselves.\n"
                    },
                    "suspendTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching\nthis value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new\nqueries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition,\nthis action sends a notification to all users who have enabled notifications for themselves.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/rowAccessPolicy:RowAccessPolicy": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to\ndetermine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be\nprotected by the row access policy. If any argument name or type is changed, the resource is recreated.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access\npolicy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to\ndetermine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be\nprotected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access\npolicy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RowAccessPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                        },
                        "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to\ndetermine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be\nprotected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this\nfield, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in\ncase or run of whitespace is semantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the row access policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access\npolicy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/saml2Integration:Saml2Integration": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security\nintegration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake\nlimitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from\nnon-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n"
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button\non the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or\n\"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the\nSnowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access\nSnowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake\nto the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the\nidentity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are:\n\"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to\nuse the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web\ninterface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML\nSubject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are:\n`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow\nSAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication\nresponse back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when\ninitiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message\nindicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the\naccount name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,\nSnowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in\nURLs, the underscore in the account name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value\nfrom non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a\nSAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending\n-----END CERTIFICATE----- markers.\n",
                    "secret": true
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security\nintegration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake\nlimitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from\nnon-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button\non the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or\n\"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the\nSnowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access\nSnowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake\nto the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the\nidentity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are:\n\"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to\nuse the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web\ninterface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML\nSubject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are:\n`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow\nSAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication\nresponse back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when\ninitiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message\nindicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the\naccount name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,\nSnowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in\nURLs, the underscore in the account name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value\nfrom non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a\nSAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending\n-----END CERTIFICATE----- markers.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Saml2Integration resources.\n",
                "properties": {
                    "allowedEmailPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security\nintegration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake\nlimitations.\n"
                    },
                    "allowedUserDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from\nnon-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the\nvalue is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for\nthis value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be\nunique among security integrations in your account. Due to technical limitations (read more here), avoid using the\nfollowing characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "saml2EnableSpInitiated": {
                        "type": "string",
                        "description": "The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button\non the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or\n\"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the\nSnowflake default for this value.\n"
                    },
                    "saml2ForceAuthn": {
                        "type": "string",
                        "description": "The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access\nSnowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake\nto the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the\nidentity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are:\n\"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to\nuse the Snowflake default for this value.\n"
                    },
                    "saml2Issuer": {
                        "type": "string",
                        "description": "The string containing the IdP EntityID / Issuer.\n"
                    },
                    "saml2PostLogoutRedirectUrl": {
                        "type": "string",
                        "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web\ninterface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                    },
                    "saml2Provider": {
                        "type": "string",
                        "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                    },
                    "saml2RequestedNameidFormat": {
                        "type": "string",
                        "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML\nSubject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are:\n`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` |\n`urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` |\n`urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                    },
                    "saml2SignRequest": {
                        "type": "string",
                        "description": "The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow\nSAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the\nprovider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2SnowflakeAcsUrl": {
                        "type": "string",
                        "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication\nresponse back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when\ninitiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message\nindicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the\naccount name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SnowflakeIssuerUrl": {
                        "type": "string",
                        "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified,\nSnowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in\nURLs, the underscore in the account name must be converted to a hyphen. See\n[docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SpInitiatedLoginPageLabel": {
                        "type": "string",
                        "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value\nfrom non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "saml2SsoUrl": {
                        "type": "string",
                        "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a\nSAML AuthnRequest message.\n"
                    },
                    "saml2X509Cert": {
                        "type": "string",
                        "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending\n-----END CERTIFICATE----- markers.\n",
                        "secret": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/schema:Schema": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient\nprivileges, e.g. grant_ownership on all objects in the schema.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name\nis `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is\nused to match the desired state. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a\ndifferent role. For more information, check [PIPE_EXECUTION_PAUSED\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "database",
                "defaultDdlCollation",
                "describeOutputs",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "parameters",
                "pipeExecutionPaused",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "showOutputs",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name\nis `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is\nused to match the desired state. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a\ndifferent role. For more information, check [PIPE_EXECUTION_PAUSED\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the schema.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient\nprivileges, e.g. grant_ownership on all objects in the schema.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "string",
                        "description": "Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name\nis `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is\nused to match the desired state. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                    },
                    "pipeExecutionPaused": {
                        "type": "boolean",
                        "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a\ndifferent role. For more information, check [PIPE_EXECUTION_PAUSED\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "withManagedAccess": {
                        "type": "string",
                        "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/scimIntegration:ScimIntegration": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see\ndocs.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into\nSnowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are:\n`OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n"
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "syncPassword": {
                    "type": "string",
                    "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the\nAPI request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "runAsRole",
                "scimClient",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see\ndocs.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into\nSnowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are:\n`OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                    "willReplaceOnChanges": true
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                    "willReplaceOnChanges": true
                },
                "syncPassword": {
                    "type": "string",
                    "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the\nAPI request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "runAsRole",
                "scimClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScimIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specify whether the security integration is enabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see\ndocs.\n"
                    },
                    "runAsRole": {
                        "type": "string",
                        "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into\nSnowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are:\n`OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "scimClient": {
                        "type": "string",
                        "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "syncPassword": {
                        "type": "string",
                        "description": "Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the\nAPI request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When\nthe value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default\nfor this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secondaryConnection:SecondaryConnection": {
            "properties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secondary connection.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates if the connection primary status has been changed. If change is detected, resource will be recreated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the\nname of its primary connection. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput"
                    },
                    "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                }
            },
            "required": [
                "asReplicaOf",
                "fullyQualifiedName",
                "isPrimary",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more\ninformation about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secondary connection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the\nname of its primary connection. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "asReplicaOf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryConnection resources.\n",
                "properties": {
                    "asReplicaOf": {
                        "type": "string",
                        "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more\ninformation about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secondary connection.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isPrimary": {
                        "type": "boolean",
                        "description": "Indicates if the connection primary status has been changed. If change is detected, resource will be recreated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may\nonly contain letters, decimal digits (0-9), and underscores (_). For a secondary connection, the name must match the\nname of its primary connection. Due to technical limitations (read more here), avoid using the following characters:\n`|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput"
                        },
                        "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secondaryDatabase:SecondaryDatabase": {
            "properties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "asReplicaOf",
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "requiredInputs": [
                "asReplicaOf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryDatabase resources.\n",
                "properties": {
                    "asReplicaOf": {
                        "type": "string",
                        "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well\nas specifying the default Time Travel retention time for all schemas created in the database. For more details, see\n[Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional\nstorage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of\na data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for\ntables in the database to prevent streams on the tables from becoming stale. For a detailed description of this\nparameter, see\n[MAX_DATA_EXTENSION_TIME_IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication\nand Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary\ndatabase the same name as its primary database. This practice supports referencing fully-qualified objects (i.e.\n'\u003cdb\u003e.\u003cschema\u003e.\u003cobject\u003e') by other objects in the same database, such as querying a fully-qualified table name in a\nview. If a secondary database has a different name from the primary database, then these object references would break\nin the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`,\n`.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithAuthorizationCodeGrant:SecretWithAuthorizationCodeGrant": {
            "properties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthRefreshToken": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string",
                    "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD,\nYYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \u003ctimezone\u003e\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "apiAuthentication",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthRefreshToken",
                "oauthRefreshTokenExpiryTime",
                "schema",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthRefreshToken": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string",
                    "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD,\nYYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \u003ctimezone\u003e\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAuthentication",
                "database",
                "oauthRefreshToken",
                "oauthRefreshTokenExpiryTime",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithAuthorizationCodeGrant resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "type": "string",
                        "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthRefreshToken": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenExpiryTime": {
                        "type": "string",
                        "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD,\nYYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \u003ctimezone\u003e\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Specifies the username value to store in the secret.\n",
                    "secret": true
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "password",
                "schema",
                "secretType",
                "showOutputs",
                "username"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Specifies the username value to store in the secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "database",
                "password",
                "schema",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithBasicAuthentication resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Specifies the username value to store in the secret.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithClientCredentials:SecretWithClientCredentials": {
            "properties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration\nduring the OAuth client credentials flow.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "apiAuthentication",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthScopes",
                "schema",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration\nduring the OAuth client credentials flow.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAuthentication",
                "database",
                "oauthScopes",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithClientCredentials resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "type": "string",
                        "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more\ninformation about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration\nduring the OAuth client credentials flow.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithGenericString:SecretWithGenericString": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "secretString": {
                    "type": "string",
                    "secret": true
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "secretString",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secretString": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "secretString"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithGenericString resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretString": {
                        "type": "string",
                        "secret": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sequence:Sequence": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n"
                },
                "nextValue": {
                    "type": "integer",
                    "description": "The increment sequence interval.\n"
                },
                "ordering": {
                    "type": "string",
                    "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "nextValue",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n",
                    "willReplaceOnChanges": true
                },
                "ordering": {
                    "type": "string",
                    "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sequence resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the sequence.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "increment": {
                        "type": "integer",
                        "description": "The amount the sequence will increase by each time it is used\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for the sequence.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextValue": {
                        "type": "integer",
                        "description": "The increment sequence interval.\n",
                        "willReplaceOnChanges": true
                    },
                    "ordering": {
                        "type": "string",
                        "description": "The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/serviceUser:ServiceUser": {
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameter:ServiceUserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceUser resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceUserParameter:ServiceUserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/share:Share": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of\n'organization_name.account_name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of\n'organization_name.account_name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Share resources.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of\n'organization_name.account_name\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sharedDatabase:SharedDatabase": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fromShare",
                "fullyQualifiedName",
                "logLevel",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                    "willReplaceOnChanges": true
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                    "willReplaceOnChanges": true
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                    "willReplaceOnChanges": true
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                    "willReplaceOnChanges": true
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                    "willReplaceOnChanges": true
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                    "willReplaceOnChanges": true
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                    "willReplaceOnChanges": true
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fromShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedDatabase resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see\n[CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on\nschema or table level. For more information, see [collation\nspecification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                        "willReplaceOnChanges": true
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see\n[EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                        "willReplaceOnChanges": true
                    },
                    "fromShare": {
                        "type": "string",
                        "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of\n`\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid\noptions are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are\ningested. For more information, see\n[LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see\n[QUOTED_IDENTIFIERS_IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                        "willReplaceOnChanges": true
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for\nan Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information,\nsee [REPLACE_INVALID_CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE\nOPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with\nthird-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best\ntable performance within Snowflake. For more information, see\n[STORAGE_SERIALIZATION_POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                        "willReplaceOnChanges": true
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more\ninformation, see\n[SUSPEND_TASK_AFTER_NUM_FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                        "willReplaceOnChanges": true
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see\n[TASK_AUTO_RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON_EVENT OFF]. For information\nabout levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see\n[USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see\n[USER_TASK_TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stage:Stage": {
            "properties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format:\n\u0026lt;snowflakeAccount\u0026gt;_SFCRole=\u0026lt;snowflakeRoleId\u0026gt;_\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n"
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n"
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your\naccount.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage\nto a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "required": [
                "awsExternalId",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "snowflakeIamUser"
            ],
            "inputProperties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format:\n\u0026lt;snowflakeAccount\u0026gt;_SFCRole=\u0026lt;snowflakeRoleId\u0026gt;_\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n",
                    "willReplaceOnChanges": true
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your\naccount.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage\nto a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stage resources.\n",
                "properties": {
                    "awsExternalId": {
                        "type": "string",
                        "description": "A unique ID assigned to the specific stage. The ID has the following format:\n\u0026lt;snowflakeAccount\u0026gt;_SFCRole=\u0026lt;snowflakeRoleId\u0026gt;_\u0026lt;randomId\u0026gt;\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stage.\n"
                    },
                    "copyOptions": {
                        "type": "string",
                        "description": "Specifies the copy options for the stage.\n"
                    },
                    "credentials": {
                        "type": "string",
                        "description": "Specifies the credentials for the stage.\n",
                        "secret": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "directory": {
                        "type": "string",
                        "description": "Specifies the directory settings for the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryption": {
                        "type": "string",
                        "description": "Specifies the encryption settings for the stage.\n"
                    },
                    "fileFormat": {
                        "type": "string"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "snowflakeIamUser": {
                        "type": "string",
                        "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your\naccount.\n"
                    },
                    "storageIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage\nto a Snowflake identity and access management (IAM) entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StageTag:StageTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL for the stage.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/storageIntegration:StorageIntegration": {
            "properties": {
                "azureConsentUrl": {
                    "type": "string",
                    "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n",
                    "secret": true
                },
                "azureMultiTenantAppName": {
                    "type": "string",
                    "description": "This is the name of the Snowflake client application created for your account.\n"
                },
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the storage integration was created.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string"
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "storageAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageGcpServiceAccount": {
                    "type": "string",
                    "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "fullyQualifiedName",
                "name",
                "storageAllowedLocations",
                "storageAwsExternalId",
                "storageAwsIamUserArn",
                "storageGcpServiceAccount",
                "storageProvider"
            ],
            "inputProperties": {
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "storageAllowedLocations",
                "storageProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageIntegration resources.\n",
                "properties": {
                    "azureConsentUrl": {
                        "type": "string",
                        "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n",
                        "secret": true
                    },
                    "azureMultiTenantAppName": {
                        "type": "string",
                        "description": "This is the name of the Snowflake client application created for your account.\n"
                    },
                    "azureTenantId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the storage integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "storageAllowedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                    },
                    "storageAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "storageAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "storageAwsObjectAcl": {
                        "type": "string",
                        "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                    },
                    "storageAwsRoleArn": {
                        "type": "string"
                    },
                    "storageBlockedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                    },
                    "storageGcpServiceAccount": {
                        "type": "string",
                        "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                    },
                    "storageProvider": {
                        "type": "string",
                        "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read\nthe stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified\nname. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stage",
                "stale",
                "streamType"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read\nthe stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified\nname. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnDirectoryTable resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read\nthe stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified\nname. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnExternalTable:StreamOnExternalTable": {
            "properties": {
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "externalTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "insertOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "externalTable",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType"
            ],
            "inputProperties": {
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "externalTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "insertOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "externalTable",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnExternalTable resources.\n",
                "properties": {
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "externalTable": {
                        "type": "string",
                        "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "insertOnly": {
                        "type": "string",
                        "description": "Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnTable:StreamOnTable": {
            "properties": {
                "appendOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showInitialRows": {
                    "type": "string"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType",
                "table"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "showInitialRows": {
                    "type": "string"
                },
                "table": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnTable resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "string",
                        "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showInitialRows": {
                        "type": "string"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "table": {
                        "type": "string",
                        "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid\nusing the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnView:StreamOnView": {
            "properties": {
                "appendOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showInitialRows": {
                    "type": "string"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                },
                "view": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType",
                "view"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "string",
                    "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "showInitialRows": {
                    "type": "string"
                },
                "view": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "view"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnView resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "string",
                        "description": "Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in\nthe configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due\nto technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showInitialRows": {
                        "type": "string"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if\nneeded.\n"
                    },
                    "view": {
                        "type": "string",
                        "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using\nthe following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamlit:Streamlit": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml\nfile.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of\n`directory_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations\nwarehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "mainFile",
                "name",
                "schema",
                "showOutputs",
                "stage"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml\nfile.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of\n`directory_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations\nwarehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mainFile",
                "schema",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Streamlit resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the streamlit.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                    },
                    "directoryLocation": {
                        "type": "string",
                        "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml\nfile.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "External access integrations connected to the Streamlit.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mainFile": {
                        "type": "string",
                        "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of\n`directory_location`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "queryWarehouse": {
                        "type": "string",
                        "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations\nwarehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/table:Table": {
            "properties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on\nhistorical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this\nargument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use\nSnowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the table.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fullyQualifiedName",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on\nhistorical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this\nargument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use\nSnowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "changeTracking": {
                        "type": "boolean",
                        "description": "Specifies whether to enable change tracking on the table. Default false.\n"
                    },
                    "clusterBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                        },
                        "description": "Definitions of a column to create in the table. Minimum one required.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the table.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on\nhistorical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this\nargument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use\nSnowflake default - in this case the schema value\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the table.\n"
                    },
                    "primaryKey": {
                        "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                        "description": "Definitions of primary key constraint to create on table\n",
                        "deprecationMessage": "Use snowflake.TableConstraint instead"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableTag:TableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n"
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n"
                }
            },
            "required": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "inputProperties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                    "willReplaceOnChanges": true
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableColumnMaskingPolicyApplication resources.\n",
                "properties": {
                    "column": {
                        "type": "string",
                        "description": "The column to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    },
                    "maskingPolicy": {
                        "type": "string",
                        "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                        "willReplaceOnChanges": true
                    },
                    "table": {
                        "type": "string",
                        "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableConstraint:TableConstraint": {
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "Whether the constraint is deferrable\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Whether the constraint is enforced\n"
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n"
                },
                "initially": {
                    "type": "string",
                    "description": "Whether the constraint is initially deferred or immediate\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow:\n\"\\\"\u0026lt;db_name\u0026gt;\\\".\\\"\u0026lt;schema_name\u0026gt;\\\".\\\"\u0026lt;table_name\u0026gt;\\\"\" or\n\"\u0026lt;db_name\u0026gt;.\u0026lt;schema_name\u0026gt;.\u0026lt;table_name\u0026gt;\" (snowflake_table.my_table.id)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the\nENABLE property.\n"
                }
            },
            "required": [
                "columns",
                "name",
                "tableId",
                "type"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "Whether the constraint is deferrable\n",
                    "willReplaceOnChanges": true
                },
                "enable": {
                    "type": "boolean",
                    "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                    "willReplaceOnChanges": true
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Whether the constraint is enforced\n",
                    "willReplaceOnChanges": true
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "initially": {
                    "type": "string",
                    "description": "Whether the constraint is initially deferred or immediate\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                    "willReplaceOnChanges": true
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow:\n\"\\\"\u0026lt;db_name\u0026gt;\\\".\\\"\u0026lt;schema_name\u0026gt;\\\".\\\"\u0026lt;table_name\u0026gt;\\\"\" or\n\"\u0026lt;db_name\u0026gt;.\u0026lt;schema_name\u0026gt;.\u0026lt;table_name\u0026gt;\" (snowflake_table.my_table.id)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the\nENABLE property.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "columns",
                "tableId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableConstraint resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Columns to use in constraint key\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the table constraint\n",
                        "deprecationMessage": "Not used. Will be removed."
                    },
                    "deferrable": {
                        "type": "boolean",
                        "description": "Whether the constraint is deferrable\n",
                        "willReplaceOnChanges": true
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                        "willReplaceOnChanges": true
                    },
                    "enforced": {
                        "type": "boolean",
                        "description": "Whether the constraint is enforced\n",
                        "willReplaceOnChanges": true
                    },
                    "foreignKeyProperties": {
                        "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                        "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                        "willReplaceOnChanges": true
                    },
                    "initially": {
                        "type": "string",
                        "description": "Whether the constraint is initially deferred or immediate\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of constraint\n"
                    },
                    "rely": {
                        "type": "boolean",
                        "description": "Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableId": {
                        "type": "string",
                        "description": "Identifier for table to create constraint on. Format must follow:\n\"\\\"\u0026lt;db_name\u0026gt;\\\".\\\"\u0026lt;schema_name\u0026gt;\\\".\\\"\u0026lt;table_name\u0026gt;\\\"\" or\n\"\u0026lt;db_name\u0026gt;.\u0026lt;schema_name\u0026gt;.\u0026lt;table_name\u0026gt;\" (snowflake_table.my_table.id)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the\nENABLE property.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tag:Tag": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "maskingPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are\nassigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this\nresource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TagShowOutput:TagShowOutput"
                    },
                    "description": "Outputs the result of `SHOW TAGS` for the given tag.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "maskingPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are\nassigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this\nresource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "allowedValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of allowed values for the tag.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the tag.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "maskingPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are\nassigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this\nresource, see docs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TagShowOutput:TagShowOutput"
                        },
                        "description": "Outputs the result of `SHOW TAGS` for the given tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tagAssociation:TagAssociation": {
            "properties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the object identifiers for the tag association.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE\nFAILOVER GROUP INTEGRATION NETWORK POLICY REPLICATION GROUP ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT\nSNOWFLAKE.CORE.BUDGET SNOWFLAKE.ML.CLASSIFICATION EXTERNAL FUNCTION EXTERNAL TABLE FUNCTION GIT REPOSITORY ICEBERG TABLE\nMATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PRIVACY POLICY PROCEDURE STAGE\nSTREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                }
            },
            "required": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "inputProperties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the object identifiers for the tag association.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE\nFAILOVER GROUP INTEGRATION NETWORK POLICY REPLICATION GROUP ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT\nSNOWFLAKE.CORE.BUDGET SNOWFLAKE.ML.CLASSIFICATION EXTERNAL FUNCTION EXTERNAL TABLE FUNCTION GIT REPOSITORY ICEBERG TABLE\nMATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PRIVACY POLICY PROCEDURE STAGE\nSTREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag.\n",
                    "willReplaceOnChanges": true
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                }
            },
            "requiredInputs": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagAssociation resources.\n",
                "properties": {
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the object identifiers for the tag association.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Specifies the type of object to add a tag. Allowed object types: [ACCOUNT APPLICATION APPLICATION PACKAGE DATABASE\nFAILOVER GROUP INTEGRATION NETWORK POLICY REPLICATION GROUP ROLE SHARE USER WAREHOUSE DATABASE ROLE SCHEMA ALERT\nSNOWFLAKE.CORE.BUDGET SNOWFLAKE.ML.CLASSIFICATION EXTERNAL FUNCTION EXTERNAL TABLE FUNCTION GIT REPOSITORY ICEBERG TABLE\nMATERIALIZED VIEW PIPE MASKING POLICY PASSWORD POLICY ROW ACCESS POLICY SESSION POLICY PRIVACY POLICY PROCEDURE STAGE\nSTREAM TABLE TASK VIEW COLUMN EVENT TABLE].\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "If true, skips validation of the tag association.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagValue": {
                        "type": "string",
                        "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/task:Task": {
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a\nDAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing\nDAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "allowOverlappingExecution": {
                    "type": "string",
                    "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the\nparameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set\nin the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "config": {
                    "type": "string",
                    "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in\nJSON format.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "finalize": {
                    "type": "string",
                    "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks\nin the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release\nand cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task\ngraphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameter:TaskParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "schedule": {
                    "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and\nafter; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskShowOutput:TaskShowOutput"
                    },
                    "description": "Outputs the result of `SHOW TASKS` for the given task.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started or suspended.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The\ndefault is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake\ncan automatically retry the task graphs from the last task in the graph that failed. For more information, check\n[TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is\navailable for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores\nthis parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about\nwarehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check\n[USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check\n[USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.\nDue to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with\nuser_task_managed_initial_warehouse_size) For more information about this resource, see docs.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered\n(based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.\nIf the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task\nas a predecessor also don’t run.\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "database",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "schema",
                "searchPath",
                "showOutputs",
                "sqlStatement",
                "started",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a\nDAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing\nDAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "allowOverlappingExecution": {
                    "type": "string",
                    "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the\nparameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set\nin the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "config": {
                    "type": "string",
                    "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in\nJSON format.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "finalize": {
                    "type": "string",
                    "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks\nin the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release\nand cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task\ngraphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "schedule": {
                    "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and\nafter; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started or suspended.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The\ndefault is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake\ncan automatically retry the task graphs from the last task in the graph that failed. For more information, check\n[TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is\navailable for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores\nthis parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about\nwarehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check\n[USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check\n[USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.\nDue to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with\nuser_task_managed_initial_warehouse_size) For more information about this resource, see docs.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered\n(based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.\nIf the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task\nas a predecessor also don’t run.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "sqlStatement",
                "started"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Task resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "afters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a\nDAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing\nDAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "allowOverlappingExecution": {
                        "type": "string",
                        "description": "By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the\nparameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set\nin the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the task.\n"
                    },
                    "config": {
                        "type": "string",
                        "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in\nJSON format.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more\nhere), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "finalize": {
                        "type": "string",
                        "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks\nin the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release\nand cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task\ngraphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations\n(read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to\ntechnical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TaskParameter:TaskParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "schedule": {
                        "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                        "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and\nafter; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TaskShowOutput:TaskShowOutput"
                        },
                        "description": "Outputs the result of `SHOW TASKS` for the given task.\n"
                    },
                    "sqlStatement": {
                        "type": "string",
                        "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                    },
                    "started": {
                        "type": "boolean",
                        "description": "Specifies if the task should be started or suspended.\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The\ndefault is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake\ncan automatically retry the task graphs from the last task in the graph that failed. For more information, check\n[TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is\navailable for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores\nthis parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about\nwarehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check\n[USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check\n[USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.\nDue to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with\nuser_task_managed_initial_warehouse_size) For more information about this resource, see docs.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    },
                    "when": {
                        "type": "string",
                        "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered\n(based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.\nIf the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task\nas a predecessor also don’t run.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/user:User": {
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination\nof a session (e.g. network outage, browser termination, service interruption). For more information, check\n[ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed\nwithout an active transaction, is automatically committed after the statement successfully completes. For more\ninformation, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check\n[AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see\n[Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check\n[BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from\nqueries (in MB). For more information, check [CLIENT_MEMORY_LIMIT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all\ndatabases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more\nquickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will\nattempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s\nresources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver\ndownloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more\ninformation, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more\ninformation, check [CLIENT_SESSION_KEEP_ALIVE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check\n[CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_*\nvariation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to\nuse when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more\ninformation, check [CLIENT_TIMESTAMP_TYPE_MAPPING\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon\nlogin. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role\nfor a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT\nROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does\nnot verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive):\n`DEFAULT` | `NONE` | `ALL`. More information can be found in\n[doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER\noperation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disableMfa": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the\nuser. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put\n\"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in\nthe unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that\nsupport the values in the output columns of the unload SQL statement or source table). For more information, check\n[ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content\nof a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role\nthat is granted or inherits the AUDIT privilege can set the ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR parameter. When using\nthe ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the\nquery text, not the user who executed the query (if those are different users). For more information, check\n[ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is\nused to update or delete a target row that joins multiple source rows and the system cannot determine the action to\nperform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command\nis used to update a target row that joins multiple source rows and the system cannot determine the action to perform on\nthe target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user.\n",
                        "secret": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more\ninformation, check [GEOGRAPHY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY\nvalues](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more\ninformation, check [GEOMETRY_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check\n[JDBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the\n[TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),\ngetTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to\ninsert newline characters after each element. For more information, check [JSON_INDENT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user.\n",
                        "secret": true
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more\ninformation, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages\nat the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check\n[LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name of the user.\n",
                        "secret": true
                    },
                    "minsToBypassMfa": {
                        "type": "integer"
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check\n[MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "mustChangePassword": {
                        "type": "string",
                        "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into\nthe system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login_name this will be used as login_name. Check the\n[docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account\nbased on users’ IP address. For more details, see [Controlling network traffic with network\npolicies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE\nNETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check\n[NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table\ncolumn. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or\nauto-incremented column in [increasing or decreasing\norder](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For\nmore information, check [NOORDER_SEQUENCE_AS_DEFAULT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check\n[ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO\n\u003clocation\u003e](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check\n[PREVENT_UNLOAD_TO_INTERNAL_STAGES\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are\ndisplayed in the output of the [QUERY_HISTORY,\nQUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more\ninformation, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,\nSnowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see\n[Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).\nYou can use this parameter in situations in which [third-party applications always use double quotes around\nidentifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For\nmore information, check [QUOTED_IDENTIFIERS_IGNORE_CASE\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,\ncheck [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS\nPrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)\nuse this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface\nendpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).\nFor more information, check [S3_STAGE_VPCE_DNS_NAME\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution\nin queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).\nComma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more\ninformation, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure\nviews. When this parameter is set in a session, shared views return rows as if executed in the specified consumer\naccount rather than the provider account. For more information, see [Introduction to Secure Data\nSharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with\nshares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check\n[SIMULATED_DATA_SHARING_CONSUMER\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled\nby the system. This parameter can be used in conjunction with the\n[MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to\nensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For\nmore information, check [STATEMENT_TIMEOUT_IN_SECONDS\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by\n[http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,\nthese non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and\nlanguages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,\ncheck [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO\n(AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the\nsession). For more information, check [TIME_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its\naliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,\ncheck [TIMESTAMP_DAY_IS_ALWAYS_24H\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or\nAUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system\nduring the session). For more information, check [TIMESTAMP_INPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and\noutput formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check\n[TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to\n[TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For\nmore information, see [Date and time input and output\nformats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check\n[TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone\nname](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link\nname](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone\nDatabase](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more\ninformation, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace\nlevel](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check\n[TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For\nmore information, check [TRANSACTION_ABORT_ON_ERROR\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check\n[TRANSACTION_DEFAULT_ISOLATION_LEVEL\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This\nparameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years\nrepresented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more\ninformation, check [UNSUPPORTED_DDL_ACTION\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more\ninformation, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in\nwhich a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the\nfirst week of the year and December 31 is included in the last week of the year. For more information, check\n[WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.\nISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified\nday of the week. For more information, check [WEEK_START\ndocs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment": {
            "properties": {
                "authenticationPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the authentication policy\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the authentication policy to\n"
                }
            },
            "required": [
                "authenticationPolicyName",
                "userName"
            ],
            "inputProperties": {
                "authenticationPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the authentication policy\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the authentication policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authenticationPolicyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserAuthenticationPolicyAttachment resources.\n",
                "properties": {
                    "authenticationPolicyName": {
                        "type": "string",
                        "description": "Fully qualified name of the authentication policy\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the user you want to attach the authentication policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment": {
            "properties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n"
                }
            },
            "required": [
                "passwordPolicyName",
                "userName"
            ],
            "inputProperties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicyName": {
                        "type": "string",
                        "description": "Fully qualified name of the password policy\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the user you want to attach the password policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPublicKeys:UserPublicKeys": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPublicKeys resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication\nbased on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/view:View": {
            "properties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is\nnot set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this\nvalue.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that\nspecifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the\ncolumns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isRecursive": {
                    "type": "string",
                    "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table\nexpression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                    },
                    "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters\nwith a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically\nsignificant.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "statement"
            ],
            "inputProperties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is\nnot set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this\nvalue.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that\nspecifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the\ncolumns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "isRecursive": {
                    "type": "string",
                    "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table\nexpression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters\nwith a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically\nsignificant.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "aggregationPolicy": {
                        "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                        "description": "Specifies the aggregation policy to set on a view.\n"
                    },
                    "changeTracking": {
                        "type": "string",
                        "description": "Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is\nnot set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this\nvalue.\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                        },
                        "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that\nspecifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the\ncolumns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "dataMetricFunctions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                        },
                        "description": "Data metric functions used for the view.\n"
                    },
                    "dataMetricSchedule": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                        "description": "Specifies the schedule to run the data metric functions periodically.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isRecursive": {
                        "type": "string",
                        "description": "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table\nexpression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "isTemporary": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical\nlimitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "rowAccessPolicy": {
                        "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                        "description": "Specifies the row access policy to set on a view.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following\ncharacters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                        },
                        "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters\nwith a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically\nsignificant.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/warehouse:Warehouse": {
            "properties": {
                "autoResume": {
                    "type": "string",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute\nresources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a\nmultiplier based on warehouse size.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this\nresource, see docs.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in\nAuto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                    },
                    "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a\nwarehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` |\n`MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` |\n`X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties)\nfor the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be\nsuspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "maxConcurrencyLevel",
                "name",
                "parameters",
                "showOutputs",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "string",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute\nresources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a\nmultiplier based on warehouse size.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this\nresource, see docs.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in\nAuto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a\nwarehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` |\n`MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` |\n`X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties)\nfor the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be\nsuspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Warehouse resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "string",
                        "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available\noptions are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there\nwhich means to use the Snowflake default for this value.\n"
                    },
                    "autoSuspend": {
                        "type": "integer",
                        "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the warehouse.\n"
                    },
                    "enableQueryAcceleration": {
                        "type": "string",
                        "description": "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute\nresources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will\nput \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name\nresolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initiallySuspended": {
                        "type": "boolean",
                        "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                    },
                    "maxClusterCount": {
                        "type": "integer",
                        "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                    },
                    "maxConcurrencyLevel": {
                        "type": "integer",
                        "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                    },
                    "minClusterCount": {
                        "type": "integer",
                        "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here),\navoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                    },
                    "queryAccelerationMaxScaleFactor": {
                        "type": "integer",
                        "description": "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a\nmultiplier based on warehouse size.\n"
                    },
                    "resourceMonitor": {
                        "type": "string",
                        "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this\nresource, see docs.\n"
                    },
                    "scalingPolicy": {
                        "type": "string",
                        "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in\nAuto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                        },
                        "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a\nwarehouse before it is canceled by the system.\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                    },
                    "warehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` |\n`MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` |\n`X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse\ndocumentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties)\nfor the details. Note: removing the size from config will result in the resource recreation.\n"
                    },
                    "warehouseType": {
                        "type": "string",
                        "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be\nsuspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:snowflake/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:snowflake"
                    }
                },
                "type": "pulumi:providers:snowflake/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAccountRoles:getAccountRoles": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccountRoles.\n",
                "properties": {
                    "inClass": {
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountRoles.\n",
                "properties": {
                    "accountRoles": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getAccountRolesAccountRole:getAccountRolesAccountRole"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inClass": {
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    }
                },
                "required": [
                    "accountRoles",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAccounts:getAccounts": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccounts.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "withHistory": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccounts.\n",
                "properties": {
                    "accounts": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getAccountsAccount:getAccountsAccount"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "withHistory": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "accounts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAlerts:getAlerts": {
            "inputs": {
                "description": "A collection of arguments for invoking getAlerts.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlerts.\n",
                "properties": {
                    "alerts": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getAlertsAlert:getAlertsAlert"
                        },
                        "type": "array"
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "alerts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getConnections:getConnections": {
            "inputs": {
                "description": "A collection of arguments for invoking getConnections.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getConnections.\n",
                "properties": {
                    "connections": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getConnectionsConnection:getConnectionsConnection"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    }
                },
                "required": [
                    "connections",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCortexSearchServices:getCortexSearchServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getCortexSearchServices.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCortexSearchServices.\n",
                "properties": {
                    "cortexSearchServices": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "required": [
                    "cortexSearchServices",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentAccount:getCurrentAccount": {
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "account": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "account",
                    "region",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentRole:getCurrentRole": {
            "outputs": {
                "description": "A collection of values returned by getCurrentRole.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabase:getDatabase": {
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isCurrent": {
                        "type": "boolean"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "options": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "retentionTime": {
                        "type": "integer"
                    }
                },
                "required": [
                    "comment",
                    "createdOn",
                    "isCurrent",
                    "isDefault",
                    "name",
                    "options",
                    "origin",
                    "owner",
                    "retentionTime",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRole:getDatabaseRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRole.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRole.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    }
                },
                "required": [
                    "comment",
                    "database",
                    "name",
                    "owner",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRoles:getDatabaseRoles": {
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRoles.\n",
                "properties": {
                    "inDatabase": {
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit"
                    }
                },
                "type": "object",
                "required": [
                    "inDatabase"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRoles.\n",
                "properties": {
                    "databaseRoles": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inDatabase": {
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit"
                    }
                },
                "required": [
                    "databaseRoles",
                    "inDatabase",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabases:getDatabases": {
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabasesDatabase:getDatabasesDatabase"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "databases",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDynamicTables:getDynamicTables": {
            "inputs": {
                "description": "A collection of arguments for invoking getDynamicTables.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDynamicTables.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit"
                    },
                    "records": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "required": [
                    "records",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalFunctions:getExternalFunctions": {
            "inputs": {
                "description": "A collection of arguments for invoking getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "externalFunctions": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "externalFunctions",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalTables:getExternalTables": {
            "inputs": {
                "description": "A collection of arguments for invoking getExternalTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExternalTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "externalTables": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "externalTables",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFailoverGroups:getFailoverGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getFailoverGroups.\n",
                "properties": {
                    "inAccount": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFailoverGroups.\n",
                "properties": {
                    "failoverGroups": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inAccount": {
                        "type": "string"
                    }
                },
                "required": [
                    "failoverGroups",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFileFormats:getFileFormats": {
            "inputs": {
                "description": "A collection of arguments for invoking getFileFormats.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFileFormats.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "fileFormats": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "fileFormats",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFunctions:getFunctions": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "functions": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getFunctionsFunction:getFunctionsFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "functions",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getGrants:getGrants": {
            "inputs": {
                "description": "A collection of arguments for invoking getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo"
                    },
                    "grants": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getGrantsGrant:getGrantsGrant"
                        },
                        "type": "array"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "grants",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaskingPolicies:getMaskingPolicies": {
            "inputs": {
                "description": "A collection of arguments for invoking getMaskingPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMaskingPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit"
                    },
                    "maskingPolicies": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "maskingPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaterializedViews:getMaterializedViews": {
            "inputs": {
                "description": "A collection of arguments for invoking getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "materializedViews": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "materializedViews",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getNetworkPolicies:getNetworkPolicies": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkPolicies.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "networkPolicies": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "networkPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getParameters:getParameters": {
            "inputs": {
                "description": "A collection of arguments for invoking getParameters.\n",
                "properties": {
                    "objectName": {
                        "type": "string"
                    },
                    "objectType": {
                        "type": "string"
                    },
                    "parameterType": {
                        "type": "string"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "user": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getParameters.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "objectType": {
                        "type": "string"
                    },
                    "parameterType": {
                        "type": "string"
                    },
                    "parameters": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getParametersParameter:getParametersParameter"
                        },
                        "type": "array"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "user": {
                        "type": "string"
                    }
                },
                "required": [
                    "parameters",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getPipes:getPipes": {
            "inputs": {
                "description": "A collection of arguments for invoking getPipes.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipes.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pipes": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getPipesPipe:getPipesPipe"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "pipes",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getProcedures:getProcedures": {
            "inputs": {
                "description": "A collection of arguments for invoking getProcedures.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProcedures.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "procedures": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getProceduresProcedure:getProceduresProcedure"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "procedures",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getResourceMonitors:getResourceMonitors": {
            "inputs": {
                "description": "A collection of arguments for invoking getResourceMonitors.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceMonitors.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "resourceMonitors": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resourceMonitors",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getRowAccessPolicies:getRowAccessPolicies": {
            "inputs": {
                "description": "A collection of arguments for invoking getRowAccessPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRowAccessPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit"
                    },
                    "rowAccessPolicies": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "rowAccessPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSchemas:getSchemas": {
            "inputs": {
                "description": "A collection of arguments for invoking getSchemas.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemas.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit"
                    },
                    "schemas": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getSchemasSchema:getSchemasSchema"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "schemas",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSecrets:getSecrets": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecrets.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getSecretsIn:getSecretsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecrets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getSecretsIn:getSecretsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "secrets": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getSecretsSecret:getSecretsSecret"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "secrets",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSecurityIntegrations:getSecurityIntegrations": {
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityIntegrations.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "securityIntegrations": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "securityIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSequences:getSequences": {
            "inputs": {
                "description": "A collection of arguments for invoking getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "sequences": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getSequencesSequence:getSequencesSequence"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "sequences",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getShares:getShares": {
            "inputs": {
                "description": "A collection of arguments for invoking getShares.\n",
                "properties": {
                    "pattern": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getShares.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "shares": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getSharesShare:getSharesShare"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "shares",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStages:getStages": {
            "inputs": {
                "description": "A collection of arguments for invoking getStages.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStages.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "stages": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getStagesStage:getStagesStage"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "stages",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStorageIntegrations:getStorageIntegrations": {
            "outputs": {
                "description": "A collection of values returned by getStorageIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "storageIntegrations": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "storageIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreamlits:getStreamlits": {
            "inputs": {
                "description": "A collection of arguments for invoking getStreamlits.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStreamlits.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit"
                    },
                    "streamlits": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "streamlits",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreams:getStreams": {
            "inputs": {
                "description": "A collection of arguments for invoking getStreams.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamsIn:getStreamsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamsLimit:getStreamsLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStreams.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamsIn:getStreamsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamsLimit:getStreamsLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "streams": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamsStream:getStreamsStream"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "streams",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken": {
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "integrationName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "integrationName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "accessToken": {
                        "secret": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "integrationName": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessToken",
                    "integrationName",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "awsSnsTopicArn"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string"
                    },
                    "awsSnsTopicPolicyJson": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "awsSnsTopicArn",
                    "awsSnsTopicPolicyJson",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig": {
            "outputs": {
                "description": "A collection of values returned by getSystemGetPrivateLinkConfig.\n",
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "accountUrl": {
                        "type": "string"
                    },
                    "awsVpceId": {
                        "type": "string"
                    },
                    "azurePlsId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "internalStage": {
                        "type": "string"
                    },
                    "ocspUrl": {
                        "type": "string"
                    },
                    "regionlessAccountUrl": {
                        "type": "string"
                    },
                    "regionlessSnowsightUrl": {
                        "type": "string"
                    },
                    "snowsightUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "accountName",
                    "accountUrl",
                    "awsVpceId",
                    "azurePlsId",
                    "internalStage",
                    "ocspUrl",
                    "regionlessAccountUrl",
                    "regionlessSnowsightUrl",
                    "snowsightUrl",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo": {
            "outputs": {
                "description": "A collection of values returned by getSystemGetSnowflakePlatformInfo.\n",
                "properties": {
                    "awsVpcIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "azureVnetSubnetIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "awsVpcIds",
                    "azureVnetSubnetIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTables:getTables": {
            "inputs": {
                "description": "A collection of arguments for invoking getTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "tables": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getTablesTable:getTablesTable"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "tables",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTags:getTags": {
            "inputs": {
                "description": "A collection of arguments for invoking getTags.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getTagsIn:getTagsIn"
                    },
                    "like": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getTagsIn:getTagsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getTagsTag:getTagsTag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTasks:getTasks": {
            "inputs": {
                "description": "A collection of arguments for invoking getTasks.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getTasksIn:getTasksIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTasksLimit:getTasksLimit"
                    },
                    "rootOnly": {
                        "type": "boolean"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTasks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getTasksIn:getTasksIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTasksLimit:getTasksLimit"
                    },
                    "rootOnly": {
                        "type": "boolean"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "tasks": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getTasksTask:getTasksTask"
                        },
                        "type": "array"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "tasks",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getUsers:getUsers": {
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getViews:getViews": {
            "inputs": {
                "description": "A collection of arguments for invoking getViews.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getViews.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn"
                    },
                    "like": {
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit"
                    },
                    "startsWith": {
                        "type": "string"
                    },
                    "views": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getViewsView:getViewsView"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "views",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getWarehouses:getWarehouses": {
            "inputs": {
                "description": "A collection of arguments for invoking getWarehouses.\n",
                "properties": {
                    "like": {
                        "type": "string"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWarehouses.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "like": {
                        "type": "string"
                    },
                    "warehouses": {
                        "items": {
                            "$ref": "#/types/snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "type": "boolean"
                    },
                    "withParameters": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "warehouses",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}