{
    "name": "snowflake",
    "description": "A Pulumi package for creating and managing snowflake cloud resources.",
    "keywords": [
        "pulumi",
        "snowflake"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`snowflake` Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake).",
    "repository": "https://github.com/pulumi/pulumi-snowflake",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing snowflake cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Snowflake-Labs/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-snowflake` repo](https://github.com/Snowflake-Labs/terraform-provider-snowflake/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable."
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable."
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable."
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable."
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable."
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable."
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable."
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable."
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable."
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable."
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable."
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable."
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable."
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable."
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable."
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable."
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable."
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable."
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable."
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable."
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable."
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables."
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable."
            },
            "password": {
                "type": "string",
                "description": "Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable."
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable."
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see the section below. Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable."
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable."
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `authenticator` to `OAUTH`. Optionally, set the `authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:config/tokenAccessor:tokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable."
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable."
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable."
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        }
    },
    "types": {
        "snowflake:config/tokenAccessor:tokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedToUsers",
                        "comment",
                        "createdOn",
                        "grantedRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner"
                    ]
                }
            }
        },
        "snowflake:index/AccountShowOutput:AccountShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountLocatorUrl": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "accountOldUrlLastUsed": {
                    "type": "string"
                },
                "accountOldUrlSavedOn": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "consumptionBillingEntityName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "isEventsAccount": {
                    "type": "boolean"
                },
                "isOrgAdmin": {
                    "type": "boolean"
                },
                "isOrganizationAccount": {
                    "type": "boolean"
                },
                "managedAccounts": {
                    "type": "integer"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string"
                },
                "movedOn": {
                    "type": "string"
                },
                "movedToOrganization": {
                    "type": "string"
                },
                "oldAccountUrl": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationOldUrl": {
                    "type": "string"
                },
                "organizationOldUrlLastUsed": {
                    "type": "string"
                },
                "organizationOldUrlSavedOn": {
                    "type": "string"
                },
                "organizationUrlExpirationOn": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "restoredOn": {
                    "type": "string"
                },
                "scheduledDeletionTime": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountLocatorUrl",
                        "accountName",
                        "accountOldUrlLastUsed",
                        "accountOldUrlSavedOn",
                        "accountUrl",
                        "comment",
                        "consumptionBillingEntityName",
                        "createdOn",
                        "droppedOn",
                        "edition",
                        "isEventsAccount",
                        "isOrgAdmin",
                        "isOrganizationAccount",
                        "managedAccounts",
                        "marketplaceConsumerBillingEntityName",
                        "marketplaceProviderBillingEntityName",
                        "movedOn",
                        "movedToOrganization",
                        "oldAccountUrl",
                        "organizationName",
                        "organizationOldUrl",
                        "organizationOldUrlLastUsed",
                        "organizationOldUrlSavedOn",
                        "organizationUrlExpirationOn",
                        "regionGroup",
                        "restoredOn",
                        "scheduledDeletionTime",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/AlertAlertSchedule:AlertAlertSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/AlertAlertScheduleCron:AlertAlertScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the alert. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for alert refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput": {
            "properties": {
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authTypes",
                        "comments",
                        "enableds",
                        "oauthAccessTokenValidities",
                        "oauthAllowedScopes",
                        "oauthAuthorizationEndpoints",
                        "oauthClientAuthMethods",
                        "oauthGrants",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "parentIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration:ApiAuthenticationIntegrationWithJwtBearerDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput": {
            "properties": {
                "authenticationMethods": {
                    "type": "string"
                },
                "clientTypes": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "mfaAuthenticationMethods": {
                    "type": "string"
                },
                "mfaEnrollment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "securityIntegrations": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationMethods",
                        "clientTypes",
                        "comment",
                        "mfaAuthenticationMethods",
                        "mfaEnrollment",
                        "name",
                        "owner",
                        "securityIntegrations"
                    ]
                }
            }
        },
        "snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/ComputePoolDescribeOutput:ComputePoolDescribeOutput": {
            "properties": {
                "activeNodes": {
                    "type": "integer"
                },
                "application": {
                    "type": "string"
                },
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "string"
                },
                "idleNodes": {
                    "type": "integer"
                },
                "instanceFamily": {
                    "type": "string"
                },
                "isExclusive": {
                    "type": "boolean"
                },
                "maxNodes": {
                    "type": "integer"
                },
                "minNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "numJobs": {
                    "type": "integer"
                },
                "numServices": {
                    "type": "integer"
                },
                "owner": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "statusMessage": {
                    "type": "string"
                },
                "targetNodes": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeNodes",
                        "application",
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "createdOn",
                        "errorCode",
                        "idleNodes",
                        "instanceFamily",
                        "isExclusive",
                        "maxNodes",
                        "minNodes",
                        "name",
                        "numJobs",
                        "numServices",
                        "owner",
                        "resumedOn",
                        "state",
                        "statusMessage",
                        "targetNodes",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/ComputePoolShowOutput:ComputePoolShowOutput": {
            "properties": {
                "activeNodes": {
                    "type": "integer"
                },
                "application": {
                    "type": "string"
                },
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "idleNodes": {
                    "type": "integer"
                },
                "instanceFamily": {
                    "type": "string"
                },
                "isExclusive": {
                    "type": "boolean"
                },
                "maxNodes": {
                    "type": "integer"
                },
                "minNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "numJobs": {
                    "type": "integer"
                },
                "numServices": {
                    "type": "integer"
                },
                "owner": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "targetNodes": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeNodes",
                        "application",
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "createdOn",
                        "idleNodes",
                        "instanceFamily",
                        "isExclusive",
                        "maxNodes",
                        "minNodes",
                        "name",
                        "numJobs",
                        "numServices",
                        "owner",
                        "resumedOn",
                        "state",
                        "targetNodes",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/CortexSearchServiceDescribeOutput:CortexSearchServiceDescribeOutput": {
            "properties": {
                "attributeColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "dataTimestamp": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "definition": {
                    "type": "string"
                },
                "embeddingModel": {
                    "type": "string"
                },
                "indexingError": {
                    "type": "string"
                },
                "indexingState": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "searchColumn": {
                    "type": "string"
                },
                "serviceQueryUrl": {
                    "type": "string"
                },
                "sourceDataNumRows": {
                    "type": "integer"
                },
                "targetLag": {
                    "type": "string"
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attributeColumns",
                        "columns",
                        "comment",
                        "createdOn",
                        "dataTimestamp",
                        "databaseName",
                        "definition",
                        "embeddingModel",
                        "indexingError",
                        "indexingState",
                        "name",
                        "schemaName",
                        "searchColumn",
                        "serviceQueryUrl",
                        "sourceDataNumRows",
                        "targetLag",
                        "warehouse"
                    ]
                }
            }
        },
        "snowflake:index/CurrentOrganizationAccountShowOutput:CurrentOrganizationAccountShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountLocatorUrl": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "accountOldUrlLastUsed": {
                    "type": "string"
                },
                "accountOldUrlSavedOn": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "consumptionBillingEntityName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "isEventsAccount": {
                    "type": "boolean"
                },
                "isOrgAdmin": {
                    "type": "boolean"
                },
                "isOrganizationAccount": {
                    "type": "boolean"
                },
                "managedAccounts": {
                    "type": "integer"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string"
                },
                "oldAccountUrl": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationOldUrl": {
                    "type": "string"
                },
                "organizationOldUrlLastUsed": {
                    "type": "string"
                },
                "organizationOldUrlSavedOn": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountLocatorUrl",
                        "accountName",
                        "accountOldUrlLastUsed",
                        "accountOldUrlSavedOn",
                        "accountUrl",
                        "comment",
                        "consumptionBillingEntityName",
                        "createdOn",
                        "edition",
                        "isEventsAccount",
                        "isOrgAdmin",
                        "isOrganizationAccount",
                        "managedAccounts",
                        "marketplaceConsumerBillingEntityName",
                        "marketplaceProviderBillingEntityName",
                        "oldAccountUrl",
                        "organizationName",
                        "organizationOldUrl",
                        "organizationOldUrlLastUsed",
                        "organizationOldUrlSavedOn",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/DatabaseReplication:DatabaseReplication": {
            "properties": {
                "enableToAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount"
                    },
                    "description": "Entry to enable replication and optionally failover for a given account identifier.\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "Allows replicating data to accounts on lower editions in either of the following scenarios: 1. The primary database is in a Business Critical (or higher) account but one or more of the accounts approved for replication are on lower editions. Business Critical Edition is intended for Snowflake accounts with extremely sensitive data. 2. The primary database is in a Business Critical (or higher) account and a signed business associate agreement is in place to store PHI data in the account per HIPAA and HITRUST regulations, but no such agreement is in place for one or more of the accounts approved for replication, regardless if they are Business Critical (or higher) accounts. Both scenarios are prohibited by default in an effort to help prevent account administrators for Business Critical (or higher) accounts from inadvertently replicating sensitive data to accounts on lower editions.\n"
                }
            },
            "type": "object",
            "required": [
                "enableToAccounts"
            ]
        },
        "snowflake:index/DatabaseReplicationEnableToAccount:DatabaseReplicationEnableToAccount": {
            "properties": {
                "accountIdentifier": {
                    "type": "string",
                    "description": "Specifies account identifier for which replication should be enabled. The account identifiers should be in the form of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "withFailover": {
                    "type": "boolean",
                    "description": "Specifies if failover should be enabled for the specified account identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accountIdentifier"
            ]
        },
        "snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "grantedDatabaseRoles",
                        "grantedToDatabaseRoles",
                        "grantedToRoles",
                        "isCurrent",
                        "isDefault",
                        "isInherited",
                        "name",
                        "owner",
                        "ownerRoleType"
                    ]
                }
            }
        },
        "snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag": {
            "properties": {
                "downstream": {
                    "type": "boolean",
                    "description": "Specifies whether the target lag time is downstream.\n"
                },
                "maximumDuration": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the dynamic table.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ExternalFunctionArg:ExternalFunctionArg": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Argument name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Argument type, e.g. VARCHAR\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Header value\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "externalOauthAllowedRolesLists",
                        "externalOauthAnyRoleModes",
                        "externalOauthAudienceLists",
                        "externalOauthBlockedRolesLists",
                        "externalOauthIssuers",
                        "externalOauthJwsKeysUrls",
                        "externalOauthRsaPublicKey2s",
                        "externalOauthRsaPublicKeys",
                        "externalOauthScopeDelimiters",
                        "externalOauthSnowflakeUserMappingAttributes",
                        "externalOauthTokenUserMappingClaims"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputComment:ExternalOauthIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputEnabled:ExternalOauthIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode:ExternalOauthIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList:ExternalOauthIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList:ExternalOauthIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthIssuer:ExternalOauthIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl:ExternalOauthIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey:ExternalOauthIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter:ExternalOauthIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:ExternalOauthIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:ExternalOauthIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter": {
            "properties": {
                "externalOauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalOauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList:ExternalOauthIntegrationRelatedParameterExternalOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ExternalTableColumn:ExternalTableColumn": {
            "properties": {
                "as": {
                    "type": "string",
                    "description": "String that specifies the expression for the column. When queried, the column returns results derived from this expression.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "as",
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalTableTag:ExternalTableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "parent",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput": {
            "properties": {
                "allowWrites": {
                    "type": "boolean"
                },
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowWrites",
                        "comment",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation": {
            "properties": {
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.\n"
                },
                "encryptionKmsKeyId": {
                    "type": "string",
                    "description": "Specifies the ID for the KMS-managed key used to encrypt files.\n"
                },
                "encryptionType": {
                    "type": "string",
                    "description": "Specifies the encryption type used.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "External ID that Snowflake uses to establish a trust relationship with AWS.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string",
                    "description": "Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.\n"
                },
                "storageBaseUrl": {
                    "type": "string",
                    "description": "Specifies the base URL for your cloud storage location.\n"
                },
                "storageLocationName": {
                    "type": "string"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the cloud storage provider that stores your data files. Valid values are (case-insensitive): `GCS` | `AZURE` | `S3` | `S3GOV`.\n"
                }
            },
            "type": "object",
            "required": [
                "storageBaseUrl",
                "storageLocationName",
                "storageProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "storageAwsExternalId",
                        "storageBaseUrl",
                        "storageLocationName",
                        "storageProvider"
                    ]
                }
            }
        },
        "snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Identifier for the primary failover group in the source account.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "sourceAccountName": {
                    "type": "string",
                    "description": "Source account from which you are enabling replication and failover of the specified objects.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "organizationName",
                "sourceAccountName"
            ]
        },
        "snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule": {
            "properties": {
                "cron": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/FailoverGroupReplicationScheduleCron:FailoverGroupReplicationScheduleCron": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Specifies the cron expression for the replication schedule. The cron expression must be in the following format: \"minute hour day-of-month month day-of-week\". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Specifies the time zone for secondary group refresh.\n"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "timeZone"
            ]
        },
        "snowflake:index/FunctionJavaArgument:FunctionJavaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionJavaImport:FunctionJavaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionJavaParameter:FunctionJavaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterEnableConsoleOutput:FunctionJavaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterLogLevel:FunctionJavaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterMetricLevel:FunctionJavaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameterTraceLevel:FunctionJavaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterEnableConsoleOutput:FunctionJavaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterLogLevel:FunctionJavaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterMetricLevel:FunctionJavaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaParameterTraceLevel:FunctionJavaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaSecret:FunctionJavaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterEnableConsoleOutput:FunctionJavascriptParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterLogLevel:FunctionJavascriptParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterMetricLevel:FunctionJavascriptParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameterTraceLevel:FunctionJavascriptParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterEnableConsoleOutput:FunctionJavascriptParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterLogLevel:FunctionJavascriptParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterMetricLevel:FunctionJavascriptParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptParameterTraceLevel:FunctionJavascriptParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonArgument:FunctionPythonArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionPythonImport:FunctionPythonImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionPythonParameter:FunctionPythonParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterEnableConsoleOutput:FunctionPythonParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterLogLevel:FunctionPythonParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterMetricLevel:FunctionPythonParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameterTraceLevel:FunctionPythonParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterEnableConsoleOutput:FunctionPythonParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterLogLevel:FunctionPythonParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterMetricLevel:FunctionPythonParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonParameterTraceLevel:FunctionPythonParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionPythonSecret:FunctionPythonSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaArgument:FunctionScalaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionScalaImport:FunctionScalaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionScalaParameter:FunctionScalaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterEnableConsoleOutput:FunctionScalaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterLogLevel:FunctionScalaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterMetricLevel:FunctionScalaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameterTraceLevel:FunctionScalaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterEnableConsoleOutput:FunctionScalaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterLogLevel:FunctionScalaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterMetricLevel:FunctionScalaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaParameterTraceLevel:FunctionScalaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaSecret:FunctionScalaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/FunctionSqlArgument:FunctionSqlArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the function definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/FunctionSqlParameter:FunctionSqlParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterEnableConsoleOutput:FunctionSqlParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterLogLevel:FunctionSqlParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterMetricLevel:FunctionSqlParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameterTraceLevel:FunctionSqlParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterEnableConsoleOutput:FunctionSqlParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterLogLevel:FunctionSqlParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterMetricLevel:FunctionSqlParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlParameterTraceLevel:FunctionSqlParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isDataMetric": {
                    "type": "boolean"
                },
                "isExternalFunction": {
                    "type": "boolean"
                },
                "isMemoizable": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isDataMetric",
                        "isExternalFunction",
                        "isMemoizable",
                        "isSecure",
                        "isTableFunction",
                        "language",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/GitRepositoryDescribeOutput:GitRepositoryDescribeOutput": {
            "properties": {
                "apiIntegration": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "gitCredentials": {
                    "type": "string"
                },
                "lastFetchedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiIntegration",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "gitCredentials",
                        "lastFetchedAt",
                        "name",
                        "origin",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/GitRepositoryShowOutput:GitRepositoryShowOutput": {
            "properties": {
                "apiIntegration": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "gitCredentials": {
                    "type": "string"
                },
                "lastFetchedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiIntegration",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "gitCredentials",
                        "lastFetchedAt",
                        "name",
                        "origin",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/GrantOwnershipOn:GrantOwnershipOn": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "Specifies the identifier for the object on which you are transferring ownership.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object on which you are transferring ownership. Available values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | COMPUTE POOL | DATA METRIC FUNCTION | DATABASE | DATABASE ROLE | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | EXTERNAL VOLUME | FAILOVER GROUP | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | ICEBERG TABLE | IMAGE REPOSITORY | INTEGRATION | MATERIALIZED VIEW | NETWORK POLICY | NETWORK RULE | PACKAGES POLICY | PIPE | PROCEDURE | MASKING POLICY | PASSWORD POLICY | PROJECTION POLICY | REPLICATION GROUP | RESOURCE MONITOR | ROLE | ROW ACCESS POLICY | SCHEMA | SESSION POLICY | SECRET | SEQUENCE | STAGE | STREAM | TABLE | TAG | TASK | USER | VIEW | WAREHOUSE\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantOwnershipOnAll:GrantOwnershipOnAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantOwnershipOnFuture:GrantOwnershipOnFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "Specifies the type of object in plural form on which you are transferring ownership. Available values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | COMPUTE POOLS | DATA METRIC FUNCTIONS | DATABASES | DATABASE ROLES | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | EXTERNAL VOLUMES | FAILOVER GROUPS | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | IMAGE REPOSITORIES | INTEGRATIONS | MATERIALIZED VIEWS | NETWORK POLICIES | NETWORK RULES | PACKAGES POLICIES | PIPES | PROCEDURES | MASKING POLICIES | PASSWORD POLICIES | PROJECTION POLICIES | REPLICATION GROUPS | RESOURCE MONITORS | ROLES | ROW ACCESS POLICIES | SCHEMAS | SESSION POLICIES | SECRETS | SEQUENCES | STAGES | STREAMS | TABLES | TAGS | TASKS | USERS | VIEWS | WAREHOUSES. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#required-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject": {
            "properties": {
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the account object on which privileges will be granted. Valid values are: `USER` | `RESOURCE MONITOR` | `WAREHOUSE` | `COMPUTE POOL` | `DATABASE` | `INTEGRATION` | `FAILOVER GROUP` | `REPLICATION GROUP` | `EXTERNAL VOLUME`\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectName",
                "objectType"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DATASET | DBT PROJECT | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | JOIN POLICY | MASKING POLICY | MATERIALIZED VIEW | MODEL | MODEL MONITOR | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PRIVACY POLICY | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SEMANTIC VIEW | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | SNAPSHOT POLICY | SNAPSHOT SET | STAGE | STREAM | STREAMLIT | TABLE | TAG | TASK | VIEW\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectAll:GrantPrivilegesToAccountRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DATASETS | DBT PROJECTS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | JOIN POLICIES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | MODEL MONITORS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PRIVACY POLICIES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SEMANTIC VIEWS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | SNAPSHOT POLICIES | SNAPSHOT SETS | STAGES | STREAMS | STREAMLITS | TABLES | TAGS | TASKS | VIEWS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObjectFuture:GrantPrivilegesToAccountRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DATASETS | DBT PROJECTS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | JOIN POLICIES | MATERIALIZED VIEWS | MODELS | MODEL MONITORS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PRIVACY POLICIES | PROCEDURES | SECRETS | SEMANTIC VIEWS | SERVICES | SEQUENCES | SNAPSHOTS | SNAPSHOT POLICIES | SNAPSHOT SETS | STAGES | STREAMS | STREAMLITS | TABLES | TASKS | VIEWS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema": {
            "properties": {
                "allSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "futureSchemasInDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "schemaName": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject": {
            "properties": {
                "all": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll",
                    "description": "Configures the privilege to be granted on all objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "future": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture",
                    "description": "Configures the privilege to be granted on future objects in either a database or schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectName": {
                    "type": "string",
                    "description": "The fully qualified name of the object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DATASET | DBT PROJECT | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | JOIN POLICY | MASKING POLICY | MATERIALIZED VIEW | MODEL | MODEL MONITOR | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PRIVACY POLICY | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SEMANTIC VIEW | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | SNAPSHOT POLICY | SNAPSHOT SET | STAGE | STREAM | STREAMLIT | TABLE | TAG | TASK | VIEW\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectAll:GrantPrivilegesToDatabaseRoleOnSchemaObjectAll": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DATASETS | DBT PROJECTS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | JOIN POLICIES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | MODEL MONITORS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PRIVACY POLICIES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SEMANTIC VIEWS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | SNAPSHOT POLICIES | SNAPSHOT SETS | STAGES | STREAMS | STREAMLITS | TABLES | TAGS | TASKS | VIEWS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture:GrantPrivilegesToDatabaseRoleOnSchemaObjectFuture": {
            "properties": {
                "inDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database.\n",
                    "willReplaceOnChanges": true
                },
                "inSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypePlural": {
                    "type": "string",
                    "description": "The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DATASETS | DBT PROJECTS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | JOIN POLICIES | MATERIALIZED VIEWS | MODELS | MODEL MONITORS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PRIVACY POLICIES | PROCEDURES | SECRETS | SEMANTIC VIEWS | SERVICES | SEQUENCES | SNAPSHOTS | SNAPSHOT POLICIES | SNAPSHOT SETS | STAGES | STREAMS | STREAMLITS | TABLES | TASKS | VIEWS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "objectTypePlural"
            ]
        },
        "snowflake:index/ImageRepositoryShowOutput:ImageRepositoryShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "privatelinkRepositoryUrl": {
                    "type": "string"
                },
                "repositoryUrl": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "privatelinkRepositoryUrl",
                        "repositoryUrl",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/JobServiceDescribeOutput:JobServiceDescribeOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "computePool",
                        "createdOn",
                        "currentInstances",
                        "databaseName",
                        "dnsName",
                        "externalAccessIntegrations",
                        "isAsyncJob",
                        "isJob",
                        "isUpgrading",
                        "managingObjectDomain",
                        "managingObjectName",
                        "maxInstances",
                        "minInstances",
                        "minReadyInstances",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "resumedOn",
                        "schemaName",
                        "spec",
                        "specDigest",
                        "status",
                        "suspendedOn",
                        "targetInstances",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/JobServiceFromSpecification:JobServiceFromSpecification": {
            "properties": {
                "file": {
                    "type": "string",
                    "description": "The file name of the service specification. Example: `spec.yaml`.\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "The fully qualified name of the stage containing the service specification file. At symbol (`@`) is added automatically. Example: `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003cstage_name\u003e\\\"\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The embedded text of the service specification.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "snowflake:index/JobServiceFromSpecificationTemplate:JobServiceFromSpecificationTemplate": {
            "properties": {
                "file": {
                    "type": "string",
                    "description": "The file name of the service specification template. Example: `spec.yaml`.\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to the service specification template file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "The fully qualified name of the stage containing the service specification template file. At symbol (`@`) is added automatically. Example: `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003cstage_name\u003e\\\"\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "text": {
                    "type": "string",
                    "description": "The embedded text of the service specification template.\n",
                    "willReplaceOnChanges": true
                },
                "usings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/JobServiceFromSpecificationTemplateUsing:JobServiceFromSpecificationTemplateUsing"
                    },
                    "description": "List of the specified template variables and the values of those variables.\n"
                }
            },
            "type": "object",
            "required": [
                "usings"
            ]
        },
        "snowflake:index/JobServiceFromSpecificationTemplateUsing:JobServiceFromSpecificationTemplateUsing": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the template variable. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the spec definition.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to the variable in the template. The provider wraps it in `$$` by default, so be aware of that while referencing the argument in the spec definition. The value must either be alphanumeric or valid JSON.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "snowflake:index/JobServiceShowOutput:JobServiceShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "computePool",
                        "createdOn",
                        "currentInstances",
                        "databaseName",
                        "dnsName",
                        "externalAccessIntegrations",
                        "isAsyncJob",
                        "isJob",
                        "isUpgrading",
                        "managingObjectDomain",
                        "managingObjectName",
                        "maxInstances",
                        "minInstances",
                        "minReadyInstances",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "resumedOn",
                        "schemaName",
                        "specDigest",
                        "status",
                        "suspendedOn",
                        "targetInstances",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterAbortDetachedQuery:LegacyServiceUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterAutocommit:LegacyServiceUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterBinaryInputFormat:LegacyServiceUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterBinaryOutputFormat:LegacyServiceUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientMemoryLimit:LegacyServiceUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx:LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientPrefetchThread:LegacyServiceUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientResultChunkSize:LegacyServiceUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientResultColumnCaseInsensitive:LegacyServiceUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientSessionKeepAlife:LegacyServiceUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterClientTimestampTypeMapping:LegacyServiceUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterDateInputFormat:LegacyServiceUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterDateOutputFormat:LegacyServiceUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization:LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterEnableUnredactedQuerySyntaxError:LegacyServiceUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicMerge:LegacyServiceUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicUpdate:LegacyServiceUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterGeographyOutputFormat:LegacyServiceUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterGeometryOutputFormat:LegacyServiceUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcTreatDecimalAsInt:LegacyServiceUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc:LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJdbcUseSessionTimezone:LegacyServiceUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterJsonIndent:LegacyServiceUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterLockTimeout:LegacyServiceUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterLogLevel:LegacyServiceUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterMultiStatementCount:LegacyServiceUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterNetworkPolicy:LegacyServiceUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterNoorderSequenceAsDefault:LegacyServiceUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterOdbcTreatDecimalAsInt:LegacyServiceUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterPreventUnloadToInternalStage:LegacyServiceUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterQueryTag:LegacyServiceUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterQuotedIdentifiersIgnoreCase:LegacyServiceUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterRowsPerResultset:LegacyServiceUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterS3StageVpceDnsName:LegacyServiceUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterSearchPath:LegacyServiceUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterSimulatedDataSharingConsumer:LegacyServiceUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStatementQueuedTimeoutInSecond:LegacyServiceUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStatementTimeoutInSecond:LegacyServiceUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterStrictJsonOutput:LegacyServiceUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimeInputFormat:LegacyServiceUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimeOutputFormat:LegacyServiceUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampDayIsAlways24h:LegacyServiceUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampInputFormat:LegacyServiceUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampLtzOutputFormat:LegacyServiceUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampNtzOutputFormat:LegacyServiceUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampOutputFormat:LegacyServiceUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampTypeMapping:LegacyServiceUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimestampTzOutputFormat:LegacyServiceUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTimezone:LegacyServiceUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTraceLevel:LegacyServiceUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTransactionAbortOnError:LegacyServiceUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTransactionDefaultIsolationLevel:LegacyServiceUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterTwoDigitCenturyStart:LegacyServiceUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterUnsupportedDdlAction:LegacyServiceUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterUseCachedResult:LegacyServiceUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterWeekOfYearPolicy:LegacyServiceUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameterWeekStart:LegacyServiceUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterAbortDetachedQuery:LegacyServiceUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterAutocommit:LegacyServiceUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterBinaryInputFormat:LegacyServiceUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterBinaryOutputFormat:LegacyServiceUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientMemoryLimit:LegacyServiceUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx:LegacyServiceUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientPrefetchThread:LegacyServiceUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientResultChunkSize:LegacyServiceUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientResultColumnCaseInsensitive:LegacyServiceUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientSessionKeepAlife:LegacyServiceUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:LegacyServiceUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterClientTimestampTypeMapping:LegacyServiceUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterDateInputFormat:LegacyServiceUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterDateOutputFormat:LegacyServiceUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization:LegacyServiceUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterEnableUnredactedQuerySyntaxError:LegacyServiceUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicMerge:LegacyServiceUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterErrorOnNondeterministicUpdate:LegacyServiceUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterGeographyOutputFormat:LegacyServiceUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterGeometryOutputFormat:LegacyServiceUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcTreatDecimalAsInt:LegacyServiceUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc:LegacyServiceUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJdbcUseSessionTimezone:LegacyServiceUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterJsonIndent:LegacyServiceUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterLockTimeout:LegacyServiceUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterLogLevel:LegacyServiceUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterMultiStatementCount:LegacyServiceUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterNetworkPolicy:LegacyServiceUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterNoorderSequenceAsDefault:LegacyServiceUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterOdbcTreatDecimalAsInt:LegacyServiceUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterPreventUnloadToInternalStage:LegacyServiceUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterQueryTag:LegacyServiceUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterQuotedIdentifiersIgnoreCase:LegacyServiceUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterRowsPerResultset:LegacyServiceUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterS3StageVpceDnsName:LegacyServiceUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterSearchPath:LegacyServiceUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterSimulatedDataSharingConsumer:LegacyServiceUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStatementQueuedTimeoutInSecond:LegacyServiceUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStatementTimeoutInSecond:LegacyServiceUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterStrictJsonOutput:LegacyServiceUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimeInputFormat:LegacyServiceUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimeOutputFormat:LegacyServiceUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampDayIsAlways24h:LegacyServiceUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampInputFormat:LegacyServiceUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampLtzOutputFormat:LegacyServiceUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampNtzOutputFormat:LegacyServiceUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampOutputFormat:LegacyServiceUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampTypeMapping:LegacyServiceUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimestampTzOutputFormat:LegacyServiceUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTimezone:LegacyServiceUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTraceLevel:LegacyServiceUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTransactionAbortOnError:LegacyServiceUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTransactionDefaultIsolationLevel:LegacyServiceUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterTwoDigitCenturyStart:LegacyServiceUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterUnsupportedDdlAction:LegacyServiceUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterUseCachedResult:LegacyServiceUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterWeekOfYearPolicy:LegacyServiceUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserParameterWeekStart:LegacyServiceUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ListingManifest:ListingManifest": {
            "properties": {
                "fromStage": {
                    "$ref": "#/types/snowflake:index/ListingManifestFromStage:ListingManifestFromStage",
                    "description": "Manifest provided from a given stage. If the manifest file is in the root, only stage needs to be passed. For more information on manifest syntax, see [Listing manifest reference](https://docs.snowflake.com/en/progaccess/listing-manifest-reference). A proper YAML indentation (2 spaces) is required.\n"
                },
                "fromString": {
                    "type": "string",
                    "description": "Manifest provided as a string. Wrapping `$$` signs are added by the provider automatically; do not include them. For more information on manifest syntax, see [Listing manifest reference](https://docs.snowflake.com/en/progaccess/listing-manifest-reference). Also, the multiline string syntax is a must here. A proper YAML indentation (2 spaces) is required.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ListingManifestFromStage:ListingManifestFromStage": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Location of the manifest file in the stage. If not specified, the manifest file will be expected to be at the root of the stage.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "Identifier of the stage where the manifest file is located.\n"
                },
                "versionComment": {
                    "type": "string",
                    "description": "Specifies a comment for the listing version. Whenever a new version is created, this comment will be associated with it. The comment on the version will be visible in the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command output.\n"
                },
                "versionName": {
                    "type": "string",
                    "description": "Represents manifest version name. It's case-sensitive and used in manifest versioning. Version name should be specified or changed whenever any changes in the manifest should be applied to the listing. Later on the versions of the listing can be analyzed by calling the [SHOW VERSIONS IN LISTING](https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing) command. The resource does not track the changes on the specified stage.\n"
                }
            },
            "type": "object",
            "required": [
                "stage"
            ]
        },
        "snowflake:index/ListingShowOutput:ListingShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "detailedTargetAccounts": {
                    "type": "string"
                },
                "distribution": {
                    "type": "string"
                },
                "globalName": {
                    "type": "string"
                },
                "isApplication": {
                    "type": "boolean"
                },
                "isByRequest": {
                    "type": "boolean"
                },
                "isLimitedTrial": {
                    "type": "boolean"
                },
                "isMonetized": {
                    "type": "boolean"
                },
                "isMountlessQueryable": {
                    "type": "boolean"
                },
                "isTargeted": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationProfileName": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "publishedOn": {
                    "type": "string"
                },
                "regions": {
                    "type": "string"
                },
                "rejectedOn": {
                    "type": "string"
                },
                "reviewState": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "subtitle": {
                    "type": "string"
                },
                "targetAccounts": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "uniformListingLocator": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "detailedTargetAccounts",
                        "distribution",
                        "globalName",
                        "isApplication",
                        "isByRequest",
                        "isLimitedTrial",
                        "isMonetized",
                        "isMountlessQueryable",
                        "isTargeted",
                        "name",
                        "organizationProfileName",
                        "owner",
                        "ownerRoleType",
                        "profile",
                        "publishedOn",
                        "regions",
                        "rejectedOn",
                        "reviewState",
                        "state",
                        "subtitle",
                        "targetAccounts",
                        "title",
                        "uniformListingLocator",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyDescribeOutputSignature:MaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "exemptOtherPolicies",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/MaterializedViewTag:MaterializedViewTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedIpList",
                        "allowedNetworkRuleList",
                        "blockedIpList",
                        "blockedNetworkRuleList"
                    ]
                }
            }
        },
        "snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "entriesInAllowedIpList",
                        "entriesInAllowedNetworkRules",
                        "entriesInBlockedIpList",
                        "entriesInBlockedNetworkRules",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList:OauthIntegrationForCustomClientsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputComment:OauthIntegrationForCustomClientsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputEnabled:OauthIntegrationForCustomClientsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy:OauthIntegrationForCustomClientsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForCustomClientsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForCustomClientsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthClientType:OauthIntegrationForCustomClientsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce:OauthIntegrationForCustomClientsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForCustomClientsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForCustomClientsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint:OauthIntegrationForCustomClientsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForCustomClientsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForCustomClientsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter": {
            "properties": {
                "oauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForCustomClientsRelatedParameterOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput": {
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockedRolesLists",
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "oauthAllowNonTlsRedirectUris",
                        "oauthAllowedAuthorizationEndpoints",
                        "oauthAllowedTokenEndpoints",
                        "oauthAuthorizationEndpoints",
                        "oauthClientRsaPublicKey2Fps",
                        "oauthClientRsaPublicKeyFps",
                        "oauthClientTypes",
                        "oauthEnforcePkces",
                        "oauthIssueRefreshTokens",
                        "oauthRefreshTokenValidities",
                        "oauthTokenEndpoints",
                        "oauthUseSecondaryRoles",
                        "preAuthorizedRolesLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputComment:OauthIntegrationForPartnerApplicationsDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputEnabled:OauthIntegrationForPartnerApplicationsDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy:OauthIntegrationForPartnerApplicationsDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType:OauthIntegrationForPartnerApplicationsDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce:OauthIntegrationForPartnerApplicationsDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken:OauthIntegrationForPartnerApplicationsDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity:OauthIntegrationForPartnerApplicationsDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint:OauthIntegrationForPartnerApplicationsDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole:OauthIntegrationForPartnerApplicationsDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList:OauthIntegrationForPartnerApplicationsDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter": {
            "properties": {
                "oauthAddPrivilegedRolesToBlockedLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oauthAddPrivilegedRolesToBlockedLists"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList:OauthIntegrationForPartnerApplicationsRelatedParameterOauthAddPrivilegedRolesToBlockedList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the object was created in.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the object to set the parameter for.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the object was created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountName",
                        "comment",
                        "connectionUrl",
                        "createdOn",
                        "failoverAllowedToAccounts",
                        "isPrimary",
                        "name",
                        "organizationName",
                        "primary",
                        "regionGroup",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureJavaImport:ProcedureJavaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterEnableConsoleOutput:ProcedureJavaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterLogLevel:ProcedureJavaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterMetricLevel:ProcedureJavaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameterTraceLevel:ProcedureJavaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterEnableConsoleOutput:ProcedureJavaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterLogLevel:ProcedureJavaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterMetricLevel:ProcedureJavaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaParameterTraceLevel:ProcedureJavaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterEnableConsoleOutput:ProcedureJavascriptParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterLogLevel:ProcedureJavascriptParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterMetricLevel:ProcedureJavascriptParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameterTraceLevel:ProcedureJavascriptParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterEnableConsoleOutput:ProcedureJavascriptParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterLogLevel:ProcedureJavascriptParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterMetricLevel:ProcedureJavascriptParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptParameterTraceLevel:ProcedureJavascriptParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedurePythonImport:ProcedurePythonImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterEnableConsoleOutput:ProcedurePythonParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterLogLevel:ProcedurePythonParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterMetricLevel:ProcedurePythonParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameterTraceLevel:ProcedurePythonParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterEnableConsoleOutput:ProcedurePythonParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterLogLevel:ProcedurePythonParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterMetricLevel:ProcedurePythonParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonParameterTraceLevel:ProcedurePythonParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureScalaImport:ProcedureScalaImport": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n",
                    "willReplaceOnChanges": true
                },
                "stageLocation": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterEnableConsoleOutput:ProcedureScalaParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterLogLevel:ProcedureScalaParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterMetricLevel:ProcedureScalaParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameterTraceLevel:ProcedureScalaParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterEnableConsoleOutput:ProcedureScalaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterLogLevel:ProcedureScalaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterMetricLevel:ProcedureScalaParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaParameterTraceLevel:ProcedureScalaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret": {
            "properties": {
                "secretId": {
                    "type": "string",
                    "description": "Fully qualified name of the allowed [secret](https://docs.snowflake.com/en/sql-reference/sql/create-secret). You will receive an error if you specify a SECRETS value whose secret isn’t also included in an integration specified by the EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "secretVariableName": {
                    "type": "string",
                    "description": "The variable that will be used in handler code when retrieving information from the secret.\n"
                }
            },
            "type": "object",
            "required": [
                "secretId",
                "secretVariableName"
            ]
        },
        "snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath": {
            "properties": {
                "pathOnStage": {
                    "type": "string",
                    "description": "Path for import on stage, without the leading `/`.\n"
                },
                "stageLocation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pathOnStage",
                "stageLocation"
            ]
        },
        "snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument": {
            "properties": {
                "argDataType": {
                    "type": "string",
                    "description": "The argument type.\n"
                },
                "argDefaultValue": {
                    "type": "string"
                },
                "argName": {
                    "type": "string",
                    "description": "The argument name. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the procedure definition.\n"
                }
            },
            "type": "object",
            "required": [
                "argDataType",
                "argName"
            ]
        },
        "snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter": {
            "properties": {
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterEnableConsoleOutput:ProcedureSqlParameterEnableConsoleOutput"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterLogLevel:ProcedureSqlParameterLogLevel"
                    }
                },
                "metricLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterMetricLevel:ProcedureSqlParameterMetricLevel"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameterTraceLevel:ProcedureSqlParameterTraceLevel"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableConsoleOutputs",
                        "logLevels",
                        "metricLevels",
                        "traceLevels"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterEnableConsoleOutput:ProcedureSqlParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterLogLevel:ProcedureSqlParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterMetricLevel:ProcedureSqlParameterMetricLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlParameterTraceLevel:ProcedureSqlParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput": {
            "properties": {
                "argumentsRaw": {
                    "type": "string"
                },
                "catalogName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "string"
                },
                "isAggregate": {
                    "type": "boolean"
                },
                "isAnsi": {
                    "type": "boolean"
                },
                "isBuiltin": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "isTableFunction": {
                    "type": "boolean"
                },
                "maxNumArguments": {
                    "type": "integer"
                },
                "minNumArguments": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "validForClustering": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "argumentsRaw",
                        "catalogName",
                        "createdOn",
                        "description",
                        "externalAccessIntegrations",
                        "isAggregate",
                        "isAnsi",
                        "isBuiltin",
                        "isSecure",
                        "isTableFunction",
                        "maxNumArguments",
                        "minNumArguments",
                        "name",
                        "schemaName",
                        "secrets",
                        "validForClustering"
                    ]
                }
            }
        },
        "snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client ID for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_ID` environment variable.\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_CLIENT_SECRET` environment variable.\n",
                    "secret": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "The redirect URI for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REDIRECT_URI` environment variable.\n",
                    "secret": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "The refresh token for the OAuth provider when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_REFRESH_TOKEN` environment variable.\n",
                    "secret": true
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint for the OAuth provider e.g. https://{yourDomain}/oauth/token when using a refresh token to renew access token. Can also be sourced from the `SNOWFLAKE_TOKEN_ACCESSOR_TOKEN_ENDPOINT` environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "redirectUri",
                "refreshToken",
                "tokenEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "creditQuota",
                        "endTime",
                        "frequency",
                        "level",
                        "name",
                        "owner",
                        "remainingCredits",
                        "startTime",
                        "suspendAt",
                        "suspendImmediateAt",
                        "usedCredits"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "name",
                        "returnType",
                        "signatures"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyDescribeOutputSignature:RowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "kind",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedEmailPatterns",
                        "allowedUserDomains",
                        "comments",
                        "saml2DigestMethodsUseds",
                        "saml2EnableSpInitiateds",
                        "saml2ForceAuthns",
                        "saml2Issuers",
                        "saml2PostLogoutRedirectUrls",
                        "saml2Providers",
                        "saml2RequestedNameidFormats",
                        "saml2SignRequests",
                        "saml2SignatureMethodsUseds",
                        "saml2SnowflakeAcsUrls",
                        "saml2SnowflakeIssuerUrls",
                        "saml2SnowflakeMetadatas",
                        "saml2SpInitiatedLoginPageLabels",
                        "saml2SsoUrls"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedEmailPattern:Saml2IntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputAllowedUserDomain:Saml2IntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputComment:Saml2IntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed:Saml2IntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2EnableSpInitiated:Saml2IntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2ForceAuthn:Saml2IntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Issuer:Saml2IntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl:Saml2IntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2Provider:Saml2IntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat:Saml2IntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignRequest:Saml2IntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed:Saml2IntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl:Saml2IntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata:Saml2IntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:Saml2IntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationDescribeOutputSaml2SsoUrl:Saml2IntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdOn",
                        "kind",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameter:SchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "catalogs",
                        "dataRetentionTimeInDays",
                        "defaultDdlCollations",
                        "enableConsoleOutputs",
                        "externalVolumes",
                        "logLevels",
                        "maxDataExtensionTimeInDays",
                        "pipeExecutionPauseds",
                        "quotedIdentifiersIgnoreCases",
                        "replaceInvalidCharacters",
                        "storageSerializationPolicies",
                        "suspendTaskAfterNumFailures",
                        "taskAutoRetryAttempts",
                        "traceLevels",
                        "userTaskManagedInitialWarehouseSizes",
                        "userTaskMinimumTriggerIntervalInSeconds",
                        "userTaskTimeoutMs"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterCatalog:SchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDataRetentionTimeInDay:SchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterDefaultDdlCollation:SchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterEnableConsoleOutput:SchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterExternalVolume:SchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterLogLevel:SchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterMaxDataExtensionTimeInDay:SchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterPipeExecutionPaused:SchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterQuotedIdentifiersIgnoreCase:SchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterReplaceInvalidCharacter:SchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterStorageSerializationPolicy:SchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterSuspendTaskAfterNumFailure:SchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTaskAutoRetryAttempt:SchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterTraceLevel:SchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskManagedInitialWarehouseSize:SchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskMinimumTriggerIntervalInSecond:SchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaParameterUserTaskTimeoutM:SchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/SchemaShowOutput:SchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "droppedOn",
                        "isCurrent",
                        "isDefault",
                        "name",
                        "options",
                        "owner",
                        "ownerRoleType",
                        "retentionTime"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput": {
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "enableds",
                        "networkPolicies",
                        "runAsRoles",
                        "syncPasswords"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputComment:ScimIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputEnabled:ScimIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputNetworkPolicy:ScimIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputRunAsRole:ScimIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationDescribeOutputSyncPassword:ScimIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "category",
                        "comment",
                        "createdOn",
                        "enabled",
                        "integrationType",
                        "name"
                    ]
                }
            }
        },
        "snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountLocator",
                        "accountName",
                        "comment",
                        "connectionUrl",
                        "createdOn",
                        "failoverAllowedToAccounts",
                        "isPrimary",
                        "name",
                        "organizationName",
                        "primary",
                        "regionGroup",
                        "snowflakeRegion"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "integrationName",
                        "name",
                        "oauthAccessTokenExpiryTime",
                        "oauthRefreshTokenExpiryTime",
                        "oauthScopes",
                        "owner",
                        "schemaName",
                        "secretType",
                        "username"
                    ]
                }
            }
        },
        "snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "oauthScopes",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "secretType"
                    ]
                }
            }
        },
        "snowflake:index/ServiceDescribeOutput:ServiceDescribeOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "computePool",
                        "createdOn",
                        "currentInstances",
                        "databaseName",
                        "dnsName",
                        "externalAccessIntegrations",
                        "isAsyncJob",
                        "isJob",
                        "isUpgrading",
                        "managingObjectDomain",
                        "managingObjectName",
                        "maxInstances",
                        "minInstances",
                        "minReadyInstances",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "resumedOn",
                        "schemaName",
                        "spec",
                        "specDigest",
                        "status",
                        "suspendedOn",
                        "targetInstances",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/ServiceFromSpecification:ServiceFromSpecification": {
            "properties": {
                "file": {
                    "type": "string",
                    "description": "The file name of the service specification. Example: `spec.yaml`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the service specification file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The fully qualified name of the stage containing the service specification file. At symbol (`@`) is added automatically. Example: `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003cstage_name\u003e\\\"\"`. For more information about this resource, see docs.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The embedded text of the service specification.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ServiceFromSpecificationTemplate:ServiceFromSpecificationTemplate": {
            "properties": {
                "file": {
                    "type": "string",
                    "description": "The file name of the service specification template. Example: `spec.yaml`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the service specification template file on the given stage. When the path is specified, the `/` character is automatically added as a path prefix. Example: `path/to/spec`.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The fully qualified name of the stage containing the service specification template file. At symbol (`@`) is added automatically. Example: `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003cstage_name\u003e\\\"\"`. For more information about this resource, see docs.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The embedded text of the service specification template.\n"
                },
                "usings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceFromSpecificationTemplateUsing:ServiceFromSpecificationTemplateUsing"
                    },
                    "description": "List of the specified template variables and the values of those variables.\n"
                }
            },
            "type": "object",
            "required": [
                "usings"
            ]
        },
        "snowflake:index/ServiceFromSpecificationTemplateUsing:ServiceFromSpecificationTemplateUsing": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the template variable. The provider wraps it in double quotes by default, so be aware of that while referencing the argument in the spec definition.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to assign to the variable in the template. The provider wraps it in `$$` by default, so be aware of that while referencing the argument in the spec definition. The value must either be alphanumeric or valid JSON.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "snowflake:index/ServiceShowOutput:ServiceShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspendSecs",
                        "comment",
                        "computePool",
                        "createdOn",
                        "currentInstances",
                        "databaseName",
                        "dnsName",
                        "externalAccessIntegrations",
                        "isAsyncJob",
                        "isJob",
                        "isUpgrading",
                        "managingObjectDomain",
                        "managingObjectName",
                        "maxInstances",
                        "minInstances",
                        "minReadyInstances",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "resumedOn",
                        "schemaName",
                        "specDigest",
                        "status",
                        "suspendedOn",
                        "targetInstances",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameter:ServiceUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterAbortDetachedQuery:ServiceUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterAutocommit:ServiceUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterBinaryInputFormat:ServiceUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterBinaryOutputFormat:ServiceUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientMemoryLimit:ServiceUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientMetadataRequestUseConnectionCtx:ServiceUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientPrefetchThread:ServiceUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientResultChunkSize:ServiceUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientResultColumnCaseInsensitive:ServiceUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientSessionKeepAlife:ServiceUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterClientTimestampTypeMapping:ServiceUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterDateInputFormat:ServiceUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterDateOutputFormat:ServiceUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterEnableUnloadPhysicalTypeOptimization:ServiceUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterEnableUnredactedQuerySyntaxError:ServiceUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterErrorOnNondeterministicMerge:ServiceUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterErrorOnNondeterministicUpdate:ServiceUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterGeographyOutputFormat:ServiceUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterGeometryOutputFormat:ServiceUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcTreatDecimalAsInt:ServiceUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcTreatTimestampNtzAsUtc:ServiceUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJdbcUseSessionTimezone:ServiceUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterJsonIndent:ServiceUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterLockTimeout:ServiceUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterLogLevel:ServiceUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterMultiStatementCount:ServiceUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterNetworkPolicy:ServiceUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterNoorderSequenceAsDefault:ServiceUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterOdbcTreatDecimalAsInt:ServiceUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterPreventUnloadToInternalStage:ServiceUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterQueryTag:ServiceUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterQuotedIdentifiersIgnoreCase:ServiceUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterRowsPerResultset:ServiceUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterS3StageVpceDnsName:ServiceUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterSearchPath:ServiceUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterSimulatedDataSharingConsumer:ServiceUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStatementQueuedTimeoutInSecond:ServiceUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStatementTimeoutInSecond:ServiceUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterStrictJsonOutput:ServiceUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimeInputFormat:ServiceUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimeOutputFormat:ServiceUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampDayIsAlways24h:ServiceUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampInputFormat:ServiceUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampLtzOutputFormat:ServiceUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampNtzOutputFormat:ServiceUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampOutputFormat:ServiceUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampTypeMapping:ServiceUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimestampTzOutputFormat:ServiceUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTimezone:ServiceUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTraceLevel:ServiceUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTransactionAbortOnError:ServiceUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTransactionDefaultIsolationLevel:ServiceUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterTwoDigitCenturyStart:ServiceUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterUnsupportedDdlAction:ServiceUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterUseCachedResult:ServiceUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterWeekOfYearPolicy:ServiceUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameterWeekStart:ServiceUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterAbortDetachedQuery:ServiceUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterAutocommit:ServiceUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterBinaryInputFormat:ServiceUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterBinaryOutputFormat:ServiceUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientMemoryLimit:ServiceUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientMetadataRequestUseConnectionCtx:ServiceUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientPrefetchThread:ServiceUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientResultChunkSize:ServiceUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientResultColumnCaseInsensitive:ServiceUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientSessionKeepAlife:ServiceUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency:ServiceUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterClientTimestampTypeMapping:ServiceUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterDateInputFormat:ServiceUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterDateOutputFormat:ServiceUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterEnableUnloadPhysicalTypeOptimization:ServiceUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterEnableUnredactedQuerySyntaxError:ServiceUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterErrorOnNondeterministicMerge:ServiceUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterErrorOnNondeterministicUpdate:ServiceUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterGeographyOutputFormat:ServiceUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterGeometryOutputFormat:ServiceUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcTreatDecimalAsInt:ServiceUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcTreatTimestampNtzAsUtc:ServiceUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJdbcUseSessionTimezone:ServiceUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterJsonIndent:ServiceUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterLockTimeout:ServiceUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterLogLevel:ServiceUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterMultiStatementCount:ServiceUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterNetworkPolicy:ServiceUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterNoorderSequenceAsDefault:ServiceUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterOdbcTreatDecimalAsInt:ServiceUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterPreventUnloadToInternalStage:ServiceUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterQueryTag:ServiceUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterQuotedIdentifiersIgnoreCase:ServiceUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterRowsPerResultset:ServiceUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterS3StageVpceDnsName:ServiceUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterSearchPath:ServiceUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterSimulatedDataSharingConsumer:ServiceUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStatementQueuedTimeoutInSecond:ServiceUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStatementTimeoutInSecond:ServiceUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterStrictJsonOutput:ServiceUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimeInputFormat:ServiceUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimeOutputFormat:ServiceUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampDayIsAlways24h:ServiceUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampInputFormat:ServiceUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampLtzOutputFormat:ServiceUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampNtzOutputFormat:ServiceUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampOutputFormat:ServiceUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampTypeMapping:ServiceUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimestampTzOutputFormat:ServiceUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTimezone:ServiceUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTraceLevel:ServiceUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTransactionAbortOnError:ServiceUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTransactionDefaultIsolationLevel:ServiceUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterTwoDigitCenturyStart:ServiceUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterUnsupportedDdlAction:ServiceUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterUseCachedResult:ServiceUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterWeekOfYearPolicy:ServiceUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserParameterWeekStart:ServiceUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StageTag:StageTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/StorageIntegrationDescribeOutput:StorageIntegrationDescribeOutput": {
            "properties": {
                "azureConsentUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputAzureConsentUrl:StorageIntegrationDescribeOutputAzureConsentUrl"
                    }
                },
                "azureMultiTenantAppNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputAzureMultiTenantAppName:StorageIntegrationDescribeOutputAzureMultiTenantAppName"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputComment:StorageIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputEnabled:StorageIntegrationDescribeOutputEnabled"
                    }
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageAllowedLocation:StorageIntegrationDescribeOutputStorageAllowedLocation"
                    }
                },
                "storageAwsExternalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageAwsExternalId:StorageIntegrationDescribeOutputStorageAwsExternalId"
                    }
                },
                "storageAwsIamUserArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageAwsIamUserArn:StorageIntegrationDescribeOutputStorageAwsIamUserArn"
                    }
                },
                "storageAwsObjectAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageAwsObjectAcl:StorageIntegrationDescribeOutputStorageAwsObjectAcl"
                    }
                },
                "storageAwsRoleArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageAwsRoleArn:StorageIntegrationDescribeOutputStorageAwsRoleArn"
                    }
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageBlockedLocation:StorageIntegrationDescribeOutputStorageBlockedLocation"
                    }
                },
                "storageGcpServiceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageGcpServiceAccount:StorageIntegrationDescribeOutputStorageGcpServiceAccount"
                    }
                },
                "storageProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputStorageProvider:StorageIntegrationDescribeOutputStorageProvider"
                    }
                },
                "usePrivatelinkEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutputUsePrivatelinkEndpoint:StorageIntegrationDescribeOutputUsePrivatelinkEndpoint"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "azureConsentUrls",
                        "azureMultiTenantAppNames",
                        "comments",
                        "enableds",
                        "storageAllowedLocations",
                        "storageAwsExternalIds",
                        "storageAwsIamUserArns",
                        "storageAwsObjectAcls",
                        "storageAwsRoleArns",
                        "storageBlockedLocations",
                        "storageGcpServiceAccounts",
                        "storageProviders",
                        "usePrivatelinkEndpoints"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputAzureConsentUrl:StorageIntegrationDescribeOutputAzureConsentUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputAzureMultiTenantAppName:StorageIntegrationDescribeOutputAzureMultiTenantAppName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputComment:StorageIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputEnabled:StorageIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageAllowedLocation:StorageIntegrationDescribeOutputStorageAllowedLocation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageAwsExternalId:StorageIntegrationDescribeOutputStorageAwsExternalId": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageAwsIamUserArn:StorageIntegrationDescribeOutputStorageAwsIamUserArn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageAwsObjectAcl:StorageIntegrationDescribeOutputStorageAwsObjectAcl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageAwsRoleArn:StorageIntegrationDescribeOutputStorageAwsRoleArn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageBlockedLocation:StorageIntegrationDescribeOutputStorageBlockedLocation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageGcpServiceAccount:StorageIntegrationDescribeOutputStorageGcpServiceAccount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputStorageProvider:StorageIntegrationDescribeOutputStorageProvider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StorageIntegrationDescribeOutputUsePrivatelinkEndpoint:StorageIntegrationDescribeOutputUsePrivatelinkEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "name",
                        "type",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnTableAt:StreamOnTableAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnTableBefore:StreamOnTableBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnViewAt:StreamOnViewAt": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnViewBefore:StreamOnViewBefore": {
            "properties": {
                "offset": {
                    "type": "string",
                    "description": "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N can be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the following types: DML (e.g. INSERT, UPDATE, DELETE), TCL (BEGIN, COMMIT transaction), SELECT.\n"
                },
                "stream": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in the stream is used as the AT point in time for returning change data for the source object.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP, TIMESTAMP*LTZ, TIMESTAMP*NTZ, or TIMESTAMP_TZ data type.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseTables",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "invalidReason",
                        "mode",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName",
                        "sourceType",
                        "stale",
                        "staleAfter",
                        "tableName",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultPackages",
                        "externalAccessIntegrations",
                        "externalAccessSecrets",
                        "importUrls",
                        "mainFile",
                        "name",
                        "queryWarehouse",
                        "rootLocation",
                        "title",
                        "urlId",
                        "userPackages"
                    ]
                }
            }
        },
        "snowflake:index/StreamlitShowOutput:StreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "queryWarehouse",
                        "schemaName",
                        "title",
                        "urlId"
                    ]
                }
            }
        },
        "snowflake:index/TableColumn:TableColumn": {
            "properties": {
                "collate": {
                    "type": "string",
                    "description": "(Default: ``) Column collation, e.g. utf8\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: ``) Column comment\n"
                },
                "default": {
                    "$ref": "#/types/snowflake:index/TableColumnDefault:TableColumnDefault",
                    "description": "Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied\n"
                },
                "identity": {
                    "$ref": "#/types/snowflake:index/TableColumnIdentity:TableColumnIdentity",
                    "description": "Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "(Default: ``) Masking policy to apply on column. It has to be a fully qualified name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n"
                },
                "nullable": {
                    "type": "boolean",
                    "description": "(Default: `true`) Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.\n"
                },
                "schemaEvolutionRecord": {
                    "type": "string",
                    "description": "Record of schema evolution.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT. For a full list of column types, see [Summary of Data Types](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "schemaEvolutionRecord",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/TableColumnDefault:TableColumnDefault": {
            "properties": {
                "constant": {
                    "type": "string",
                    "description": "The default constant value for the column\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The default expression value for the column\n"
                },
                "sequence": {
                    "type": "string",
                    "description": "The default sequence to use for the column\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableColumnIdentity:TableColumnIdentity": {
            "properties": {
                "startNum": {
                    "type": "integer",
                    "description": "(Default: `1`) The number to start incrementing at.\n"
                },
                "stepNum": {
                    "type": "integer",
                    "description": "(Default: `1`) Step size to increment by.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "(Default: `FULL`) The match type for the foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onDelete": {
                    "type": "string",
                    "description": "(Default: `NO ACTION`) Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "onUpdate": {
                    "type": "string",
                    "description": "(Default: `NO ACTION`) Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "references": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences",
                    "description": "The table and columns that the foreign key references.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "references"
            ]
        },
        "snowflake:index/TableConstraintForeignKeyPropertiesReferences:TableConstraintForeignKeyPropertiesReferences": {
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in foreign key reference\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "columns",
                "tableId"
            ]
        },
        "snowflake:index/TablePrimaryKey:TablePrimaryKey": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in primary key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                }
            },
            "type": "object",
            "required": [
                "keys"
            ]
        },
        "snowflake:index/TableTag:TableTag": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Name of the database that the tag was created in.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name, e.g. department.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Name of the schema that the tag was created in.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Tag value, e.g. marketing_info.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/TagShowOutput:TagShowOutput": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedValues",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "schemaName"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameter:TaskParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterAbortDetachedQuery:TaskParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterAutocommit:TaskParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterBinaryInputFormat:TaskParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterBinaryOutputFormat:TaskParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientMemoryLimit:TaskParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientMetadataRequestUseConnectionCtx:TaskParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientPrefetchThread:TaskParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientResultChunkSize:TaskParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientResultColumnCaseInsensitive:TaskParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientSessionKeepAliveHeartbeatFrequency:TaskParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientSessionKeepAlife:TaskParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterClientTimestampTypeMapping:TaskParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterDateInputFormat:TaskParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterDateOutputFormat:TaskParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterEnableUnloadPhysicalTypeOptimization:TaskParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterErrorOnNondeterministicMerge:TaskParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterErrorOnNondeterministicUpdate:TaskParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterGeographyOutputFormat:TaskParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterGeometryOutputFormat:TaskParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJdbcTreatTimestampNtzAsUtc:TaskParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJdbcUseSessionTimezone:TaskParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterJsonIndent:TaskParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterLockTimeout:TaskParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterLogLevel:TaskParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterMultiStatementCount:TaskParameterMultiStatementCount"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterNoorderSequenceAsDefault:TaskParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterOdbcTreatDecimalAsInt:TaskParameterOdbcTreatDecimalAsInt"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterQueryTag:TaskParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterQuotedIdentifiersIgnoreCase:TaskParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterRowsPerResultset:TaskParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterS3StageVpceDnsName:TaskParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterSearchPath:TaskParameterSearchPath"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStatementQueuedTimeoutInSecond:TaskParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStatementTimeoutInSecond:TaskParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterStrictJsonOutput:TaskParameterStrictJsonOutput"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterSuspendTaskAfterNumFailure:TaskParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTaskAutoRetryAttempt:TaskParameterTaskAutoRetryAttempt"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimeInputFormat:TaskParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimeOutputFormat:TaskParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampDayIsAlways24h:TaskParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampInputFormat:TaskParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampLtzOutputFormat:TaskParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampNtzOutputFormat:TaskParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampOutputFormat:TaskParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampTypeMapping:TaskParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimestampTzOutputFormat:TaskParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTimezone:TaskParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTraceLevel:TaskParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTransactionAbortOnError:TaskParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTransactionDefaultIsolationLevel:TaskParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterTwoDigitCenturyStart:TaskParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUnsupportedDdlAction:TaskParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUseCachedResult:TaskParameterUseCachedResult"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskManagedInitialWarehouseSize:TaskParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskMinimumTriggerIntervalInSecond:TaskParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterUserTaskTimeoutM:TaskParameterUserTaskTimeoutM"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterWeekOfYearPolicy:TaskParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameterWeekStart:TaskParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "suspendTaskAfterNumFailures",
                        "taskAutoRetryAttempts",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "userTaskManagedInitialWarehouseSizes",
                        "userTaskMinimumTriggerIntervalInSeconds",
                        "userTaskTimeoutMs",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterAbortDetachedQuery:TaskParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterAutocommit:TaskParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterBinaryInputFormat:TaskParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterBinaryOutputFormat:TaskParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientMemoryLimit:TaskParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientMetadataRequestUseConnectionCtx:TaskParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientPrefetchThread:TaskParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientResultChunkSize:TaskParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientResultColumnCaseInsensitive:TaskParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientSessionKeepAlife:TaskParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientSessionKeepAliveHeartbeatFrequency:TaskParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterClientTimestampTypeMapping:TaskParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterDateInputFormat:TaskParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterDateOutputFormat:TaskParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterEnableUnloadPhysicalTypeOptimization:TaskParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterErrorOnNondeterministicMerge:TaskParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterErrorOnNondeterministicUpdate:TaskParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterGeographyOutputFormat:TaskParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterGeometryOutputFormat:TaskParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJdbcTreatTimestampNtzAsUtc:TaskParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJdbcUseSessionTimezone:TaskParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterJsonIndent:TaskParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterLockTimeout:TaskParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterLogLevel:TaskParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterMultiStatementCount:TaskParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterNoorderSequenceAsDefault:TaskParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterOdbcTreatDecimalAsInt:TaskParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterQueryTag:TaskParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterQuotedIdentifiersIgnoreCase:TaskParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterRowsPerResultset:TaskParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterS3StageVpceDnsName:TaskParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterSearchPath:TaskParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStatementQueuedTimeoutInSecond:TaskParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStatementTimeoutInSecond:TaskParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterStrictJsonOutput:TaskParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterSuspendTaskAfterNumFailure:TaskParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTaskAutoRetryAttempt:TaskParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimeInputFormat:TaskParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimeOutputFormat:TaskParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampDayIsAlways24h:TaskParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampInputFormat:TaskParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampLtzOutputFormat:TaskParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampNtzOutputFormat:TaskParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampOutputFormat:TaskParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampTypeMapping:TaskParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimestampTzOutputFormat:TaskParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTimezone:TaskParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTraceLevel:TaskParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTransactionAbortOnError:TaskParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTransactionDefaultIsolationLevel:TaskParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterTwoDigitCenturyStart:TaskParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUnsupportedDdlAction:TaskParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUseCachedResult:TaskParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskManagedInitialWarehouseSize:TaskParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskMinimumTriggerIntervalInSecond:TaskParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterUserTaskTimeoutM:TaskParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterWeekOfYearPolicy:TaskParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskParameterWeekStart:TaskParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/TaskSchedule:TaskSchedule": {
            "properties": {
                "minutes": {
                    "type": "integer",
                    "description": "Specifies an interval (in minutes) of wait time inserted between runs of the task. Accepts positive integers only. (conflicts with `using_cron`)\n"
                },
                "usingCron": {
                    "type": "string",
                    "description": "Specifies a cron expression and time zone for periodically running the task. Supports a subset of standard cron utility syntax. (conflicts with `minutes`)\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/TaskShowOutput:TaskShowOutput": {
            "properties": {
                "allowOverlappingExecution": {
                    "type": "boolean"
                },
                "budget": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "definition": {
                    "type": "string"
                },
                "errorIntegration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastCommittedOn": {
                    "type": "string"
                },
                "lastSuspendedOn": {
                    "type": "string"
                },
                "lastSuspendedReason": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "taskRelations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskShowOutputTaskRelation:TaskShowOutputTaskRelation"
                    }
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowOverlappingExecution",
                        "budget",
                        "comment",
                        "condition",
                        "config",
                        "createdOn",
                        "databaseName",
                        "definition",
                        "errorIntegration",
                        "id",
                        "lastCommittedOn",
                        "lastSuspendedOn",
                        "lastSuspendedReason",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "predecessors",
                        "schedule",
                        "schemaName",
                        "state",
                        "taskRelations",
                        "warehouse"
                    ]
                }
            }
        },
        "snowflake:index/TaskShowOutputTaskRelation:TaskShowOutputTaskRelation": {
            "properties": {
                "finalizedRootTask": {
                    "type": "string"
                },
                "finalizer": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "finalizedRootTask",
                        "finalizer",
                        "predecessors"
                    ]
                }
            }
        },
        "snowflake:index/UserParameter:UserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterAutocommit:UserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterLogLevel:UserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQueryTag:UserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSearchPath:UserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTimezone:UserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameterWeekStart:UserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "abortDetachedQueries",
                        "autocommits",
                        "binaryInputFormats",
                        "binaryOutputFormats",
                        "clientMemoryLimits",
                        "clientMetadataRequestUseConnectionCtxes",
                        "clientPrefetchThreads",
                        "clientResultChunkSizes",
                        "clientResultColumnCaseInsensitives",
                        "clientSessionKeepAliveHeartbeatFrequencies",
                        "clientSessionKeepAlives",
                        "clientTimestampTypeMappings",
                        "dateInputFormats",
                        "dateOutputFormats",
                        "enableUnloadPhysicalTypeOptimizations",
                        "enableUnredactedQuerySyntaxErrors",
                        "errorOnNondeterministicMerges",
                        "errorOnNondeterministicUpdates",
                        "geographyOutputFormats",
                        "geometryOutputFormats",
                        "jdbcTreatDecimalAsInts",
                        "jdbcTreatTimestampNtzAsUtcs",
                        "jdbcUseSessionTimezones",
                        "jsonIndents",
                        "lockTimeouts",
                        "logLevels",
                        "multiStatementCounts",
                        "networkPolicies",
                        "noorderSequenceAsDefaults",
                        "odbcTreatDecimalAsInts",
                        "preventUnloadToInternalStages",
                        "queryTags",
                        "quotedIdentifiersIgnoreCases",
                        "rowsPerResultsets",
                        "s3StageVpceDnsNames",
                        "searchPaths",
                        "simulatedDataSharingConsumers",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds",
                        "strictJsonOutputs",
                        "timeInputFormats",
                        "timeOutputFormats",
                        "timestampDayIsAlways24hs",
                        "timestampInputFormats",
                        "timestampLtzOutputFormats",
                        "timestampNtzOutputFormats",
                        "timestampOutputFormats",
                        "timestampTypeMappings",
                        "timestampTzOutputFormats",
                        "timezones",
                        "traceLevels",
                        "transactionAbortOnErrors",
                        "transactionDefaultIsolationLevels",
                        "twoDigitCenturyStarts",
                        "unsupportedDdlActions",
                        "useCachedResults",
                        "weekOfYearPolicies",
                        "weekStarts"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAbortDetachedQuery:UserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterAutocommit:UserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryInputFormat:UserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterBinaryOutputFormat:UserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMemoryLimit:UserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientMetadataRequestUseConnectionCtx:UserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientPrefetchThread:UserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultChunkSize:UserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientResultColumnCaseInsensitive:UserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAlife:UserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientSessionKeepAliveHeartbeatFrequency:UserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterClientTimestampTypeMapping:UserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateInputFormat:UserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterDateOutputFormat:UserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnloadPhysicalTypeOptimization:UserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterEnableUnredactedQuerySyntaxError:UserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicMerge:UserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterErrorOnNondeterministicUpdate:UserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeographyOutputFormat:UserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterGeometryOutputFormat:UserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatDecimalAsInt:UserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcTreatTimestampNtzAsUtc:UserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJdbcUseSessionTimezone:UserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterJsonIndent:UserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLockTimeout:UserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterLogLevel:UserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterMultiStatementCount:UserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNetworkPolicy:UserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterNoorderSequenceAsDefault:UserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterOdbcTreatDecimalAsInt:UserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterPreventUnloadToInternalStage:UserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQueryTag:UserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterQuotedIdentifiersIgnoreCase:UserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterRowsPerResultset:UserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterS3StageVpceDnsName:UserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSearchPath:UserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterSimulatedDataSharingConsumer:UserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementQueuedTimeoutInSecond:UserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStatementTimeoutInSecond:UserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterStrictJsonOutput:UserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeInputFormat:UserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimeOutputFormat:UserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampDayIsAlways24h:UserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampInputFormat:UserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampLtzOutputFormat:UserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampNtzOutputFormat:UserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampOutputFormat:UserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTypeMapping:UserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimestampTzOutputFormat:UserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTimezone:UserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTraceLevel:UserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionAbortOnError:UserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTransactionDefaultIsolationLevel:UserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterTwoDigitCenturyStart:UserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUnsupportedDdlAction:UserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterUseCachedResult:UserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekOfYearPolicy:UserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserParameterWeekStart:UserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/UserProgrammaticAccessTokenShowOutput:UserProgrammaticAccessTokenShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "minsToBypassNetworkPolicyRequirement": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleRestriction": {
                    "type": "string"
                },
                "rotatedTo": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdBy",
                        "createdOn",
                        "expiresAt",
                        "minsToBypassNetworkPolicyRequirement",
                        "name",
                        "roleRestriction",
                        "rotatedTo",
                        "status",
                        "userName"
                    ]
                }
            }
        },
        "snowflake:index/UserShowOutput:UserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "createdOn",
                        "daysToExpiry",
                        "defaultNamespace",
                        "defaultRole",
                        "defaultSecondaryRoles",
                        "defaultWarehouse",
                        "disabled",
                        "displayName",
                        "email",
                        "expiresAtTime",
                        "extAuthnDuo",
                        "extAuthnUid",
                        "firstName",
                        "hasMfa",
                        "hasPassword",
                        "hasRsaPublicKey",
                        "lastName",
                        "lastSuccessLogin",
                        "lockedUntilTime",
                        "loginName",
                        "minsToBypassMfa",
                        "minsToUnlock",
                        "mustChangePassword",
                        "name",
                        "owner",
                        "snowflakeLock",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy": {
            "properties": {
                "entityKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns uniquely identify an entity within the view.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Aggregation policy name.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumn:ViewColumn": {
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "Specifies affected column name.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the column.\n"
                },
                "maskingPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy"
                },
                "projectionPolicy": {
                    "$ref": "#/types/snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy"
                }
            },
            "type": "object",
            "required": [
                "columnName"
            ]
        },
        "snowflake:index/ViewColumnMaskingPolicy:ViewColumnMaskingPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the masking policy to set on a column. For more information about this resource, see docs.\n"
                },
                "usings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewColumnProjectionPolicy:ViewColumnProjectionPolicy": {
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Specifies the projection policy to set on a column.\n"
                }
            },
            "type": "object",
            "required": [
                "policyName"
            ]
        },
        "snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction": {
            "properties": {
                "functionName": {
                    "type": "string",
                    "description": "Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.\n"
                },
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.\n"
                },
                "scheduleStatus": {
                    "type": "string",
                    "description": "The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`\n"
                }
            },
            "type": "object",
            "required": [
                "functionName",
                "ons",
                "scheduleStatus"
            ]
        },
        "snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule": {
            "properties": {
                "minutes": {
                    "type": "integer",
                    "description": "Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, `using_cron` field, or replace*triggered*by metadata argument.\n"
                },
                "usingCron": {
                    "type": "string",
                    "description": "Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/ViewDescribeOutput:ViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "check",
                        "comment",
                        "default",
                        "expression",
                        "isNullable",
                        "isPrimary",
                        "isUnique",
                        "kind",
                        "name",
                        "policyName",
                        "privacyDomain",
                        "type"
                    ]
                }
            }
        },
        "snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy": {
            "properties": {
                "ons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines which columns are affected by the policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "Row access policy name. For more information about this resource, see docs.\n"
                }
            },
            "type": "object",
            "required": [
                "ons",
                "policyName"
            ]
        },
        "snowflake:index/ViewShowOutput:ViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "changeTracking",
                        "comment",
                        "createdOn",
                        "databaseName",
                        "isMaterialized",
                        "isSecure",
                        "kind",
                        "name",
                        "owner",
                        "ownerRoleType",
                        "reserved",
                        "schemaName",
                        "text"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameter:WarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxConcurrencyLevels",
                        "statementQueuedTimeoutInSeconds",
                        "statementTimeoutInSeconds"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterMaxConcurrencyLevel:WarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementQueuedTimeoutInSecond:WarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseParameterStatementTimeoutInSecond:WarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "description",
                        "key",
                        "level",
                        "value"
                    ]
                }
            }
        },
        "snowflake:index/WarehouseShowOutput:WarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "generation": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceConstraint": {
                    "type": "string"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoResume",
                        "autoSuspend",
                        "available",
                        "comment",
                        "createdOn",
                        "enableQueryAcceleration",
                        "generation",
                        "isCurrent",
                        "isDefault",
                        "maxClusterCount",
                        "minClusterCount",
                        "name",
                        "other",
                        "owner",
                        "ownerRoleType",
                        "provisioning",
                        "queryAccelerationMaxScaleFactor",
                        "queued",
                        "quiescing",
                        "resourceConstraint",
                        "resourceMonitor",
                        "resumedOn",
                        "running",
                        "scalingPolicy",
                        "size",
                        "startedClusters",
                        "state",
                        "type",
                        "updatedOn"
                    ]
                }
            }
        },
        "snowflake:index/getAccountRolesAccountRole:getAccountRolesAccountRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getAccountRolesAccountRoleShowOutput:getAccountRolesAccountRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountRolesAccountRoleShowOutput:getAccountRolesAccountRoleShowOutput": {
            "properties": {
                "assignedToUsers": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "grantedRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignedToUsers",
                "comment",
                "createdOn",
                "grantedRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountsAccount:getAccountsAccount": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getAccountsAccountShowOutput:getAccountsAccountShowOutput"
                    },
                    "description": "Holds the output of SHOW ACCOUNTS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAccountsAccountShowOutput:getAccountsAccountShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountLocatorUrl": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "accountOldUrlLastUsed": {
                    "type": "string"
                },
                "accountOldUrlSavedOn": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "consumptionBillingEntityName": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "edition": {
                    "type": "string"
                },
                "isEventsAccount": {
                    "type": "boolean"
                },
                "isOrgAdmin": {
                    "type": "boolean"
                },
                "isOrganizationAccount": {
                    "type": "boolean"
                },
                "managedAccounts": {
                    "type": "integer"
                },
                "marketplaceConsumerBillingEntityName": {
                    "type": "string"
                },
                "marketplaceProviderBillingEntityName": {
                    "type": "string"
                },
                "movedOn": {
                    "type": "string"
                },
                "movedToOrganization": {
                    "type": "string"
                },
                "oldAccountUrl": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationOldUrl": {
                    "type": "string"
                },
                "organizationOldUrlLastUsed": {
                    "type": "string"
                },
                "organizationOldUrlSavedOn": {
                    "type": "string"
                },
                "organizationUrlExpirationOn": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "restoredOn": {
                    "type": "string"
                },
                "scheduledDeletionTime": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountLocatorUrl",
                "accountName",
                "accountOldUrlLastUsed",
                "accountOldUrlSavedOn",
                "accountUrl",
                "comment",
                "consumptionBillingEntityName",
                "createdOn",
                "droppedOn",
                "edition",
                "isEventsAccount",
                "isOrgAdmin",
                "isOrganizationAccount",
                "managedAccounts",
                "marketplaceConsumerBillingEntityName",
                "marketplaceProviderBillingEntityName",
                "movedOn",
                "movedToOrganization",
                "oldAccountUrl",
                "organizationName",
                "organizationOldUrl",
                "organizationOldUrlLastUsed",
                "organizationOldUrlSavedOn",
                "organizationUrlExpirationOn",
                "regionGroup",
                "restoredOn",
                "scheduledDeletionTime",
                "snowflakeRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getAlertsAlert:getAlertsAlert": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The text of the SQL statement that should be executed when the alert is triggered.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The text of the SQL statement that serves as the condition when the alert should be triggered.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the alert is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the alert.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the alert (i.e. has the OWNERSHIP privilege on the alert)\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the alert is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "comment",
                "condition",
                "databaseName",
                "name",
                "owner",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getComputePoolsComputePool:getComputePoolsComputePool": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getComputePoolsComputePoolDescribeOutput:getComputePoolsComputePoolDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE COMPUTE POOL.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getComputePoolsComputePoolShowOutput:getComputePoolsComputePoolShowOutput"
                    },
                    "description": "Holds the output of SHOW COMPUTE POOLS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getComputePoolsComputePoolDescribeOutput:getComputePoolsComputePoolDescribeOutput": {
            "properties": {
                "activeNodes": {
                    "type": "integer"
                },
                "application": {
                    "type": "string"
                },
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "string"
                },
                "idleNodes": {
                    "type": "integer"
                },
                "instanceFamily": {
                    "type": "string"
                },
                "isExclusive": {
                    "type": "boolean"
                },
                "maxNodes": {
                    "type": "integer"
                },
                "minNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "numJobs": {
                    "type": "integer"
                },
                "numServices": {
                    "type": "integer"
                },
                "owner": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "statusMessage": {
                    "type": "string"
                },
                "targetNodes": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "activeNodes",
                "application",
                "autoResume",
                "autoSuspendSecs",
                "comment",
                "createdOn",
                "errorCode",
                "idleNodes",
                "instanceFamily",
                "isExclusive",
                "maxNodes",
                "minNodes",
                "name",
                "numJobs",
                "numServices",
                "owner",
                "resumedOn",
                "state",
                "statusMessage",
                "targetNodes",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getComputePoolsComputePoolShowOutput:getComputePoolsComputePoolShowOutput": {
            "properties": {
                "activeNodes": {
                    "type": "integer"
                },
                "application": {
                    "type": "string"
                },
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "idleNodes": {
                    "type": "integer"
                },
                "instanceFamily": {
                    "type": "string"
                },
                "isExclusive": {
                    "type": "boolean"
                },
                "maxNodes": {
                    "type": "integer"
                },
                "minNodes": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "numJobs": {
                    "type": "integer"
                },
                "numServices": {
                    "type": "integer"
                },
                "owner": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "targetNodes": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "activeNodes",
                "application",
                "autoResume",
                "autoSuspendSecs",
                "comment",
                "createdOn",
                "idleNodes",
                "instanceFamily",
                "isExclusive",
                "maxNodes",
                "minNodes",
                "name",
                "numJobs",
                "numServices",
                "owner",
                "resumedOn",
                "state",
                "targetNodes",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getComputePoolsLimit:getComputePoolsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getConnectionsConnection:getConnectionsConnection": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getConnectionsConnectionShowOutput:getConnectionsConnectionShowOutput"
                    },
                    "description": "Holds the output of SHOW CONNECTIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getConnectionsConnectionShowOutput:getConnectionsConnectionShowOutput": {
            "properties": {
                "accountLocator": {
                    "type": "string"
                },
                "accountName": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "connectionUrl": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "failoverAllowedToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "regionGroup": {
                    "type": "string"
                },
                "snowflakeRegion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountName",
                "comment",
                "connectionUrl",
                "createdOn",
                "failoverAllowedToAccounts",
                "isPrimary",
                "name",
                "organizationName",
                "primary",
                "regionGroup",
                "snowflakeRegion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Comment for the cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the cortex search service was created.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the cortex search service is stored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cortex search service.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the cortex search service is stored.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASE ROLES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesDatabaseRoleShowOutput:getDatabaseRolesDatabaseRoleShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "grantedDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToDatabaseRoles": {
                    "type": "integer"
                },
                "grantedToRoles": {
                    "type": "integer"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isInherited": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "grantedDatabaseRoles",
                "grantedToDatabaseRoles",
                "grantedToRoles",
                "isCurrent",
                "isDefault",
                "isInherited",
                "name",
                "owner",
                "ownerRoleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE DATABASE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR DATABASE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput"
                    },
                    "description": "Holds the output of SHOW DATABASES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseDescribeOutput:getDatabasesDatabaseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameter:getDatabasesDatabaseParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterCatalog:getDatabasesDatabaseParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDataRetentionTimeInDay:getDatabasesDatabaseParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterDefaultDdlCollation:getDatabasesDatabaseParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterEnableConsoleOutput:getDatabasesDatabaseParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterExternalVolume:getDatabasesDatabaseParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterLogLevel:getDatabasesDatabaseParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterMaxDataExtensionTimeInDay:getDatabasesDatabaseParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase:getDatabasesDatabaseParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterReplaceInvalidCharacter:getDatabasesDatabaseParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterStorageSerializationPolicy:getDatabasesDatabaseParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterSuspendTaskAfterNumFailure:getDatabasesDatabaseParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTaskAutoRetryAttempt:getDatabasesDatabaseParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterTraceLevel:getDatabasesDatabaseParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize:getDatabasesDatabaseParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond:getDatabasesDatabaseParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseParameterUserTaskTimeoutM:getDatabasesDatabaseParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesDatabaseShowOutput:getDatabasesDatabaseShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "integer"
                },
                "transient": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "kind",
                "name",
                "options",
                "origin",
                "owner",
                "ownerRoleType",
                "resourceGroup",
                "retentionTime",
                "transient"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getDatabasesLimit:getDatabasesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getDynamicTablesIn:getDynamicTablesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesLike:getDynamicTablesLike": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "Filters the command output by object name. The filter uses case-insensitive pattern matching with support for SQL wildcard characters (% and _).\n"
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ]
        },
        "snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The optional FROM 'name_string' subclause effectively serves as a “cursor” for the results. This enables fetching the specified number of rows following the first row whose object name matches the specified string\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows to return.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord": {
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database in which the dynamic table is stored.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the dynamic table.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "INCREMENTAL if the dynamic table will use incremental refreshes, or FULL if it will recompute the whole table on every refresh.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays RUNNING for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "Schema in which the dynamic table is stored.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "The maximum duration that the dynamic table’s content should lag behind real time.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of the command that created this dynamic table (e.g. CREATE DYNAMIC TABLE ...).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse that provides the required resources to perform the incremental refreshes.\n"
                }
            },
            "type": "object",
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "comment",
                "createdOn",
                "dataTimestamp",
                "databaseName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "refreshMode",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schemaName",
                "targetLag",
                "text",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "language",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup": {
            "properties": {
                "accountLocator": {
                    "type": "string",
                    "description": "Account locator in a region.\n"
                },
                "accountName": {
                    "type": "string",
                    "description": "Name of the account.\n"
                },
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of accounts enabled for replication and failover.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of integration types that are enabled for replication.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment string.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time failover group was created.\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates whether the failover group is the primary group.\n"
                },
                "nextScheduledRefresh": {
                    "type": "string",
                    "description": "Date and time of the next scheduled refresh.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of specified object types enabled for replication and failover.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of your Snowflake organization.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role with the OWNERSHIP privilege on the failover group. NULL if the failover group is in a different region.\n"
                },
                "primary": {
                    "type": "string",
                    "description": "Name of the primary group.\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "Region group where the account is located. Note: this column is only visible to organizations that span multiple Region Groups.\n"
                },
                "replicationSchedule": {
                    "type": "string",
                    "description": "Scheduled interval for refresh; NULL if no replication schedule is set.\n"
                },
                "secondaryState": {
                    "type": "string",
                    "description": "Current state of scheduled refresh. Valid values are started or suspended. NULL if no replication schedule is set.\n"
                },
                "snowflakeRegion": {
                    "type": "string",
                    "description": "Snowflake Region where the account is located. A Snowflake Region is a distinct location within a cloud platform region that is isolated from other Snowflake Regions. A Snowflake Region can be either multi-tenant or single-tenant (for a Virtual Private Snowflake account).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of group. Valid value is FAILOVER.\n"
                }
            },
            "type": "object",
            "required": [
                "accountLocator",
                "accountName",
                "allowedAccounts",
                "allowedIntegrationTypes",
                "comment",
                "createdOn",
                "isPrimary",
                "nextScheduledRefresh",
                "objectTypes",
                "organizationName",
                "owner",
                "primary",
                "regionGroup",
                "replicationSchedule",
                "secondaryState",
                "snowflakeRegion",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "formatType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "formatType",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getFunctionsFunction:getFunctionsFunction": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGitRepositoriesGitRepository:getGitRepositoriesGitRepository": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesGitRepositoryDescribeOutput:getGitRepositoriesGitRepositoryDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE GIT REPOSITORY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesGitRepositoryShowOutput:getGitRepositoriesGitRepositoryShowOutput"
                    },
                    "description": "Holds the output of SHOW GIT REPOSITORIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGitRepositoriesGitRepositoryDescribeOutput:getGitRepositoriesGitRepositoryDescribeOutput": {
            "properties": {
                "apiIntegration": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "gitCredentials": {
                    "type": "string"
                },
                "lastFetchedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiIntegration",
                "comment",
                "createdOn",
                "databaseName",
                "gitCredentials",
                "lastFetchedAt",
                "name",
                "origin",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGitRepositoriesGitRepositoryShowOutput:getGitRepositoriesGitRepositoryShowOutput": {
            "properties": {
                "apiIntegration": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "gitCredentials": {
                    "type": "string"
                },
                "lastFetchedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiIntegration",
                "comment",
                "createdOn",
                "databaseName",
                "gitCredentials",
                "lastFetchedAt",
                "name",
                "origin",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGitRepositoriesIn:getGitRepositoriesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGitRepositoriesLimit:getGitRepositoriesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role. Schema must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;schema*name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the account role.\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges on new (i.e. future) objects granted to the database role. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrant:getGrantsGrant": {
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "The date and time the grant was created.\n"
                },
                "grantOption": {
                    "type": "boolean",
                    "description": "Whether the grantee can grant the privilege to others.\n"
                },
                "grantedBy": {
                    "type": "string",
                    "description": "The role that granted the privilege.\n"
                },
                "grantedOn": {
                    "type": "string",
                    "description": "The object on which the privilege was granted.\n"
                },
                "grantedTo": {
                    "type": "string",
                    "description": "The role to which the privilege was granted.\n"
                },
                "granteeName": {
                    "type": "string",
                    "description": "The name of the role to which the privilege was granted.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the object on which the privilege was granted.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege granted.\n"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "grantOption",
                "grantedBy",
                "grantedOn",
                "grantedTo",
                "granteeName",
                "name",
                "privilege"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the account role has been granted.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the users and roles to which the application role has been granted. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all users and roles to which the database role has been granted. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "share": {
                    "type": "string",
                    "description": "Lists all the accounts for the share and indicates the accounts that are using the share.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "Name of object to list privileges on.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to list privileges on.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo": {
            "properties": {
                "accountRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the role.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application.\n"
                },
                "applicationRole": {
                    "type": "string",
                    "description": "Lists all the privileges and roles granted to the application role. Must be a fully qualified name (\"\u0026lt;app*name\u0026gt;\".\"\u0026lt;app*role_name\u0026gt;\").\n"
                },
                "databaseRole": {
                    "type": "string",
                    "description": "Lists all privileges and roles granted to the database role. Must be a fully qualified name (\"\u0026lt;db*name\u0026gt;\".\"\u0026lt;database*role_name\u0026gt;\").\n"
                },
                "share": {
                    "$ref": "#/types/snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare",
                    "description": "Lists all the privileges granted to the share.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getGrantsGrantsToShare:getGrantsGrantsToShare": {
            "properties": {
                "shareName": {
                    "type": "string",
                    "description": "Lists all of the privileges and roles granted to the specified share.\n"
                }
            },
            "type": "object",
            "required": [
                "shareName"
            ]
        },
        "snowflake:index/getImageRepositoriesImageRepository:getImageRepositoriesImageRepository": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getImageRepositoriesImageRepositoryShowOutput:getImageRepositoriesImageRepositoryShowOutput"
                    },
                    "description": "Holds the output of SHOW IMAGE REPOSITORIES.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getImageRepositoriesImageRepositoryShowOutput:getImageRepositoriesImageRepositoryShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "privatelinkRepositoryUrl": {
                    "type": "string"
                },
                "repositoryUrl": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "privatelinkRepositoryUrl",
                "repositoryUrl",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getImageRepositoriesIn:getImageRepositoriesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE MASKING POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW MASKING POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutput:getMaskingPoliciesMaskingPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyDescribeOutputSignature:getMaskingPoliciesMaskingPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaskingPoliciesMaskingPolicyShowOutput:getMaskingPoliciesMaskingPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "exemptOtherPolicies": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "exemptOtherPolicies",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE NETWORK POLICIES.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW NETWORK POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyDescribeOutput:getNetworkPoliciesNetworkPolicyDescribeOutput": {
            "properties": {
                "allowedIpList": {
                    "type": "string"
                },
                "allowedNetworkRuleList": {
                    "type": "string"
                },
                "blockedIpList": {
                    "type": "string"
                },
                "blockedNetworkRuleList": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedIpList",
                "allowedNetworkRuleList",
                "blockedIpList",
                "blockedNetworkRuleList"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getNetworkPoliciesNetworkPolicyShowOutput:getNetworkPoliciesNetworkPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "entriesInAllowedIpList": {
                    "type": "integer"
                },
                "entriesInAllowedNetworkRules": {
                    "type": "integer"
                },
                "entriesInBlockedIpList": {
                    "type": "integer"
                },
                "entriesInBlockedNetworkRules": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "entriesInAllowedIpList",
                "entriesInAllowedNetworkRules",
                "entriesInBlockedIpList",
                "entriesInBlockedNetworkRules",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getParametersParameter:getParametersParameter": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value of the parameter\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the parameter\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the parameter\n"
                },
                "level": {
                    "type": "string",
                    "description": "The level of the parameter\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the parameter\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getPipesPipe:getPipesPipe": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "integration": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "integration",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getProceduresProcedure:getProceduresProcedure": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "argumentTypes",
                "comment",
                "database",
                "name",
                "returnType",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput"
                    },
                    "description": "Holds the output of SHOW RESOURCE MONITORS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getResourceMonitorsResourceMonitorShowOutput:getResourceMonitorsResourceMonitorShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "creditQuota": {
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "remainingCredits": {
                    "type": "number"
                },
                "startTime": {
                    "type": "string"
                },
                "suspendAt": {
                    "type": "integer"
                },
                "suspendImmediateAt": {
                    "type": "integer"
                },
                "usedCredits": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "creditQuota",
                "endTime",
                "frequency",
                "level",
                "name",
                "owner",
                "remainingCredits",
                "startTime",
                "suspendAt",
                "suspendImmediateAt",
                "usedCredits"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE ROW ACCESS POLICY.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput"
                    },
                    "description": "Holds the output of SHOW ROW ACCESS POLICIES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutput:getRowAccessPoliciesRowAccessPolicyDescribeOutput": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "returnType": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "name",
                "returnType",
                "signatures"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature:getRowAccessPoliciesRowAccessPolicyDescribeOutputSignature": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getRowAccessPoliciesRowAccessPolicyShowOutput:getRowAccessPoliciesRowAccessPolicyShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "kind",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasIn:getSchemasIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getSchemasLimit:getSchemasLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getSchemasSchema:getSchemasSchema": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SCHEMA.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR SCHEMA.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput"
                    },
                    "description": "Holds the output of SHOW SCHEMAS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaDescribeOutput:getSchemasSchemaDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameter:getSchemasSchemaParameter": {
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog"
                    }
                },
                "dataRetentionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay"
                    }
                },
                "defaultDdlCollations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation"
                    }
                },
                "enableConsoleOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput"
                    }
                },
                "externalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel"
                    }
                },
                "maxDataExtensionTimeInDays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay"
                    }
                },
                "pipeExecutionPauseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "replaceInvalidCharacters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter"
                    }
                },
                "storageSerializationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM"
                    }
                }
            },
            "type": "object",
            "required": [
                "catalogs",
                "dataRetentionTimeInDays",
                "defaultDdlCollations",
                "enableConsoleOutputs",
                "externalVolumes",
                "logLevels",
                "maxDataExtensionTimeInDays",
                "pipeExecutionPauseds",
                "quotedIdentifiersIgnoreCases",
                "replaceInvalidCharacters",
                "storageSerializationPolicies",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevels",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterCatalog:getSchemasSchemaParameterCatalog": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDataRetentionTimeInDay:getSchemasSchemaParameterDataRetentionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterDefaultDdlCollation:getSchemasSchemaParameterDefaultDdlCollation": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterEnableConsoleOutput:getSchemasSchemaParameterEnableConsoleOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterExternalVolume:getSchemasSchemaParameterExternalVolume": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterLogLevel:getSchemasSchemaParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterMaxDataExtensionTimeInDay:getSchemasSchemaParameterMaxDataExtensionTimeInDay": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterPipeExecutionPaused:getSchemasSchemaParameterPipeExecutionPaused": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterQuotedIdentifiersIgnoreCase:getSchemasSchemaParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterReplaceInvalidCharacter:getSchemasSchemaParameterReplaceInvalidCharacter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterStorageSerializationPolicy:getSchemasSchemaParameterStorageSerializationPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterSuspendTaskAfterNumFailure:getSchemasSchemaParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTaskAutoRetryAttempt:getSchemasSchemaParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterTraceLevel:getSchemasSchemaParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize:getSchemasSchemaParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond:getSchemasSchemaParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaParameterUserTaskTimeoutM:getSchemasSchemaParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSchemasSchemaShowOutput:getSchemasSchemaShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "droppedOn",
                "isCurrent",
                "isDefault",
                "name",
                "options",
                "owner",
                "ownerRoleType",
                "retentionTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsIn:getSecretsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getSecretsSecret:getSecretsSecret": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecretsSecretDescribeOutput:getSecretsSecretDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SECRET.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecretsSecretShowOutput:getSecretsSecretShowOutput"
                    },
                    "description": "Holds the output of SHOW SECRETS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsSecretDescribeOutput:getSecretsSecretDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "integrationName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthAccessTokenExpiryTime": {
                    "type": "string"
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "integrationName",
                "name",
                "oauthAccessTokenExpiryTime",
                "oauthRefreshTokenExpiryTime",
                "oauthScopes",
                "owner",
                "schemaName",
                "secretType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecretsSecretShowOutput:getSecretsSecretShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "secretType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "oauthScopes",
                "owner",
                "ownerRoleType",
                "schemaName",
                "secretType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SECURITY INTEGRATIONS.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput"
                    },
                    "description": "Holds the output of SHOW SECURITY INTEGRATIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutput:getSecurityIntegrationsSecurityIntegrationDescribeOutput": {
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern"
                    }
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain"
                    }
                },
                "authTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType"
                    }
                },
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment"
                    }
                },
                "enableds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled"
                    }
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList"
                    }
                },
                "externalOauthAnyRoleModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode"
                    }
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList"
                    }
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList"
                    }
                },
                "externalOauthIssuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer"
                    }
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl"
                    }
                },
                "externalOauthRsaPublicKey2s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2"
                    }
                },
                "externalOauthRsaPublicKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey"
                    }
                },
                "externalOauthScopeDelimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter"
                    }
                },
                "externalOauthSnowflakeUserMappingAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute"
                    }
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy"
                    }
                },
                "oauthAccessTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity"
                    }
                },
                "oauthAllowNonTlsRedirectUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri"
                    }
                },
                "oauthAllowedAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint"
                    }
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope"
                    }
                },
                "oauthAllowedTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint"
                    }
                },
                "oauthAuthorizationEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint"
                    }
                },
                "oauthClientAuthMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod"
                    }
                },
                "oauthClientRsaPublicKey2Fps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp"
                    }
                },
                "oauthClientRsaPublicKeyFps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp"
                    }
                },
                "oauthClientTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType"
                    }
                },
                "oauthEnforcePkces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce"
                    }
                },
                "oauthGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant"
                    }
                },
                "oauthIssueRefreshTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken"
                    }
                },
                "oauthRefreshTokenValidities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity"
                    }
                },
                "oauthTokenEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint"
                    }
                },
                "oauthUseSecondaryRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole"
                    }
                },
                "parentIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration"
                    }
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList"
                    }
                },
                "runAsRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole"
                    }
                },
                "saml2DigestMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed"
                    }
                },
                "saml2EnableSpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated"
                    }
                },
                "saml2ForceAuthns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn"
                    }
                },
                "saml2Issuers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer"
                    }
                },
                "saml2PostLogoutRedirectUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl"
                    }
                },
                "saml2Providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider"
                    }
                },
                "saml2RequestedNameidFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat"
                    }
                },
                "saml2SignRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest"
                    }
                },
                "saml2SignatureMethodsUseds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed"
                    }
                },
                "saml2SnowflakeAcsUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl"
                    }
                },
                "saml2SnowflakeIssuerUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl"
                    }
                },
                "saml2SnowflakeMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata"
                    }
                },
                "saml2SpInitiatedLoginPageLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel"
                    }
                },
                "saml2SsoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl"
                    }
                },
                "syncPasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedEmailPatterns",
                "allowedUserDomains",
                "authTypes",
                "blockedRolesLists",
                "comments",
                "enableds",
                "externalOauthAllowedRolesLists",
                "externalOauthAnyRoleModes",
                "externalOauthAudienceLists",
                "externalOauthBlockedRolesLists",
                "externalOauthIssuers",
                "externalOauthJwsKeysUrls",
                "externalOauthRsaPublicKeys",
                "externalOauthRsaPublicKey2s",
                "externalOauthScopeDelimiters",
                "externalOauthSnowflakeUserMappingAttributes",
                "externalOauthTokenUserMappingClaims",
                "networkPolicies",
                "oauthAccessTokenValidities",
                "oauthAllowNonTlsRedirectUris",
                "oauthAllowedAuthorizationEndpoints",
                "oauthAllowedScopes",
                "oauthAllowedTokenEndpoints",
                "oauthAuthorizationEndpoints",
                "oauthClientAuthMethods",
                "oauthClientRsaPublicKey2Fps",
                "oauthClientRsaPublicKeyFps",
                "oauthClientTypes",
                "oauthEnforcePkces",
                "oauthGrants",
                "oauthIssueRefreshTokens",
                "oauthRefreshTokenValidities",
                "oauthTokenEndpoints",
                "oauthUseSecondaryRoles",
                "parentIntegrations",
                "preAuthorizedRolesLists",
                "runAsRoles",
                "saml2DigestMethodsUseds",
                "saml2EnableSpInitiateds",
                "saml2ForceAuthns",
                "saml2Issuers",
                "saml2PostLogoutRedirectUrls",
                "saml2Providers",
                "saml2RequestedNameidFormats",
                "saml2SignRequests",
                "saml2SignatureMethodsUseds",
                "saml2SnowflakeAcsUrls",
                "saml2SnowflakeIssuerUrls",
                "saml2SnowflakeMetadatas",
                "saml2SpInitiatedLoginPageLabels",
                "saml2SsoUrls",
                "syncPasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedEmailPattern": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain:getSecurityIntegrationsSecurityIntegrationDescribeOutputAllowedUserDomain": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType:getSecurityIntegrationsSecurityIntegrationDescribeOutputAuthType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputComment:getSecurityIntegrationsSecurityIntegrationDescribeOutputComment": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled:getSecurityIntegrationsSecurityIntegrationDescribeOutputEnabled": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAllowedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAnyRoleMode": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthAudienceList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthBlockedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthIssuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthJwsKeysUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey2": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthRsaPublicKey": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthScopeDelimiter": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthSnowflakeUserMappingAttribute": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim:getSecurityIntegrationsSecurityIntegrationDescribeOutputExternalOauthTokenUserMappingClaim": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy:getSecurityIntegrationsSecurityIntegrationDescribeOutputNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAccessTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowNonTlsRedirectUri": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedScope": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAllowedTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthAuthorizationEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientAuthMethod": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKey2Fp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientRsaPublicKeyFp": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthClientType": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthEnforcePkce": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthGrant": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthIssueRefreshToken": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthRefreshTokenValidity": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthTokenEndpoint": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputOauthUseSecondaryRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration:getSecurityIntegrationsSecurityIntegrationDescribeOutputParentIntegration": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList:getSecurityIntegrationsSecurityIntegrationDescribeOutputPreAuthorizedRolesList": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole:getSecurityIntegrationsSecurityIntegrationDescribeOutputRunAsRole": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2DigestMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2EnableSpInitiated": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2ForceAuthn": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Issuer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2PostLogoutRedirectUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2Provider": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2RequestedNameidFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignRequest": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SignatureMethodsUsed": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeAcsUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeIssuerUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SnowflakeMetadata": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SpInitiatedLoginPageLabel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl:getSecurityIntegrationsSecurityIntegrationDescribeOutputSaml2SsoUrl": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword:getSecurityIntegrationsSecurityIntegrationDescribeOutputSyncPassword": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "name",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSecurityIntegrationsSecurityIntegrationShowOutput:getSecurityIntegrationsSecurityIntegrationShowOutput": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "integrationType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "comment",
                "createdOn",
                "enabled",
                "integrationType",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSequencesSequence:getSequencesSequence": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getServicesIn:getServicesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "computePool": {
                    "type": "string",
                    "description": "Returns records for the specified compute pool.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getServicesLimit:getServicesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getServicesService:getServicesService": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getServicesServiceDescribeOutput:getServicesServiceDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE SERVICE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getServicesServiceShowOutput:getServicesServiceShowOutput"
                    },
                    "description": "Holds the output of SHOW SERVICES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getServicesServiceDescribeOutput:getServicesServiceDescribeOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoResume",
                "autoSuspendSecs",
                "comment",
                "computePool",
                "createdOn",
                "currentInstances",
                "databaseName",
                "dnsName",
                "externalAccessIntegrations",
                "isAsyncJob",
                "isJob",
                "isUpgrading",
                "managingObjectDomain",
                "managingObjectName",
                "maxInstances",
                "minInstances",
                "minReadyInstances",
                "name",
                "owner",
                "ownerRoleType",
                "queryWarehouse",
                "resumedOn",
                "schemaName",
                "spec",
                "specDigest",
                "status",
                "suspendedOn",
                "targetInstances",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getServicesServiceShowOutput:getServicesServiceShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspendSecs": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "computePool": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "currentInstances": {
                    "type": "integer"
                },
                "databaseName": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isAsyncJob": {
                    "type": "boolean"
                },
                "isJob": {
                    "type": "boolean"
                },
                "isUpgrading": {
                    "type": "boolean"
                },
                "managingObjectDomain": {
                    "type": "string"
                },
                "managingObjectName": {
                    "type": "string"
                },
                "maxInstances": {
                    "type": "integer"
                },
                "minInstances": {
                    "type": "integer"
                },
                "minReadyInstances": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "specDigest": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "suspendedOn": {
                    "type": "string"
                },
                "targetInstances": {
                    "type": "integer"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoResume",
                "autoSuspendSecs",
                "comment",
                "computePool",
                "createdOn",
                "currentInstances",
                "databaseName",
                "dnsName",
                "externalAccessIntegrations",
                "isAsyncJob",
                "isJob",
                "isUpgrading",
                "managingObjectDomain",
                "managingObjectName",
                "maxInstances",
                "minInstances",
                "minReadyInstances",
                "name",
                "owner",
                "ownerRoleType",
                "queryWarehouse",
                "resumedOn",
                "schemaName",
                "specDigest",
                "status",
                "suspendedOn",
                "targetInstances",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getSharesShare:getSharesShare": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment on the share.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the share.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the share.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the share.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "For the OUTBOUND share, list of consumers.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "kind",
                "name",
                "owner",
                "tos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStagesStage:getStagesStage": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "storageIntegration": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "database",
                "name",
                "schema",
                "storageIntegration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "enabled",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsIn:getStreamlitsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database (db_name).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema (schema_name).\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getStreamlitsLimit:getStreamlitsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE STREAMLIT.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput"
                    },
                    "description": "Holds the output of SHOW STREAMLITS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitDescribeOutput:getStreamlitsStreamlitDescribeOutput": {
            "properties": {
                "defaultPackages": {
                    "type": "string"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalAccessSecrets": {
                    "type": "string"
                },
                "importUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "rootLocation": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                },
                "userPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultPackages",
                "externalAccessIntegrations",
                "externalAccessSecrets",
                "importUrls",
                "mainFile",
                "name",
                "queryWarehouse",
                "rootLocation",
                "title",
                "urlId",
                "userPackages"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamlitsStreamlitShowOutput:getStreamlitsStreamlitShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "queryWarehouse": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urlId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "queryWarehouse",
                "schemaName",
                "title",
                "urlId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsIn:getStreamsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getStreamsLimit:getStreamsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getStreamsStream:getStreamsStream": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamsStreamDescribeOutput:getStreamsStreamDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE STREAM.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getStreamsStreamShowOutput:getStreamsStreamShowOutput"
                    },
                    "description": "Holds the output of SHOW STREAMS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsStreamDescribeOutput:getStreamsStreamDescribeOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseTables",
                "comment",
                "createdOn",
                "databaseName",
                "invalidReason",
                "mode",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName",
                "sourceType",
                "stale",
                "staleAfter",
                "tableName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getStreamsStreamShowOutput:getStreamsStreamShowOutput": {
            "properties": {
                "baseTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "invalidReason": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "stale": {
                    "type": "boolean"
                },
                "staleAfter": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseTables",
                "comment",
                "createdOn",
                "databaseName",
                "invalidReason",
                "mode",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName",
                "sourceType",
                "stale",
                "staleAfter",
                "tableName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTablesIn:getTablesIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getTablesLimit:getTablesLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getTablesTable:getTablesTable": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTablesTableDescribeOutput:getTablesTableDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE TABLES.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTablesTableShowOutput:getTablesTableShowOutput"
                    },
                    "description": "Holds the output of SHOW TABLES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTablesTableDescribeOutput:getTablesTableDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "collation": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "schemaEvolutionRecord": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "check",
                "collation",
                "comment",
                "default",
                "expression",
                "isNullable",
                "isPrimary",
                "isUnique",
                "kind",
                "name",
                "policyName",
                "schemaEvolutionRecord",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTablesTableShowOutput:getTablesTableShowOutput": {
            "properties": {
                "automaticClustering": {
                    "type": "boolean"
                },
                "budget": {
                    "type": "string"
                },
                "bytes": {
                    "type": "integer"
                },
                "changeTracking": {
                    "type": "boolean"
                },
                "clusterBy": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "droppedOn": {
                    "type": "string"
                },
                "enableSchemaEvolution": {
                    "type": "boolean"
                },
                "isEvent": {
                    "type": "boolean"
                },
                "isExternal": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "retentionTime": {
                    "type": "integer"
                },
                "rows": {
                    "type": "integer"
                },
                "schemaName": {
                    "type": "string"
                },
                "searchOptimization": {
                    "type": "boolean"
                },
                "searchOptimizationBytes": {
                    "type": "integer"
                },
                "searchOptimizationProgress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "automaticClustering",
                "budget",
                "bytes",
                "changeTracking",
                "clusterBy",
                "comment",
                "createdOn",
                "databaseName",
                "droppedOn",
                "enableSchemaEvolution",
                "isEvent",
                "isExternal",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "retentionTime",
                "rows",
                "schemaName",
                "searchOptimization",
                "searchOptimizationBytes",
                "searchOptimizationProgress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTagsIn:getTagsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getTagsTag:getTagsTag": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTagsTagShowOutput:getTagsTagShowOutput"
                    },
                    "description": "Holds the output of SHOW TAGS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTagsTagShowOutput:getTagsTagShowOutput": {
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedValues",
                "comment",
                "createdOn",
                "databaseName",
                "name",
                "owner",
                "ownerRoleType",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksIn:getTasksIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "application": {
                    "type": "string",
                    "description": "Returns records for the specified application.\n"
                },
                "applicationPackage": {
                    "type": "string",
                    "description": "Returns records for the specified application package.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getTasksLimit:getTasksLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getTasksTask:getTasksTask": {
            "properties": {
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameter:getTasksTaskParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR TASK.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskShowOutput:getTasksTaskShowOutput"
                    },
                    "description": "Holds the output of SHOW TASKS.\n"
                }
            },
            "type": "object",
            "required": [
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameter:getTasksTaskParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterAbortDetachedQuery:getTasksTaskParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterAutocommit:getTasksTaskParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterBinaryInputFormat:getTasksTaskParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterBinaryOutputFormat:getTasksTaskParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientMemoryLimit:getTasksTaskParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientMetadataRequestUseConnectionCtx:getTasksTaskParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientPrefetchThread:getTasksTaskParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientResultChunkSize:getTasksTaskParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientResultColumnCaseInsensitive:getTasksTaskParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency:getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientSessionKeepAlife:getTasksTaskParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterClientTimestampTypeMapping:getTasksTaskParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterDateInputFormat:getTasksTaskParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterDateOutputFormat:getTasksTaskParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterEnableUnloadPhysicalTypeOptimization:getTasksTaskParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterErrorOnNondeterministicMerge:getTasksTaskParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterErrorOnNondeterministicUpdate:getTasksTaskParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterGeographyOutputFormat:getTasksTaskParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterGeometryOutputFormat:getTasksTaskParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJdbcTreatTimestampNtzAsUtc:getTasksTaskParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJdbcUseSessionTimezone:getTasksTaskParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterJsonIndent:getTasksTaskParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterLockTimeout:getTasksTaskParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterLogLevel:getTasksTaskParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterMultiStatementCount:getTasksTaskParameterMultiStatementCount"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterNoorderSequenceAsDefault:getTasksTaskParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterOdbcTreatDecimalAsInt:getTasksTaskParameterOdbcTreatDecimalAsInt"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterQueryTag:getTasksTaskParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterQuotedIdentifiersIgnoreCase:getTasksTaskParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterRowsPerResultset:getTasksTaskParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterS3StageVpceDnsName:getTasksTaskParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterSearchPath:getTasksTaskParameterSearchPath"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStatementQueuedTimeoutInSecond:getTasksTaskParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStatementTimeoutInSecond:getTasksTaskParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterStrictJsonOutput:getTasksTaskParameterStrictJsonOutput"
                    }
                },
                "suspendTaskAfterNumFailures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterSuspendTaskAfterNumFailure:getTasksTaskParameterSuspendTaskAfterNumFailure"
                    }
                },
                "taskAutoRetryAttempts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTaskAutoRetryAttempt:getTasksTaskParameterTaskAutoRetryAttempt"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimeInputFormat:getTasksTaskParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimeOutputFormat:getTasksTaskParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampDayIsAlways24h:getTasksTaskParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampInputFormat:getTasksTaskParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampLtzOutputFormat:getTasksTaskParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampNtzOutputFormat:getTasksTaskParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampOutputFormat:getTasksTaskParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampTypeMapping:getTasksTaskParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimestampTzOutputFormat:getTasksTaskParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTimezone:getTasksTaskParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTraceLevel:getTasksTaskParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTransactionAbortOnError:getTasksTaskParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTransactionDefaultIsolationLevel:getTasksTaskParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterTwoDigitCenturyStart:getTasksTaskParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUnsupportedDdlAction:getTasksTaskParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUseCachedResult:getTasksTaskParameterUseCachedResult"
                    }
                },
                "userTaskManagedInitialWarehouseSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskManagedInitialWarehouseSize:getTasksTaskParameterUserTaskManagedInitialWarehouseSize"
                    }
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond:getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond"
                    }
                },
                "userTaskTimeoutMs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterUserTaskTimeoutM:getTasksTaskParameterUserTaskTimeoutM"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterWeekOfYearPolicy:getTasksTaskParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskParameterWeekStart:getTasksTaskParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortDetachedQueries",
                "autocommits",
                "binaryInputFormats",
                "binaryOutputFormats",
                "clientMemoryLimits",
                "clientMetadataRequestUseConnectionCtxes",
                "clientPrefetchThreads",
                "clientResultChunkSizes",
                "clientResultColumnCaseInsensitives",
                "clientSessionKeepAlives",
                "clientSessionKeepAliveHeartbeatFrequencies",
                "clientTimestampTypeMappings",
                "dateInputFormats",
                "dateOutputFormats",
                "enableUnloadPhysicalTypeOptimizations",
                "errorOnNondeterministicMerges",
                "errorOnNondeterministicUpdates",
                "geographyOutputFormats",
                "geometryOutputFormats",
                "jdbcTreatTimestampNtzAsUtcs",
                "jdbcUseSessionTimezones",
                "jsonIndents",
                "lockTimeouts",
                "logLevels",
                "multiStatementCounts",
                "noorderSequenceAsDefaults",
                "odbcTreatDecimalAsInts",
                "queryTags",
                "quotedIdentifiersIgnoreCases",
                "rowsPerResultsets",
                "s3StageVpceDnsNames",
                "searchPaths",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutputs",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormats",
                "timeOutputFormats",
                "timestampDayIsAlways24hs",
                "timestampInputFormats",
                "timestampLtzOutputFormats",
                "timestampNtzOutputFormats",
                "timestampOutputFormats",
                "timestampTypeMappings",
                "timestampTzOutputFormats",
                "timezones",
                "traceLevels",
                "transactionAbortOnErrors",
                "transactionDefaultIsolationLevels",
                "twoDigitCenturyStarts",
                "unsupportedDdlActions",
                "useCachedResults",
                "userTaskManagedInitialWarehouseSizes",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicies",
                "weekStarts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterAbortDetachedQuery:getTasksTaskParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterAutocommit:getTasksTaskParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterBinaryInputFormat:getTasksTaskParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterBinaryOutputFormat:getTasksTaskParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientMemoryLimit:getTasksTaskParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientMetadataRequestUseConnectionCtx:getTasksTaskParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientPrefetchThread:getTasksTaskParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientResultChunkSize:getTasksTaskParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientResultColumnCaseInsensitive:getTasksTaskParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientSessionKeepAlife:getTasksTaskParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency:getTasksTaskParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterClientTimestampTypeMapping:getTasksTaskParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterDateInputFormat:getTasksTaskParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterDateOutputFormat:getTasksTaskParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterEnableUnloadPhysicalTypeOptimization:getTasksTaskParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterErrorOnNondeterministicMerge:getTasksTaskParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterErrorOnNondeterministicUpdate:getTasksTaskParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterGeographyOutputFormat:getTasksTaskParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterGeometryOutputFormat:getTasksTaskParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJdbcTreatTimestampNtzAsUtc:getTasksTaskParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJdbcUseSessionTimezone:getTasksTaskParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterJsonIndent:getTasksTaskParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterLockTimeout:getTasksTaskParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterLogLevel:getTasksTaskParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterMultiStatementCount:getTasksTaskParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterNoorderSequenceAsDefault:getTasksTaskParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterOdbcTreatDecimalAsInt:getTasksTaskParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterQueryTag:getTasksTaskParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterQuotedIdentifiersIgnoreCase:getTasksTaskParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterRowsPerResultset:getTasksTaskParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterS3StageVpceDnsName:getTasksTaskParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterSearchPath:getTasksTaskParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStatementQueuedTimeoutInSecond:getTasksTaskParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStatementTimeoutInSecond:getTasksTaskParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterStrictJsonOutput:getTasksTaskParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterSuspendTaskAfterNumFailure:getTasksTaskParameterSuspendTaskAfterNumFailure": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTaskAutoRetryAttempt:getTasksTaskParameterTaskAutoRetryAttempt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimeInputFormat:getTasksTaskParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimeOutputFormat:getTasksTaskParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampDayIsAlways24h:getTasksTaskParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampInputFormat:getTasksTaskParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampLtzOutputFormat:getTasksTaskParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampNtzOutputFormat:getTasksTaskParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampOutputFormat:getTasksTaskParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampTypeMapping:getTasksTaskParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimestampTzOutputFormat:getTasksTaskParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTimezone:getTasksTaskParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTraceLevel:getTasksTaskParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTransactionAbortOnError:getTasksTaskParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTransactionDefaultIsolationLevel:getTasksTaskParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterTwoDigitCenturyStart:getTasksTaskParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUnsupportedDdlAction:getTasksTaskParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUseCachedResult:getTasksTaskParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskManagedInitialWarehouseSize:getTasksTaskParameterUserTaskManagedInitialWarehouseSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond:getTasksTaskParameterUserTaskMinimumTriggerIntervalInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterUserTaskTimeoutM:getTasksTaskParameterUserTaskTimeoutM": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterWeekOfYearPolicy:getTasksTaskParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskParameterWeekStart:getTasksTaskParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskShowOutput:getTasksTaskShowOutput": {
            "properties": {
                "allowOverlappingExecution": {
                    "type": "boolean"
                },
                "budget": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "definition": {
                    "type": "string"
                },
                "errorIntegration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastCommittedOn": {
                    "type": "string"
                },
                "lastSuspendedOn": {
                    "type": "string"
                },
                "lastSuspendedReason": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "taskRelations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getTasksTaskShowOutputTaskRelation:getTasksTaskShowOutputTaskRelation"
                    }
                },
                "warehouse": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowOverlappingExecution",
                "budget",
                "comment",
                "condition",
                "config",
                "createdOn",
                "databaseName",
                "definition",
                "errorIntegration",
                "id",
                "lastCommittedOn",
                "lastSuspendedOn",
                "lastSuspendedReason",
                "name",
                "owner",
                "ownerRoleType",
                "predecessors",
                "schedule",
                "schemaName",
                "state",
                "taskRelations",
                "warehouse"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getTasksTaskShowOutputTaskRelation:getTasksTaskShowOutputTaskRelation": {
            "properties": {
                "finalizedRootTask": {
                    "type": "string"
                },
                "finalizer": {
                    "type": "string"
                },
                "predecessors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "finalizedRootTask",
                "finalizer",
                "predecessors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUserProgrammaticAccessTokensUserProgrammaticAccessToken:getUserProgrammaticAccessTokensUserProgrammaticAccessToken": {
            "properties": {
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUserProgrammaticAccessTokensUserProgrammaticAccessTokenShowOutput:getUserProgrammaticAccessTokensUserProgrammaticAccessTokenShowOutput"
                    },
                    "description": "Holds the output of SHOW USER PROGRAMMATIC ACCESS TOKENS.\n"
                }
            },
            "type": "object",
            "required": [
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUserProgrammaticAccessTokensUserProgrammaticAccessTokenShowOutput:getUserProgrammaticAccessTokensUserProgrammaticAccessTokenShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "minsToBypassNetworkPolicyRequirement": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleRestriction": {
                    "type": "string"
                },
                "rotatedTo": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdBy",
                "createdOn",
                "expiresAt",
                "minsToBypassNetworkPolicyRequirement",
                "name",
                "roleRestriction",
                "rotatedTo",
                "status",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersLimit:getUsersLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getUsersUser:getUsersUser": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE USER.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameter:getUsersUserParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR USER.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput"
                    },
                    "description": "Holds the output of SHOW USERS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserDescribeOutput:getUsersUserDescribeOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "customLandingPageUrl": {
                    "type": "string"
                },
                "customLandingPageUrlFlushNextUiLoad": {
                    "type": "boolean"
                },
                "daysToExpiry": {
                    "type": "number"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToBypassNetworkPolicy": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "passwordLastSetTime": {
                    "type": "string"
                },
                "rsaPublicKey": {
                    "type": "string"
                },
                "rsaPublicKey2": {
                    "type": "string"
                },
                "rsaPublicKey2Fp": {
                    "type": "string"
                },
                "rsaPublicKeyFp": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "snowflakeSupport": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "customLandingPageUrl",
                "customLandingPageUrlFlushNextUiLoad",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "lastName",
                "loginName",
                "middleName",
                "minsToBypassMfa",
                "minsToBypassNetworkPolicy",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "passwordLastSetTime",
                "rsaPublicKey",
                "rsaPublicKey2",
                "rsaPublicKey2Fp",
                "rsaPublicKeyFp",
                "snowflakeLock",
                "snowflakeSupport",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameter:getUsersUserParameter": {
            "properties": {
                "abortDetachedQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery"
                    }
                },
                "autocommits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit"
                    }
                },
                "binaryInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat"
                    }
                },
                "binaryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat"
                    }
                },
                "clientMemoryLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit"
                    }
                },
                "clientMetadataRequestUseConnectionCtxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx"
                    }
                },
                "clientPrefetchThreads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread"
                    }
                },
                "clientResultChunkSizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize"
                    }
                },
                "clientResultColumnCaseInsensitives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive"
                    }
                },
                "clientSessionKeepAliveHeartbeatFrequencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency"
                    }
                },
                "clientSessionKeepAlives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife"
                    }
                },
                "clientTimestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping"
                    }
                },
                "dateInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat"
                    }
                },
                "dateOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat"
                    }
                },
                "enableUnloadPhysicalTypeOptimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization"
                    }
                },
                "enableUnredactedQuerySyntaxErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError"
                    }
                },
                "errorOnNondeterministicMerges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge"
                    }
                },
                "errorOnNondeterministicUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate"
                    }
                },
                "geographyOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat"
                    }
                },
                "geometryOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat"
                    }
                },
                "jdbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt"
                    }
                },
                "jdbcTreatTimestampNtzAsUtcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc"
                    }
                },
                "jdbcUseSessionTimezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone"
                    }
                },
                "jsonIndents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent"
                    }
                },
                "lockTimeouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout"
                    }
                },
                "logLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel"
                    }
                },
                "multiStatementCounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount"
                    }
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy"
                    }
                },
                "noorderSequenceAsDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault"
                    }
                },
                "odbcTreatDecimalAsInts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt"
                    }
                },
                "preventUnloadToInternalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage"
                    }
                },
                "queryTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag"
                    }
                },
                "quotedIdentifiersIgnoreCases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase"
                    }
                },
                "rowsPerResultsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset"
                    }
                },
                "s3StageVpceDnsNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName"
                    }
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath"
                    }
                },
                "simulatedDataSharingConsumers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond"
                    }
                },
                "strictJsonOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput"
                    }
                },
                "timeInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat"
                    }
                },
                "timeOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat"
                    }
                },
                "timestampDayIsAlways24hs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h"
                    }
                },
                "timestampInputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat"
                    }
                },
                "timestampLtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat"
                    }
                },
                "timestampNtzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat"
                    }
                },
                "timestampOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat"
                    }
                },
                "timestampTypeMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping"
                    }
                },
                "timestampTzOutputFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat"
                    }
                },
                "timezones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone"
                    }
                },
                "traceLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel"
                    }
                },
                "transactionAbortOnErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError"
                    }
                },
                "transactionDefaultIsolationLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel"
                    }
                },
                "twoDigitCenturyStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart"
                    }
                },
                "unsupportedDdlActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction"
                    }
                },
                "useCachedResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult"
                    }
                },
                "weekOfYearPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy"
                    }
                },
                "weekStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart"
                    }
                }
            },
            "type": "object",
            "required": [
                "abortDetachedQueries",
                "autocommits",
                "binaryInputFormats",
                "binaryOutputFormats",
                "clientMemoryLimits",
                "clientMetadataRequestUseConnectionCtxes",
                "clientPrefetchThreads",
                "clientResultChunkSizes",
                "clientResultColumnCaseInsensitives",
                "clientSessionKeepAlives",
                "clientSessionKeepAliveHeartbeatFrequencies",
                "clientTimestampTypeMappings",
                "dateInputFormats",
                "dateOutputFormats",
                "enableUnloadPhysicalTypeOptimizations",
                "enableUnredactedQuerySyntaxErrors",
                "errorOnNondeterministicMerges",
                "errorOnNondeterministicUpdates",
                "geographyOutputFormats",
                "geometryOutputFormats",
                "jdbcTreatDecimalAsInts",
                "jdbcTreatTimestampNtzAsUtcs",
                "jdbcUseSessionTimezones",
                "jsonIndents",
                "lockTimeouts",
                "logLevels",
                "multiStatementCounts",
                "networkPolicies",
                "noorderSequenceAsDefaults",
                "odbcTreatDecimalAsInts",
                "preventUnloadToInternalStages",
                "queryTags",
                "quotedIdentifiersIgnoreCases",
                "rowsPerResultsets",
                "s3StageVpceDnsNames",
                "searchPaths",
                "simulatedDataSharingConsumers",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutputs",
                "timeInputFormats",
                "timeOutputFormats",
                "timestampDayIsAlways24hs",
                "timestampInputFormats",
                "timestampLtzOutputFormats",
                "timestampNtzOutputFormats",
                "timestampOutputFormats",
                "timestampTypeMappings",
                "timestampTzOutputFormats",
                "timezones",
                "traceLevels",
                "transactionAbortOnErrors",
                "transactionDefaultIsolationLevels",
                "twoDigitCenturyStarts",
                "unsupportedDdlActions",
                "useCachedResults",
                "weekOfYearPolicies",
                "weekStarts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAbortDetachedQuery:getUsersUserParameterAbortDetachedQuery": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterAutocommit:getUsersUserParameterAutocommit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryInputFormat:getUsersUserParameterBinaryInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterBinaryOutputFormat:getUsersUserParameterBinaryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMemoryLimit:getUsersUserParameterClientMemoryLimit": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientMetadataRequestUseConnectionCtx:getUsersUserParameterClientMetadataRequestUseConnectionCtx": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientPrefetchThread:getUsersUserParameterClientPrefetchThread": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultChunkSize:getUsersUserParameterClientResultChunkSize": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientResultColumnCaseInsensitive:getUsersUserParameterClientResultColumnCaseInsensitive": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAlife:getUsersUserParameterClientSessionKeepAlife": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency:getUsersUserParameterClientSessionKeepAliveHeartbeatFrequency": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterClientTimestampTypeMapping:getUsersUserParameterClientTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateInputFormat:getUsersUserParameterDateInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterDateOutputFormat:getUsersUserParameterDateOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnloadPhysicalTypeOptimization:getUsersUserParameterEnableUnloadPhysicalTypeOptimization": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterEnableUnredactedQuerySyntaxError:getUsersUserParameterEnableUnredactedQuerySyntaxError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicMerge:getUsersUserParameterErrorOnNondeterministicMerge": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterErrorOnNondeterministicUpdate:getUsersUserParameterErrorOnNondeterministicUpdate": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeographyOutputFormat:getUsersUserParameterGeographyOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterGeometryOutputFormat:getUsersUserParameterGeometryOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatDecimalAsInt:getUsersUserParameterJdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcTreatTimestampNtzAsUtc:getUsersUserParameterJdbcTreatTimestampNtzAsUtc": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJdbcUseSessionTimezone:getUsersUserParameterJdbcUseSessionTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterJsonIndent:getUsersUserParameterJsonIndent": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLockTimeout:getUsersUserParameterLockTimeout": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterLogLevel:getUsersUserParameterLogLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterMultiStatementCount:getUsersUserParameterMultiStatementCount": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNetworkPolicy:getUsersUserParameterNetworkPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterNoorderSequenceAsDefault:getUsersUserParameterNoorderSequenceAsDefault": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterOdbcTreatDecimalAsInt:getUsersUserParameterOdbcTreatDecimalAsInt": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterPreventUnloadToInternalStage:getUsersUserParameterPreventUnloadToInternalStage": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQueryTag:getUsersUserParameterQueryTag": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterQuotedIdentifiersIgnoreCase:getUsersUserParameterQuotedIdentifiersIgnoreCase": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterRowsPerResultset:getUsersUserParameterRowsPerResultset": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterS3StageVpceDnsName:getUsersUserParameterS3StageVpceDnsName": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSearchPath:getUsersUserParameterSearchPath": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterSimulatedDataSharingConsumer:getUsersUserParameterSimulatedDataSharingConsumer": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementQueuedTimeoutInSecond:getUsersUserParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStatementTimeoutInSecond:getUsersUserParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterStrictJsonOutput:getUsersUserParameterStrictJsonOutput": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeInputFormat:getUsersUserParameterTimeInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimeOutputFormat:getUsersUserParameterTimeOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampDayIsAlways24h:getUsersUserParameterTimestampDayIsAlways24h": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampInputFormat:getUsersUserParameterTimestampInputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampLtzOutputFormat:getUsersUserParameterTimestampLtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampNtzOutputFormat:getUsersUserParameterTimestampNtzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampOutputFormat:getUsersUserParameterTimestampOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTypeMapping:getUsersUserParameterTimestampTypeMapping": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimestampTzOutputFormat:getUsersUserParameterTimestampTzOutputFormat": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTimezone:getUsersUserParameterTimezone": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTraceLevel:getUsersUserParameterTraceLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionAbortOnError:getUsersUserParameterTransactionAbortOnError": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTransactionDefaultIsolationLevel:getUsersUserParameterTransactionDefaultIsolationLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterTwoDigitCenturyStart:getUsersUserParameterTwoDigitCenturyStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUnsupportedDdlAction:getUsersUserParameterUnsupportedDdlAction": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterUseCachedResult:getUsersUserParameterUseCachedResult": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekOfYearPolicy:getUsersUserParameterWeekOfYearPolicy": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserParameterWeekStart:getUsersUserParameterWeekStart": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getUsersUserShowOutput:getUsersUserShowOutput": {
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "daysToExpiry": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string"
                },
                "defaultRole": {
                    "type": "string"
                },
                "defaultSecondaryRoles": {
                    "type": "string"
                },
                "defaultWarehouse": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAtTime": {
                    "type": "string"
                },
                "extAuthnDuo": {
                    "type": "boolean"
                },
                "extAuthnUid": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasMfa": {
                    "type": "boolean"
                },
                "hasPassword": {
                    "type": "boolean"
                },
                "hasRsaPublicKey": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSuccessLogin": {
                    "type": "string"
                },
                "lockedUntilTime": {
                    "type": "string"
                },
                "loginName": {
                    "type": "string"
                },
                "minsToBypassMfa": {
                    "type": "string"
                },
                "minsToUnlock": {
                    "type": "string"
                },
                "mustChangePassword": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "snowflakeLock": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdOn",
                "daysToExpiry",
                "defaultNamespace",
                "defaultRole",
                "defaultSecondaryRoles",
                "defaultWarehouse",
                "disabled",
                "displayName",
                "email",
                "expiresAtTime",
                "extAuthnDuo",
                "extAuthnUid",
                "firstName",
                "hasMfa",
                "hasPassword",
                "hasRsaPublicKey",
                "lastName",
                "lastSuccessLogin",
                "lockedUntilTime",
                "loginName",
                "minsToBypassMfa",
                "minsToUnlock",
                "mustChangePassword",
                "name",
                "owner",
                "snowflakeLock",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsIn:getViewsIn": {
            "properties": {
                "account": {
                    "type": "boolean",
                    "description": "Returns records for the entire account.\n"
                },
                "database": {
                    "type": "string",
                    "description": "Returns records for the current database in use or for a specified database.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Returns records for the current schema in use or a specified schema. Use fully qualified name.\n"
                }
            },
            "type": "object"
        },
        "snowflake:index/getViewsLimit:getViewsLimit": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Specifies a **case-sensitive** pattern that is used to match object name. After the first match, the limit on the number of rows will be applied.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "The maximum number of rows to return.\n"
                }
            },
            "type": "object",
            "required": [
                "rows"
            ]
        },
        "snowflake:index/getViewsView:getViewsView": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE VIEW.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput"
                    },
                    "description": "Holds the output of SHOW VIEWS.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewDescribeOutput:getViewsViewDescribeOutput": {
            "properties": {
                "check": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                },
                "expression": {
                    "type": "string"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "isUnique": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                },
                "privacyDomain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "check",
                "comment",
                "default",
                "expression",
                "isNullable",
                "isPrimary",
                "isUnique",
                "kind",
                "name",
                "policyName",
                "privacyDomain",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getViewsViewShowOutput:getViewsViewShowOutput": {
            "properties": {
                "changeTracking": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "databaseName": {
                    "type": "string"
                },
                "isMaterialized": {
                    "type": "boolean"
                },
                "isSecure": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "reserved": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "changeTracking",
                "comment",
                "createdOn",
                "databaseName",
                "isMaterialized",
                "isSecure",
                "kind",
                "name",
                "owner",
                "ownerRoleType",
                "reserved",
                "schemaName",
                "text"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse": {
            "properties": {
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput"
                    },
                    "description": "Holds the output of DESCRIBE WAREHOUSE.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter"
                    },
                    "description": "Holds the output of SHOW PARAMETERS FOR WAREHOUSE.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput"
                    },
                    "description": "Holds the output of SHOW WAREHOUSES.\n"
                }
            },
            "type": "object",
            "required": [
                "describeOutputs",
                "parameters",
                "showOutputs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseDescribeOutput:getWarehousesWarehouseDescribeOutput": {
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdOn",
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameter:getWarehousesWarehouseParameter": {
            "properties": {
                "maxConcurrencyLevels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel"
                    }
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond"
                    }
                },
                "statementTimeoutInSeconds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond"
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrencyLevels",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterMaxConcurrencyLevel:getWarehousesWarehouseParameterMaxConcurrencyLevel": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond:getWarehousesWarehouseParameterStatementQueuedTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseParameterStatementTimeoutInSecond:getWarehousesWarehouseParameterStatementTimeoutInSecond": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "default",
                "description",
                "key",
                "level",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "snowflake:index/getWarehousesWarehouseShowOutput:getWarehousesWarehouseShowOutput": {
            "properties": {
                "autoResume": {
                    "type": "boolean"
                },
                "autoSuspend": {
                    "type": "integer"
                },
                "available": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string"
                },
                "enableQueryAcceleration": {
                    "type": "boolean"
                },
                "generation": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "maxClusterCount": {
                    "type": "integer"
                },
                "minClusterCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "other": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "ownerRoleType": {
                    "type": "string"
                },
                "provisioning": {
                    "type": "number"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "quiescing": {
                    "type": "number"
                },
                "resourceConstraint": {
                    "type": "string"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "resumedOn": {
                    "type": "string"
                },
                "running": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "startedClusters": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedOn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoResume",
                "autoSuspend",
                "available",
                "comment",
                "createdOn",
                "enableQueryAcceleration",
                "generation",
                "isCurrent",
                "isDefault",
                "maxClusterCount",
                "minClusterCount",
                "name",
                "other",
                "owner",
                "ownerRoleType",
                "provisioning",
                "queryAccelerationMaxScaleFactor",
                "queued",
                "quiescing",
                "resourceConstraint",
                "resourceMonitor",
                "resumedOn",
                "running",
                "scalingPolicy",
                "size",
                "startedClusters",
                "state",
                "type",
                "updatedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the snowflake package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable."
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable."
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable."
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable."
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable."
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable."
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable."
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable."
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable."
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable."
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable."
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable."
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable."
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable."
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable."
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable."
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable."
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable."
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable."
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable."
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable."
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable."
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables."
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable."
            },
            "password": {
                "type": "string",
                "description": "Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable."
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.",
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable."
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable."
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable."
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable."
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see the section below. Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable."
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable."
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `authenticator` to `OAUTH`. Optionally, set the `authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable."
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable."
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable."
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable."
            }
        },
        "inputProperties": {
            "accountName": {
                "type": "string",
                "description": "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable."
            },
            "authenticator": {
                "type": "string",
                "description": "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable."
            },
            "clientIp": {
                "type": "string",
                "description": "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable."
            },
            "clientRequestMfaToken": {
                "type": "string",
                "description": "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable."
            },
            "clientStoreTemporaryCredential": {
                "type": "string",
                "description": "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable."
            },
            "clientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable."
            },
            "disableConsoleLogin": {
                "type": "string",
                "description": "Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable."
            },
            "disableQueryContextCache": {
                "type": "boolean",
                "description": "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable."
            },
            "disableTelemetry": {
                "type": "boolean",
                "description": "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable."
            },
            "driverTracing": {
                "type": "string",
                "description": "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable."
            },
            "externalBrowserTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable."
            },
            "host": {
                "type": "string",
                "description": "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_HOST"
                    ]
                }
            },
            "includeRetryReason": {
                "type": "string",
                "description": "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable."
            },
            "insecureMode": {
                "type": "boolean",
                "description": "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable."
            },
            "jwtClientTimeout": {
                "type": "integer",
                "description": "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable."
            },
            "jwtExpireTimeout": {
                "type": "integer",
                "description": "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable."
            },
            "keepSessionAlive": {
                "type": "boolean",
                "description": "Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable."
            },
            "loginTimeout": {
                "type": "integer",
                "description": "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable."
            },
            "maxRetryCount": {
                "type": "integer",
                "description": "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable."
            },
            "ocspFailOpen": {
                "type": "string",
                "description": "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable."
            },
            "oktaUrl": {
                "type": "string",
                "description": "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable."
            },
            "organizationName": {
                "type": "string",
                "description": "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable."
            },
            "params": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables."
            },
            "passcode": {
                "type": "string",
                "description": "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.",
                "secret": true
            },
            "passcodeInPassword": {
                "type": "boolean",
                "description": "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable."
            },
            "password": {
                "type": "string",
                "description": "Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PASSWORD"
                    ]
                },
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PORT"
                    ]
                }
            },
            "previewFeaturesEnabled": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "privateKey": {
                "type": "string",
                "description": "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.",
                "secret": true
            },
            "privateKeyPassphrase": {
                "type": "string",
                "description": "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PRIVATE_KEY_PASSPHRASE"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "description": "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable."
            },
            "protocol": {
                "type": "string",
                "description": "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_PROTOCOL"
                    ]
                }
            },
            "requestTimeout": {
                "type": "integer",
                "description": "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable."
            },
            "role": {
                "type": "string",
                "description": "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_ROLE"
                    ]
                }
            },
            "skipTomlFilePermissionVerification": {
                "type": "boolean",
                "description": "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see the section below. Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable."
            },
            "tmpDirectoryPath": {
                "type": "string",
                "description": "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable."
            },
            "token": {
                "type": "string",
                "description": "Token to use for OAuth and other forms of token based auth. When this field is set here, or in the TOML file, the provider sets the `authenticator` to `OAUTH`. Optionally, set the `authenticator` field to the authenticator you want to use. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.",
                "secret": true
            },
            "tokenAccessor": {
                "$ref": "#/types/snowflake:index/ProviderTokenAccessor:ProviderTokenAccessor"
            },
            "useLegacyTomlFile": {
                "type": "boolean",
                "description": "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in the section below Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable."
            },
            "user": {
                "type": "string",
                "description": "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable."
            },
            "validateDefaultParameters": {
                "type": "string",
                "description": "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable."
            },
            "warehouse": {
                "type": "string",
                "description": "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.",
                "defaultInfo": {
                    "environment": [
                        "SNOWFLAKE_WAREHOUSE"
                    ]
                }
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:snowflake/terraformConfig"
        }
    },
    "resources": {
        "snowflake:index/account:Account": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/account:Account example '\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\"'\n```\n\n",
            "properties": {
                "adminName": {
                    "type": "string",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "secret": true
                },
                "adminRsaPublicKey": {
                    "type": "string"
                },
                "adminUserType": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n"
                },
                "consumptionBillingEntity": {
                    "type": "string",
                    "description": "Determines which billing entity is responsible for the account's consumption-based billing.\n"
                },
                "edition": {
                    "type": "string",
                    "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`\n"
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.\n"
                },
                "isOrgAdmin": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.\n"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "mustChangePassword": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n"
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AccountShowOutput:AccountShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ACCOUNTS` for the given account.\n"
                }
            },
            "required": [
                "adminName",
                "edition",
                "email",
                "fullyQualifiedName",
                "gracePeriodInDays",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "secret": true
                },
                "adminRsaPublicKey": {
                    "type": "string"
                },
                "adminUserType": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the account.\n",
                    "willReplaceOnChanges": true
                },
                "consumptionBillingEntity": {
                    "type": "string",
                    "description": "Determines which billing entity is responsible for the account's consumption-based billing.\n"
                },
                "edition": {
                    "type": "string",
                    "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`\n",
                    "willReplaceOnChanges": true
                },
                "email": {
                    "type": "string",
                    "secret": true
                },
                "firstName": {
                    "type": "string",
                    "secret": true
                },
                "gracePeriodInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.\n"
                },
                "isOrgAdmin": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.\n"
                },
                "lastName": {
                    "type": "string",
                    "secret": true
                },
                "mustChangePassword": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                },
                "region": {
                    "type": "string",
                    "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                    "willReplaceOnChanges": true
                },
                "regionGroup": {
                    "type": "string",
                    "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "edition",
                "email",
                "gracePeriodInDays"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "secret": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "adminRsaPublicKey": {
                        "type": "string"
                    },
                    "adminUserType": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "consumptionBillingEntity": {
                        "type": "string",
                        "description": "Determines which billing entity is responsible for the account's consumption-based billing.\n"
                    },
                    "edition": {
                        "type": "string",
                        "description": "Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`\n",
                        "willReplaceOnChanges": true
                    },
                    "email": {
                        "type": "string",
                        "secret": true
                    },
                    "firstName": {
                        "type": "string",
                        "secret": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gracePeriodInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.\n"
                    },
                    "isOrgAdmin": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "secret": true
                    },
                    "mustChangePassword": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "[Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)\n",
                        "willReplaceOnChanges": true
                    },
                    "regionGroup": {
                        "type": "string",
                        "description": "ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AccountShowOutput:AccountShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ACCOUNTS` for the given account.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountAuthenticationPolicyAttachment:AccountAuthenticationPolicyAttachment": {
            "properties": {
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n"
                }
            },
            "required": [
                "authenticationPolicy"
            ],
            "inputProperties": {
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authenticationPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountAuthenticationPolicyAttachment resources.\n",
                "properties": {
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the authentication policy to apply to the current account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountParameter:AccountParameter": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/accountParameter:AccountParameter p '\u003cparameter_name\u003e'\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` | `CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` | `ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` | `ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` | `OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` | `PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER` | `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` | `CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` | `CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` | `CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` | `ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` | `DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` | `GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` | `JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` | `LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` | `PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` | `ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` | `STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` | `TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT` | `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` | `TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` | `UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` | `DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` | `MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` | `REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` | `SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` | `USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` | `ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are not supported in the provider.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation. The parameter values are validated in Snowflake.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` | `CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` | `ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` | `ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` | `OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` | `PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER` | `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` | `CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` | `CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` | `CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` | `ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` | `DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` | `GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` | `JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` | `LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` | `PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` | `ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` | `STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` | `TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT` | `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` | `TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` | `UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` | `DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` | `MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` | `REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` | `SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` | `USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` | `ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are not supported in the provider.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation. The parameter values are validated in Snowflake.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of account parameter. Valid values are (case-insensitive): `ALLOW_CLIENT_MFA_CACHING` | `ALLOW_ID_TOKEN` | `CLIENT_ENCRYPTION_KEY_SIZE` | `CORTEX_ENABLED_CROSS_REGION` | `DISABLE_USER_PRIVILEGE_GRANTS` | `ENABLE_IDENTIFIER_FIRST_LOGIN` | `ENABLE_INTERNAL_STAGES_PRIVATELINK` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY` | `ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_SPCS_BLOCK_STORAGE` | `ENABLE_UNHANDLED_EXCEPTIONS_REPORTING` | `ENFORCE_NETWORK_RULES_FOR_INTERNAL_STAGES` | `EVENT_TABLE` | `EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `INITIAL_REPLICATION_SIZE_LIMIT_IN_TB` | `MIN_DATA_RETENTION_TIME_IN_DAYS` | `NETWORK_POLICY` | `OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST` | `PERIODIC_DATA_REKEYING` | `PREVENT_LOAD_FROM_INLINE_URL` | `PREVENT_UNLOAD_TO_INLINE_URL` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION` | `REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION` | `SSO_LOGIN_PAGE` | `ABORT_DETACHED_QUERY` | `ACTIVE_PYTHON_PROFILER` | `AUTOCOMMIT` | `BINARY_INPUT_FORMAT` | `BINARY_OUTPUT_FORMAT` | `CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS` | `CLIENT_MEMORY_LIMIT` | `CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX` | `CLIENT_METADATA_USE_SESSION_DATABASE` | `CLIENT_PREFETCH_THREADS` | `CLIENT_RESULT_CHUNK_SIZE` | `CLIENT_SESSION_KEEP_ALIVE` | `CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY` | `CLIENT_TIMESTAMP_TYPE_MAPPING` | `ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION` | `CLIENT_RESULT_COLUMN_CASE_INSENSITIVE` | `CSV_TIMESTAMP_FORMAT` | `DATE_INPUT_FORMAT` | `DATE_OUTPUT_FORMAT` | `ERROR_ON_NONDETERMINISTIC_MERGE` | `ERROR_ON_NONDETERMINISTIC_UPDATE` | `GEOGRAPHY_OUTPUT_FORMAT` | `GEOMETRY_OUTPUT_FORMAT` | `HYBRID_TABLE_LOCK_TIMEOUT` | `JDBC_TREAT_DECIMAL_AS_INT` | `JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC` | `JDBC_USE_SESSION_TIMEZONE` | `JSON_INDENT` | `JS_TREAT_INTEGER_AS_BIGINT` | `LOCK_TIMEOUT` | `MULTI_STATEMENT_COUNT` | `NOORDER_SEQUENCE_AS_DEFAULT` | `ODBC_TREAT_DECIMAL_AS_INT` | `PYTHON_PROFILER_MODULES` | `PYTHON_PROFILER_TARGET_STAGE` | `QUERY_TAG` | `QUOTED_IDENTIFIERS_IGNORE_CASE` | `ROWS_PER_RESULTSET` | `S3_STAGE_VPCE_DNS_NAME` | `SEARCH_PATH` | `SIMULATED_DATA_SHARING_CONSUMER` | `STATEMENT_TIMEOUT_IN_SECONDS` | `STRICT_JSON_OUTPUT` | `TIME_INPUT_FORMAT` | `TIME_OUTPUT_FORMAT` | `TIMESTAMP_DAY_IS_ALWAYS_24H` | `TIMESTAMP_INPUT_FORMAT` | `TIMESTAMP_LTZ_OUTPUT_FORMAT` | `TIMESTAMP_NTZ_OUTPUT_FORMAT` | `TIMESTAMP_OUTPUT_FORMAT` | `TIMESTAMP_TYPE_MAPPING` | `TIMESTAMP_TZ_OUTPUT_FORMAT` | `TIMEZONE` | `TRANSACTION_ABORT_ON_ERROR` | `TRANSACTION_DEFAULT_ISOLATION_LEVEL` | `TWO_DIGIT_CENTURY_START` | `UNSUPPORTED_DDL_ACTION` | `USE_CACHED_RESULT` | `WEEK_OF_YEAR_POLICY` | `WEEK_START` | `CATALOG` | `DATA_RETENTION_TIME_IN_DAYS` | `DEFAULT_DDL_COLLATION` | `EXTERNAL_VOLUME` | `LOG_LEVEL` | `MAX_CONCURRENCY_LEVEL` | `MAX_DATA_EXTENSION_TIME_IN_DAYS` | `PIPE_EXECUTION_PAUSED` | `PREVENT_UNLOAD_TO_INTERNAL_STAGES` | `REPLACE_INVALID_CHARACTERS` | `STATEMENT_QUEUED_TIMEOUT_IN_SECONDS` | `STORAGE_SERIALIZATION_POLICY` | `SHARE_RESTRICTIONS` | `SUSPEND_TASK_AFTER_NUM_FAILURES` | `TRACE_LEVEL` | `USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE` | `USER_TASK_TIMEOUT_MS` | `TASK_AUTO_RETRY_ATTEMPTS` | `USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS` | `METRIC_LEVEL` | `ENABLE_CONSOLE_OUTPUT` | `ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR` | `ENABLE_PERSONAL_DATABASE`. Deprecated parameters are not supported in the provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation. The parameter values are validated in Snowflake.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountPasswordPolicyAttachment:AccountPasswordPolicyAttachment": {
            "properties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n"
                }
            },
            "required": [
                "passwordPolicy"
            ],
            "inputProperties": {
                "passwordPolicy": {
                    "type": "string",
                    "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicy": {
                        "type": "string",
                        "description": "Qualified name (`\"db\".\"schema\".\"policy_name\"`) of the password policy to apply to the current account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/accountRole:AccountRole": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/accountRole:AccountRole example '\"\u003caccount_role_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AccountRoleShowOutput:AccountRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROLES` for the given role.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/alert:Alert": {
            "description": "\n\n## Import\n\nformat is database name | schema name | alert name\n\n```sh\n$ pulumi import snowflake:index/alert:Alert example 'dbName|schemaName|alertName'\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n"
                }
            },
            "required": [
                "action",
                "condition",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "warehouse"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                },
                "alertSchedule": {
                    "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                    "description": "The schedule for periodically running an alert.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the alert.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the alert.\n",
                    "willReplaceOnChanges": true
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the alert will use.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "condition",
                "database",
                "schema",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The SQL statement that should be executed if the condition returns one or more rows.\n"
                    },
                    "alertSchedule": {
                        "$ref": "#/types/snowflake:index/AlertAlertSchedule:AlertAlertSchedule",
                        "description": "The schedule for periodically running an alert.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the alert.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The SQL statement that represents the condition for the alert. (SELECT, SHOW, CALL)\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies if an alert should be 'started' (enabled) after creation or should remain 'suspended' (default).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the alert; must be unique for the database and schema in which the alert is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the alert.\n",
                        "willReplaceOnChanges": true
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the alert will use.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithAuthorizationCodeGrant resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service. If removed from the config, the resource is recreated.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput:ApiAuthenticationIntegrationWithAuthorizationCodeGrantShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAllowedScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithClientCredentials resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput:ApiAuthenticationIntegrationWithClientCredentialsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAllowedScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithClientCredentialsShowOutput:ApiAuthenticationIntegrationWithClientCredentialsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this security integration is enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthAccessTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                },
                "oauthAssertionIssuer": {
                    "type": "string"
                },
                "oauthAuthorizationEndpoint": {
                    "type": "string",
                    "description": "Specifies the URL for authenticating to the external service.\n"
                },
                "oauthClientAuthMethod": {
                    "type": "string",
                    "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "Specifies the client ID for the OAuth application in the external service.\n",
                    "secret": true
                },
                "oauthClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                },
                "oauthTokenEndpoint": {
                    "type": "string",
                    "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "oauthAssertionIssuer",
                "oauthClientId",
                "oauthClientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiAuthenticationIntegrationWithJwtBearer resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerDescribeOutput:ApiAuthenticationIntegrationWithJwtBearerDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this security integration is enabled or disabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the integration. This value must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthAccessTokenValidity": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the default lifetime of the OAuth access token (in seconds) issued by an OAuth server.\n"
                    },
                    "oauthAssertionIssuer": {
                        "type": "string"
                    },
                    "oauthAuthorizationEndpoint": {
                        "type": "string",
                        "description": "Specifies the URL for authenticating to the external service.\n"
                    },
                    "oauthClientAuthMethod": {
                        "type": "string",
                        "description": "Specifies that POST is used as the authentication method to the external service. If removed from the config, the resource is recreated. Valid values are (case-insensitive): `CLIENT_SECRET_POST`.\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "Specifies the client ID for the OAuth application in the external service.\n",
                        "secret": true
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "Specifies the value to determine the validity of the refresh token obtained from the OAuth server.\n"
                    },
                    "oauthTokenEndpoint": {
                        "type": "string",
                        "description": "Specifies the token endpoint used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly). If removed from the config, the resource is recreated.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ApiAuthenticationIntegrationWithJwtBearerShowOutput:ApiAuthenticationIntegrationWithJwtBearerShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiIntegration:ApiIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/apiIntegration:ApiIntegration example name\n```\n\n",
            "properties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "apiAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "(Default: ``) ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n"
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "(Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureConsentUrl": {
                    "type": "string"
                },
                "azureMultiTenantAppName": {
                    "type": "string"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the API integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "(Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n"
                }
            },
            "required": [
                "apiAllowedPrefixes",
                "apiAwsExternalId",
                "apiAwsIamUserArn",
                "apiGcpServiceAccount",
                "apiProvider",
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "(Default: ``) ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiGcpServiceAccount": {
                    "type": "string",
                    "description": "The service account used for communication with the Google API Gateway.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key (also called a “subscription key”).\n",
                    "secret": true
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n",
                    "willReplaceOnChanges": true
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "(Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "googleAudience": {
                    "type": "string",
                    "description": "(Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAllowedPrefixes",
                "apiProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiIntegration resources.\n",
                "properties": {
                    "apiAllowedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                    },
                    "apiAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "apiAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "apiAwsRoleArn": {
                        "type": "string",
                        "description": "(Default: ``) ARN of a cloud platform role.\n"
                    },
                    "apiBlockedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                    },
                    "apiGcpServiceAccount": {
                        "type": "string",
                        "description": "The service account used for communication with the Google API Gateway.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key (also called a “subscription key”).\n",
                        "secret": true
                    },
                    "apiProvider": {
                        "type": "string",
                        "description": "Specifies the HTTPS proxy service type.\n",
                        "willReplaceOnChanges": true
                    },
                    "azureAdApplicationId": {
                        "type": "string",
                        "description": "(Default: ``) The 'Application (client) id' of the Azure AD app for your remote service.\n"
                    },
                    "azureConsentUrl": {
                        "type": "string"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "(Default: ``) Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the API integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Default: `true`) Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "googleAudience": {
                        "type": "string",
                        "description": "(Default: ``) The audience claim when generating the JWT (JSON Web Token) to authenticate to the Google API Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/authenticationPolicy:AuthenticationPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/authenticationPolicy:AuthenticationPolicy example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cauthentication_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "authenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                },
                "clientTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the authentication policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mfaAuthenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                },
                "mfaEnrollment": {
                    "type": "string",
                    "description": "(Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "securityIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "authenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                },
                "clientTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the authentication policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "mfaAuthenticationMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                },
                "mfaEnrollment": {
                    "type": "string",
                    "description": "(Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "securityIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthenticationPolicy resources.\n",
                "properties": {
                    "authenticationMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`\n"
                    },
                    "clientTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the authentication policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AuthenticationPolicyDescribeOutput:AuthenticationPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mfaAuthenticationMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.\n"
                    },
                    "mfaEnrollment": {
                        "type": "string",
                        "description": "(Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/AuthenticationPolicyShowOutput:AuthenticationPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/computePool:ComputePool": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/computePool:ComputePool example '\"\u003ccompute_pool_name\u003e\"'\n```\n\n",
            "properties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspendSecs": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the compute pool.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ComputePoolDescribeOutput:ComputePoolDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.\n"
                },
                "forApplication": {
                    "type": "string",
                    "description": "Specifies the Snowflake Native App name.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initiallySuspended": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.\n"
                },
                "instanceFamily": {
                    "type": "string",
                    "description": "Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.\n"
                },
                "maxNodes": {
                    "type": "integer",
                    "description": "Specifies the maximum number of nodes for the compute pool.\n"
                },
                "minNodes": {
                    "type": "integer",
                    "description": "Specifies the minimum number of nodes for the compute pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ComputePoolShowOutput:ComputePoolShowOutput"
                    },
                    "description": "Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "instanceFamily",
                "maxNodes",
                "minNodes",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspendSecs": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the compute pool.\n"
                },
                "forApplication": {
                    "type": "string",
                    "description": "Specifies the Snowflake Native App name.\n",
                    "willReplaceOnChanges": true
                },
                "initiallySuspended": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.\n"
                },
                "instanceFamily": {
                    "type": "string",
                    "description": "Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.\n",
                    "willReplaceOnChanges": true
                },
                "maxNodes": {
                    "type": "integer",
                    "description": "Specifies the maximum number of nodes for the compute pool.\n"
                },
                "minNodes": {
                    "type": "integer",
                    "description": "Specifies the minimum number of nodes for the compute pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceFamily",
                "maxNodes",
                "minNodes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputePool resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autoSuspendSecs": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the compute pool.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ComputePoolDescribeOutput:ComputePoolDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.\n"
                    },
                    "forApplication": {
                        "type": "string",
                        "description": "Specifies the Snowflake Native App name.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initiallySuspended": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.\n"
                    },
                    "instanceFamily": {
                        "type": "string",
                        "description": "Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxNodes": {
                        "type": "integer",
                        "description": "Specifies the maximum number of nodes for the compute pool.\n"
                    },
                    "minNodes": {
                        "type": "integer",
                        "description": "Specifies the minimum number of nodes for the compute pool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ComputePoolShowOutput:ComputePoolShowOutput"
                        },
                        "description": "Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/cortexSearchService:CortexSearchService": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/cortexSearchService:CortexSearchService example 'dbName|schemaName|fileFormatName'\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Creation date for the given Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/CortexSearchServiceDescribeOutput:CortexSearchServiceDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE CORTEX SEARCH SERVICE` for the given cortex search service.\n"
                },
                "embeddingModel": {
                    "type": "string",
                    "description": "Specifies the embedding model to use for the Cortex search service.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n"
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n"
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "required": [
                "createdOn",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the Cortex search service.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "embeddingModel": {
                    "type": "string",
                    "description": "Specifies the embedding model to use for the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "type": "string",
                    "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the Cortex search service.\n",
                    "willReplaceOnChanges": true
                },
                "targetLag": {
                    "type": "string",
                    "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the Cortex search service.\n"
                }
            },
            "requiredInputs": [
                "database",
                "on",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CortexSearchService resources.\n",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the Cortex search service.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Creation date for the given Cortex search service.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/CortexSearchServiceDescribeOutput:CortexSearchServiceDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE CORTEX SEARCH SERVICE` for the given cortex search service.\n"
                    },
                    "embeddingModel": {
                        "type": "string",
                        "description": "Specifies the embedding model to use for the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "type": "string",
                        "description": "Specifies the column to use as the search column for the Cortex search service; must be a text value.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the Cortex search service.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetLag": {
                        "type": "string",
                        "description": "Specifies the maximum target lag time for the Cortex search service.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the Cortex search service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/currentAccount:CurrentAccount": {
            "description": "\n\n## Import\n\nThis resource may contain a any identifier, but the following format is recommended.\n\n```sh\n$ pulumi import snowflake:index/currentAccount:CurrentAccount example 'current_account'\n```\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "activePythonProfiler": {
                    "type": "string",
                    "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                },
                "allowClientMfaCaching": {
                    "type": "boolean",
                    "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                },
                "allowIdToken": {
                    "type": "boolean",
                    "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Specifies [authentication policy](https://docs.snowflake.com/en/user-guide/authentication-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "baseLocationPrefix": {
                    "type": "string",
                    "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "catalogSync": {
                    "type": "string",
                    "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                },
                "clientEnableLogInfoStatementParameters": {
                    "type": "boolean",
                    "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                },
                "clientEncryptionKeySize": {
                    "type": "integer",
                    "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientMetadataUseSessionDatabase": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "cortexEnabledCrossRegion": {
                    "type": "string",
                    "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                },
                "cortexModelsAllowlist": {
                    "type": "string",
                    "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                },
                "csvTimestampFormat": {
                    "type": "string",
                    "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                },
                "defaultNotebookComputePoolCpu": {
                    "type": "string",
                    "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                },
                "defaultNotebookComputePoolGpu": {
                    "type": "string",
                    "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                },
                "defaultNullOrdering": {
                    "type": "string",
                    "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                },
                "defaultStreamlitNotebookWarehouse": {
                    "type": "string",
                    "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                },
                "disableUiDownloadButton": {
                    "type": "boolean",
                    "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                },
                "disableUserPrivilegeGrants": {
                    "type": "boolean",
                    "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                },
                "enableAutomaticSensitiveDataClassificationLog": {
                    "type": "boolean",
                    "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                },
                "enableEgressCostOptimizer": {
                    "type": "boolean",
                    "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                },
                "enableIdentifierFirstLogin": {
                    "type": "boolean",
                    "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                },
                "enableInternalStagesPrivatelink": {
                    "type": "boolean",
                    "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                },
                "enableTriSecretAndRekeyOptOutForImageRepository": {
                    "type": "boolean",
                    "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                },
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                    "type": "boolean",
                    "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                },
                "enableUnhandledExceptionsReporting": {
                    "type": "boolean",
                    "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "enableUnredactedSecureObjectError": {
                    "type": "boolean",
                    "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                },
                "enforceNetworkRulesForInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "eventTable": {
                    "type": "string",
                    "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                },
                "externalOauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "featurePolicy": {
                    "type": "string",
                    "description": "Specifies [feature policy](https://docs.snowflake.com/en/developer-guide/native-apps/ui-consumer-feature-policies) for the current account.\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "hybridTableLockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                },
                "initialReplicationSizeLimitInTb": {
                    "type": "string",
                    "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsTreatIntegerAsBigint": {
                    "type": "boolean",
                    "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "listingAutoFulfillmentReplicationRefreshSchedule": {
                    "type": "string",
                    "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "minDataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "oauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "packagesPolicy": {
                    "type": "string",
                    "description": "Specifies [packages policy](https://docs.snowflake.com/en/developer-guide/udf/python/packages-policy) for the current account.\n"
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "periodicDataRekeying": {
                    "type": "boolean",
                    "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "preventUnloadToInlineUrl": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "pythonProfilerModules": {
                    "type": "string",
                    "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                },
                "pythonProfilerTargetStage": {
                    "type": "string",
                    "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "requireStorageIntegrationForStageCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                },
                "requireStorageIntegrationForStageOperation": {
                    "type": "boolean",
                    "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "samlIdentityProvider": {
                    "type": "string",
                    "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "serverlessTaskMaxStatementSize": {
                    "type": "string",
                    "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                },
                "serverlessTaskMinStatementSize": {
                    "type": "string",
                    "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                },
                "sessionPolicy": {
                    "type": "string",
                    "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "ssoLoginPage": {
                    "type": "boolean",
                    "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "activePythonProfiler",
                "allowClientMfaCaching",
                "allowIdToken",
                "autocommit",
                "baseLocationPrefix",
                "binaryInputFormat",
                "binaryOutputFormat",
                "catalog",
                "catalogSync",
                "clientEnableLogInfoStatementParameters",
                "clientEncryptionKeySize",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientMetadataUseSessionDatabase",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "cortexEnabledCrossRegion",
                "cortexModelsAllowlist",
                "csvTimestampFormat",
                "dataRetentionTimeInDays",
                "dateInputFormat",
                "dateOutputFormat",
                "defaultDdlCollation",
                "defaultNotebookComputePoolCpu",
                "defaultNotebookComputePoolGpu",
                "defaultNullOrdering",
                "defaultStreamlitNotebookWarehouse",
                "disableUiDownloadButton",
                "disableUserPrivilegeGrants",
                "enableAutomaticSensitiveDataClassificationLog",
                "enableEgressCostOptimizer",
                "enableIdentifierFirstLogin",
                "enableInternalStagesPrivatelink",
                "enableTriSecretAndRekeyOptOutForImageRepository",
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage",
                "enableUnhandledExceptionsReporting",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "enableUnredactedSecureObjectError",
                "enforceNetworkRulesForInternalStages",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "eventTable",
                "externalOauthAddPrivilegedRolesToBlockedList",
                "externalVolume",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "hybridTableLockTimeout",
                "initialReplicationSizeLimitInTb",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsTreatIntegerAsBigint",
                "jsonIndent",
                "listingAutoFulfillmentReplicationRefreshSchedule",
                "lockTimeout",
                "logLevel",
                "maxConcurrencyLevel",
                "maxDataExtensionTimeInDays",
                "metricLevel",
                "minDataRetentionTimeInDays",
                "multiStatementCount",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "oauthAddPrivilegedRolesToBlockedList",
                "odbcTreatDecimalAsInt",
                "periodicDataRekeying",
                "pipeExecutionPaused",
                "preventUnloadToInlineUrl",
                "preventUnloadToInternalStages",
                "pythonProfilerModules",
                "pythonProfilerTargetStage",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "requireStorageIntegrationForStageCreation",
                "requireStorageIntegrationForStageOperation",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "samlIdentityProvider",
                "searchPath",
                "serverlessTaskMaxStatementSize",
                "serverlessTaskMinStatementSize",
                "simulatedDataSharingConsumer",
                "ssoLoginPage",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "storageSerializationPolicy",
                "strictJsonOutput",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "activePythonProfiler": {
                    "type": "string",
                    "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                },
                "allowClientMfaCaching": {
                    "type": "boolean",
                    "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                },
                "allowIdToken": {
                    "type": "boolean",
                    "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                },
                "authenticationPolicy": {
                    "type": "string",
                    "description": "Specifies [authentication policy](https://docs.snowflake.com/en/user-guide/authentication-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "baseLocationPrefix": {
                    "type": "string",
                    "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "catalogSync": {
                    "type": "string",
                    "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                },
                "clientEnableLogInfoStatementParameters": {
                    "type": "boolean",
                    "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                },
                "clientEncryptionKeySize": {
                    "type": "integer",
                    "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientMetadataUseSessionDatabase": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "cortexEnabledCrossRegion": {
                    "type": "string",
                    "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                },
                "cortexModelsAllowlist": {
                    "type": "string",
                    "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                },
                "csvTimestampFormat": {
                    "type": "string",
                    "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                },
                "defaultNotebookComputePoolCpu": {
                    "type": "string",
                    "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                },
                "defaultNotebookComputePoolGpu": {
                    "type": "string",
                    "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                },
                "defaultNullOrdering": {
                    "type": "string",
                    "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                },
                "defaultStreamlitNotebookWarehouse": {
                    "type": "string",
                    "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                },
                "disableUiDownloadButton": {
                    "type": "boolean",
                    "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                },
                "disableUserPrivilegeGrants": {
                    "type": "boolean",
                    "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                },
                "enableAutomaticSensitiveDataClassificationLog": {
                    "type": "boolean",
                    "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                },
                "enableEgressCostOptimizer": {
                    "type": "boolean",
                    "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                },
                "enableIdentifierFirstLogin": {
                    "type": "boolean",
                    "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                },
                "enableInternalStagesPrivatelink": {
                    "type": "boolean",
                    "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                },
                "enableTriSecretAndRekeyOptOutForImageRepository": {
                    "type": "boolean",
                    "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                },
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                    "type": "boolean",
                    "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                },
                "enableUnhandledExceptionsReporting": {
                    "type": "boolean",
                    "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "enableUnredactedSecureObjectError": {
                    "type": "boolean",
                    "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                },
                "enforceNetworkRulesForInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "eventTable": {
                    "type": "string",
                    "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                },
                "externalOauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "featurePolicy": {
                    "type": "string",
                    "description": "Specifies [feature policy](https://docs.snowflake.com/en/developer-guide/native-apps/ui-consumer-feature-policies) for the current account.\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "hybridTableLockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                },
                "initialReplicationSizeLimitInTb": {
                    "type": "string",
                    "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsTreatIntegerAsBigint": {
                    "type": "boolean",
                    "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "listingAutoFulfillmentReplicationRefreshSchedule": {
                    "type": "string",
                    "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "minDataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "oauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "packagesPolicy": {
                    "type": "string",
                    "description": "Specifies [packages policy](https://docs.snowflake.com/en/developer-guide/udf/python/packages-policy) for the current account.\n"
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "periodicDataRekeying": {
                    "type": "boolean",
                    "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "preventUnloadToInlineUrl": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "pythonProfilerModules": {
                    "type": "string",
                    "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                },
                "pythonProfilerTargetStage": {
                    "type": "string",
                    "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "requireStorageIntegrationForStageCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                },
                "requireStorageIntegrationForStageOperation": {
                    "type": "boolean",
                    "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "samlIdentityProvider": {
                    "type": "string",
                    "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "serverlessTaskMaxStatementSize": {
                    "type": "string",
                    "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                },
                "serverlessTaskMinStatementSize": {
                    "type": "string",
                    "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                },
                "sessionPolicy": {
                    "type": "string",
                    "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "ssoLoginPage": {
                    "type": "boolean",
                    "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CurrentAccount resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "activePythonProfiler": {
                        "type": "string",
                        "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                    },
                    "allowClientMfaCaching": {
                        "type": "boolean",
                        "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                    },
                    "allowIdToken": {
                        "type": "boolean",
                        "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                    },
                    "authenticationPolicy": {
                        "type": "string",
                        "description": "Specifies [authentication policy](https://docs.snowflake.com/en/user-guide/authentication-policies) for the current account. For more information about this resource, see docs.\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "baseLocationPrefix": {
                        "type": "string",
                        "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "catalogSync": {
                        "type": "string",
                        "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                    },
                    "clientEnableLogInfoStatementParameters": {
                        "type": "boolean",
                        "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                    },
                    "clientEncryptionKeySize": {
                        "type": "integer",
                        "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientMetadataUseSessionDatabase": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "cortexEnabledCrossRegion": {
                        "type": "string",
                        "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                    },
                    "cortexModelsAllowlist": {
                        "type": "string",
                        "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                    },
                    "csvTimestampFormat": {
                        "type": "string",
                        "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                    },
                    "defaultNotebookComputePoolCpu": {
                        "type": "string",
                        "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                    },
                    "defaultNotebookComputePoolGpu": {
                        "type": "string",
                        "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                    },
                    "defaultNullOrdering": {
                        "type": "string",
                        "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                    },
                    "defaultStreamlitNotebookWarehouse": {
                        "type": "string",
                        "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                    },
                    "disableUiDownloadButton": {
                        "type": "boolean",
                        "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                    },
                    "disableUserPrivilegeGrants": {
                        "type": "boolean",
                        "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                    },
                    "enableAutomaticSensitiveDataClassificationLog": {
                        "type": "boolean",
                        "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                    },
                    "enableEgressCostOptimizer": {
                        "type": "boolean",
                        "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                    },
                    "enableIdentifierFirstLogin": {
                        "type": "boolean",
                        "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                    },
                    "enableInternalStagesPrivatelink": {
                        "type": "boolean",
                        "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                    },
                    "enableTriSecretAndRekeyOptOutForImageRepository": {
                        "type": "boolean",
                        "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                    },
                    "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                        "type": "boolean",
                        "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                    },
                    "enableUnhandledExceptionsReporting": {
                        "type": "boolean",
                        "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "enableUnredactedSecureObjectError": {
                        "type": "boolean",
                        "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                    },
                    "enforceNetworkRulesForInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "eventTable": {
                        "type": "string",
                        "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                    },
                    "externalOauthAddPrivilegedRolesToBlockedList": {
                        "type": "boolean",
                        "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "featurePolicy": {
                        "type": "string",
                        "description": "Specifies [feature policy](https://docs.snowflake.com/en/developer-guide/native-apps/ui-consumer-feature-policies) for the current account.\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "hybridTableLockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                    },
                    "initialReplicationSizeLimitInTb": {
                        "type": "string",
                        "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsTreatIntegerAsBigint": {
                        "type": "boolean",
                        "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "listingAutoFulfillmentReplicationRefreshSchedule": {
                        "type": "string",
                        "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "maxConcurrencyLevel": {
                        "type": "integer",
                        "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "minDataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "oauthAddPrivilegedRolesToBlockedList": {
                        "type": "boolean",
                        "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "packagesPolicy": {
                        "type": "string",
                        "description": "Specifies [packages policy](https://docs.snowflake.com/en/developer-guide/udf/python/packages-policy) for the current account.\n"
                    },
                    "passwordPolicy": {
                        "type": "string",
                        "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                    },
                    "periodicDataRekeying": {
                        "type": "boolean",
                        "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                    },
                    "pipeExecutionPaused": {
                        "type": "boolean",
                        "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                    },
                    "preventUnloadToInlineUrl": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "pythonProfilerModules": {
                        "type": "string",
                        "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                    },
                    "pythonProfilerTargetStage": {
                        "type": "string",
                        "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "requireStorageIntegrationForStageCreation": {
                        "type": "boolean",
                        "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                    },
                    "requireStorageIntegrationForStageOperation": {
                        "type": "boolean",
                        "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                    },
                    "resourceMonitor": {
                        "type": "string"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "samlIdentityProvider": {
                        "type": "string",
                        "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "serverlessTaskMaxStatementSize": {
                        "type": "string",
                        "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                    },
                    "serverlessTaskMinStatementSize": {
                        "type": "string",
                        "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                    },
                    "sessionPolicy": {
                        "type": "string",
                        "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "ssoLoginPage": {
                        "type": "boolean",
                        "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/currentOrganizationAccount:CurrentOrganizationAccount": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/currentOrganizationAccount:CurrentOrganizationAccount example '\"\u003corganization_account_name\u003e\"'\n```\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "activePythonProfiler": {
                    "type": "string",
                    "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                },
                "allowClientMfaCaching": {
                    "type": "boolean",
                    "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                },
                "allowIdToken": {
                    "type": "boolean",
                    "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "baseLocationPrefix": {
                    "type": "string",
                    "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "catalogSync": {
                    "type": "string",
                    "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                },
                "clientEnableLogInfoStatementParameters": {
                    "type": "boolean",
                    "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                },
                "clientEncryptionKeySize": {
                    "type": "integer",
                    "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientMetadataUseSessionDatabase": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the organization account.\n"
                },
                "cortexEnabledCrossRegion": {
                    "type": "string",
                    "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                },
                "cortexModelsAllowlist": {
                    "type": "string",
                    "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                },
                "csvTimestampFormat": {
                    "type": "string",
                    "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                },
                "defaultNotebookComputePoolCpu": {
                    "type": "string",
                    "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                },
                "defaultNotebookComputePoolGpu": {
                    "type": "string",
                    "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                },
                "defaultNullOrdering": {
                    "type": "string",
                    "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                },
                "defaultStreamlitNotebookWarehouse": {
                    "type": "string",
                    "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                },
                "disableUiDownloadButton": {
                    "type": "boolean",
                    "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                },
                "disableUserPrivilegeGrants": {
                    "type": "boolean",
                    "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                },
                "enableAutomaticSensitiveDataClassificationLog": {
                    "type": "boolean",
                    "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                },
                "enableEgressCostOptimizer": {
                    "type": "boolean",
                    "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                },
                "enableIdentifierFirstLogin": {
                    "type": "boolean",
                    "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                },
                "enableInternalStagesPrivatelink": {
                    "type": "boolean",
                    "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                },
                "enableTriSecretAndRekeyOptOutForImageRepository": {
                    "type": "boolean",
                    "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                },
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                    "type": "boolean",
                    "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                },
                "enableUnhandledExceptionsReporting": {
                    "type": "boolean",
                    "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "enableUnredactedSecureObjectError": {
                    "type": "boolean",
                    "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                },
                "enforceNetworkRulesForInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "eventTable": {
                    "type": "string",
                    "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                },
                "externalOauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "hybridTableLockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                },
                "initialReplicationSizeLimitInTb": {
                    "type": "string",
                    "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsTreatIntegerAsBigint": {
                    "type": "boolean",
                    "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "listingAutoFulfillmentReplicationRefreshSchedule": {
                    "type": "string",
                    "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "minDataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier (i.e. name) for the organization account within currently used organization. The field name is validated during import and create operations to ensure that it matches the current organization account name.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "oauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "periodicDataRekeying": {
                    "type": "boolean",
                    "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "preventUnloadToInlineUrl": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "pythonProfilerModules": {
                    "type": "string",
                    "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                },
                "pythonProfilerTargetStage": {
                    "type": "string",
                    "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "requireStorageIntegrationForStageCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                },
                "requireStorageIntegrationForStageOperation": {
                    "type": "boolean",
                    "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "samlIdentityProvider": {
                    "type": "string",
                    "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "serverlessTaskMaxStatementSize": {
                    "type": "string",
                    "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                },
                "serverlessTaskMinStatementSize": {
                    "type": "string",
                    "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                },
                "sessionPolicy": {
                    "type": "string",
                    "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/CurrentOrganizationAccountShowOutput:CurrentOrganizationAccountShowOutput"
                    },
                    "description": "Saved output for the result of `SHOW ORGANIZATION ACCOUNTS`\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "ssoLoginPage": {
                    "type": "boolean",
                    "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "activePythonProfiler",
                "allowClientMfaCaching",
                "allowIdToken",
                "autocommit",
                "baseLocationPrefix",
                "binaryInputFormat",
                "binaryOutputFormat",
                "catalog",
                "catalogSync",
                "clientEnableLogInfoStatementParameters",
                "clientEncryptionKeySize",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientMetadataUseSessionDatabase",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "cortexEnabledCrossRegion",
                "cortexModelsAllowlist",
                "csvTimestampFormat",
                "dataRetentionTimeInDays",
                "dateInputFormat",
                "dateOutputFormat",
                "defaultDdlCollation",
                "defaultNotebookComputePoolCpu",
                "defaultNotebookComputePoolGpu",
                "defaultNullOrdering",
                "defaultStreamlitNotebookWarehouse",
                "disableUiDownloadButton",
                "disableUserPrivilegeGrants",
                "enableAutomaticSensitiveDataClassificationLog",
                "enableEgressCostOptimizer",
                "enableIdentifierFirstLogin",
                "enableInternalStagesPrivatelink",
                "enableTriSecretAndRekeyOptOutForImageRepository",
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage",
                "enableUnhandledExceptionsReporting",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "enableUnredactedSecureObjectError",
                "enforceNetworkRulesForInternalStages",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "eventTable",
                "externalOauthAddPrivilegedRolesToBlockedList",
                "externalVolume",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "hybridTableLockTimeout",
                "initialReplicationSizeLimitInTb",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsTreatIntegerAsBigint",
                "jsonIndent",
                "listingAutoFulfillmentReplicationRefreshSchedule",
                "lockTimeout",
                "logLevel",
                "maxConcurrencyLevel",
                "maxDataExtensionTimeInDays",
                "metricLevel",
                "minDataRetentionTimeInDays",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "oauthAddPrivilegedRolesToBlockedList",
                "odbcTreatDecimalAsInt",
                "periodicDataRekeying",
                "pipeExecutionPaused",
                "preventUnloadToInlineUrl",
                "preventUnloadToInternalStages",
                "pythonProfilerModules",
                "pythonProfilerTargetStage",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "requireStorageIntegrationForStageCreation",
                "requireStorageIntegrationForStageOperation",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "samlIdentityProvider",
                "searchPath",
                "serverlessTaskMaxStatementSize",
                "serverlessTaskMinStatementSize",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "ssoLoginPage",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "storageSerializationPolicy",
                "strictJsonOutput",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "activePythonProfiler": {
                    "type": "string",
                    "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                },
                "allowClientMfaCaching": {
                    "type": "boolean",
                    "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                },
                "allowIdToken": {
                    "type": "boolean",
                    "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "baseLocationPrefix": {
                    "type": "string",
                    "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "catalogSync": {
                    "type": "string",
                    "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                },
                "clientEnableLogInfoStatementParameters": {
                    "type": "boolean",
                    "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                },
                "clientEncryptionKeySize": {
                    "type": "integer",
                    "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientMetadataUseSessionDatabase": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the organization account.\n"
                },
                "cortexEnabledCrossRegion": {
                    "type": "string",
                    "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                },
                "cortexModelsAllowlist": {
                    "type": "string",
                    "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                },
                "csvTimestampFormat": {
                    "type": "string",
                    "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                },
                "defaultNotebookComputePoolCpu": {
                    "type": "string",
                    "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                },
                "defaultNotebookComputePoolGpu": {
                    "type": "string",
                    "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                },
                "defaultNullOrdering": {
                    "type": "string",
                    "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                },
                "defaultStreamlitNotebookWarehouse": {
                    "type": "string",
                    "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                },
                "disableUiDownloadButton": {
                    "type": "boolean",
                    "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                },
                "disableUserPrivilegeGrants": {
                    "type": "boolean",
                    "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                },
                "enableAutomaticSensitiveDataClassificationLog": {
                    "type": "boolean",
                    "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                },
                "enableEgressCostOptimizer": {
                    "type": "boolean",
                    "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                },
                "enableIdentifierFirstLogin": {
                    "type": "boolean",
                    "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                },
                "enableInternalStagesPrivatelink": {
                    "type": "boolean",
                    "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                },
                "enableTriSecretAndRekeyOptOutForImageRepository": {
                    "type": "boolean",
                    "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                },
                "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                    "type": "boolean",
                    "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                },
                "enableUnhandledExceptionsReporting": {
                    "type": "boolean",
                    "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "enableUnredactedSecureObjectError": {
                    "type": "boolean",
                    "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                },
                "enforceNetworkRulesForInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "eventTable": {
                    "type": "string",
                    "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                },
                "externalOauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "hybridTableLockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                },
                "initialReplicationSizeLimitInTb": {
                    "type": "string",
                    "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsTreatIntegerAsBigint": {
                    "type": "boolean",
                    "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "listingAutoFulfillmentReplicationRefreshSchedule": {
                    "type": "string",
                    "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "minDataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The identifier (i.e. name) for the organization account within currently used organization. The field name is validated during import and create operations to ensure that it matches the current organization account name.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "oauthAddPrivilegedRolesToBlockedList": {
                    "type": "boolean",
                    "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                },
                "periodicDataRekeying": {
                    "type": "boolean",
                    "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "preventUnloadToInlineUrl": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "pythonProfilerModules": {
                    "type": "string",
                    "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                },
                "pythonProfilerTargetStage": {
                    "type": "string",
                    "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "requireStorageIntegrationForStageCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                },
                "requireStorageIntegrationForStageOperation": {
                    "type": "boolean",
                    "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                },
                "resourceMonitor": {
                    "type": "string"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "samlIdentityProvider": {
                    "type": "string",
                    "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "serverlessTaskMaxStatementSize": {
                    "type": "string",
                    "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                },
                "serverlessTaskMinStatementSize": {
                    "type": "string",
                    "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                },
                "sessionPolicy": {
                    "type": "string",
                    "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "ssoLoginPage": {
                    "type": "boolean",
                    "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CurrentOrganizationAccount resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "activePythonProfiler": {
                        "type": "string",
                        "description": "Sets the profiler to use for the session when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). Valid values are (case-insensitive): `LINE` | `MEMORY`. For more information, check [ACTIVE*PYTHON*PROFILER docs](https://docs.snowflake.com/en/sql-reference/parameters#active-python-profiler).\n"
                    },
                    "allowClientMfaCaching": {
                        "type": "boolean",
                        "description": "Specifies whether an MFA token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to respond to an MFA prompt at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using MFA token caching to minimize the number of prompts during authentication — optional.](https://docs.snowflake.com/en/user-guide/security-mfa.html#label-mfa-token-caching) For more information, check [ALLOW*CLIENT*MFA_CACHING docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching).\n"
                    },
                    "allowIdToken": {
                        "type": "boolean",
                        "description": "Specifies whether a connection token can be saved in the client-side operating system keystore to promote continuous, secure connectivity without users needing to enter login credentials at the start of each connection attempt to Snowflake. For details and the list of supported Snowflake-provided clients, see [Using connection caching to minimize the number of prompts for authentication — optional.](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use.html#label-browser-based-sso-connection-caching) For more information, check [ALLOW*ID*TOKEN docs](https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "baseLocationPrefix": {
                        "type": "string",
                        "description": "Specifies a prefix for Snowflake to use in the write path for Snowflake-managed Apache Iceberg™ tables. For more information, see [data and metadata directories for Iceberg tables](https://docs.snowflake.com/en/user-guide/tables-iceberg-storage.html#label-tables-iceberg-configure-external-volume-base-location). For more information, check [BASE*LOCATION*PREFIX docs](https://docs.snowflake.com/en/sql-reference/parameters#base-location-prefix).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64` | `UTF8`. For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). Valid values are (case-insensitive): `HEX` | `BASE64`. For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "Specifies the catalog for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-catalog-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "catalogSync": {
                        "type": "string",
                        "description": "Specifies the name of your catalog integration for [Snowflake Open Catalog](https://other-docs.snowflake.com/en/opencatalog/overview). Snowflake syncs tables that use the specified catalog integration with your Snowflake Open Catalog account. For more information, see [Sync a Snowflake-managed table with Snowflake Open Catalog](https://docs.snowflake.com/en/user-guide/tables-iceberg-open-catalog-sync). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [CATALOG_SYNC docs](https://docs.snowflake.com/en/sql-reference/parameters#catalog-sync).\n"
                    },
                    "clientEnableLogInfoStatementParameters": {
                        "type": "boolean",
                        "description": "Enables users to log the data values bound to [PreparedStatements](https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-api.html#label-jdbc-api-preparedstatement) ([more details](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters)). For more information, check [CLIENT*ENABLE*LOG*INFO*STATEMENT_PARAMETERS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters).\n"
                    },
                    "clientEncryptionKeySize": {
                        "type": "integer",
                        "description": "Specifies the AES encryption key size, in bits, used by Snowflake to encrypt/decrypt files stored on internal stages (for loading/unloading data) when you use the SNOWFLAKE*FULL encryption type. For more information, check [CLIENT*ENCRYPTION*KEY*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientMetadataUseSessionDatabase": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases to the current database. The narrower search typically returns fewer rows and executes more quickly ([more details on the usage](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database)). For more information, check [CLIENT*METADATA*USE*SESSION*DATABASE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-use-session-database).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ`. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the organization account.\n"
                    },
                    "cortexEnabledCrossRegion": {
                        "type": "string",
                        "description": "Specifies the regions where an inference request may be processed in case the request cannot be processed in the region where request is originally placed. Specifying DISABLED disables cross-region inferencing. For examples and details, see [Cross-region inference](https://docs.snowflake.com/en/user-guide/snowflake-cortex/cross-region-inference). For more information, check [CORTEX*ENABLED*CROSS_REGION docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-enabled-cross-region).\n"
                    },
                    "cortexModelsAllowlist": {
                        "type": "string",
                        "description": "Specifies the models that users in the account can access. Use this parameter to allowlist models for all users in the account. If you need to provide specific users with access beyond what you’ve specified in the allowlist, use role-based access control instead. For more information, see [Model allowlist](https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql.html#label-cortex-llm-allowlist). For more information, check [CORTEX*MODELS*ALLOWLIST docs](https://docs.snowflake.com/en/sql-reference/parameters#cortex-models-allowlist).\n"
                    },
                    "csvTimestampFormat": {
                        "type": "string",
                        "description": "Specifies the format for TIMESTAMP values in CSV files downloaded from Snowsight. If this parameter is not set, [TIMESTAMP*LTZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ltz-output-format) will be used for TIMESTAMP*LTZ values, [TIMESTAMP*TZ*OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-tz-output-format) will be used for TIMESTAMP*TZ and [TIMESTAMP*NTZ*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-ntz-output-format) for TIMESTAMP*NTZ values. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output) or [Download your query results](https://docs.snowflake.com/en/user-guide/ui-snowsight-query.html#label-snowsight-download-query-results). For more information, check [CSV*TIMESTAMP*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#csv-timestamp-format).\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database, schema, or table. For more information, see [Understanding \u0026 using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel). For more information, check [DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days).\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Sets the default collation used for the following DDL operations: [CREATE TABLE](https://docs.snowflake.com/en/sql-reference/sql/create-table), [ALTER TABLE](https://docs.snowflake.com/en/sql-reference/sql/alter-table) … ADD COLUMN. Setting this parameter forces all subsequently-created columns in the affected objects (table, schema, database, or account) to have the specified collation as the default, unless the collation for the column is explicitly defined in the DDL. For more information, check [DEFAULT*DDL*COLLATION docs](https://docs.snowflake.com/en/sql-reference/parameters#default-ddl-collation).\n"
                    },
                    "defaultNotebookComputePoolCpu": {
                        "type": "string",
                        "description": "Sets the preferred CPU compute pool used for [Notebooks on CPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*CPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-cpu).\n"
                    },
                    "defaultNotebookComputePoolGpu": {
                        "type": "string",
                        "description": "Sets the preferred GPU compute pool used for [Notebooks on GPU Container Runtime](https://docs.snowflake.com/en/developer-guide/snowflake-ml/notebooks-on-spcs). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*NOTEBOOK*COMPUTE*POOL*GPU docs](https://docs.snowflake.com/en/sql-reference/parameters#default-notebook-compute-pool-gpu).\n"
                    },
                    "defaultNullOrdering": {
                        "type": "string",
                        "description": "Specifies the default ordering of NULL values in a result set ([more details](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering)). Valid values are (case-insensitive): `FIRST` | `LAST`. For more information, check [DEFAULT*NULL*ORDERING docs](https://docs.snowflake.com/en/sql-reference/parameters#default-null-ordering).\n"
                    },
                    "defaultStreamlitNotebookWarehouse": {
                        "type": "string",
                        "description": "Specifies the name of the default warehouse to use when creating a notebook. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [DEFAULT*STREAMLIT*NOTEBOOK_WAREHOUSE docs](https://docs.snowflake.com/en/sql-reference/parameters#default-streamlit-notebook-warehouse).\n"
                    },
                    "disableUiDownloadButton": {
                        "type": "boolean",
                        "description": "Controls whether users in an account see a button to download data in Snowsight or the Classic Console, such as a table returned from running a query in a worksheet. If the button to download is hidden in Snowsight or the Classic Console, users can still download or export data using [third-party software](https://docs.snowflake.com/en/user-guide/ecosystem). For more information, check [DISABLE*UI*DOWNLOAD_BUTTON docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-ui-download-button).\n"
                    },
                    "disableUserPrivilegeGrants": {
                        "type": "boolean",
                        "description": "Controls whether users in an account can grant privileges directly to other users. Disabling user privilege grants (that is, setting DISABLE*USER*PRIVILEGE*GRANTS to TRUE) does not affect existing grants to users. Existing grants to users continue to confer privileges to those users. For more information, see [GRANT \\n\\n … TO USER](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-user). For more information, check [DISABLE*USER*PRIVILEGE*GRANTS docs](https://docs.snowflake.com/en/sql-reference/parameters#disable-user-privilege-grants).\n"
                    },
                    "enableAutomaticSensitiveDataClassificationLog": {
                        "type": "boolean",
                        "description": "Controls whether events from [automatic sensitive data classification](https://docs.snowflake.com/en/user-guide/classify-auto) are logged in the user event table. For more information, check [ENABLE*AUTOMATIC*SENSITIVE*DATA*CLASSIFICATION_LOG docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-automatic-sensitive-data-classification-log).\n"
                    },
                    "enableEgressCostOptimizer": {
                        "type": "boolean",
                        "description": "Enables or disables the Listing Cross-cloud auto-fulfillment Egress cost optimizer. For more information, check [ENABLE*EGRESS*COST_OPTIMIZER docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-egress-cost-optimizer).\n"
                    },
                    "enableIdentifierFirstLogin": {
                        "type": "boolean",
                        "description": "Determines the login flow for users. When enabled, Snowflake prompts users for their username or email address before presenting authentication methods. For details, see [Identifier-first login](https://docs.snowflake.com/en/user-guide/identifier-first-login). For more information, check [ENABLE*IDENTIFIER*FIRST_LOGIN docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-identifier-first-login).\n"
                    },
                    "enableInternalStagesPrivatelink": {
                        "type": "boolean",
                        "description": "Specifies whether the [SYSTEM$GET*PRIVATELINK*CONFIG](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config) function returns the private-internal-stages key in the query result. The corresponding value in the query result is used during the configuration process for private connectivity to internal stages. For more information, check [ENABLE*INTERNAL*STAGES_PRIVATELINK docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-internal-stages-privatelink).\n"
                    },
                    "enableTriSecretAndRekeyOptOutForImageRepository": {
                        "type": "boolean",
                        "description": "Specifies choice for the [image repository](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-registry-repository.html#label-registry-and-repository-image-repository) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*IMAGE_REPOSITORY docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-image-repository).\n"
                    },
                    "enableTriSecretAndRekeyOptOutForSpcsBlockStorage": {
                        "type": "boolean",
                        "description": "Specifies the choice for the [Snowpark Container Services block storage volume](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/block-storage-volume) to opt out of Tri-Secret Secure and [Periodic rekeying](https://docs.snowflake.com/en/user-guide/security-encryption-manage.html#label-periodic-rekeying). For more information, check [ENABLE*TRI*SECRET*AND*REKEY*OPT*OUT*FOR*SPCS*BLOCK*STORAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-tri-secret-and-rekey-opt-out-for-spcs-block-storage).\n"
                    },
                    "enableUnhandledExceptionsReporting": {
                        "type": "boolean",
                        "description": "Specifies whether Snowflake may capture – in an event table – log messages or trace event data for unhandled exceptions in procedure or UDF handler code. For more information, see [Capturing messages from unhandled exceptions](https://docs.snowflake.com/en/developer-guide/logging-tracing/unhandled-exception-messages). For more information, check [ENABLE*UNHANDLED*EXCEPTIONS_REPORTING docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unhandled-exceptions-reporting).\n"
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If FALSE, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "enableUnredactedSecureObjectError": {
                        "type": "boolean",
                        "description": "Controls whether error messages related to secure objects are redacted in metadata. For more information, see [Secure objects: Redaction of information in error messages](https://docs.snowflake.com/en/release-notes/bcr-bundles/un-bundled/bcr-1858). Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*SECURE*OBJECT*ERROR parameter. When using the ALTER USER command to set the parameter to TRUE for a particular user, modify the user that you want to see the redacted error messages in metadata, not the user who caused the error. For more information, check [ENABLE*UNREDACTED*SECURE*OBJECT*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-secure-object-error).\n"
                    },
                    "enforceNetworkRulesForInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether a network policy that uses network rules can restrict access to AWS internal stages. This parameter has no effect on network policies that do not use network rules. This account-level parameter affects both account-level and user-level network policies. For details about using network policies and network rules to restrict access to AWS internal stages, including the use of this parameter, see [Protecting internal stages on AWS](https://docs.snowflake.com/en/user-guide/network-policies.html#label-network-policies-rules-stages). For more information, check [ENFORCE*NETWORK*RULES*FOR*INTERNAL_STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#enforce-network-rules-for-internal-stages).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "eventTable": {
                        "type": "string",
                        "description": "Specifies the name of the event table for logging messages from stored procedures and UDFs contained by the object with which the event table is associated. Associating an event table with a database is available in [Enterprise Edition or higher](https://docs.snowflake.com/en/user-guide/intro-editions). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EVENT_TABLE docs](https://docs.snowflake.com/en/sql-reference/parameters#event-table).\n"
                    },
                    "externalOauthAddPrivilegedRolesToBlockedList": {
                        "type": "boolean",
                        "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from the External OAuth authorization server. For more information, check [EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED_LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#external-oauth-add-privileged-roles-to-blocked-list).\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "Specifies the external volume for Apache Iceberg™ tables. For more information, see the [Iceberg table documentation](https://docs.snowflake.com/en/user-guide/tables-iceberg.html#label-tables-iceberg-external-volume-def). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [EXTERNAL_VOLUME docs](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). Valid values are (case-insensitive): `GeoJSON` | `WKT` | `WKB` | `EWKT` | `EWKB`. For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "hybridTableLockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to acquire row-level locks on a hybrid table, before timing out and aborting the statement. For more information, check [HYBRID*TABLE*LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#hybrid-table-lock-timeout).\n"
                    },
                    "initialReplicationSizeLimitInTb": {
                        "type": "string",
                        "description": "Sets the maximum estimated size limit for the initial replication of a primary database to a secondary database (in TB). Set this parameter on any account that stores a secondary database. This size limit helps prevent accounts from accidentally incurring large database replication charges. To remove the size limit, set the value to 0.0. It is required to pass numbers with scale of at least 1 (e.g. 20.5, 32.25, 33.333, etc.). For more information, check [INITIAL*REPLICATION*SIZE*LIMIT*IN_TB docs](https://docs.snowflake.com/en/sql-reference/parameters#initial-replication-size-limit-in-tb).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values ([more details](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc)). For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsTreatIntegerAsBigint": {
                        "type": "boolean",
                        "description": "Specifies how the Snowflake Node.js Driver processes numeric columns that have a scale of zero (0), for example INTEGER or NUMBER(p, 0). For more information, check [JS*TREAT*INTEGER*AS*BIGINT docs](https://docs.snowflake.com/en/sql-reference/parameters#js-treat-integer-as-bigint).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "listingAutoFulfillmentReplicationRefreshSchedule": {
                        "type": "string",
                        "description": "Sets the time interval used to refresh the application package based data products to other regions. For more information, check [LISTING*AUTO*FULFILLMENT*REPLICATION*REFRESH_SCHEDULE docs](https://docs.snowflake.com/en/sql-reference/parameters#listing-auto-fulfillment-replication-refresh-schedule).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `TRACE` | `DEBUG` | `INFO` | `WARN` | `ERROR` | `FATAL` | `OFF`. For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "maxConcurrencyLevel": {
                        "type": "integer",
                        "description": "Specifies the concurrency level for SQL statements (that is, queries and DML) executed by a warehouse ([more details](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level)). For more information, check [MAX*CONCURRENCY*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#max-concurrency-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Maximum number of days Snowflake can extend the data retention period for tables to prevent streams on the tables from becoming stale. By default, if the [DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#data-retention-time-in-days) setting for a source table is less than 14 days, and a stream has not been consumed, Snowflake temporarily extends this period to the stream’s offset, up to a maximum of 14 days, regardless of the [Snowflake Edition](https://docs.snowflake.com/en/user-guide/intro-editions) for your account. The MAX*DATA*EXTENSION*TIME*IN*DAYS parameter enables you to limit this automatic extension period to control storage costs for data retention or for compliance reasons. For more information, check [MAX*DATA*EXTENSION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "Controls how metrics data is ingested into the event table. For more information about metric levels, see [Setting levels for logging, metrics, and tracing](https://docs.snowflake.com/en/developer-guide/logging-tracing/telemetry-levels). Valid values are (case-insensitive): `ALL` | `NONE`. For more information, check [METRIC_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "minDataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Minimum number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on an object. If a minimum number of days for data retention is set on an account, the data retention period for an object is determined by MAX([DATA*RETENTION*TIME*IN*DAYS](https://docs.snowflake.com/en/sql-reference/parameters#label-data-retention-time-in-days), MIN*DATA*RETENTION*TIME*IN*DAYS). For more information, check [MIN*DATA*RETENTION*TIME*IN*DAYS docs](https://docs.snowflake.com/en/sql-reference/parameters#min-data-retention-time-in-days).\n"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier (i.e. name) for the organization account within currently used organization. The field name is validated during import and create operations to ensure that it matches the current organization account name.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "oauthAddPrivilegedRolesToBlockedList": {
                        "type": "boolean",
                        "description": "Determines whether the ACCOUNTADMIN, ORGADMIN, GLOBALORGADMIN, and SECURITYADMIN roles can be used as the primary role when creating a Snowflake session based on the access token from Snowflake’s authorization server. For more information, check [OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST docs](https://docs.snowflake.com/en/sql-reference/parameters#oauth-add-privileged-roles-to-blocked-list).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "passwordPolicy": {
                        "type": "string",
                        "description": "Specifies [password policy](https://docs.snowflake.com/en/user-guide/password-authentication#label-using-password-policies) for the current account. For more information about this resource, see docs.\n"
                    },
                    "periodicDataRekeying": {
                        "type": "boolean",
                        "description": "It enables/disables re-encryption of table data with new keys on a yearly basis to provide additional levels of data protection ([more details](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying)). For more information, check [PERIODIC*DATA*REKEYING docs](https://docs.snowflake.com/en/sql-reference/parameters#periodic-data-rekeying).\n"
                    },
                    "pipeExecutionPaused": {
                        "type": "boolean",
                        "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role ([more details](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused)). For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                    },
                    "preventUnloadToInlineUrl": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent ad hoc data unload operations to external cloud storage locations (that is, [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements that specify the cloud storage URL and access settings directly in the statement). For an example, see [Unloading data from a table directly to files in an external location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location.html#label-copy-into-location-ad-hoc). For more information, check [PREVENT*UNLOAD*TO*INLINE*URL docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url).\n"
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO location](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "pythonProfilerModules": {
                        "type": "string",
                        "description": "Specifies the list of Python modules to include in a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*MODULES docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-modules).\n"
                    },
                    "pythonProfilerTargetStage": {
                        "type": "string",
                        "description": "Specifies the fully-qualified name of the stage in which to save a report when [profiling Python handler code](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler). For more information, check [PYTHON*PROFILER*TARGET_STAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#python-profiler-target-stage).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for [Apache Iceberg™ tables](https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table) that use an external catalog. For more information, check [REPLACE*INVALID*CHARACTERS docs](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "requireStorageIntegrationForStageCreation": {
                        "type": "boolean",
                        "description": "Specifies whether to require a storage integration object as cloud credentials when creating a named external stage (using [CREATE STAGE](https://docs.snowflake.com/en/sql-reference/sql/create-stage)) to access a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_CREATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation).\n"
                    },
                    "requireStorageIntegrationForStageOperation": {
                        "type": "boolean",
                        "description": "Specifies whether to require using a named external stage that references a storage integration object as cloud credentials when loading data from or unloading data to a private cloud storage location. For more information, check [REQUIRE*STORAGE*INTEGRATION*FOR*STAGE_OPERATION docs](https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation).\n"
                    },
                    "resourceMonitor": {
                        "type": "string"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "samlIdentityProvider": {
                        "type": "string",
                        "description": "Enables federated authentication. This deprecated parameter enables federated authentication ([more details](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider)). For more information, check [SAML*IDENTITY*PROVIDER docs](https://docs.snowflake.com/en/sql-reference/parameters#saml-identity-provider).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "serverlessTaskMaxStatementSize": {
                        "type": "string",
                        "description": "Specifies the maximum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MAX*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-max-statement-size).\n"
                    },
                    "serverlessTaskMinStatementSize": {
                        "type": "string",
                        "description": "Specifies the minimum allowed warehouse size for [Serverless tasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html#label-tasks-compute-resources-serverless). Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [SERVERLESS*TASK*MIN*STATEMENT*SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#serverless-task-min-statement-size).\n"
                    },
                    "sessionPolicy": {
                        "type": "string",
                        "description": "Specifies [session policy](https://docs.snowflake.com/en/user-guide/session-policies-using) for the current account.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/CurrentOrganizationAccountShowOutput:CurrentOrganizationAccountShowOutput"
                        },
                        "description": "Saved output for the result of `SHOW ORGANIZATION ACCOUNTS`\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "ssoLoginPage": {
                        "type": "boolean",
                        "description": "This deprecated parameter disables preview mode for testing SSO (after enabling federated authentication) before rolling it out to users. For more information, check [SSO*LOGIN*PAGE docs](https://docs.snowflake.com/en/sql-reference/parameters#sso-login-page).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "Specifies the storage serialization policy for Snowflake-managed [Apache Iceberg™ tables](https://docs.snowflake.com/en/user-guide/tables-iceberg). Valid values are (case-insensitive): `COMPATIBLE` | `OPTIMIZED`. For more information, check [STORAGE*SERIALIZATION*POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. Valid values are (case-insensitive): `TIMESTAMP_LTZ` | `TIMESTAMP_NTZ` | `TIMESTAMP_TZ`. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). Valid values are (case-insensitive): `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. Valid values are (case-insensitive): `READ COMMITTED`. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/database:Database": {
            "description": "\n\n## Import\n\nMake sure that `is_transient` and `with_managed_access` are set in your config explicitly before import to avoid diff and recreation\n\n(reasons are presented in this migration guide entry).\n\n```sh\n$ pulumi import snowflake:index/database:Database example '\"\u003cdatabase_name\u003e\"'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "dropPublicSchemaOnCreation": {
                    "type": "boolean",
                    "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "replication": {
                    "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                    "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "dropPublicSchemaOnCreation": {
                        "type": "boolean",
                        "description": "Specifies whether to drop public schema on creation or not. Modifying the parameter after database is already created won't have any effect.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "replication": {
                        "$ref": "#/types/snowflake:index/DatabaseReplication:DatabaseReplication",
                        "description": "Configures replication for a given database. When specified, this database will be promoted to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/databaseRole:DatabaseRole": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/databaseRole:DatabaseRole example '\"\u003cdatabase_name\u003e\".\"\u003cdatabase_role_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                    },
                    "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed whenever comment field changes.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database role.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseRole resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database role.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database role. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/DatabaseRoleShowOutput:DatabaseRoleShowOutput"
                        },
                        "description": "Outputs the result of `SHOW DATABASE ROLES` for the given database role. Note that this value will be only recomputed whenever comment field changes.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/dynamicTable:DynamicTable": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/dynamicTable:DynamicTable dt \"mydb|myschema|product\"\n```\n\n",
            "properties": {
                "automaticClustering": {
                    "type": "boolean",
                    "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                },
                "bytes": {
                    "type": "integer",
                    "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                },
                "clusterBy": {
                    "type": "string",
                    "description": "The clustering key for the dynamic table.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Time when this dynamic table was created.\n"
                },
                "dataTimestamp": {
                    "type": "string",
                    "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "(Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n"
                },
                "isClone": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                },
                "isReplica": {
                    "type": "boolean",
                    "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                },
                "lastSuspendedOn": {
                    "type": "string",
                    "description": "Timestamp of last suspension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role that owns the dynamic table.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n"
                },
                "refreshMode": {
                    "type": "string",
                    "description": "(Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n"
                },
                "refreshModeReason": {
                    "type": "string",
                    "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                },
                "rows": {
                    "type": "integer",
                    "description": "Number of rows in the table.\n"
                },
                "schedulingState": {
                    "type": "string",
                    "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "required": [
                "automaticClustering",
                "bytes",
                "clusterBy",
                "createdOn",
                "dataTimestamp",
                "database",
                "fullyQualifiedName",
                "isClone",
                "isReplica",
                "lastSuspendedOn",
                "name",
                "owner",
                "query",
                "refreshModeReason",
                "rows",
                "schedulingState",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the dynamic table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the dynamic table.\n"
                },
                "initialize": {
                    "type": "string",
                    "description": "(Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n",
                    "willReplaceOnChanges": true
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to replace the dynamic table if it already exists.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Specifies the query to use to populate the dynamic table.\n",
                    "willReplaceOnChanges": true
                },
                "refreshMode": {
                    "type": "string",
                    "description": "(Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the dynamic table.\n"
                },
                "targetLag": {
                    "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                    "description": "Specifies the target lag time for the dynamic table.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse in which to create the dynamic table.\n"
                }
            },
            "requiredInputs": [
                "database",
                "query",
                "schema",
                "targetLag",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicTable resources.\n",
                "properties": {
                    "automaticClustering": {
                        "type": "boolean",
                        "description": "Whether auto-clustering is enabled on the dynamic table. Not currently supported for dynamic tables.\n"
                    },
                    "bytes": {
                        "type": "integer",
                        "description": "Number of bytes that will be scanned if the entire dynamic table is scanned in a query.\n"
                    },
                    "clusterBy": {
                        "type": "string",
                        "description": "The clustering key for the dynamic table.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the dynamic table.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Time when this dynamic table was created.\n"
                    },
                    "dataTimestamp": {
                        "type": "string",
                        "description": "Timestamp of the data in the base object(s) that is included in the dynamic table.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the dynamic table.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "initialize": {
                        "type": "string",
                        "description": "(Default: `ON_CREATE`) Initialize trigger for the dynamic table. Can only be set on creation. Available options are ON*CREATE and ON*SCHEDULE.\n",
                        "willReplaceOnChanges": true
                    },
                    "isClone": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table has been cloned, else FALSE.\n"
                    },
                    "isReplica": {
                        "type": "boolean",
                        "description": "TRUE if the dynamic table is a replica. else FALSE.\n"
                    },
                    "lastSuspendedOn": {
                        "type": "string",
                        "description": "Timestamp of last suspension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier (i.e. name) for the dynamic table; must be unique for the schema in which the dynamic table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies whether to replace the dynamic table if it already exists.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role that owns the dynamic table.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Specifies the query to use to populate the dynamic table.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshMode": {
                        "type": "string",
                        "description": "(Default: `AUTO`) INCREMENTAL to use incremental refreshes, FULL to recompute the whole table on every refresh, or AUTO to let Snowflake decide.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshModeReason": {
                        "type": "string",
                        "description": "Explanation for why FULL refresh mode was chosen. NULL if refresh mode is not FULL.\n"
                    },
                    "rows": {
                        "type": "integer",
                        "description": "Number of rows in the table.\n"
                    },
                    "schedulingState": {
                        "type": "string",
                        "description": "Displays ACTIVE for dynamic tables that are actively scheduling refreshes and SUSPENDED for suspended dynamic tables.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the dynamic table.\n"
                    },
                    "targetLag": {
                        "$ref": "#/types/snowflake:index/DynamicTableTargetLag:DynamicTableTargetLag",
                        "description": "Specifies the target lag time for the dynamic table.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse in which to create the dynamic table.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/emailNotificationIntegration:EmailNotificationIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/emailNotificationIntegration:EmailNotificationIntegration example name\n```\n\n",
            "properties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "enabled",
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that should receive notifications.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the email integration.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailNotificationIntegration resources.\n",
                "properties": {
                    "allowedRecipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that should receive notifications.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the email integration.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/execute:Execute": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/execute:Execute example '\u003crandom_uuid\u003e'\n```\n\n",
            "properties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                    "language": {
                        "csharp": {
                            "name": "ExecuteSQL"
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                },
                "queryResults": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "required": [
                "execute",
                "queryResults",
                "revert"
            ],
            "inputProperties": {
                "execute": {
                    "type": "string",
                    "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                    "language": {
                        "csharp": {
                            "name": "ExecuteSQL"
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                },
                "revert": {
                    "type": "string",
                    "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                }
            },
            "requiredInputs": [
                "execute",
                "revert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Execute resources.\n",
                "properties": {
                    "execute": {
                        "type": "string",
                        "description": "SQL statement to execute. Forces recreation of resource on change.\n",
                        "language": {
                            "csharp": {
                                "name": "ExecuteSQL"
                            }
                        }
                    },
                    "query": {
                        "type": "string",
                        "description": "Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.\n"
                    },
                    "queryResults": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.\n"
                    },
                    "revert": {
                        "type": "string",
                        "description": "SQL statement to revert the execute statement. Invoked when resource is being destroyed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalFunction:ExternalFunction": {
            "description": "\n\n## Import\n\nformat is \u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cexternal_function_name\u003e(\u003carg types, separated with ','\u003e)\n\n```sh\n$ pulumi import snowflake:index/externalFunction:ExternalFunction example 'dbName.schemaName.externalFunctionName(varchar, varchar, varchar)'\n```\n\n",
            "properties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "(Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n"
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the external function was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "(Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.\n"
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n"
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "(Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n"
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                }
            },
            "required": [
                "apiIntegration",
                "createdOn",
                "database",
                "fullyQualifiedName",
                "name",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "(Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n",
                    "willReplaceOnChanges": true
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                    "willReplaceOnChanges": true
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                    "willReplaceOnChanges": true
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "(Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.\n",
                    "willReplaceOnChanges": true
                },
                "requestTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the request translator function\n",
                    "willReplaceOnChanges": true
                },
                "responseTranslator": {
                    "type": "string",
                    "description": "This specifies the name of the response translator function.\n",
                    "willReplaceOnChanges": true
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n",
                    "willReplaceOnChanges": true
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "(Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n",
                    "willReplaceOnChanges": true
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiIntegration",
                "database",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalFunction resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "string",
                        "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                        },
                        "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) A description of the external function.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "(Default: `AUTO`) If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n",
                        "willReplaceOnChanges": true
                    },
                    "contextHeaders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Binds Snowflake context function results to HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the external function was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                        },
                        "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBatchRows": {
                        "type": "integer",
                        "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "(Default: `CALLED ON NULL INPUT`) Specifies the behavior of the external function when called with null inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "requestTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the request translator function\n",
                        "willReplaceOnChanges": true
                    },
                    "responseTranslator": {
                        "type": "string",
                        "description": "This specifies the name of the response translator function.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n",
                        "willReplaceOnChanges": true
                    },
                    "returnNullAllowed": {
                        "type": "boolean",
                        "description": "(Default: `true`) Indicates whether the function can return NULL values (true) or must return only NON-NULL values (false).\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the data type returned by the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external function.\n",
                        "willReplaceOnChanges": true
                    },
                    "urlOfProxyAndResource": {
                        "type": "string",
                        "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalOauthIntegration:ExternalOauthIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/externalOauthIntegration:ExternalOauthIntegration example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType",
                "fullyQualifiedName",
                "name",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                },
                "externalOauthAllowedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.\n"
                },
                "externalOauthAnyRoleMode": {
                    "type": "string",
                    "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                },
                "externalOauthAudienceLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                },
                "externalOauthBlockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "externalOauthIssuer": {
                    "type": "string",
                    "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                },
                "externalOauthJwsKeysUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey": {
                    "type": "string",
                    "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthRsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthScopeDelimiter": {
                    "type": "string",
                    "description": "Specifies the scope delimiter in the authorization token.\n"
                },
                "externalOauthScopeMappingAttribute": {
                    "type": "string",
                    "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthSnowflakeUserMappingAttribute": {
                    "type": "string",
                    "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                },
                "externalOauthTokenUserMappingClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                },
                "externalOauthType": {
                    "type": "string",
                    "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "externalOauthIssuer",
                "externalOauthSnowflakeUserMappingAttribute",
                "externalOauthTokenUserMappingClaims",
                "externalOauthType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalOauthIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationDescribeOutput:ExternalOauthIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether to initiate operation of the integration or suspend it.\n"
                    },
                    "externalOauthAllowedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that the client can set as the primary role. For more information about this resource, see docs.\n"
                    },
                    "externalOauthAnyRoleMode": {
                        "type": "string",
                        "description": "Specifies whether the OAuth client or user can use a role that is not defined in the OAuth access token. Valid values are (case-insensitive): `DISABLE` | `ENABLE` | `ENABLE_FOR_PRIVILEGE`.\n"
                    },
                    "externalOauthAudienceLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies additional values that can be used for the access token's audience validation on top of using the Customer's Snowflake Account URL\n"
                    },
                    "externalOauthBlockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of roles that a client cannot set as the primary role. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the EXTERNAL*OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                    },
                    "externalOauthIssuer": {
                        "type": "string",
                        "description": "Specifies the URL to define the OAuth 2.0 authorization server.\n"
                    },
                    "externalOauthJwsKeysUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the endpoint or a list of endpoints from which to download public keys or certificates to validate an External OAuth access token. The maximum number of URLs that can be specified in the list is 3. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey": {
                        "type": "string",
                        "description": "Specifies a Base64-encoded RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthRsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies a second RSA public key, without the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- headers. Used for key rotation. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthScopeDelimiter": {
                        "type": "string",
                        "description": "Specifies the scope delimiter in the authorization token.\n"
                    },
                    "externalOauthScopeMappingAttribute": {
                        "type": "string",
                        "description": "Specifies the access token claim to map the access token to an account role. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthSnowflakeUserMappingAttribute": {
                        "type": "string",
                        "description": "Indicates which Snowflake user record attribute should be used to map the access token to a Snowflake user record. Valid values are (case-insensitive): `LOGIN_NAME` | `EMAIL_ADDRESS`.\n"
                    },
                    "externalOauthTokenUserMappingClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the access token claim or claims that can be used to map the access token to a Snowflake user record. If removed from the config, the resource is recreated.\n"
                    },
                    "externalOauthType": {
                        "type": "string",
                        "description": "Specifies the OAuth 2.0 authorization server to be Okta, Microsoft Azure AD, Ping Identity PingFederate, or a Custom OAuth 2.0 authorization server. Valid values are (case-insensitive): `OKTA` | `AZURE` | `PING_FEDERATE` | `CUSTOM`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the External Oath integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationRelatedParameter:ExternalOauthIntegrationRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalOauthIntegrationShowOutput:ExternalOauthIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalTable:ExternalTable": {
            "description": "\n\n## Import\n\nformat is database name | schema name | external table name\n\n```sh\n$ pulumi import snowflake:index/externalTable:ExternalTable example 'dbName|schemaName|externalTableName'\n```\n\n",
            "properties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n"
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or populate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the external table.\n"
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n"
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies weather to refresh when an external table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n"
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fileFormat",
                "fullyQualifiedName",
                "location",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or populate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n",
                    "willReplaceOnChanges": true
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n",
                    "willReplaceOnChanges": true
                },
                "pattern": {
                    "type": "string",
                    "description": "Specifies the file names and/or paths on the external stage to match.\n",
                    "willReplaceOnChanges": true
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies weather to refresh when an external table is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n",
                    "willReplaceOnChanges": true
                },
                "tableFormat": {
                    "type": "string",
                    "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "fileFormat",
                "location",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalTable resources.\n",
                "properties": {
                    "autoRefresh": {
                        "type": "boolean",
                        "description": "(Default: `true`) Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopic": {
                        "type": "string",
                        "description": "Specifies the aws sns topic for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                        },
                        "description": "Definitions of a column to create in the external table. Minimum one required.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "copyGrants": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Specifies a location for the external table, using its FQDN. You can hardcode it (`\"@MYDB.MYSCHEMA.MYSTAGE\"`), or populate dynamically (`\"@${snowflake_stage.mystage.fully_qualified_name}\"`)\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the external table.\n"
                    },
                    "partitionBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies any partition columns to evaluate for the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Specifies the file names and/or paths on the external stage to match.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshOnCreate": {
                        "type": "boolean",
                        "description": "(Default: `true`) Specifies weather to refresh when an external table is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableFormat": {
                        "type": "string",
                        "description": "Identifies the external table table type. For now, only \"delta\" for Delta Lake table format is supported.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableTag:ExternalTableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalVolume:ExternalVolume": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nResource used to manage external volume objects. For more information, check [external volume documentation](https://docs.snowflake.com/en/sql-reference/commands-data-loading#external-volume).\n\n\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "properties": {
                "allowWrites": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external volume.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput"
                    },
                    "description": "Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.\n"
                },
                "storageLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                    },
                    "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "showOutputs",
                "storageLocations"
            ],
            "inputProperties": {
                "allowWrites": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external volume.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "storageLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                    },
                    "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.\n"
                }
            },
            "requiredInputs": [
                "storageLocations"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalVolume resources.\n",
                "properties": {
                    "allowWrites": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external volume.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeDescribeOutput:ExternalVolumeDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeShowOutput:ExternalVolumeShowOutput"
                        },
                        "description": "Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.\n"
                    },
                    "storageLocations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalVolumeStorageLocation:ExternalVolumeStorageLocation"
                        },
                        "description": "List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/failoverGroup:FailoverGroup": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/failoverGroup:FailoverGroup example 'fg1'\n```\n\n",
            "properties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form `\u003corg_name\u003e.\u003ctarget_account_name\u003e`. This value is case-sensitive.\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "(Default: `false`) Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "allowedAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form `\u003corg_name\u003e.\u003ctarget_account_name\u003e`. This value is case-sensitive.\n"
                },
                "allowedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                },
                "allowedIntegrationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                },
                "allowedShares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                },
                "fromReplica": {
                    "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                    "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                    "willReplaceOnChanges": true
                },
                "ignoreEditionCheck": {
                    "type": "boolean",
                    "description": "(Default: `false`) Allows replicating objects to accounts on lower editions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                },
                "replicationSchedule": {
                    "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                    "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailoverGroup resources.\n",
                "properties": {
                    "allowedAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the target account or list of target accounts to which replication and failover of specified objects from the source account is enabled. Secondary failover groups in the target accounts in this list can be promoted to serve as the primary failover group in case of failover. Expected in the form `\u003corg_name\u003e.\u003ctarget_account_name\u003e`. This value is case-sensitive.\n"
                    },
                    "allowedDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the database or list of databases for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include DATABASES to set this parameter.\n"
                    },
                    "allowedIntegrationTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of integrations for which you are enabling replication and failover from the source account to the target account. This property requires that the OBJECT_TYPES list include INTEGRATIONS to set this parameter. The following integration types are supported: \"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\", \"STORAGE INTEGRATIONS\", \"EXTERNAL ACCESS INTEGRATIONS\", \"NOTIFICATION INTEGRATIONS\"\n"
                    },
                    "allowedShares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the share or list of shares for which you are enabling replication and failover from the source account to the target account. The OBJECT_TYPES list must include SHARES to set this parameter.\n"
                    },
                    "fromReplica": {
                        "$ref": "#/types/snowflake:index/FailoverGroupFromReplica:FailoverGroupFromReplica",
                        "description": "Specifies the name of the replica to use as the source for the failover group.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreEditionCheck": {
                        "type": "boolean",
                        "description": "(Default: `false`) Allows replicating objects to accounts on lower editions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the failover group. The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Type(s) of objects for which you are enabling replication and failover from the source account to the target account. The following object types are supported: \"ACCOUNT PARAMETERS\", \"DATABASES\", \"INTEGRATIONS\", \"NETWORK POLICIES\", \"RESOURCE MONITORS\", \"ROLES\", \"SHARES\", \"USERS\", \"WAREHOUSES\"\n"
                    },
                    "replicationSchedule": {
                        "$ref": "#/types/snowflake:index/FailoverGroupReplicationSchedule:FailoverGroupReplicationSchedule",
                        "description": "Specifies the schedule for refreshing secondary failover groups.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/fileFormat:FileFormat": {
            "description": "\n\n## Import\n\nformat is database name | schema name | file format name\n\n```sh\n$ pulumi import snowflake:index/fileFormat:FileFormat example 'dbName|schemaName|fileFormatName'\n```\n\n",
            "properties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n"
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n"
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "required": [
                "binaryFormat",
                "compression",
                "database",
                "dateFormat",
                "encoding",
                "escape",
                "escapeUnenclosedField",
                "fieldDelimiter",
                "fieldOptionallyEnclosedBy",
                "formatType",
                "fullyQualifiedName",
                "name",
                "nullIfs",
                "recordDelimiter",
                "schema",
                "timeFormat",
                "timestampFormat"
            ],
            "inputProperties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                    "willReplaceOnChanges": true
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "parseHeader": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n",
                    "willReplaceOnChanges": true
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                }
            },
            "requiredInputs": [
                "database",
                "formatType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFormat resources.\n",
                "properties": {
                    "allowDuplicate": {
                        "type": "boolean",
                        "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                    },
                    "binaryAsText": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                    },
                    "binaryFormat": {
                        "type": "string",
                        "description": "Defines the encoding format for binary input or output.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the file format.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "Specifies the current compression algorithm for the data file.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "dateFormat": {
                        "type": "string",
                        "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                    },
                    "disableAutoConvert": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                    },
                    "disableSnowflakeData": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                    },
                    "emptyFieldAsNull": {
                        "type": "boolean",
                        "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                    },
                    "enableOctal": {
                        "type": "boolean",
                        "description": "Boolean that enables parsing of octal numbers.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                    },
                    "errorOnColumnCountMismatch": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                    },
                    "escape": {
                        "type": "string",
                        "description": "Single character string used as the escape character for field values.\n"
                    },
                    "escapeUnenclosedField": {
                        "type": "string",
                        "description": "Single character string used as the escape character for unenclosed field values only.\n"
                    },
                    "fieldDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "fieldOptionallyEnclosedBy": {
                        "type": "string",
                        "description": "Character used to enclose strings.\n"
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "Specifies the extension for files unloaded to a stage.\n"
                    },
                    "formatType": {
                        "type": "string",
                        "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "ignoreUtf8Errors": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                    },
                    "nullIfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String used to convert to and from SQL NULL.\n"
                    },
                    "parseHeader": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to use the first row headers in the data files to determine column names.\n"
                    },
                    "preserveSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                    },
                    "recordDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the file format.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipBlankLines": {
                        "type": "boolean",
                        "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                    },
                    "skipByteOrderMark": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                    },
                    "skipHeader": {
                        "type": "integer",
                        "description": "Number of lines at the start of the file to skip.\n"
                    },
                    "stripNullValues": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                    },
                    "stripOuterArray": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                    },
                    "stripOuterElement": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                    },
                    "timestampFormat": {
                        "type": "string",
                        "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                    },
                    "trimSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to remove white space from fields.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionJava:FunctionJava": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/functionJava:FunctionJava example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Java source code. For more information, see [Introduction to Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the file is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java UDFs can also read non-JAR files. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaParameter:FunctionJavaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is not set, Java JDK 11 is used.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Java source code. For more information, see [Introduction to Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the file is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java UDFs can also read non-JAR files. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is not set, Java JDK 11 is used.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionJava resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaArgument:FunctionJavaArgument"
                        },
                        "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Java source code. For more information, see [Introduction to Java UDFs](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaImport:FunctionJavaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. A file can be a JAR file or another type of file. If the file is a JAR file, it can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). Java UDFs can also read non-JAR files. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#java).\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaParameter:FunctionJavaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Java JDK runtime version to use. The supported versions of Java are 11.x and 17.x. If RUNTIME_VERSION is not set, Java JDK 11 is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaSecret:FunctionJavaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavaShowOutput:FunctionJavaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/FunctionJavaTargetPath:FunctionJavaTargetPath",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionJavascript:FunctionJavascript": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/functionJavascript:FunctionJavascript example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be JavaScript source code. For more information, see [Introduction to JavaScript UDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionDefinition",
                "functionLanguage",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be JavaScript source code. For more information, see [Introduction to JavaScript UDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "functionDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionJavascript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptArgument:FunctionJavascriptArgument"
                        },
                        "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be JavaScript source code. For more information, see [Introduction to JavaScript UDFs](https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptParameter:FunctionJavascriptParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionJavascriptShowOutput:FunctionJavascriptShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionPython:FunctionPython": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/functionPython:FunctionPython example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n"
                },
                "isAggregate": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonParameter:FunctionPythonParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n",
                    "willReplaceOnChanges": true
                },
                "isAggregate": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionPython resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonArgument:FunctionPythonArgument"
                        },
                        "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Python source code. For more information, see [Introduction to Python UDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler function or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a function name. If the handler code is in-line with the CREATE FUNCTION statement, you can use the function name alone. When the handler code is referenced at a stage, this value should be qualified with the module name, as in the following form: `my_module.my_function`. If the handler is for a tabular UDF, the HANDLER value should be the name of a handler class.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonImport:FunctionPythonImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. A file can be a `.py` file or another type of file. Python UDFs can also read non-Python files, such as text files. For an example, see [Reading a file](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-examples.html#label-udf-python-read-files). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#python).\n",
                        "willReplaceOnChanges": true
                    },
                    "isAggregate": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the function is an aggregate function. For more information about user-defined aggregate functions, see [Python user-defined aggregate functions](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-aggregate-functions). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of packages required as dependencies. The value should be of the form `package_name==version_number`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonParameter:FunctionPythonParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Python version to use. The supported versions of Python are: 3.9, 3.10, and 3.11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonSecret:FunctionPythonSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionPythonShowOutput:FunctionPythonShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionScala:FunctionScala": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/functionScala:FunctionScala example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaParameter:FunctionScalaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionLanguage",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "handler": {
                    "type": "string",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                    "willReplaceOnChanges": true
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                    "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionScala resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaArgument:FunctionScalaArgument"
                        },
                        "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this function’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be Scala source code. For more information, see [Introduction to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaImport:FunctionScalaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports). Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name and version number of Snowflake system packages required as dependencies. The value should be of the form `package_name:version_number`, where `package_name` is `snowflake_domain:package`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaParameter:FunctionScalaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaSecret:FunctionScalaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionScalaShowOutput:FunctionScalaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/FunctionScalaTargetPath:FunctionScalaTargetPath",
                        "description": "The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER value should be a method name, as in the following form: `MyClass.myMethod`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionSql:FunctionSql": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/functionSql:FunctionSql example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "functionLanguage": {
                    "type": "string",
                    "description": "Specifies language for the user. Used to detect external changes.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlParameter:FunctionSqlParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput"
                    },
                    "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "functionDefinition",
                "functionLanguage",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                    },
                    "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "functionDefinition": {
                    "type": "string",
                    "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnResultsBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "functionDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionSql resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlArgument:FunctionSqlArgument"
                        },
                        "description": "List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined function`) Specifies a comment for the function.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "functionDefinition": {
                        "type": "string",
                        "description": "Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `function_definition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionLanguage": {
                        "type": "string",
                        "description": "Specifies language for the user. Used to detect external changes.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlParameter:FunctionSqlParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.\n"
                    },
                    "returnResultsBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the results returned by the UDF, which determines the UDF type. Use `\u003cresult_data_type\u003e` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionSqlShowOutput:FunctionSqlShowOutput"
                        },
                        "description": "Outputs the result of `SHOW FUNCTION` for the given function.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/gitRepository:GitRepository": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/gitRepository:GitRepository example '\"\u003cdb_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cgit_repository_name\u003e\"'\n```\n\n",
            "properties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the git repository.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/GitRepositoryDescribeOutput:GitRepositoryDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gitCredentials": {
                    "type": "string",
                    "description": "Specifies the Snowflake secret fully qualified name (e.g `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003csecret_name\u003e\\\"\"`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/GitRepositoryShowOutput:GitRepositoryShowOutput"
                    },
                    "description": "Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.\n"
                }
            },
            "required": [
                "apiIntegration",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "origin",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the git repository.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "gitCredentials": {
                    "type": "string",
                    "description": "Specifies the Snowflake secret fully qualified name (e.g `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003csecret_name\u003e\\\"\"`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "origin": {
                    "type": "string",
                    "description": "Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiIntegration",
                "database",
                "origin",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitRepository resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "string",
                        "description": "Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the git repository.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/GitRepositoryDescribeOutput:GitRepositoryDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gitCredentials": {
                        "type": "string",
                        "description": "Specifies the Snowflake secret fully qualified name (e.g `\"\\\"\u003cdb_name\u003e\\\".\\\"\u003cschema_name\u003e\\\".\\\"\u003csecret_name\u003e\\\"\"`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/GitRepositoryShowOutput:GitRepositoryShowOutput"
                        },
                        "description": "Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantAccountRole:GrantAccountRole": {
            "description": "\n\n## Import\n\nformat is role_name (string) | grantee_object_type (ROLE|USER) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantAccountRole:GrantAccountRole example '\"test_role\"|ROLE|\"test_parent_role\"'\n```\n\n",
            "properties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this resource, see docs.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "roleName"
            ],
            "inputProperties": {
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantAccountRole resources.\n",
                "properties": {
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The fully qualified name of the role which will be granted to the user or parent role. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The fully qualified name of the user on which specified role will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantApplicationRole:GrantApplicationRole": {
            "description": "\n\n## Import\n\nformat is application_role_name (string) | object_type (ACCOUNT_ROLE|APPLICATION) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantApplicationRole:GrantApplicationRole example '\"my_application\".\"app_role_1\"|ACCOUNT_ROLE|\"my_role\"'\n```\n\n",
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n"
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n"
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "applicationRoleName"
            ],
            "inputProperties": {
                "applicationName": {
                    "type": "string",
                    "description": "The fully qualified name of the application on which application role will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "applicationRoleName": {
                    "type": "string",
                    "description": "Specifies the identifier for the application role to grant.\n",
                    "willReplaceOnChanges": true
                },
                "parentAccountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantApplicationRole resources.\n",
                "properties": {
                    "applicationName": {
                        "type": "string",
                        "description": "The fully qualified name of the application on which application role will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationRoleName": {
                        "type": "string",
                        "description": "Specifies the identifier for the application role to grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentAccountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role on which application role will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantDatabaseRole:GrantDatabaseRole": {
            "description": "\n\n## Import\n\nformat is database_role_name (string) | object_type (ROLE|DATABASE ROLE|SHARE) | grantee_name (string)\n\n```sh\n$ pulumi import snowflake:index/grantDatabaseRole:GrantDatabaseRole example '\"ABC\".\"test_db_role\"|ROLE|\"test_parent_role\"'\n```\n\n",
            "properties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about this resource, see docs.\n"
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n"
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "parentDatabaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "parentRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "shareName": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantDatabaseRole resources.\n",
                "properties": {
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role which will be granted to share or parent role. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentDatabaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent database role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the parent account role which will create a parent-child relationship between the roles. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "shareName": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantOwnership:GrantOwnership": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### OnObject on Schema ToAccountRole\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"|COPY|OnObject|SCHEMA|\"database_name\".\"schema_name\"'`\n```\n\n#### OnObject on Schema ToDatabaseRole\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToDatabaseRole|\"database_name\".\"database_role_name\"|COPY|OnObject|SCHEMA|\"database_name\".\"schema_name\"'`\n```\n\n#### OnObject on Table\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"|COPY|OnObject|TABLE|\"database_name\".\"schema_name\".\"table_name\"'`\n```\n\n#### OnAll InDatabase\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"|REVOKE|OnAll|TABLES|InDatabase|\"database_name\"'`\n```\n\n#### OnAll InSchema\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"||OnAll|TABLES|InSchema|\"database_name\".\"schema_name\"'`\n```\n\n#### OnFuture InDatabase\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"||OnFuture|TABLES|InDatabase|\"database_name\"'`\n```\n\n#### OnFuture InSchema\n\n```sh\n$ pulumi import snowflake:index/grantOwnership:GrantOwnership example 'ToAccountRole|\"account_role\"|COPY|OnFuture|TABLES|InSchema|\"database_name\".\"schema_name\"'`\n```\n\n",
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n"
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n"
                }
            },
            "required": [
                "on"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "on": {
                    "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                    "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                    "willReplaceOnChanges": true
                },
                "outboundPrivileges": {
                    "type": "string",
                    "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "on"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantOwnership resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "on": {
                        "$ref": "#/types/snowflake:index/GrantOwnershipOn:GrantOwnershipOn",
                        "description": "Configures which object(s) should transfer their ownership to the specified role.\n",
                        "willReplaceOnChanges": true
                    },
                    "outboundPrivileges": {
                        "type": "string",
                        "description": "Specifies whether to remove or transfer all existing outbound privileges on the object when ownership is transferred to a new role. Available options are: REVOKE for removing existing privileges and COPY to transfer them with ownership. For more information head over to [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/grant-ownership#optional-parameters).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### Grant all privileges OnAccountObject (Database)\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole example '\"test_db_role\"|false|false|ALL|OnAccountObject|DATABASE|\"test_db\"'`\n```\n\n#### Grant list of privileges OnAllSchemasInDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole example '\"test_db_role\"|false|false|CREATE TAG,CREATE TABLE|OnSchema|OnAllSchemasInDatabase|\"test_db\"'`\n```\n\n#### Grant list of privileges on table\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole example '\"test_db_role\"|false|false|SELECT,DELETE,INSERT|OnSchemaObject|OnObject|TABLE|\"test_db\".\"test_schema\".\"test_table\"'`\n```\n\n#### Grant list of privileges OnAll tables in schema\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole example '\"test_db_role\"|false|false|SELECT,DELETE,INSERT|OnSchemaObject|OnAll|TABLES|InSchema|\"test_db\".\"test_schema\"'`\n```\n\n",
            "properties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "(Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) If true, the privileges will be granted on the account.\n"
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether the grantee can grant the privileges to other users.\n"
                }
            },
            "required": [
                "accountRoleName"
            ],
            "inputProperties": {
                "accountRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "allPrivileges": {
                    "type": "boolean",
                    "description": "(Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) If true, the privileges will be granted on the account.\n",
                    "willReplaceOnChanges": true
                },
                "onAccountObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                    "description": "Specifies the account object on which privileges will be granted\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether the grantee can grant the privileges to other users.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToAccountRole resources.\n",
                "properties": {
                    "accountRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the account role to which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "(Default: `false`) Grant all privileges on the account role. When all privileges cannot be granted, the provider returns a warning, which is aligned with the Snowsight behavior.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "(Default: `false`) If true, the privileges will be granted on the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccountObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnAccountObject:GrantPrivilegesToAccountRoleOnAccountObject",
                        "description": "Specifies the account object on which privileges will be granted\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchema:GrantPrivilegesToAccountRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToAccountRoleOnSchemaObject:GrantPrivilegesToAccountRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the account role. This field is case-sensitive; use only upper-case privileges.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies whether the grantee can grant the privileges to other users.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole": {
            "description": "\n\n## Import\n\n### Import examples\n\n#### Grant all privileges OnDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole example '\"test_db\".\"test_db_role\"|false|false|ALL|OnDatabase|\"test_db\"'`\n```\n\n#### Grant list of privileges OnAllSchemasInDatabase\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole example '\"test_db\".\"test_db_role\"|false|false|CREATE TAG,CREATE TABLE|OnSchema|OnAllSchemasInDatabase|\"test_db\"'`\n```\n\n#### Grant list of privileges on table\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole example '\"test_db\".\"test_db_role\"|false|false|SELECT,DELETE,INSERT|OnSchemaObject|OnObject|TABLE|\"test_db\".\"test_schema\".\"test_table\"'`\n```\n\n#### Grant list of privileges OnAll tables in schema\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole example '\"test_db\".\"test_db_role\"|false|false|SELECT,DELETE,INSERT|OnSchemaObject|OnAll|TABLES|InSchema|\"test_db\".\"test_schema\"'`\n```\n\n",
            "properties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "(Default: `false`) Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n"
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "(Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseRoleName"
            ],
            "inputProperties": {
                "allPrivileges": {
                    "type": "boolean",
                    "description": "(Default: `false`) Grant all privileges on the database role.\n"
                },
                "alwaysApply": {
                    "type": "boolean"
                },
                "alwaysApplyTrigger": {
                    "type": "string",
                    "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                },
                "databaseRoleName": {
                    "type": "string",
                    "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                    "description": "Specifies the schema on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchemaObject": {
                    "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                    "description": "Specifies the schema object on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the database role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "(Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseRoleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToDatabaseRole resources.\n",
                "properties": {
                    "allPrivileges": {
                        "type": "boolean",
                        "description": "(Default: `false`) Grant all privileges on the database role.\n"
                    },
                    "alwaysApply": {
                        "type": "boolean"
                    },
                    "alwaysApplyTrigger": {
                        "type": "string",
                        "description": "(Default: ``) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.\n"
                    },
                    "databaseRoleName": {
                        "type": "string",
                        "description": "The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchema:GrantPrivilegesToDatabaseRoleOnSchema",
                        "description": "Specifies the schema on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchemaObject": {
                        "$ref": "#/types/snowflake:index/GrantPrivilegesToDatabaseRoleOnSchemaObject:GrantPrivilegesToDatabaseRoleOnSchemaObject",
                        "description": "Specifies the schema object on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the database role.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "(Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare": {
            "description": "\n\n## Import\n\n### OnView\n\n```sh\n$ pulumi import snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare example '\u003cshare_name\u003e|\u003cprivileges\u003e|OnView|\u003cdatabase_name\u003e.\u003cschema_name\u003e.\u003cview_name\u003e'`\n```\n\n",
            "properties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n"
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n"
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see docs.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "privileges",
                "toShare"
            ],
            "inputProperties": {
                "onAllTablesInSchema": {
                    "type": "string",
                    "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                    "willReplaceOnChanges": true
                },
                "onDatabase": {
                    "type": "string",
                    "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onFunction": {
                    "type": "string",
                    "description": "The fully qualified name of the function on which privileges will be granted.\n",
                    "willReplaceOnChanges": true
                },
                "onSchema": {
                    "type": "string",
                    "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onTable": {
                    "type": "string",
                    "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onTag": {
                    "type": "string",
                    "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "onView": {
                    "type": "string",
                    "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                },
                "toShare": {
                    "type": "string",
                    "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privileges",
                "toShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantPrivilegesToShare resources.\n",
                "properties": {
                    "onAllTablesInSchema": {
                        "type": "string",
                        "description": "The fully qualified identifier for the schema for which the specified privilege will be granted for all tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "onDatabase": {
                        "type": "string",
                        "description": "The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onFunction": {
                        "type": "string",
                        "description": "The fully qualified name of the function on which privileges will be granted.\n",
                        "willReplaceOnChanges": true
                    },
                    "onSchema": {
                        "type": "string",
                        "description": "The fully qualified name of the schema on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTable": {
                        "type": "string",
                        "description": "The fully qualified name of the table on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onTag": {
                        "type": "string",
                        "description": "The fully qualified name of the tag on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "onView": {
                        "type": "string",
                        "description": "The fully qualified name of the view on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The privileges to grant on the share. See available list of privileges: https://docs.snowflake.com/en/sql-reference/sql/grant-privilege-share#syntax\n"
                    },
                    "toShare": {
                        "type": "string",
                        "description": "The fully qualified name of the share on which privileges will be granted. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/imageRepository:ImageRepository": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/imageRepository:ImageRepository example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cimage_repository_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the object.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ImageRepositoryShowOutput:ImageRepositoryShowOutput"
                    },
                    "description": "Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the object.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImageRepository resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the object.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ImageRepositoryShowOutput:ImageRepositoryShowOutput"
                        },
                        "description": "Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/jobService:JobService": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/jobService:JobService example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cjob_service_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the service.\n"
                },
                "computePool": {
                    "type": "string",
                    "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/JobServiceDescribeOutput:JobServiceDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SERVICE` for the given service.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n"
                },
                "fromSpecification": {
                    "$ref": "#/types/snowflake:index/JobServiceFromSpecification:JobServiceFromSpecification",
                    "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "fromSpecificationTemplate": {
                    "$ref": "#/types/snowflake:index/JobServiceFromSpecificationTemplate:JobServiceFromSpecificationTemplate",
                    "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/JobServiceShowOutput:JobServiceShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SERVICES` for the given service.\n"
                }
            },
            "required": [
                "computePool",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "serviceType",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the service.\n",
                    "willReplaceOnChanges": true
                },
                "computePool": {
                    "type": "string",
                    "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n",
                    "willReplaceOnChanges": true
                },
                "fromSpecification": {
                    "$ref": "#/types/snowflake:index/JobServiceFromSpecification:JobServiceFromSpecification",
                    "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n",
                    "willReplaceOnChanges": true
                },
                "fromSpecificationTemplate": {
                    "$ref": "#/types/snowflake:index/JobServiceFromSpecificationTemplate:JobServiceFromSpecificationTemplate",
                    "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "computePool",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JobService resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the service.\n",
                        "willReplaceOnChanges": true
                    },
                    "computePool": {
                        "type": "string",
                        "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/JobServiceDescribeOutput:JobServiceDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SERVICE` for the given service.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n",
                        "willReplaceOnChanges": true
                    },
                    "fromSpecification": {
                        "$ref": "#/types/snowflake:index/JobServiceFromSpecification:JobServiceFromSpecification",
                        "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "fromSpecificationTemplate": {
                        "$ref": "#/types/snowflake:index/JobServiceFromSpecificationTemplate:JobServiceFromSpecificationTemplate",
                        "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryWarehouse": {
                        "type": "string",
                        "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/JobServiceShowOutput:JobServiceShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SERVICES` for the given service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/legacyServiceUser:LegacyServiceUser": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/legacyServiceUser:LegacyServiceUser example '\"\u003cuser_name\u003e\"'\n```\n\nNote: pulumi preview+apply may be needed after successful import to fill out all the missing fields (like `password`) in state.\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LegacyServiceUser resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "mustChangePassword": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/LegacyServiceUserParameter:LegacyServiceUserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/LegacyServiceUserShowOutput:LegacyServiceUserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/listing:Listing": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/listing:Listing example '\"\u003clisting_name\u003e\"'\n```\n\n",
            "properties": {
                "applicationPackage": {
                    "type": "string",
                    "description": "Specifies the application package attached to the listing.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the listing.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "manifest": {
                    "$ref": "#/types/snowflake:index/ListingManifest:ListingManifest"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.\n"
                },
                "publish": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.\n"
                },
                "share": {
                    "type": "string",
                    "description": "Specifies the identifier for the share to attach to the listing.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ListingShowOutput:ListingShowOutput"
                    },
                    "description": "Outputs the result of `SHOW LISTINGS` for the given listing.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "manifest",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "applicationPackage": {
                    "type": "string",
                    "description": "Specifies the application package attached to the listing.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the listing.\n"
                },
                "manifest": {
                    "$ref": "#/types/snowflake:index/ListingManifest:ListingManifest"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.\n"
                },
                "publish": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.\n"
                },
                "share": {
                    "type": "string",
                    "description": "Specifies the identifier for the share to attach to the listing.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "manifest"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Listing resources.\n",
                "properties": {
                    "applicationPackage": {
                        "type": "string",
                        "description": "Specifies the application package attached to the listing.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the listing.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "manifest": {
                        "$ref": "#/types/snowflake:index/ListingManifest:ListingManifest"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the listing identifier (name). It must be unique within the organization, regardless of which Snowflake region the account is located in. Must start with an alphabetic character and cannot contain spaces or special characters except for underscores.\n"
                    },
                    "publish": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Determines if the listing should be published.\n"
                    },
                    "share": {
                        "type": "string",
                        "description": "Specifies the identifier for the share to attach to the listing.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ListingShowOutput:ListingShowOutput"
                        },
                        "description": "Outputs the result of `SHOW LISTINGS` for the given listing.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/managedAccount:ManagedAccount": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/managedAccount:ManagedAccount example name\n```\n\n",
            "properties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "Cloud in which the managed account is located.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the managed account was created.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "locator": {
                    "type": "string",
                    "description": "Display name of the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Snowflake Region in which the managed account is located.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `READER`) Specifies the type of managed account.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL for accessing the managed account, particularly through the web interface.\n"
                }
            },
            "required": [
                "adminName",
                "adminPassword",
                "cloud",
                "createdOn",
                "fullyQualifiedName",
                "locator",
                "name",
                "region",
                "url"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n",
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `READER`) Specifies the type of managed account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminName",
                "adminPassword"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedAccount resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n",
                        "willReplaceOnChanges": true
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Password for the initial user in the managed account. Check [Snowflake-provided password policy](https://docs.snowflake.com/en/user-guide/admin-user-management#snowflake-provided-password-policy).\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "cloud": {
                        "type": "string",
                        "description": "Cloud in which the managed account is located.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the managed account was created.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "locator": {
                        "type": "string",
                        "description": "Display name of the managed account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the managed account; must be unique for your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Snowflake Region in which the managed account is located.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Default: `READER`) Specifies the type of managed account.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for accessing the managed account, particularly through the web interface.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/maskingPolicy:MaskingPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/maskingPolicy:MaskingPolicy example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cmasking_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW MASKING POLICIES` for the given masking policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "returnDataType",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                    },
                    "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "exemptOtherPolicies": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "returnDataType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyArgument:MaskingPolicyArgument"
                        },
                        "description": "List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the masking policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyDescribeOutput:MaskingPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.\n"
                    },
                    "exemptOtherPolicies": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "returnDataType": {
                        "type": "string",
                        "description": "The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaskingPolicyShowOutput:MaskingPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW MASKING POLICIES` for the given masking policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/materializedView:MaterializedView": {
            "description": "\n\n## Import\n\nformat is database name | schema name | view name\n\n```sh\n$ pulumi import snowflake:index/materializedView:MaterializedView example 'dbName|schemaName|viewName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "statement",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies that the view is secure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "(Default: `false`) Overwrites the View if it exists.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/MaterializedViewTag:MaterializedViewTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicy:NetworkPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkPolicy:NetworkPolicy example '\"\u003cnetwork_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                },
                "allowedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                },
                "blockedNetworkRuleLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicy resources.\n",
                "properties": {
                    "allowedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.\n"
                    },
                    "allowedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.\n"
                    },
                    "blockedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.\n"
                    },
                    "blockedNetworkRuleLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network policy.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyDescribeOutput:NetworkPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/NetworkPolicyShowOutput:NetworkPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment example attachment_policyname\n```\n\n",
            "properties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "required": [
                "networkPolicyName"
            ],
            "inputProperties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                    "willReplaceOnChanges": true
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "requiredInputs": [
                "networkPolicyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicyAttachment resources.\n",
                "properties": {
                    "networkPolicyName": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "setForAccount": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies whether the network policy should be applied globally to your Snowflake account\\n\\n\\n\\n**Note:** The Snowflake user running `pulumi up` must be on an IP address allowed by the network policy to set that policy globally on the Snowflake account.\\n\\n\\n\\nAdditionally, a Snowflake account can only have one network policy set globally at any given time. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If multiple network policy resources have `set_for_account: true`, the final policy set on the account will be non-deterministic.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which users the network policy should be attached to\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkRule:NetworkRule": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/networkRule:NetworkRule example 'databaseName|schemaName|networkRuleName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "mode",
                "name",
                "schema",
                "type",
                "valueLists"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network rule.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the network rule.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                    "willReplaceOnChanges": true
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mode",
                "schema",
                "type",
                "valueLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRule resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network rule.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the network rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n",
                        "willReplaceOnChanges": true
                    },
                    "valueLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/notificationIntegration:NotificationIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/notificationIntegration:NotificationIntegration example name\n```\n\n",
            "properties": {
                "awsSnsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                },
                "awsSnsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the notification integration was created.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`)\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "gcpPubsubServiceAccount": {
                    "type": "string",
                    "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n"
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n"
                },
                "name": {
                    "type": "string"
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `QUEUE`) A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "required": [
                "awsSnsExternalId",
                "awsSnsIamUserArn",
                "awsSqsExternalId",
                "awsSqsIamUserArn",
                "createdOn",
                "fullyQualifiedName",
                "gcpPubsubServiceAccount",
                "name",
                "notificationProvider"
            ],
            "inputProperties": {
                "awsSnsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                },
                "awsSqsArn": {
                    "type": "string",
                    "description": "AWS SQS queue ARN for notification integration to connect to\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "awsSqsRoleArn": {
                    "type": "string",
                    "description": "AWS IAM role ARN for notification integration to assume\n",
                    "deprecationMessage": "No longer supported notification method"
                },
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n",
                    "willReplaceOnChanges": true
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "A comment for the integration\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`)\n"
                },
                "gcpPubsubSubscriptionName": {
                    "type": "string",
                    "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                    "willReplaceOnChanges": true
                },
                "gcpPubsubTopicName": {
                    "type": "string",
                    "description": "The topic id that Snowflake will use to push notifications.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `QUEUE`) A type of integration\n",
                    "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                }
            },
            "requiredInputs": [
                "notificationProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationIntegration resources.\n",
                "properties": {
                    "awsSnsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n"
                    },
                    "awsSnsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "awsSnsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume. Required for AWS_SNS provider\n"
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "AWS SNS Topic ARN for notification integration to connect to. Required for AWS_SNS provider.\n"
                    },
                    "awsSqsArn": {
                        "type": "string",
                        "description": "AWS SQS queue ARN for notification integration to connect to\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "awsSqsRoleArn": {
                        "type": "string",
                        "description": "AWS IAM role ARN for notification integration to assume\n",
                        "deprecationMessage": "No longer supported notification method"
                    },
                    "azureStorageQueuePrimaryUri": {
                        "type": "string",
                        "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications. Required for AZURE*STORAGE*QUEUE provider\n",
                        "willReplaceOnChanges": true
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "The ID of the Azure Active Directory tenant used for identity management. Required for AZURE*STORAGE*QUEUE provider\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "A comment for the integration\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the notification integration was created.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of the cloud messaging with respect to Snowflake (required only for error notifications)\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Default: `true`)\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "gcpPubsubServiceAccount": {
                        "type": "string",
                        "description": "The GCP service account identifier that Snowflake will use when assuming the GCP role\n"
                    },
                    "gcpPubsubSubscriptionName": {
                        "type": "string",
                        "description": "The subscription id that Snowflake will listen to when using the GCP_PUBSUB provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "gcpPubsubTopicName": {
                        "type": "string",
                        "description": "The topic id that Snowflake will use to push notifications.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "notificationProvider": {
                        "type": "string",
                        "description": "The third-party cloud message queuing service (supported values: AZURE*STORAGE*QUEUE, AWS*SNS, GCP*PUBSUB; AWS_SQS is deprecated and will be removed in the future provider versions)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Default: `QUEUE`) A type of integration\n",
                        "deprecationMessage": "Will be removed - it is added automatically on the SDK level."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n"
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClientType",
                "oauthRedirectUri",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.\n"
                },
                "oauthAllowNonTlsRedirectUri": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthClientRsaPublicKey": {
                    "type": "string"
                },
                "oauthClientRsaPublicKey2": {
                    "type": "string"
                },
                "oauthClientType": {
                    "type": "string",
                    "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthEnforcePkce": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "preAuthorizedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "oauthClientType",
                "oauthRedirectUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForCustomClients resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsDescribeOutput:OauthIntegrationForCustomClientsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.\n"
                    },
                    "oauthAllowNonTlsRedirectUri": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthClientRsaPublicKey": {
                        "type": "string"
                    },
                    "oauthClientRsaPublicKey2": {
                        "type": "string"
                    },
                    "oauthClientType": {
                        "type": "string",
                        "description": "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthEnforcePkce": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.\n",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "preAuthorizedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.\n"
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsRelatedParameter:OauthIntegrationForCustomClientsRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForCustomClientsShowOutput:OauthIntegrationForCustomClientsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications example \"name\"\n```\n\n",
            "properties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n"
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                },
                "relatedParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter"
                    },
                    "description": "Parameters related to this security integration.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthClient",
                "relatedParameters",
                "showOutputs"
            ],
            "inputProperties": {
                "blockedRolesLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the OAuth integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthClient": {
                    "type": "string",
                    "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthIssueRefreshTokens": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "oauthRedirectUri": {
                    "type": "string",
                    "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                    "secret": true
                },
                "oauthRefreshTokenValidity": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                },
                "oauthUseSecondaryRoles": {
                    "type": "string",
                    "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                }
            },
            "requiredInputs": [
                "oauthClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OauthIntegrationForPartnerApplications resources.\n",
                "properties": {
                    "blockedRolesLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the OAuth integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsDescribeOutput:OauthIntegrationForPartnerApplicationsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthClient": {
                        "type": "string",
                        "description": "Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthIssueRefreshTokens": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "oauthRedirectUri": {
                        "type": "string",
                        "description": "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.\n",
                        "secret": true
                    },
                    "oauthRefreshTokenValidity": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.\n"
                    },
                    "oauthUseSecondaryRoles": {
                        "type": "string",
                        "description": "Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.\n"
                    },
                    "relatedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsRelatedParameter:OauthIntegrationForPartnerApplicationsRelatedParameter"
                        },
                        "description": "Parameters related to this security integration.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/OauthIntegrationForPartnerApplicationsShowOutput:OauthIntegrationForPartnerApplicationsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/objectParameter:ObjectParameter": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/objectParameter:ObjectParameter s \u003ckey\u003e|\u003cobject_type\u003e|\u003cobject_identifier\u003e\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n"
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                    "willReplaceOnChanges": true
                },
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                    },
                    "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n",
                    "willReplaceOnChanges": true
                },
                "onAccount": {
                    "type": "boolean",
                    "description": "(Default: `false`) If true, the object parameter will be set on the account level.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectParameter resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of object parameter. Valid values are those in [object parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#object-parameters).\n",
                        "willReplaceOnChanges": true
                    },
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ObjectParameterObjectIdentifier:ObjectParameterObjectIdentifier"
                        },
                        "description": "Specifies the object identifier for the object parameter. If no value is provided, then the resource will default to setting the object parameter at account level.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Type of object to which the parameter applies. Valid values are those in [object types](https://docs.snowflake.com/en/sql-reference/parameters.html#object-types). If no value is provided, then the resource will default to setting the object parameter at account level.\n",
                        "willReplaceOnChanges": true
                    },
                    "onAccount": {
                        "type": "boolean",
                        "description": "(Default: `false`) If true, the object parameter will be set on the account level.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of object parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/passwordPolicy:PasswordPolicy": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n!\u003e **Note** According to Snowflake [docs](https://docs.snowflake.com/en/sql-reference/sql/drop-password-policy#usage-notes), a password policy cannot be dropped successfully if it is currently assigned to another object. Currently, the provider does not unassign such objects automatically. Before dropping the resource, first unassign the policy from the relevant objects. See guide for more details.\n\nA password policy specifies the requirements that must be met to create and reset a password to authenticate to Snowflake.\n\n\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "history": {
                    "type": "integer",
                    "description": "(Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "(Default: `false`) Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "(Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "(Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "(Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "(Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "(Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "(Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "history": {
                    "type": "integer",
                    "description": "(Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "(Default: `false`) Prevent overwriting a previous password policy with the same name.\n"
                },
                "lockoutTimeMins": {
                    "type": "integer",
                    "description": "(Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                },
                "maxAgeDays": {
                    "type": "integer",
                    "description": "(Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "(Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "(Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                },
                "minAgeDays": {
                    "type": "integer",
                    "description": "(Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "(Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                },
                "minLowerCaseChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minNumericChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minSpecialChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "minUpperCaseChars": {
                    "type": "integer",
                    "description": "(Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the password policy; must be unique for your account.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "(Default: `false`) Whether to override a previous password policy with the same name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema this password policy belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordPolicy resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Adds a comment or overwrites an existing comment for the password policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "history": {
                        "type": "integer",
                        "description": "(Default: `0`) Specifies the number of the most recent passwords that Snowflake stores. These stored passwords cannot be repeated when a user updates their password value. The current password value does not count towards the history. When you increase the history value, Snowflake saves the previous values. When you decrease the value, Snowflake saves the stored values up to that value that is set. For example, if the history value is 8 and you change the history value to 3, Snowflake stores the most recent 3 passwords and deletes the 5 older password values from the history. Default: 0 Max: 24\n"
                    },
                    "ifNotExists": {
                        "type": "boolean",
                        "description": "(Default: `false`) Prevent overwriting a previous password policy with the same name.\n"
                    },
                    "lockoutTimeMins": {
                        "type": "integer",
                        "description": "(Default: `15`) Specifies the number of minutes the user account will be locked after exhausting the designated number of password retries (i.e. PASSWORD*MAX*RETRIES). Supported range: 1 to 999, inclusive. Default: 15\n"
                    },
                    "maxAgeDays": {
                        "type": "integer",
                        "description": "(Default: `90`) Specifies the maximum number of days before the password must be changed. Supported range: 0 to 999, inclusive. A value of zero (i.e. 0) indicates that the password does not need to be changed. Snowflake does not recommend choosing this value for a default account-level password policy or for any user-level policy. Instead, choose a value that meets your internal security guidelines. Default: 90, which means the password must be changed every 90 days.\n"
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "(Default: `256`) Specifies the maximum number of characters the password must contain. This number must be greater than or equal to the sum of PASSWORD*MIN*LENGTH, PASSWORD*MIN*UPPER*CASE*CHARS, and PASSWORD*MIN*LOWER*CASE*CHARS. Supported range: 8 to 256, inclusive. Default: 256\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "(Default: `5`) Specifies the maximum number of attempts to enter a password before being locked out. Supported range: 1 to 10, inclusive. Default: 5\n"
                    },
                    "minAgeDays": {
                        "type": "integer",
                        "description": "(Default: `0`) Specifies the number of days the user must wait before a recently changed password can be changed again. Supported range: 0 to 999, inclusive. Default: 0\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "(Default: `8`) Specifies the minimum number of characters the password must contain. Supported range: 8 to 256, inclusive. Default: 8\n"
                    },
                    "minLowerCaseChars": {
                        "type": "integer",
                        "description": "(Default: `1`) Specifies the minimum number of lowercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minNumericChars": {
                        "type": "integer",
                        "description": "(Default: `1`) Specifies the minimum number of numeric characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minSpecialChars": {
                        "type": "integer",
                        "description": "(Default: `1`) Specifies the minimum number of special characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "minUpperCaseChars": {
                        "type": "integer",
                        "description": "(Default: `1`) Specifies the minimum number of uppercase characters the password must contain. Supported range: 0 to 256, inclusive. Default: 1\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the password policy; must be unique for your account.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "(Default: `false`) Whether to override a previous password policy with the same name.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema this password policy belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/pipe:Pipe": {
            "description": "\n\n## Import\n\nformat is database name | schema name | pipe name\n\n```sh\n$ pulumi import snowflake:index/pipe:Pipe example 'dbName|schemaName|pipeName'\n```\n\n",
            "properties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies a auto_ingest param for the pipe.\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                },
                "notificationChannel": {
                    "type": "string",
                    "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the pipe.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n"
                }
            },
            "required": [
                "copyStatement",
                "database",
                "fullyQualifiedName",
                "name",
                "notificationChannel",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies a auto_ingest param for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications.\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "copyStatement",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipe resources.\n",
                "properties": {
                    "autoIngest": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies a auto_ingest param for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the pipe.\n"
                    },
                    "copyStatement": {
                        "type": "string",
                        "description": "Specifies the copy statement for the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "integration": {
                        "type": "string",
                        "description": "Specifies an integration for the pipe.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationChannel": {
                        "type": "string",
                        "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the pipe.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the pipe.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/primaryConnection:PrimaryConnection": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/primaryConnection:PrimaryConnection example '\"\u003cprimary_connection_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the connection.\n"
                },
                "enableFailoverToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput"
                    },
                    "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "isPrimary",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the connection.\n"
                },
                "enableFailoverToAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrimaryConnection resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the connection.\n"
                    },
                    "enableFailoverToAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isPrimary": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/PrimaryConnectionShowOutput:PrimaryConnectionShowOutput"
                        },
                        "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureJava:ProcedureJava": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/procedureJava:ProcedureJava example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For more information, see [Java (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Java Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For more information, see [Java (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Java Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureJava resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaArgument:ProcedureJavaArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaImport:ProcedureJavaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaParameter:ProcedureJavaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Java source code. For more information, see [Java (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Java Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaSecret:ProcedureJavaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavaShowOutput:ProcedureJavaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/ProcedureJavaTargetPath:ProcedureJavaTargetPath",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureJavascript:ProcedureJavascript": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/procedureJavascript:ProcedureJavascript example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source code. For more information, see [JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL and JavaScript data type mapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureDefinition",
                "procedureLanguage",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source code. For more information, see [JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL and JavaScript data type mapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "procedureDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureJavascript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptArgument:ProcedureJavascriptArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptParameter:ProcedureJavascriptParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be JavaScript source code. For more information, see [JavaScript](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL and JavaScript data type mapping](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript.html#label-stored-procedure-data-type-mapping)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureJavascriptShowOutput:ProcedureJavascriptShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedurePython:ProcedurePython": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/procedurePython:ProcedurePython example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedurePython resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonArgument:ProcedurePythonArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `\u003cmodule_name\u003e.\u003cfunction_name\u003e`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonImport:ProcedurePythonImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonParameter:ProcedurePythonParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonSecret:ProcedurePythonSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedurePythonShowOutput:ProcedurePythonShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureScala:ProcedureScala": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/procedureScala:ProcedureScala example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n"
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code. For more information, see [Scala (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Scala Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n"
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "handler",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureLanguage",
                "returnType",
                "runtimeVersion",
                "schema",
                "showOutputs",
                "snowparkPackage",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "imports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                    },
                    "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                    "willReplaceOnChanges": true
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code. For more information, see [Scala (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Scala Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "runtimeVersion": {
                    "type": "string",
                    "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                    },
                    "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                },
                "snowparkPackage": {
                    "type": "string",
                    "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                    "willReplaceOnChanges": true
                },
                "targetPath": {
                    "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                    "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "handler",
                "returnType",
                "runtimeVersion",
                "schema",
                "snowparkPackage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureScala resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaArgument:ProcedureScalaArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaImport:ProcedureScalaImport"
                        },
                        "description": "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.\n",
                        "willReplaceOnChanges": true
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowpark_package` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaParameter:ProcedureScalaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be Scala source code. For more information, see [Scala (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-scala). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Scala Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-types-to-scala-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "The language runtime version to use. Currently, the supported versions are: 2.12.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaSecret:ProcedureScalaSecret"
                        },
                        "description": "Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureScalaShowOutput:ProcedureScalaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "snowparkPackage": {
                        "type": "string",
                        "description": "The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetPath": {
                        "$ref": "#/types/snowflake:index/ProcedureScalaTargetPath:ProcedureScalaTargetPath",
                        "description": "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form: `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the object or class: `package com.my_company.my_package;`.\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureSql:ProcedureSql": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/procedureSql:ProcedureSql example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cfunction_name\u003e\"(varchar, varchar, varchar)'\n```\n\nNote: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).\n\nAlso, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For more information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "procedureLanguage": {
                    "type": "string",
                    "description": "Specifies language for the procedure. Used to detect external changes.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL data type](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput"
                    },
                    "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "required": [
                "database",
                "enableConsoleOutput",
                "fullyQualifiedName",
                "logLevel",
                "metricLevel",
                "name",
                "parameters",
                "procedureDefinition",
                "procedureLanguage",
                "returnType",
                "schema",
                "showOutputs",
                "traceLevel"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                    },
                    "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                },
                "executeAs": {
                    "type": "string",
                    "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                },
                "isSecure": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "metricLevel": {
                    "type": "string",
                    "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                    "willReplaceOnChanges": true
                },
                "procedureDefinition": {
                    "type": "string",
                    "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For more information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                    "willReplaceOnChanges": true
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL data type](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                }
            },
            "requiredInputs": [
                "database",
                "procedureDefinition",
                "returnType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureSql resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlArgument:ProcedureSqlArgument"
                        },
                        "description": "List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: `user-defined procedure`) Specifies a comment for the procedure.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check [ENABLE*CONSOLE_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).\n"
                    },
                    "executeAs": {
                        "type": "string",
                        "description": "Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isSecure": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "metricLevel": {
                        "type": "string",
                        "description": "METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlParameter:ProcedureSqlParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.\n"
                    },
                    "procedureDefinition": {
                        "type": "string",
                        "description": "Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedure_definition` value must be SQL source code. For more information, see [Snowflake Scripting](https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n",
                        "willReplaceOnChanges": true
                    },
                    "procedureLanguage": {
                        "type": "string",
                        "description": "Specifies language for the procedure. Used to detect external changes.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the type of the result returned by the stored procedure. For `\u003cresult_data_type\u003e`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL data type](https://docs.snowflake.com/en/sql-reference-data-types)). For `RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureSqlShowOutput:ProcedureSqlShowOutput"
                        },
                        "description": "Outputs the result of `SHOW PROCEDURE` for the given procedure.\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/resourceMonitor:ResourceMonitor": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example '\"\u003cresource_monitor_name\u003e\"'\n```\n\n",
            "properties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                    },
                    "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                },
                "notifyUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                },
                "suspendImmediateTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                },
                "suspendTrigger": {
                    "type": "integer",
                    "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceMonitor resources.\n",
                "properties": {
                    "creditQuota": {
                        "type": "integer",
                        "description": "The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.\n"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "notifyTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.\n"
                    },
                    "notifyUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ResourceMonitorShowOutput:ResourceMonitorShowOutput"
                        },
                        "description": "Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.\n"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.\n"
                    },
                    "suspendImmediateTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                    },
                    "suspendTrigger": {
                        "type": "integer",
                        "description": "Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/rowAccessPolicy:RowAccessPolicy": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/rowAccessPolicy:RowAccessPolicy example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003crow_access_policy_name\u003e\"'\n```\n\n",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                    },
                    "description": "Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.\n"
                }
            },
            "required": [
                "arguments",
                "body",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                    },
                    "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the row access policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "arguments",
                "body",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RowAccessPolicy resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyArgument:RowAccessPolicyArgument"
                        },
                        "description": "List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be protected by the row access policy. If any argument name or type is changed, the resource is recreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the row access policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyDescribeOutput:RowAccessPolicyDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/RowAccessPolicyShowOutput:RowAccessPolicyShowOutput"
                        },
                        "description": "Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/saml2Integration:Saml2Integration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/saml2Integration:Saml2Integration example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n",
                    "secret": true
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                }
            },
            "required": [
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "allowedUserDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "saml2EnableSpInitiated": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2ForceAuthn": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2Issuer": {
                    "type": "string",
                    "description": "The string containing the IdP EntityID / Issuer.\n"
                },
                "saml2PostLogoutRedirectUrl": {
                    "type": "string",
                    "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                },
                "saml2Provider": {
                    "type": "string",
                    "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                },
                "saml2RequestedNameidFormat": {
                    "type": "string",
                    "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                },
                "saml2SignRequest": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "saml2SnowflakeAcsUrl": {
                    "type": "string",
                    "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SnowflakeIssuerUrl": {
                    "type": "string",
                    "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                },
                "saml2SpInitiatedLoginPageLabel": {
                    "type": "string",
                    "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                },
                "saml2SsoUrl": {
                    "type": "string",
                    "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                },
                "saml2X509Cert": {
                    "type": "string",
                    "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "saml2Issuer",
                "saml2Provider",
                "saml2SsoUrl",
                "saml2X509Cert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Saml2Integration resources.\n",
                "properties": {
                    "allowedEmailPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "allowedUserDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationDescribeOutput:Saml2IntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this security integration is enabled or disabled. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "saml2EnableSpInitiated": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2ForceAuthn": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2Issuer": {
                        "type": "string",
                        "description": "The string containing the IdP EntityID / Issuer.\n"
                    },
                    "saml2PostLogoutRedirectUrl": {
                        "type": "string",
                        "description": "The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.\n"
                    },
                    "saml2Provider": {
                        "type": "string",
                        "description": "The string describing the IdP. Valid options are: `OKTA` | `ADFS` | `CUSTOM`.\n"
                    },
                    "saml2RequestedNameidFormat": {
                        "type": "string",
                        "description": "The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified` | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress` | `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName` | `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName` | `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos` | `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent` | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.\n"
                    },
                    "saml2SignRequest": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "saml2SnowflakeAcsUrl": {
                        "type": "string",
                        "description": "The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SnowflakeIssuerUrl": {
                        "type": "string",
                        "description": "The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use. Because Okta does not support underscores in URLs, the underscore in the account name must be converted to a hyphen. See [docs](https://docs.snowflake.com/en/user-guide/organizations-connect#okta-urls).\n"
                    },
                    "saml2SpInitiatedLoginPageLabel": {
                        "type": "string",
                        "description": "The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.\n"
                    },
                    "saml2SsoUrl": {
                        "type": "string",
                        "description": "The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.\n"
                    },
                    "saml2X509Cert": {
                        "type": "string",
                        "description": "The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.\n",
                        "secret": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/Saml2IntegrationShowOutput:Saml2IntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/schema:Schema": {
            "description": "\n\n## Import\n\nMake sure that `is_transient` and `with_managed_access` are set in your config explicitly before import to avoid diff and recreation\n\n(reasons are presented in this migration guide entry).\n\n```sh\n$ pulumi import snowflake:index/schema:Schema example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\"'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient privileges, e.g. grant_ownership on all objects in the schema.\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "catalog",
                "dataRetentionTimeInDays",
                "database",
                "defaultDdlCollation",
                "describeOutputs",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "parameters",
                "pipeExecutionPaused",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "showOutputs",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "pipeExecutionPaused": {
                    "type": "boolean",
                    "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "withManagedAccess": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the schema.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaDescribeOutput:SchemaDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SCHEMA` for the given object. In order to handle this output, one must grant sufficient privileges, e.g. grant_ownership on all objects in the schema.\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies the schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created. When the name is `PUBLIC`, during creation the provider checks if this schema has already been created and, in such case, `ALTER` is used to match the desired state. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaParameter:SchemaParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN SCHEMA` for the given object.\n"
                    },
                    "pipeExecutionPaused": {
                        "type": "boolean",
                        "description": "Specifies whether to pause a running pipe, primarily in preparation for transferring ownership of the pipe to a different role. For more information, check [PIPE*EXECUTION*PAUSED docs](https://docs.snowflake.com/en/sql-reference/parameters#pipe-execution-paused).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SchemaShowOutput:SchemaShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SCHEMA` for the given object.\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "withManagedAccess": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/scimIntegration:ScimIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/scimIntegration:ScimIntegration example '\"\u003cintegration_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see docs.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n"
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                },
                "syncPassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "describeOutputs",
                "enabled",
                "fullyQualifiedName",
                "name",
                "runAsRole",
                "scimClient",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specify whether the security integration is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see docs.\n"
                },
                "runAsRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                    "willReplaceOnChanges": true
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                    "willReplaceOnChanges": true
                },
                "syncPassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "runAsRole",
                "scimClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScimIntegration resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the integration.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationDescribeOutput:ScimIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specify whether the security integration is enabled.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy that controls SCIM network traffic. For more information about this resource, see docs.\n"
                    },
                    "runAsRole": {
                        "type": "string",
                        "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "scimClient": {
                        "type": "string",
                        "description": "Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ScimIntegrationShowOutput:ScimIntegrationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.\n"
                    },
                    "syncPassword": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secondaryConnection:SecondaryConnection": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secondaryConnection:SecondaryConnection example '\"\u003csecondary_connection_name\u003e\"'\n```\n\n",
            "properties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secondary connection.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates if the connection primary status has been changed. If change is detected, resource will be recreated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput"
                    },
                    "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                }
            },
            "required": [
                "asReplicaOf",
                "fullyQualifiedName",
                "isPrimary",
                "name",
                "showOutputs"
            ],
            "inputProperties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secondary connection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "asReplicaOf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryConnection resources.\n",
                "properties": {
                    "asReplicaOf": {
                        "type": "string",
                        "description": "Specifies the identifier for a primary connection from which to create a replica (i.e. a secondary connection). For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secondary connection.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isPrimary": {
                        "type": "boolean",
                        "description": "Indicates if the connection primary status has been changed. If change is detected, resource will be recreated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a secondary connection, the name must match the name of its primary connection. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecondaryConnectionShowOutput:SecondaryConnectionShowOutput"
                        },
                        "description": "Outputs the result of `SHOW CONNECTIONS` for the given connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secondaryDatabase:SecondaryDatabase": {
            "description": "\n\n## Import\n\nMake sure that `is_transient` is set in your config explicitly before import to avoid diff and recreation\n\n(reasons are presented in this migration guide entry).\n\n```sh\n$ pulumi import snowflake:index/secondaryDatabase:SecondaryDatabase example '\"\u003csecondary_database_name\u003e\"'\n```\n\n",
            "properties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "asReplicaOf",
                "catalog",
                "dataRetentionTimeInDays",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fullyQualifiedName",
                "logLevel",
                "maxDataExtensionTimeInDays",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "asReplicaOf": {
                    "type": "string",
                    "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "maxDataExtensionTimeInDays": {
                    "type": "integer",
                    "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "requiredInputs": [
                "asReplicaOf"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryDatabase resources.\n",
                "properties": {
                    "asReplicaOf": {
                        "type": "string",
                        "description": "A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cdatabase_name\u003e\"`. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding \u0026 Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n",
                        "willReplaceOnChanges": true
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                    },
                    "maxDataExtensionTimeInDays": {
                        "type": "integer",
                        "description": "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\\n\\n.\\n\\n.\\n\\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithAuthorizationCodeGrant:SecretWithAuthorizationCodeGrant": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secretWithAuthorizationCodeGrant:SecretWithAuthorizationCodeGrant example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003csecret_name\u003e\"'\n```\n\n",
            "properties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthRefreshToken": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string",
                    "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD, YYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \\n\\n\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "apiAuthentication",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthRefreshToken",
                "oauthRefreshTokenExpiryTime",
                "schema",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthRefreshToken": {
                    "type": "string",
                    "secret": true
                },
                "oauthRefreshTokenExpiryTime": {
                    "type": "string",
                    "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD, YYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \\n\\n\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAuthentication",
                "database",
                "oauthRefreshToken",
                "oauthRefreshTokenExpiryTime",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithAuthorizationCodeGrant resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "type": "string",
                        "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantDescribeOutput:SecretWithAuthorizationCodeGrantDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthRefreshToken": {
                        "type": "string",
                        "secret": true
                    },
                    "oauthRefreshTokenExpiryTime": {
                        "type": "string",
                        "description": "Specifies the timestamp as a string when the OAuth refresh token expires. Accepted string formats: YYYY-MM-DD, YYYY-MM-DD HH:MI, YYYY-MM-DD HH:MI:SS, YYYY-MM-DD HH:MI \\n\\n\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithAuthorizationCodeGrantShowOutput:SecretWithAuthorizationCodeGrantShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003csecret_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Specifies the username value to store in the secret.\n",
                    "secret": true
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "password",
                "schema",
                "secretType",
                "showOutputs",
                "username"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Specifies the username value to store in the secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "database",
                "password",
                "schema",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithBasicAuthentication resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationDescribeOutput:SecretWithBasicAuthenticationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithBasicAuthenticationShowOutput:SecretWithBasicAuthenticationShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Specifies the username value to store in the secret.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithClientCredentials:SecretWithClientCredentials": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secretWithClientCredentials:SecretWithClientCredentials example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003csecret_name\u003e\"'\n```\n\n",
            "properties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "apiAuthentication",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "oauthScopes",
                "schema",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "type": "string",
                    "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiAuthentication",
                "database",
                "oauthScopes",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithClientCredentials resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "type": "string",
                        "description": "Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more information about this resource, see docs.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithClientCredentialsDescribeOutput:SecretWithClientCredentialsDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "oauthScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration during the OAuth client credentials flow.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithClientCredentialsShowOutput:SecretWithClientCredentialsShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/secretWithGenericString:SecretWithGenericString": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/secretWithGenericString:SecretWithGenericString example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003csecret_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "secretString": {
                    "type": "string",
                    "secret": true
                },
                "secretType": {
                    "type": "string",
                    "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "secretString",
                "secretType",
                "showOutputs"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the secret.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "secretString": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "secretString"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretWithGenericString resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the secret.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithGenericStringDescribeOutput:SecretWithGenericStringDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SECRET` for the given secret.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretString": {
                        "type": "string",
                        "secret": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/SecretWithGenericStringShowOutput:SecretWithGenericStringShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SECRETS` for the given secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sequence:Sequence": {
            "description": "\n\n## Import\n\nformat is database name | schema name | sequence name\n\n```sh\n$ pulumi import snowflake:index/sequence:Sequence example 'dbName|schemaName|sequenceName'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "(Default: ``) Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "increment": {
                    "type": "integer",
                    "description": "(Default: `1`) The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n"
                },
                "nextValue": {
                    "type": "integer",
                    "description": "The increment sequence interval.\n"
                },
                "ordering": {
                    "type": "string",
                    "description": "(Default: `ORDER`) The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "nextValue",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "(Default: ``) Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                },
                "increment": {
                    "type": "integer",
                    "description": "(Default: `1`) The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n",
                    "willReplaceOnChanges": true
                },
                "ordering": {
                    "type": "string",
                    "description": "(Default: `ORDER`) The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sequence resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "(Default: ``) Specifies a comment for the sequence.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "increment": {
                        "type": "integer",
                        "description": "(Default: `1`) The amount the sequence will increase by each time it is used\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for the sequence.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextValue": {
                        "type": "integer",
                        "description": "The increment sequence interval.\n",
                        "willReplaceOnChanges": true
                    },
                    "ordering": {
                        "type": "string",
                        "description": "(Default: `ORDER`) The ordering of the sequence. Either ORDER or NOORDER. Default is ORDER.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the sequence. Don't use the | character.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/service:Service": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/service:Service example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cservice_name\u003e\"'\n```\n\n",
            "properties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspendSecs": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the service.\n"
                },
                "computePool": {
                    "type": "string",
                    "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceDescribeOutput:ServiceDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE SERVICE` for the given service.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n"
                },
                "fromSpecification": {
                    "$ref": "#/types/snowflake:index/ServiceFromSpecification:ServiceFromSpecification",
                    "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "fromSpecificationTemplate": {
                    "$ref": "#/types/snowflake:index/ServiceFromSpecificationTemplate:ServiceFromSpecificationTemplate",
                    "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "maxInstances": {
                    "type": "integer",
                    "description": "Specifies the maximum number of service instances to run.\n"
                },
                "minInstances": {
                    "type": "integer",
                    "description": "Specifies the minimum number of service instances to run.\n"
                },
                "minReadyInstances": {
                    "type": "integer",
                    "description": "Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceShowOutput:ServiceShowOutput"
                    },
                    "description": "Outputs the result of `SHOW SERVICES` for the given service.\n"
                }
            },
            "required": [
                "computePool",
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "serviceType",
                "showOutputs"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspendSecs": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the service.\n"
                },
                "computePool": {
                    "type": "string",
                    "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n"
                },
                "fromSpecification": {
                    "$ref": "#/types/snowflake:index/ServiceFromSpecification:ServiceFromSpecification",
                    "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "fromSpecificationTemplate": {
                    "$ref": "#/types/snowflake:index/ServiceFromSpecificationTemplate:ServiceFromSpecificationTemplate",
                    "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                },
                "maxInstances": {
                    "type": "integer",
                    "description": "Specifies the maximum number of service instances to run.\n"
                },
                "minInstances": {
                    "type": "integer",
                    "description": "Specifies the minimum number of service instances to run.\n"
                },
                "minReadyInstances": {
                    "type": "integer",
                    "description": "Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "computePool",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a service. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autoSuspendSecs": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity (service is idle) after which Snowflake automatically suspends the service.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the service.\n"
                    },
                    "computePool": {
                        "type": "string",
                        "description": "Specifies the name of the compute pool in your account on which to run the service. Identifiers with special or lower-case characters are not supported. This limitation in the provider follows the limitation in Snowflake (see [docs](https://docs.snowflake.com/en/sql-reference/sql/create-compute-pool)). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceDescribeOutput:ServiceDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE SERVICE` for the given service.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the names of the external access integrations that allow your service to access external sites.\n"
                    },
                    "fromSpecification": {
                        "$ref": "#/types/snowflake:index/ServiceFromSpecification:ServiceFromSpecification",
                        "description": "Specifies the service specification to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                    },
                    "fromSpecificationTemplate": {
                        "$ref": "#/types/snowflake:index/ServiceFromSpecificationTemplate:ServiceFromSpecificationTemplate",
                        "description": "Specifies the service specification template to use for the service. Note that external changes on this field and nested fields are not detected. Use correctly formatted YAML files. Watch out for the space/tabs indentation. See [service specification](https://docs.snowflake.com/en/developer-guide/snowpark-container-services/specification-reference#general-guidelines) for more information.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "maxInstances": {
                        "type": "integer",
                        "description": "Specifies the maximum number of service instances to run.\n"
                    },
                    "minInstances": {
                        "type": "integer",
                        "description": "Specifies the minimum number of service instances to run.\n"
                    },
                    "minReadyInstances": {
                        "type": "integer",
                        "description": "Indicates the minimum service instances that must be ready for Snowflake to consider the service is ready to process requests.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the service; must be unique for the schema in which the service is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryWarehouse": {
                        "type": "string",
                        "description": "Warehouse to use if a service container connects to Snowflake to execute a query but does not explicitly specify a warehouse to use. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the service. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "Specifies a type for the service. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceShowOutput:ServiceShowOutput"
                        },
                        "description": "Outputs the result of `SHOW SERVICES` for the given service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/serviceUser:ServiceUser": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/serviceUser:ServiceUser example '\"\u003cuser_name\u003e\"'\n```\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserParameter:ServiceUserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceUser resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceUserParameter:ServiceUserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ServiceUserShowOutput:ServiceUserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/share:Share": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/share:Share example name\n```\n\n",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "name"
            ],
            "inputProperties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Share resources.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of accounts to be added to the share. Values should not be the account locator, but in the form of 'organization*name.account*name\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sharedDatabase:SharedDatabase": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/sharedDatabase:SharedDatabase example '\"\u003cshared_database_name\u003e\"'\n```\n\n",
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n"
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n"
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n"
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n"
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                }
            },
            "required": [
                "catalog",
                "defaultDdlCollation",
                "enableConsoleOutput",
                "externalVolume",
                "fromShare",
                "fullyQualifiedName",
                "logLevel",
                "name",
                "quotedIdentifiersIgnoreCase",
                "replaceInvalidCharacters",
                "storageSerializationPolicy",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "traceLevel",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs"
            ],
            "inputProperties": {
                "catalog": {
                    "type": "string",
                    "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the database.\n"
                },
                "defaultDdlCollation": {
                    "type": "string",
                    "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                    "willReplaceOnChanges": true
                },
                "enableConsoleOutput": {
                    "type": "boolean",
                    "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                    "willReplaceOnChanges": true
                },
                "externalVolume": {
                    "type": "string",
                    "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                    "willReplaceOnChanges": true
                },
                "fromShare": {
                    "type": "string",
                    "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n",
                    "willReplaceOnChanges": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                    "willReplaceOnChanges": true
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                    "willReplaceOnChanges": true
                },
                "storageSerializationPolicy": {
                    "type": "string",
                    "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                    "willReplaceOnChanges": true
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                    "willReplaceOnChanges": true
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                    "willReplaceOnChanges": true
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                    "willReplaceOnChanges": true
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                    "willReplaceOnChanges": true
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fromShare"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SharedDatabase resources.\n",
                "properties": {
                    "catalog": {
                        "type": "string",
                        "description": "The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the database.\n"
                    },
                    "defaultDdlCollation": {
                        "type": "string",
                        "description": "Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).\n",
                        "willReplaceOnChanges": true
                    },
                    "enableConsoleOutput": {
                        "type": "boolean",
                        "description": "If true, enables stdout/stderr fast path logging for anonymous stored procedures.\n",
                        "willReplaceOnChanges": true
                    },
                    "externalVolume": {
                        "type": "string",
                        "description": "The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).\n",
                        "willReplaceOnChanges": true
                    },
                    "fromShare": {
                        "type": "string",
                        "description": "A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `\"\u003corganization_name\u003e\".\"\u003caccount_name\u003e\".\"\u003cshare_name\u003e\"`. For more information about this resource, see docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the database; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n",
                        "willReplaceOnChanges": true
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSerializationPolicy": {
                        "type": "string",
                        "description": "The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).\n",
                        "willReplaceOnChanges": true
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n",
                        "willReplaceOnChanges": true
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n",
                        "willReplaceOnChanges": true
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. Valid options are: `ALWAYS` | `ON_EVENT` | `PROPAGATE` | `OFF`. For information about levels, see [TRACE_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds.\n",
                        "willReplaceOnChanges": true
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stage:Stage": {
            "description": "\n\n## Import\n\nformat is database name | schema name | stage name\n\n```sh\n$ pulumi import snowflake:index/stage:Stage example 'dbName|schemaName|stageName'\n```\n\n",
            "properties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n"
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \\n\\n1. with hardcoding value:\\n\\n `file_format=\"FORMAT_NAME = DB.SCHEMA.FORMATNAME\"` \\n\\n2. from dynamic value:\\n\\n `file_format = \"FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}\"` \\n\\n3. from expression:\\n\\n `file_format = format(\"FORMAT_NAME =%s.%s.MYFILEFORMAT\", var.db_name, each.value.schema_name)`. Reference: #265\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n"
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "required": [
                "awsExternalId",
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "snowflakeIamUser"
            ],
            "inputProperties": {
                "awsExternalId": {
                    "type": "string",
                    "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "directory": {
                    "type": "string",
                    "description": "Specifies the directory settings for the stage.\n",
                    "willReplaceOnChanges": true
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \\n\\n1. with hardcoding value:\\n\\n `file_format=\"FORMAT_NAME = DB.SCHEMA.FORMATNAME\"` \\n\\n2. from dynamic value:\\n\\n `file_format = \"FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}\"` \\n\\n3. from expression:\\n\\n `file_format = format(\"FORMAT_NAME =%s.%s.MYFILEFORMAT\", var.db_name, each.value.schema_name)`. Reference: #265\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n",
                    "willReplaceOnChanges": true
                },
                "snowflakeIamUser": {
                    "type": "string",
                    "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StageTag:StageTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stage resources.\n",
                "properties": {
                    "awsExternalId": {
                        "type": "string",
                        "description": "A unique ID assigned to the specific stage. The ID has the following format: \u0026lt;snowflakeAccount\u0026gt;*SFCRole=\u0026lt;snowflakeRoleId\u0026gt;*\u0026lt;randomId\u0026gt;\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stage.\n"
                    },
                    "copyOptions": {
                        "type": "string",
                        "description": "Specifies the copy options for the stage.\n"
                    },
                    "credentials": {
                        "type": "string",
                        "description": "Specifies the credentials for the stage.\n",
                        "secret": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "directory": {
                        "type": "string",
                        "description": "Specifies the directory settings for the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "encryption": {
                        "type": "string",
                        "description": "Specifies the encryption settings for the stage.\n"
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: \\n\\n1. with hardcoding value:\\n\\n `file_format=\"FORMAT_NAME = DB.SCHEMA.FORMATNAME\"` \\n\\n2. from dynamic value:\\n\\n `file_format = \"FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}\"` \\n\\n3. from expression:\\n\\n `file_format = format(\"FORMAT_NAME =%s.%s.MYFILEFORMAT\", var.db_name, each.value.schema_name)`. Reference: #265\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stage.\n",
                        "willReplaceOnChanges": true
                    },
                    "snowflakeIamUser": {
                        "type": "string",
                        "description": "An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.\n"
                    },
                    "storageIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StageTag:StageTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL for the stage.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/storageIntegration:StorageIntegration": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/storageIntegration:StorageIntegration example name\n```\n\n",
            "properties": {
                "azureConsentUrl": {
                    "type": "string",
                    "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n",
                    "secret": true
                },
                "azureMultiTenantAppName": {
                    "type": "string",
                    "description": "This is the name of the Snowflake client application created for your account.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: ``) Specifies a comment for the storage integration.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the storage integration was created.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutput:StorageIntegrationDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`)\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account.\n"
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.\n"
                },
                "storageAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.\n"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageGcpServiceAccount": {
                    "type": "string",
                    "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.\n"
                },
                "usePrivatelinkEndpoint": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "required": [
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "storageAllowedLocations",
                "storageAwsIamUserArn",
                "storageGcpServiceAccount",
                "storageProvider"
            ],
            "inputProperties": {
                "azureTenantId": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "(Default: ``) Specifies a comment for the storage integration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Default: `true`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account.\n",
                    "willReplaceOnChanges": true
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.\n"
                },
                "storageAwsObjectAcl": {
                    "type": "string",
                    "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string",
                    "description": "(Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.\n"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageProvider": {
                    "type": "string",
                    "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "(Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.\n",
                    "willReplaceOnChanges": true
                },
                "usePrivatelinkEndpoint": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                }
            },
            "requiredInputs": [
                "storageAllowedLocations",
                "storageProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageIntegration resources.\n",
                "properties": {
                    "azureConsentUrl": {
                        "type": "string",
                        "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n",
                        "secret": true
                    },
                    "azureMultiTenantAppName": {
                        "type": "string",
                        "description": "This is the name of the Snowflake client application created for your account.\n"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "(Default: ``) Specifies the ID for your Office 365 tenant that the allowed and blocked storage accounts belong to.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "(Default: ``) Specifies a comment for the storage integration.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the storage integration was created.\n"
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StorageIntegrationDescribeOutput:StorageIntegrationDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STORAGE INTEGRATION` for the given storage integration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Default: `true`)\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the integration; must be unique in your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageAllowedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                    },
                    "storageAwsExternalId": {
                        "type": "string",
                        "description": "Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.\n"
                    },
                    "storageAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "storageAwsObjectAcl": {
                        "type": "string",
                        "description": "\"bucket-owner-full-control\" Enables support for AWS access control lists (ACLs) to grant the bucket owner full control.\n"
                    },
                    "storageAwsRoleArn": {
                        "type": "string",
                        "description": "(Default: ``) Specifies the Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.\n"
                    },
                    "storageBlockedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                    },
                    "storageGcpServiceAccount": {
                        "type": "string",
                        "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                    },
                    "storageProvider": {
                        "type": "string",
                        "description": "Specifies the storage provider for the integration. Valid options are: `S3` | `S3GOV` | `S3CHINA` | `GCS` | `AZURE`\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Default: `EXTERNAL_STAGE`) Specifies the type of the storage integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "usePrivatelinkEndpoint": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to use outbound private connectivity to harden the security posture. Supported for AWS S3 and Azure storage providers. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstream_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stage",
                "stale",
                "streamType"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnDirectoryTable resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnDirectoryTableDescribeOutput:StreamOnDirectoryTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnDirectoryTableShowOutput:StreamOnDirectoryTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnExternalTable:StreamOnExternalTable": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/streamOnExternalTable:StreamOnExternalTable example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstream_name\u003e\"'\n```\n\n",
            "properties": {
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "externalTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "insertOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "externalTable",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType"
            ],
            "inputProperties": {
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "externalTable": {
                    "type": "string",
                    "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "insertOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "externalTable",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnExternalTable resources.\n",
                "properties": {
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableAt:StreamOnExternalTableAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnExternalTableBefore:StreamOnExternalTableBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnExternalTableDescribeOutput:StreamOnExternalTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "externalTable": {
                        "type": "string",
                        "description": "Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "insertOnly": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnExternalTableShowOutput:StreamOnExternalTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnTable:StreamOnTable": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/streamOnTable:StreamOnTable example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstream_name\u003e\"'\n```\n\n",
            "properties": {
                "appendOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showInitialRows": {
                    "type": "string"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType",
                "table"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "showInitialRows": {
                    "type": "string"
                },
                "table": {
                    "type": "string",
                    "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnTable resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnTableAt:StreamOnTableAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnTableBefore:StreamOnTableBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnTableDescribeOutput:StreamOnTableDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showInitialRows": {
                        "type": "string"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnTableShowOutput:StreamOnTableShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "table": {
                        "type": "string",
                        "description": "Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamOnView:StreamOnView": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/streamOnView:StreamOnView example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstream_name\u003e\"'\n```\n\n",
            "properties": {
                "appendOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showInitialRows": {
                    "type": "string"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                },
                "stale": {
                    "type": "boolean"
                },
                "streamType": {
                    "type": "string",
                    "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                },
                "view": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "stale",
                "streamType",
                "view"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "at": {
                    "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                },
                "before": {
                    "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "showInitialRows": {
                    "type": "string"
                },
                "view": {
                    "type": "string",
                    "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "view"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamOnView resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "at": {
                        "$ref": "#/types/snowflake:index/StreamOnViewAt:StreamOnViewAt"
                    },
                    "before": {
                        "$ref": "#/types/snowflake:index/StreamOnViewBefore:StreamOnViewBefore"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnViewDescribeOutput:StreamOnViewDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAM` for the given stream.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showInitialRows": {
                        "type": "string"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamOnViewShowOutput:StreamOnViewShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMS` for the given stream.\n"
                    },
                    "stale": {
                        "type": "boolean"
                    },
                    "streamType": {
                        "type": "string",
                        "description": "Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.\n"
                    },
                    "view": {
                        "type": "string",
                        "description": "Specifies an identifier for the view the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamlit:Streamlit": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/streamlit:Streamlit example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cstreamlit_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                    },
                    "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "mainFile",
                "name",
                "schema",
                "showOutputs",
                "stage"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the streamlit.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "directoryLocation": {
                    "type": "string",
                    "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                },
                "externalAccessIntegrations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External access integrations connected to the Streamlit.\n"
                },
                "mainFile": {
                    "type": "string",
                    "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`\n"
                },
                "name": {
                    "type": "string",
                    "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryWarehouse": {
                    "type": "string",
                    "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "stage": {
                    "type": "string",
                    "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                }
            },
            "requiredInputs": [
                "database",
                "mainFile",
                "schema",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Streamlit resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the streamlit.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitDescribeOutput:StreamlitDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.\n"
                    },
                    "directoryLocation": {
                        "type": "string",
                        "description": "Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.\n"
                    },
                    "externalAccessIntegrations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "External access integrations connected to the Streamlit.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "mainFile": {
                        "type": "string",
                        "description": "Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "queryWarehouse": {
                        "type": "string",
                        "description": "Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see docs.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/StreamlitShowOutput:StreamlitShowOutput"
                        },
                        "description": "Outputs the result of `SHOW STREAMLIT` for the given streamlit.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "The stage in which streamlit files are located. For more information about this resource, see docs.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Specifies a title for the Streamlit app to display in Snowsight.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/table:Table": {
            "description": "\n\n## Import\n\nformat is database name | schema name | table name\n\n```sh\n$ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'\n```\n\n",
            "properties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the table.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "required": [
                "columns",
                "database",
                "fullyQualifiedName",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "changeTracking": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to enable change tracking on the table. Default false.\n"
                },
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "primaryKey": {
                    "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                    "description": "Definitions of primary key constraint to create on table\n",
                    "deprecationMessage": "Use snowflake.TableConstraint instead"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableTag:TableTag"
                    },
                    "description": "Definitions of a tag to associate with the resource.\n",
                    "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "changeTracking": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies whether to enable change tracking on the table. Default false.\n"
                    },
                    "clusterBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more table columns/expressions to be used as clustering key(s) for the table\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                        },
                        "description": "Definitions of a column to create in the table. Minimum one required.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the table.\n"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical data in the table. If you wish to inherit the parent schema setting then pass in the schema attribute to this argument or do not fill this parameter at all; the default value for this field is -1, which is a fallback to use Snowflake default - in this case the schema value\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the table.\n"
                    },
                    "primaryKey": {
                        "$ref": "#/types/snowflake:index/TablePrimaryKey:TablePrimaryKey",
                        "description": "Definitions of primary key constraint to create on table\n",
                        "deprecationMessage": "Use snowflake.TableConstraint instead"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableTag:TableTag"
                        },
                        "description": "Definitions of a tag to associate with the resource.\n",
                        "deprecationMessage": "Use the 'snowflake_tag_association' resource instead."
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n"
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n"
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n"
                }
            },
            "required": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "inputProperties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                },
                "maskingPolicy": {
                    "type": "string",
                    "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                    "willReplaceOnChanges": true
                },
                "table": {
                    "type": "string",
                    "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "column",
                "maskingPolicy",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableColumnMaskingPolicyApplication resources.\n",
                "properties": {
                    "column": {
                        "type": "string",
                        "description": "The column to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    },
                    "maskingPolicy": {
                        "type": "string",
                        "description": "Fully qualified name (`database.schema.policyname`) of the policy to apply.\n",
                        "willReplaceOnChanges": true
                    },
                    "table": {
                        "type": "string",
                        "description": "The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableConstraint:TableConstraint": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/tableConstraint:TableConstraint example 'myconstraintfk❄️FOREIGN KEY❄️databaseName|schemaName|tableName'\n```\n\n",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "(Default: `true`) Whether the constraint is deferrable\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "(Default: `false`) Whether the constraint is enforced\n"
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n"
                },
                "initially": {
                    "type": "string",
                    "description": "(Default: `DEFERRED`) Whether the constraint is initially deferred or immediate\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n"
                }
            },
            "required": [
                "columns",
                "name",
                "tableId",
                "type"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Columns to use in constraint key\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the table constraint\n",
                    "deprecationMessage": "Not used. Will be removed."
                },
                "deferrable": {
                    "type": "boolean",
                    "description": "(Default: `true`) Whether the constraint is deferrable\n",
                    "willReplaceOnChanges": true
                },
                "enable": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                    "willReplaceOnChanges": true
                },
                "enforced": {
                    "type": "boolean",
                    "description": "(Default: `false`) Whether the constraint is enforced\n",
                    "willReplaceOnChanges": true
                },
                "foreignKeyProperties": {
                    "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                    "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                    "willReplaceOnChanges": true
                },
                "initially": {
                    "type": "string",
                    "description": "(Default: `DEFERRED`) Whether the constraint is initially deferred or immediate\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of constraint\n"
                },
                "rely": {
                    "type": "boolean",
                    "description": "(Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                    "willReplaceOnChanges": true
                },
                "tableId": {
                    "type": "string",
                    "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                    "willReplaceOnChanges": true
                },
                "validate": {
                    "type": "boolean",
                    "description": "(Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "columns",
                "tableId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableConstraint resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Columns to use in constraint key\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the table constraint\n",
                        "deprecationMessage": "Not used. Will be removed."
                    },
                    "deferrable": {
                        "type": "boolean",
                        "description": "(Default: `true`) Whether the constraint is deferrable\n",
                        "willReplaceOnChanges": true
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "(Default: `true`) Specifies whether the constraint is enabled or disabled. These properties are provided for compatibility with Oracle.\n",
                        "willReplaceOnChanges": true
                    },
                    "enforced": {
                        "type": "boolean",
                        "description": "(Default: `false`) Whether the constraint is enforced\n",
                        "willReplaceOnChanges": true
                    },
                    "foreignKeyProperties": {
                        "$ref": "#/types/snowflake:index/TableConstraintForeignKeyProperties:TableConstraintForeignKeyProperties",
                        "description": "Additional properties when type is set to foreign key. Not applicable for primary/unique keys\n",
                        "willReplaceOnChanges": true
                    },
                    "initially": {
                        "type": "string",
                        "description": "(Default: `DEFERRED`) Whether the constraint is initially deferred or immediate\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of constraint\n"
                    },
                    "rely": {
                        "type": "boolean",
                        "description": "(Default: `true`) Specifies whether a constraint in NOVALIDATE mode is taken into account during query rewrite.\n",
                        "willReplaceOnChanges": true
                    },
                    "tableId": {
                        "type": "string",
                        "description": "Identifier for table to create constraint on. Format must follow: \"\\\"\u0026lt;db*name\u0026gt;\\\".\\\"\u0026lt;schema*name\u0026gt;\\\".\\\"\u0026lt;table*name\u0026gt;\\\"\" or \"\u0026lt;db*name\u0026gt;.\u0026lt;schema*name\u0026gt;.\u0026lt;table*name\u0026gt;\" (snowflake*table.my*table.id)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of constraint, one of 'UNIQUE', 'PRIMARY KEY', or 'FOREIGN KEY'\n",
                        "willReplaceOnChanges": true
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "(Default: `false`) Specifies whether to validate existing data on the table when a constraint is created. Only used in conjunction with the ENABLE property.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tag:Tag": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/tag:Tag example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003ctag_name\u003e\"'\n```\n\n",
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "maskingPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this resource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TagShowOutput:TagShowOutput"
                    },
                    "description": "Outputs the result of `SHOW TAGS` for the given tag.\n"
                }
            },
            "required": [
                "database",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs"
            ],
            "inputProperties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed values for the tag.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the tag.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "maskingPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this resource, see docs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "allowedValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of allowed values for the tag.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the tag.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "maskingPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of masking policies for the tag. A tag can support one masking policy for each data type. If masking policies are assigned to the tag, before dropping the tag, the provider automatically unassigns them. For more information about this resource, see docs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag; must be unique for the database in which the tag is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the tag. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TagShowOutput:TagShowOutput"
                        },
                        "description": "Outputs the result of `SHOW TAGS` for the given tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tagAssociation:TagAssociation": {
            "description": "\n\n## Import\n\n~\u003e **Note** Due to technical limitations of Terraform SDK, `object_identifiers` are not set during import state. Please run `terraform refresh` after importing to get this field populated.\n\n```sh\n$ pulumi import snowflake:index/tagAssociation:TagAssociation example '\"TAG_DATABASE\".\"TAG_SCHEMA\".\"TAG_NAME\"|TAG_VALUE|OBJECT_TYPE'\n```\n\n",
            "properties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the object identifiers for the tag association.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "(Default: `true`) If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag.\n"
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                }
            },
            "required": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "inputProperties": {
                "objectIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the object identifiers for the tag association.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "(Default: `true`) If true, skips validation of the tag association.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "Specifies the identifier for the tag.\n",
                    "willReplaceOnChanges": true
                },
                "tagValue": {
                    "type": "string",
                    "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                }
            },
            "requiredInputs": [
                "objectIdentifiers",
                "objectType",
                "tagId",
                "tagValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TagAssociation resources.\n",
                "properties": {
                    "objectIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the object identifiers for the tag association.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "(Default: `true`) If true, skips validation of the tag association.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "Specifies the identifier for the tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagValue": {
                        "type": "string",
                        "description": "Specifies the value of the tag, (e.g. 'finance' or 'engineering')\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/task:Task": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/task:Task example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003ctask_name\u003e\"'\n```\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "allowOverlappingExecution": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "config": {
                    "type": "string",
                    "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in JSON format.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "finalize": {
                    "type": "string",
                    "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskParameter:TaskParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "schedule": {
                    "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and after; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TaskShowOutput:TaskShowOutput"
                    },
                    "description": "Outputs the result of `SHOW TASKS` for the given task.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started or suspended.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about warehouses, see docs. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with user*task*managed*initial*warehouse_size) For more information about this resource, see docs.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute. If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task as a predecessor also don’t run.\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "database",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "schema",
                "searchPath",
                "showOutputs",
                "sqlStatement",
                "started",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "suspendTaskAfterNumFailures",
                "taskAutoRetryAttempts",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userTaskManagedInitialWarehouseSize",
                "userTaskMinimumTriggerIntervalInSeconds",
                "userTaskTimeoutMs",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "afters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "allowOverlappingExecution": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "config": {
                    "type": "string",
                    "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in JSON format.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "errorIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "finalize": {
                    "type": "string",
                    "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "schedule": {
                    "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and after; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started or suspended.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "suspendTaskAfterNumFailures": {
                    "type": "integer",
                    "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                },
                "taskAutoRetryAttempts": {
                    "type": "integer",
                    "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userTaskManagedInitialWarehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about warehouses, see docs. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                },
                "userTaskMinimumTriggerIntervalInSeconds": {
                    "type": "integer",
                    "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with user*task*managed*initial*warehouse_size) For more information about this resource, see docs.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute. If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task as a predecessor also don’t run.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "sqlStatement",
                "started"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Task resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "afters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more predecessor tasks for the current task. Use this option to [create a DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "allowOverlappingExecution": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the parameter value to TRUE permits DAG runs to overlap. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the task.\n"
                    },
                    "config": {
                        "type": "string",
                        "description": "Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in JSON format.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "errorIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`. For more information about this resource, see docs.\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "finalize": {
                        "type": "string",
                        "description": "Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TaskParameter:TaskParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "schedule": {
                        "$ref": "#/types/snowflake:index/TaskSchedule:TaskSchedule",
                        "description": "The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and after; when set, one of the sub-fields `minutes` or `using_cron` should be set)\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the task. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TaskShowOutput:TaskShowOutput"
                        },
                        "description": "Outputs the result of `SHOW TASKS` for the given task.\n"
                    },
                    "sqlStatement": {
                        "type": "string",
                        "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                    },
                    "started": {
                        "type": "boolean",
                        "description": "Specifies if the task should be started or suspended.\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "suspendTaskAfterNumFailures": {
                        "type": "integer",
                        "description": "Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The default is 0 (no automatic suspension). For more information, check [SUSPEND*TASK*AFTER*NUM*FAILURES docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).\n"
                    },
                    "taskAutoRetryAttempts": {
                        "type": "integer",
                        "description": "Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake can automatically retry the task graphs from the last task in the graph that failed. For more information, check [TASK*AUTO*RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userTaskManagedInitialWarehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the compute resources to provision for the first run of the task, before a task history is available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about warehouses, see docs. For more information, check [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).\n"
                    },
                    "userTaskMinimumTriggerIntervalInSeconds": {
                        "type": "integer",
                        "description": "Minimum amount of time between Triggered Task executions in seconds For more information, check [USER*TASK*MINIMUM*TRIGGER*INTERVAL*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check [USER*TASK*TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with user*task*managed*initial*warehouse_size) For more information about this resource, see docs.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    },
                    "when": {
                        "type": "string",
                        "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute. If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task as a predecessor also don’t run.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/user:User": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/user:User example '\"\u003cuser_name\u003e\"'\n```\n\nNote: pulumi preview+apply may be needed after successful import to fill out all the missing fields (like `password`) in state.\n\n",
            "properties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER` for the given user.\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "userType": {
                    "type": "string",
                    "description": "Specifies a type for the user.\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "required": [
                "abortDetachedQuery",
                "autocommit",
                "binaryInputFormat",
                "binaryOutputFormat",
                "clientMemoryLimit",
                "clientMetadataRequestUseConnectionCtx",
                "clientPrefetchThreads",
                "clientResultChunkSize",
                "clientResultColumnCaseInsensitive",
                "clientSessionKeepAlive",
                "clientSessionKeepAliveHeartbeatFrequency",
                "clientTimestampTypeMapping",
                "dateInputFormat",
                "dateOutputFormat",
                "enableUnloadPhysicalTypeOptimization",
                "enableUnredactedQuerySyntaxError",
                "errorOnNondeterministicMerge",
                "errorOnNondeterministicUpdate",
                "fullyQualifiedName",
                "geographyOutputFormat",
                "geometryOutputFormat",
                "jdbcTreatDecimalAsInt",
                "jdbcTreatTimestampNtzAsUtc",
                "jdbcUseSessionTimezone",
                "jsonIndent",
                "lockTimeout",
                "logLevel",
                "multiStatementCount",
                "name",
                "networkPolicy",
                "noorderSequenceAsDefault",
                "odbcTreatDecimalAsInt",
                "parameters",
                "preventUnloadToInternalStages",
                "queryTag",
                "quotedIdentifiersIgnoreCase",
                "rowsPerResultset",
                "s3StageVpceDnsName",
                "searchPath",
                "showOutputs",
                "simulatedDataSharingConsumer",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds",
                "strictJsonOutput",
                "timeInputFormat",
                "timeOutputFormat",
                "timestampDayIsAlways24h",
                "timestampInputFormat",
                "timestampLtzOutputFormat",
                "timestampNtzOutputFormat",
                "timestampOutputFormat",
                "timestampTypeMapping",
                "timestampTzOutputFormat",
                "timezone",
                "traceLevel",
                "transactionAbortOnError",
                "transactionDefaultIsolationLevel",
                "twoDigitCenturyStart",
                "unsupportedDdlAction",
                "useCachedResult",
                "userType",
                "weekOfYearPolicy",
                "weekStart"
            ],
            "inputProperties": {
                "abortDetachedQuery": {
                    "type": "boolean",
                    "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                },
                "autocommit": {
                    "type": "boolean",
                    "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                },
                "binaryInputFormat": {
                    "type": "string",
                    "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                },
                "binaryOutputFormat": {
                    "type": "string",
                    "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                },
                "clientMemoryLimit": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                },
                "clientMetadataRequestUseConnectionCtx": {
                    "type": "boolean",
                    "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                },
                "clientPrefetchThreads": {
                    "type": "integer",
                    "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                },
                "clientResultChunkSize": {
                    "type": "integer",
                    "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                },
                "clientResultColumnCaseInsensitive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                },
                "clientSessionKeepAlive": {
                    "type": "boolean",
                    "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                },
                "clientSessionKeepAliveHeartbeatFrequency": {
                    "type": "integer",
                    "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                },
                "clientTimestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the user.\n"
                },
                "dateInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                },
                "dateOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                },
                "defaultSecondaryRolesOption": {
                    "type": "string",
                    "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                },
                "disableMfa": {
                    "type": "string"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n",
                    "secret": true
                },
                "enableUnloadPhysicalTypeOptimization": {
                    "type": "boolean",
                    "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                },
                "enableUnredactedQuerySyntaxError": {
                    "type": "boolean",
                    "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                },
                "errorOnNondeterministicMerge": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                },
                "errorOnNondeterministicUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n",
                    "secret": true
                },
                "geographyOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                },
                "geometryOutputFormat": {
                    "type": "string",
                    "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                },
                "jdbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                },
                "jdbcTreatTimestampNtzAsUtc": {
                    "type": "boolean",
                    "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                },
                "jdbcUseSessionTimezone": {
                    "type": "boolean",
                    "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                },
                "jsonIndent": {
                    "type": "integer",
                    "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n",
                    "secret": true
                },
                "lockTimeout": {
                    "type": "integer",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                    "secret": true
                },
                "middleName": {
                    "type": "string",
                    "description": "Middle name of the user.\n",
                    "secret": true
                },
                "minsToBypassMfa": {
                    "type": "integer"
                },
                "minsToUnlock": {
                    "type": "integer"
                },
                "multiStatementCount": {
                    "type": "integer",
                    "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                },
                "mustChangePassword": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                },
                "noorderSequenceAsDefault": {
                    "type": "boolean",
                    "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                },
                "odbcTreatDecimalAsInt": {
                    "type": "boolean",
                    "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "preventUnloadToInternalStages": {
                    "type": "boolean",
                    "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                },
                "queryTag": {
                    "type": "string",
                    "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                },
                "quotedIdentifiersIgnoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                },
                "rowsPerResultset": {
                    "type": "integer",
                    "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                },
                "s3StageVpceDnsName": {
                    "type": "string",
                    "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                },
                "searchPath": {
                    "type": "string",
                    "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                },
                "simulatedDataSharingConsumer": {
                    "type": "string",
                    "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                },
                "strictJsonOutput": {
                    "type": "boolean",
                    "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                },
                "timeInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                },
                "timeOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                },
                "timestampDayIsAlways24h": {
                    "type": "boolean",
                    "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                },
                "timestampInputFormat": {
                    "type": "string",
                    "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                },
                "timestampLtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                },
                "timestampNtzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                },
                "timestampOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                },
                "timestampTypeMapping": {
                    "type": "string",
                    "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                },
                "timestampTzOutputFormat": {
                    "type": "string",
                    "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                },
                "traceLevel": {
                    "type": "string",
                    "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                },
                "transactionAbortOnError": {
                    "type": "boolean",
                    "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                },
                "transactionDefaultIsolationLevel": {
                    "type": "string",
                    "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                },
                "twoDigitCenturyStart": {
                    "type": "integer",
                    "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                },
                "unsupportedDdlAction": {
                    "type": "string",
                    "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                },
                "useCachedResult": {
                    "type": "boolean",
                    "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                },
                "weekOfYearPolicy": {
                    "type": "integer",
                    "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "abortDetachedQuery": {
                        "type": "boolean",
                        "description": "Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination of a session (e.g. network outage, browser termination, service interruption). For more information, check [ABORT*DETACHED*QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).\n"
                    },
                    "autocommit": {
                        "type": "boolean",
                        "description": "Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed without an active transaction, is automatically committed after the statement successfully completes. For more information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).\n"
                    },
                    "binaryInputFormat": {
                        "type": "string",
                        "description": "The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).\n"
                    },
                    "binaryOutputFormat": {
                        "type": "string",
                        "description": "The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check [BINARY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).\n"
                    },
                    "clientMemoryLimit": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from queries (in MB). For more information, check [CLIENT*MEMORY*LIMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).\n"
                    },
                    "clientMetadataRequestUseConnectionCtx": {
                        "type": "boolean",
                        "description": "For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more quickly. For more information, check [CLIENT*METADATA*REQUEST*USE*CONNECTION_CTX docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).\n"
                    },
                    "clientPrefetchThreads": {
                        "type": "integer",
                        "description": "Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s resources) to improve performance. For more information, check [CLIENT*PREFETCH*THREADS docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).\n"
                    },
                    "clientResultChunkSize": {
                        "type": "integer",
                        "description": "Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver downloads query results in chunks. For more information, check [CLIENT*RESULT*CHUNK_SIZE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).\n"
                    },
                    "clientResultColumnCaseInsensitive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more information, check [CLIENT*RESULT*COLUMN*CASE*INSENSITIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).\n"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean",
                        "description": "Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more information, check [CLIENT*SESSION*KEEP_ALIVE docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).\n"
                    },
                    "clientSessionKeepAliveHeartbeatFrequency": {
                        "type": "integer",
                        "description": "Number of seconds in-between client attempts to update the token for the session. For more information, check [CLIENT*SESSION*KEEP*ALIVE*HEARTBEAT_FREQUENCY docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).\n"
                    },
                    "clientTimestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the [TIMESTAMP_* variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more information, check [CLIENT*TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the user.\n"
                    },
                    "dateInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).\n"
                    },
                    "dateOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the DATE data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [DATE*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).\n"
                    },
                    "daysToExpiry": {
                        "type": "integer"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the namespace exists.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login. Note that specifying a default role for a user does **not** grant the role to the user. The role must be granted explicitly to the user using the [GRANT ROLE](https://docs.snowflake.com/en/sql-reference/sql/grant-role) command. In addition, the CREATE USER operation does not verify that the role exists. For more information about this resource, see docs.\n"
                    },
                    "defaultSecondaryRolesOption": {
                        "type": "string",
                        "description": "(Default: `DEFAULT`) Specifies the secondary roles that are active for the user’s session upon login. Valid values are (case-insensitive): `DEFAULT` | `NONE` | `ALL`. More information can be found in [doc](https://docs.snowflake.com/en/sql-reference/sql/create-user#optional-object-properties-objectproperties).\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login. Note that the CREATE USER operation does not verify that the warehouse exists. For more information about this resource, see docs.\n"
                    },
                    "disableMfa": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is disabled, which prevents logging in and aborts all the currently-running queries for the user. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n",
                        "secret": true
                    },
                    "enableUnloadPhysicalTypeOptimization": {
                        "type": "boolean",
                        "description": "Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that support the values in the output columns of the unload SQL statement or source table). For more information, check [ENABLE*UNLOAD*PHYSICAL*TYPE*OPTIMIZATION docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).\n"
                    },
                    "enableUnredactedQuerySyntaxError": {
                        "type": "boolean",
                        "description": "Controls whether query text is redacted if a SQL query fails due to a syntax or parsing error. If `FALSE`, the content of a failed query is redacted in the views, pages, and functions that provide a query history. Only users with a role that is granted or inherits the AUDIT privilege can set the ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR parameter. When using the ALTER USER command to set the parameter to `TRUE` for a particular user, modify the user that you want to see the query text, not the user who executed the query (if those are different users). For more information, check [ENABLE*UNREDACTED*QUERY*SYNTAX*ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unredacted-query-syntax-error).\n"
                    },
                    "errorOnNondeterministicMerge": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is used to update or delete a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_MERGE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).\n"
                    },
                    "errorOnNondeterministicUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on the target row. For more information, check [ERROR*ON*NONDETERMINISTIC_UPDATE docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user.\n",
                        "secret": true
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "geographyOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOGRAPHY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more information, check [GEOGRAPHY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).\n"
                    },
                    "geometryOutputFormat": {
                        "type": "string",
                        "description": "Display format for [GEOMETRY values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more information, check [GEOMETRY*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).\n"
                    },
                    "jdbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes columns that have a scale of zero (0). For more information, check [JDBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-decimal-as-int).\n"
                    },
                    "jdbcTreatTimestampNtzAsUtc": {
                        "type": "boolean",
                        "description": "Specifies how JDBC processes TIMESTAMP*NTZ values. For more information, check [JDBC*TREAT*TIMESTAMP*NTZ*AS*UTC docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).\n"
                    },
                    "jdbcUseSessionTimezone": {
                        "type": "boolean",
                        "description": "Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(), getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC*USE*SESSION_TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).\n"
                    },
                    "jsonIndent": {
                        "type": "integer",
                        "description": "Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to insert newline characters after each element. For more information, check [JSON_INDENT docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user.\n",
                        "secret": true
                    },
                    "lockTimeout": {
                        "type": "integer",
                        "description": "Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Specifies the severity level of messages that should be ingested and made available in the active event table. Messages at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead. Login names are always case-insensitive.\n",
                        "secret": true
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name of the user.\n",
                        "secret": true
                    },
                    "minsToBypassMfa": {
                        "type": "integer"
                    },
                    "minsToUnlock": {
                        "type": "integer"
                    },
                    "multiStatementCount": {
                        "type": "integer",
                        "description": "Number of statements to execute when using the multi-statement capability. For more information, check [MULTI*STATEMENT*COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).\n"
                    },
                    "mustChangePassword": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. Check the [docs](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies the network policy to enforce for your account. Network policies enable restricting access to your account based on users’ IP address. For more details, see [Controlling network traffic with network policies](https://docs.snowflake.com/en/user-guide/network-policies). Any existing network policy (created using [CREATE NETWORK POLICY](https://docs.snowflake.com/en/sql-reference/sql/create-network-policy)). For more information, check [NETWORK_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#network-policy).\n"
                    },
                    "noorderSequenceAsDefault": {
                        "type": "boolean",
                        "description": "Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or auto-incremented column in [increasing or decreasing order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For more information, check [NOORDER*SEQUENCE*AS_DEFAULT docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).\n"
                    },
                    "odbcTreatDecimalAsInt": {
                        "type": "boolean",
                        "description": "Specifies how ODBC processes columns that have a scale of zero (0). For more information, check [ODBC*TREAT*DECIMAL*AS*INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserParameter:UserParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN USER` for the given user.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "preventUnloadToInternalStages": {
                        "type": "boolean",
                        "description": "Specifies whether to prevent data unload operations to internal (Snowflake) stages using [COPY INTO \\n\\n](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location) statements. For more information, check [PREVENT*UNLOAD*TO*INTERNAL*STAGES docs](https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-internal-stages).\n"
                    },
                    "queryTag": {
                        "type": "string",
                        "description": "Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are displayed in the output of the [QUERY*HISTORY, QUERY*HISTORY*BY**](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).\n"
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean",
                        "description": "Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default, Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)). You can use this parameter in situations in which [third-party applications always use double quotes around identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For more information, check [QUOTED*IDENTIFIERS*IGNORE_CASE docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).\n"
                    },
                    "rowsPerResultset": {
                        "type": "integer",
                        "description": "Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information, check [ROWS*PER*RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    },
                    "s3StageVpceDnsName": {
                        "type": "string",
                        "description": "Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html) use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation). For more information, check [S3*STAGE*VPCE*DNS*NAME docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).\n"
                    },
                    "searchPath": {
                        "type": "string",
                        "description": "Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path). Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserShowOutput:UserShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER` for the given user.\n"
                    },
                    "simulatedDataSharingConsumer": {
                        "type": "string",
                        "description": "Specifies the name of a consumer account to simulate for testing/validating shared data, particularly shared secure views. When this parameter is set in a session, shared views return rows as if executed in the specified consumer account rather than the provider account. For more information, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro) and [Working with shares](https://docs.snowflake.com/en/user-guide/data-sharing-provider). For more information, check [SIMULATED*DATA*SHARING_CONSUMER docs](https://docs.snowflake.com/en/sql-reference/parameters#simulated-data-sharing-consumer).\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled by the system. This parameter can be used in conjunction with the [MAX*CONCURRENCY*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to ensure a warehouse is never backlogged. For more information, check [STATEMENT*QUEUED*TIMEOUT*IN*SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For more information, check [STATEMENT*TIMEOUT*IN_SECONDS docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).\n"
                    },
                    "strictJsonOutput": {
                        "type": "boolean",
                        "description": "This parameter specifies whether JSON output in a session is compatible with the general standard (as described by [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however, these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information, check [STRICT*JSON*OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).\n"
                    },
                    "timeInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the session). For more information, check [TIME*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).\n"
                    },
                    "timeOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIME data type. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIME*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).\n"
                    },
                    "timestampDayIsAlways24h": {
                        "type": "boolean",
                        "description": "Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information, check [TIMESTAMP*DAY*IS*ALWAYS*24H docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).\n"
                    },
                    "timestampInputFormat": {
                        "type": "string",
                        "description": "Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system during the session). For more information, check [TIMESTAMP*INPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).\n"
                    },
                    "timestampLtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*LTZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*LTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).\n"
                    },
                    "timestampNtzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*NTZ data type. For more information, check [TIMESTAMP*NTZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).\n"
                    },
                    "timestampOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).\n"
                    },
                    "timestampTypeMapping": {
                        "type": "string",
                        "description": "Specifies the TIMESTAMP** variation that the TIMESTAMP data type alias maps to. For more information, check [TIMESTAMP*TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).\n"
                    },
                    "timestampTzOutputFormat": {
                        "type": "string",
                        "description": "Specifies the display format for the TIMESTAMP*TZ data type. If no format is specified, defaults to [TIMESTAMP*OUTPUT*FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For more information, see [Date and time input and output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check [TIMESTAMP*TZ*OUTPUT*FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Specifies the time zone for the session. You can specify a [time zone name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).\n"
                    },
                    "traceLevel": {
                        "type": "string",
                        "description": "Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).\n"
                    },
                    "transactionAbortOnError": {
                        "type": "boolean",
                        "description": "Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For more information, check [TRANSACTION*ABORT*ON_ERROR docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).\n"
                    },
                    "transactionDefaultIsolationLevel": {
                        "type": "string",
                        "description": "Specifies the isolation level for transactions in the user session. For more information, check [TRANSACTION*DEFAULT*ISOLATION_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).\n"
                    },
                    "twoDigitCenturyStart": {
                        "type": "integer",
                        "description": "Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years represented as 2 digits). For more information, check [TWO*DIGIT*CENTURY_START docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).\n"
                    },
                    "unsupportedDdlAction": {
                        "type": "string",
                        "description": "Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more information, check [UNSUPPORTED*DDL*ACTION docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).\n"
                    },
                    "useCachedResult": {
                        "type": "boolean",
                        "description": "Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more information, check [USE*CACHED*RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Specifies a type for the user.\n"
                    },
                    "weekOfYearPolicy": {
                        "type": "integer",
                        "description": "Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the first week of the year and December 31 is included in the last week of the year. For more information, check [WEEK*OF*YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e. ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified day of the week. For more information, check [WEEK_START docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment": {
            "properties": {
                "authenticationPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the authentication policy\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the authentication policy to\n"
                }
            },
            "required": [
                "authenticationPolicyName",
                "userName"
            ],
            "inputProperties": {
                "authenticationPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the authentication policy\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the authentication policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authenticationPolicyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserAuthenticationPolicyAttachment resources.\n",
                "properties": {
                    "authenticationPolicyName": {
                        "type": "string",
                        "description": "Fully qualified name of the authentication policy\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the user you want to attach the authentication policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment example \"MY_DATABASE|MY_SCHEMA|PASSWORD_POLICY_NAME|USER_NAME\"\n```\n\n",
            "properties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n"
                }
            },
            "required": [
                "passwordPolicyName",
                "userName"
            ],
            "inputProperties": {
                "passwordPolicyName": {
                    "type": "string",
                    "description": "Fully qualified name of the password policy\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "User name of the user you want to attach the password policy to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "passwordPolicyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPasswordPolicyAttachment resources.\n",
                "properties": {
                    "passwordPolicyName": {
                        "type": "string",
                        "description": "Fully qualified name of the password policy\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the user you want to attach the password policy to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken example '\"\u003cuser_name\u003e\"|\"\u003ctoken_name\u003e\"'\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Descriptive comment about the programmatic access token.\n"
                },
                "daysToExpiry": {
                    "type": "integer"
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "expireRotatedTokenAfterHours": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.\n"
                },
                "keeper": {
                    "type": "string",
                    "description": "Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.\n"
                },
                "minsToBypassNetworkPolicyRequirement": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "roleRestriction": {
                    "type": "string",
                    "description": "The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "rotatedTokenName": {
                    "type": "string",
                    "description": "Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/UserProgrammaticAccessTokenShowOutput:UserProgrammaticAccessTokenShowOutput"
                    },
                    "description": "Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.\n",
                    "secret": true
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                }
            },
            "required": [
                "name",
                "rotatedTokenName",
                "showOutputs",
                "token",
                "user"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Descriptive comment about the programmatic access token.\n"
                },
                "daysToExpiry": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "disabled": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "expireRotatedTokenAfterHours": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.\n"
                },
                "keeper": {
                    "type": "string",
                    "description": "Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.\n"
                },
                "minsToBypassNetworkPolicyRequirement": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "roleRestriction": {
                    "type": "string",
                    "description": "The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserProgrammaticAccessToken resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Descriptive comment about the programmatic access token.\n"
                    },
                    "daysToExpiry": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "disabled": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "expireRotatedTokenAfterHours": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.\n"
                    },
                    "keeper": {
                        "type": "string",
                        "description": "Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotated_token_name` fields are marked as computed.\n"
                    },
                    "minsToBypassNetworkPolicyRequirement": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "roleRestriction": {
                        "type": "string",
                        "description": "The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "rotatedTokenName": {
                        "type": "string",
                        "description": "Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/UserProgrammaticAccessTokenShowOutput:UserProgrammaticAccessTokenShowOutput"
                        },
                        "description": "Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.\n",
                        "secret": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPublicKeys:UserPublicKeys": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPublicKeys resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/view:View": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/view:View example '\"\u003cdatabase_name\u003e\".\"\u003cschema_name\u003e\".\"\u003cview_name\u003e\"'\n```\n\n",
            "properties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "describeOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                    },
                    "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "isRecursive": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                    },
                    "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                }
            },
            "required": [
                "database",
                "describeOutputs",
                "fullyQualifiedName",
                "name",
                "schema",
                "showOutputs",
                "statement"
            ],
            "inputProperties": {
                "aggregationPolicy": {
                    "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                    "description": "Specifies the aggregation policy to set on a view.\n"
                },
                "changeTracking": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                    },
                    "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "copyGrants": {
                    "type": "boolean"
                },
                "dataMetricFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                    },
                    "description": "Data metric functions used for the view.\n"
                },
                "dataMetricSchedule": {
                    "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                    "description": "Specifies the schedule to run the data metric functions periodically.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "isRecursive": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "isSecure": {
                    "type": "string"
                },
                "isTemporary": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "rowAccessPolicy": {
                    "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                    "description": "Specifies the row access policy to set on a view.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                    "willReplaceOnChanges": true
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "aggregationPolicy": {
                        "$ref": "#/types/snowflake:index/ViewAggregationPolicy:ViewAggregationPolicy",
                        "description": "Specifies the aggregation policy to set on a view.\n"
                    },
                    "changeTracking": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewColumn:ViewColumn"
                        },
                        "description": "If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "copyGrants": {
                        "type": "boolean"
                    },
                    "dataMetricFunctions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDataMetricFunction:ViewDataMetricFunction"
                        },
                        "description": "Data metric functions used for the view.\n"
                    },
                    "dataMetricSchedule": {
                        "$ref": "#/types/snowflake:index/ViewDataMetricSchedule:ViewDataMetricSchedule",
                        "description": "Specifies the schedule to run the data metric functions periodically.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "describeOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewDescribeOutput:ViewDescribeOutput"
                        },
                        "description": "Outputs the result of `DESCRIBE VIEW` for the given view.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "isRecursive": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "isSecure": {
                        "type": "string"
                    },
                    "isTemporary": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "rowAccessPolicy": {
                        "$ref": "#/types/snowflake:index/ViewRowAccessPolicy:ViewRowAccessPolicy",
                        "description": "Specifies the row access policy to set on a view.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ViewShowOutput:ViewShowOutput"
                        },
                        "description": "Outputs the result of `SHOW VIEW` for the given view.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/warehouse:Warehouse": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import snowflake:index/warehouse:Warehouse example '\"\u003cwarehouse_name\u003e\"'\n```\n\n",
            "properties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "fullyQualifiedName": {
                    "type": "string",
                    "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                },
                "generation": {
                    "type": "string",
                    "description": "Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                    },
                    "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                },
                "resourceConstraint": {
                    "type": "string",
                    "description": "Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "showOutputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                    },
                    "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "required": [
                "fullyQualifiedName",
                "maxConcurrencyLevel",
                "name",
                "parameters",
                "showOutputs",
                "statementQueuedTimeoutInSeconds",
                "statementTimeoutInSeconds"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the warehouse.\n"
                },
                "enableQueryAcceleration": {
                    "type": "string",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                },
                "generation": {
                    "type": "string",
                    "description": "Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.\n"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "maxConcurrencyLevel": {
                    "type": "integer",
                    "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                },
                "queryAccelerationMaxScaleFactor": {
                    "type": "integer",
                    "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                },
                "resourceConstraint": {
                    "type": "string",
                    "description": "Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.\n"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                },
                "statementQueuedTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "warehouseSize": {
                    "type": "string",
                    "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                },
                "warehouseType": {
                    "type": "string",
                    "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Warehouse resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "autoSuspend": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the warehouse.\n"
                    },
                    "enableQueryAcceleration": {
                        "type": "string",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: \"true\" or \"false\". When the value is not set in the configuration the provider will put \"default\" there which means to use the Snowflake default for this value.\n"
                    },
                    "fullyQualifiedName": {
                        "type": "string",
                        "description": "Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).\n"
                    },
                    "generation": {
                        "type": "string",
                        "description": "Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.\n"
                    },
                    "initiallySuspended": {
                        "type": "boolean",
                        "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                    },
                    "maxClusterCount": {
                        "type": "integer",
                        "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                    },
                    "maxConcurrencyLevel": {
                        "type": "integer",
                        "description": "Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.\n"
                    },
                    "minClusterCount": {
                        "type": "integer",
                        "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `\"`.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseParameter:WarehouseParameter"
                        },
                        "description": "Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.\n"
                    },
                    "queryAccelerationMaxScaleFactor": {
                        "type": "integer",
                        "description": "(Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.\n"
                    },
                    "resourceConstraint": {
                        "type": "string",
                        "description": "Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.\n"
                    },
                    "resourceMonitor": {
                        "type": "string",
                        "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.\n"
                    },
                    "scalingPolicy": {
                        "type": "string",
                        "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.\n"
                    },
                    "showOutputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/WarehouseShowOutput:WarehouseShowOutput"
                        },
                        "description": "Outputs the result of `SHOW WAREHOUSES` for the given warehouse.\n"
                    },
                    "statementQueuedTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                    },
                    "warehouseSize": {
                        "type": "string",
                        "description": "Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.\n"
                    },
                    "warehouseType": {
                        "type": "string",
                        "description": "Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:snowflake/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/provider"
                    }
                },
                "type": "pulumi:providers:snowflake/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAccountRoles:getAccountRoles": {
            "description": "Data source used to get details of filtered account roles. Filtering is aligned with the current possibilities for [SHOW ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-roles) query (`like` and `in_class` are all supported). The results of SHOW are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountRoles.\n",
                "properties": {
                    "inClass": {
                        "type": "string",
                        "description": "Filters the SHOW GRANTS output by class name.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountRoles.\n",
                "properties": {
                    "accountRoles": {
                        "description": "Holds the aggregated output of all account role details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getAccountRolesAccountRole:getAccountRolesAccountRole"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "inClass": {
                        "description": "Filters the SHOW GRANTS output by class name.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountRoles",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAccounts:getAccounts": {
            "description": "Data source used to get details of filtered accounts. Filtering is aligned with the current possibilities for [SHOW ACCOUNTS](https://docs.snowflake.com/en/sql-reference/sql/show-accounts) query. The results of SHOW are encapsulated in one output collection `accounts`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccounts.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withHistory": {
                        "type": "boolean",
                        "description": "Includes dropped accounts that have not yet been deleted.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccounts.\n",
                "properties": {
                    "accounts": {
                        "description": "Holds the aggregated output of all accounts details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getAccountsAccount:getAccountsAccount"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "withHistory": {
                        "description": "Includes dropped accounts that have not yet been deleted.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "accounts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getAlerts:getAlerts": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getAlerts({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_alerts(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetAlerts.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetAlerts(ctx, \u0026snowflake.GetAlertsArgs{\n\t\t\tDatabase: pulumi.StringRef(\"MYDB\"),\n\t\t\tSchema:   pulumi.StringRef(\"MYSCHEMA\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetAlertsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getAlerts(GetAlertsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getAlerts\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlerts.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the alerts from.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Filters the command output by object name.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the alerts from.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlerts.\n",
                "properties": {
                    "alerts": {
                        "description": "Lists alerts for the current/specified database or schema, or across the entire account.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getAlertsAlert:getAlertsAlert"
                        },
                        "type": "array"
                    },
                    "database": {
                        "description": "The database from which to return the alerts from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "Filters the command output by object name.\n",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the alerts from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "alerts",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getComputePools:getComputePools": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nData source used to get details of filtered compute pools. Filtering is aligned with the current possibilities for [SHOW COMPUTE POOLS](https://docs.snowflake.com/en/sql-reference/sql/show-compute-pools) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `compute_pools`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getComputePools.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getComputePoolsLimit:getComputePoolsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC COMPUTE POOL for each compute pool returned by SHOW COMPUTE POOLS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputePools.\n",
                "properties": {
                    "computePools": {
                        "description": "Holds the aggregated output of all compute pools details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getComputePoolsComputePool:getComputePoolsComputePool"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getComputePoolsLimit:getComputePoolsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC COMPUTE POOL for each compute pool returned by SHOW COMPUTE POOLS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "computePools",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getConnections:getConnections": {
            "description": "Data source used to get details of filtered connections. Filtering is aligned with the current possibilities for [SHOW CONNECTIONS](https://docs.snowflake.com/en/sql-reference/sql/show-connections) query. The results of SHOW is encapsulated in one output collection `connections`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getConnections.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getConnections.\n",
                "properties": {
                    "connections": {
                        "description": "Holds the aggregated output of all connections details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getConnectionsConnection:getConnectionsConnection"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connections",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCortexSearchServices:getCortexSearchServices": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\n// Simple usage\nconst simple = snowflake.getCortexSearchServices({});\nexport const simpleOutput = simple.then(simple =\u003e simple.cortexSearchServices);\n// Filtering (like)\nconst like = snowflake.getCortexSearchServices({\n    like: \"some-name\",\n});\nexport const likeOutput = like.then(like =\u003e like.cortexSearchServices);\n// Filtering (starts_with)\nconst startsWith = snowflake.getCortexSearchServices({\n    startsWith: \"prefix-\",\n});\nexport const startsWithOutput = startsWith.then(startsWith =\u003e startsWith.cortexSearchServices);\n// Filtering (limit)\nconst limit = snowflake.getCortexSearchServices({\n    limit: {\n        rows: 10,\n        from: \"prefix-\",\n    },\n});\nexport const limitOutput = limit.then(limit =\u003e limit.cortexSearchServices);\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\n# Simple usage\nsimple = snowflake.get_cortex_search_services()\npulumi.export(\"simpleOutput\", simple.cortex_search_services)\n# Filtering (like)\nlike = snowflake.get_cortex_search_services(like=\"some-name\")\npulumi.export(\"likeOutput\", like.cortex_search_services)\n# Filtering (starts_with)\nstarts_with = snowflake.get_cortex_search_services(starts_with=\"prefix-\")\npulumi.export(\"startsWithOutput\", starts_with.cortex_search_services)\n# Filtering (limit)\nlimit = snowflake.get_cortex_search_services(limit={\n    \"rows\": 10,\n    \"from_\": \"prefix-\",\n})\npulumi.export(\"limitOutput\", limit.cortex_search_services)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Simple usage\n    var simple = Snowflake.GetCortexSearchServices.Invoke();\n\n    // Filtering (like)\n    var like = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        Like = \"some-name\",\n    });\n\n    // Filtering (starts_with)\n    var startsWith = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        StartsWith = \"prefix-\",\n    });\n\n    // Filtering (limit)\n    var limit = Snowflake.GetCortexSearchServices.Invoke(new()\n    {\n        Limit = new Snowflake.Inputs.GetCortexSearchServicesLimitInputArgs\n        {\n            Rows = 10,\n            From = \"prefix-\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"simpleOutput\"] = simple.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"likeOutput\"] = like.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"startsWithOutput\"] = startsWith.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n        [\"limitOutput\"] = limit.Apply(getCortexSearchServicesResult =\u003e getCortexSearchServicesResult.CortexSearchServices),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Simple usage\n\t\tsimple, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"simpleOutput\", simple.CortexSearchServices)\n\t\t// Filtering (like)\n\t\tlike, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tLike: pulumi.StringRef(\"some-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"likeOutput\", like.CortexSearchServices)\n\t\t// Filtering (starts_with)\n\t\tstartsWith, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tStartsWith: pulumi.StringRef(\"prefix-\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"startsWithOutput\", startsWith.CortexSearchServices)\n\t\t// Filtering (limit)\n\t\tlimit, err := snowflake.GetCortexSearchServices(ctx, \u0026snowflake.GetCortexSearchServicesArgs{\n\t\t\tLimit: snowflake.GetCortexSearchServicesLimit{\n\t\t\t\tRows: 10,\n\t\t\t\tFrom: pulumi.StringRef(\"prefix-\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"limitOutput\", limit.CortexSearchServices)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetCortexSearchServicesArgs;\nimport com.pulumi.snowflake.inputs.GetCortexSearchServicesLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Simple usage\n        final var simple = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .build());\n\n        ctx.export(\"simpleOutput\", simple.cortexSearchServices());\n        // Filtering (like)\n        final var like = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .like(\"some-name\")\n            .build());\n\n        ctx.export(\"likeOutput\", like.cortexSearchServices());\n        // Filtering (starts_with)\n        final var startsWith = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .startsWith(\"prefix-\")\n            .build());\n\n        ctx.export(\"startsWithOutput\", startsWith.cortexSearchServices());\n        // Filtering (limit)\n        final var limit = SnowflakeFunctions.getCortexSearchServices(GetCortexSearchServicesArgs.builder()\n            .limit(GetCortexSearchServicesLimitArgs.builder()\n                .rows(10)\n                .from(\"prefix-\")\n                .build())\n            .build());\n\n        ctx.export(\"limitOutput\", limit.cortexSearchServices());\n    }\n}\n```\n```yaml\nvariables:\n  # Simple usage\n  simple:\n    fn::invoke:\n      function: snowflake:getCortexSearchServices\n      arguments: {}\n  # Filtering (like)\n  like:\n    fn::invoke:\n      function: snowflake:getCortexSearchServices\n      arguments:\n        like: some-name\n  # Filtering (starts_with)\n  startsWith:\n    fn::invoke:\n      function: snowflake:getCortexSearchServices\n      arguments:\n        startsWith: prefix-\n  # Filtering (limit)\n  limit:\n    fn::invoke:\n      function: snowflake:getCortexSearchServices\n      arguments:\n        limit:\n          rows: 10\n          from: prefix-\noutputs:\n  simpleOutput: ${simple.cortexSearchServices}\n  likeOutput: ${like.cortexSearchServices}\n  startsWithOutput: ${startsWith.cortexSearchServices}\n  limitOutput: ${limit.cortexSearchServices}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCortexSearchServices.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn",
                        "description": "IN clause to filter the list of cortex search services.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCortexSearchServices.\n",
                "properties": {
                    "cortexSearchServices": {
                        "description": "Holds the output of SHOW CORTEX SEARCH SERVICES.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getCortexSearchServicesCortexSearchService:getCortexSearchServicesCortexSearchService"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesIn:getCortexSearchServicesIn",
                        "description": "IN clause to filter the list of cortex search services.\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getCortexSearchServicesLimit:getCortexSearchServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "cortexSearchServices",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentAccount:getCurrentAccount": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst _this = snowflake.getCurrentAccount({});\nconst snowflakeAccountUrl = new aws.index.SsmParameter(\"snowflake_account_url\", {\n    name: \"/snowflake/account_url\",\n    type: \"String\",\n    value: _this.url,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_current_account()\nsnowflake_account_url = aws.index.SsmParameter(\"snowflake_account_url\",\n    name=/snowflake/account_url,\n    type=String,\n    value=this.url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetCurrentAccount.Invoke();\n\n    var snowflakeAccountUrl = new Aws.Index.SsmParameter(\"snowflake_account_url\", new()\n    {\n        Name = \"/snowflake/account_url\",\n        Type = \"String\",\n        Value = @this.Apply(getCurrentAccountResult =\u003e getCurrentAccountResult.Url),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws\"\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := snowflake.LookupCurrentAccount(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewSsmParameter(ctx, \"snowflake_account_url\", \u0026aws.SsmParameterArgs{\n\t\t\tName:  \"/snowflake/account_url\",\n\t\t\tType:  \"String\",\n\t\t\tValue: this.Url,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.aws.ssmParameter;\nimport com.pulumi.aws.ssmParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getCurrentAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n        var snowflakeAccountUrl = new SsmParameter(\"snowflakeAccountUrl\", SsmParameterArgs.builder()\n            .name(\"/snowflake/account_url\")\n            .type(\"String\")\n            .value(this_.url())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  snowflakeAccountUrl:\n    type: aws:ssmParameter\n    name: snowflake_account_url\n    properties:\n      name: /snowflake/account_url\n      type: String\n      value: ${this.url}\nvariables:\n  this:\n    fn::invoke:\n      function: snowflake:getCurrentAccount\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "account": {
                        "description": "The Snowflake Account ID; as returned by CURRENT_ACCOUNT().\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "region": {
                        "description": "The Snowflake Region; as returned by CURRENT_REGION()\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "The Snowflake URL.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "account",
                    "region",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getCurrentRole:getCurrentRole": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentRole.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the [primary role](https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#label-access-control-role-enforcement) in use for the current session.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabase:getDatabase": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst _this = snowflake.getDatabase({\n    name: \"DEMO_DB\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_database(name=\"DEMO_DB\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetDatabase.Invoke(new()\n    {\n        Name = \"DEMO_DB\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.LookupDatabase(ctx, \u0026snowflake.LookupDatabaseArgs{\n\t\t\tName: \"DEMO_DB\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getDatabase(GetDatabaseArgs.builder()\n            .name(\"DEMO_DB\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      function: snowflake:getDatabase\n      arguments:\n        name: DEMO_DB\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The database from which to return its metadata.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "isCurrent": {
                        "type": "boolean"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The database from which to return its metadata.\n",
                        "type": "string"
                    },
                    "options": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "retentionTime": {
                        "type": "integer"
                    }
                },
                "required": [
                    "comment",
                    "createdOn",
                    "isCurrent",
                    "isDefault",
                    "name",
                    "options",
                    "origin",
                    "owner",
                    "retentionTime",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRole:getDatabaseRole": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst dbRole = snowflake.getDatabaseRole({\n    database: \"MYDB\",\n    name: \"DBROLE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ndb_role = snowflake.get_database_role(database=\"MYDB\",\n    name=\"DBROLE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbRole = Snowflake.GetDatabaseRole.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Name = \"DBROLE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.LookupDatabaseRole(ctx, \u0026snowflake.LookupDatabaseRoleArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tName:     \"DBROLE\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetDatabaseRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dbRole = SnowflakeFunctions.getDatabaseRole(GetDatabaseRoleArgs.builder()\n            .database(\"MYDB\")\n            .name(\"DBROLE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dbRole:\n    fn::invoke:\n      function: snowflake:getDatabaseRole\n      arguments:\n        database: MYDB\n        name: DBROLE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRole.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the database role from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database role name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRole.\n",
                "properties": {
                    "comment": {
                        "description": "The comment on the role\n",
                        "type": "string"
                    },
                    "database": {
                        "description": "The database from which to return the database role from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Database role name.\n",
                        "type": "string"
                    },
                    "owner": {
                        "description": "The owner of the role\n",
                        "type": "string"
                    }
                },
                "required": [
                    "comment",
                    "database",
                    "name",
                    "owner",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabaseRoles:getDatabaseRoles": {
            "description": "Data source used to get details of filtered database roles. Filtering is aligned with the current possibilities for [SHOW DATABASE ROLES](https://docs.snowflake.com/en/sql-reference/sql/show-database-roles) query (`like` and `limit` are supported). The results of SHOW is encapsulated in show_output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseRoles.\n",
                "properties": {
                    "inDatabase": {
                        "type": "string",
                        "description": "The database from which to return the database roles from.\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "inDatabase"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseRoles.\n",
                "properties": {
                    "databaseRoles": {
                        "description": "Holds the aggregated output of all database role details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabaseRolesDatabaseRole:getDatabaseRolesDatabaseRole"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "inDatabase": {
                        "description": "The database from which to return the database roles from.\n",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabaseRolesLimit:getDatabaseRolesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    }
                },
                "required": [
                    "databaseRoles",
                    "inDatabase",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDatabases:getDatabases": {
            "description": "Data source used to get details of filtered databases. Filtering is aligned with the current possibilities for [SHOW DATABASES](https://docs.snowflake.com/en/sql-reference/sql/show-databases) query (`like`, `starts_with`, and `limit` are all supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "description": "Holds the aggregated output of all database details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDatabasesDatabase:getDatabasesDatabase"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDatabasesLimit:getDatabasesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR DATABASE for each database returned by SHOW DATABASES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "databases",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getDynamicTables:getDynamicTables": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDynamicTables.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn",
                        "description": "IN clause to filter the list of dynamic tables.\n"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike",
                        "description": "LIKE clause to filter the list of dynamic tables.\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit",
                        "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDynamicTables.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesIn:getDynamicTablesIn",
                        "description": "IN clause to filter the list of dynamic tables.\n"
                    },
                    "like": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLike:getDynamicTablesLike",
                        "description": "LIKE clause to filter the list of dynamic tables.\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getDynamicTablesLimit:getDynamicTablesLimit",
                        "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. Note that the actual number of rows returned might be less than the specified limit (e.g. the number of existing objects is less than the specified limit).\n"
                    },
                    "records": {
                        "description": "The list of dynamic tables.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getDynamicTablesRecord:getDynamicTablesRecord"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "description": "Optionally filters the command output based on the characters that appear at the beginning of the object name. The string is case-sensitive.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "records",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalFunctions:getExternalFunctions": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getExternalFunctions({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_external_functions(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetExternalFunctions.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetExternalFunctions(ctx, \u0026snowflake.GetExternalFunctionsArgs{\n\t\t\tDatabase: pulumi.StringRef(\"MYDB\"),\n\t\t\tSchema:   pulumi.StringRef(\"MYSCHEMA\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetExternalFunctionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getExternalFunctions(GetExternalFunctionsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getExternalFunctions\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the external functions from.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getExternalFunctions.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "externalFunctions": {
                        "description": "The external functions in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalFunctionsExternalFunction:getExternalFunctionsExternalFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the external functions from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "externalFunctions",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getExternalTables:getExternalTables": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getExternalTables({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_external_tables(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetExternalTables.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetExternalTables(ctx, \u0026snowflake.GetExternalTablesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetExternalTablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getExternalTables(GetExternalTablesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getExternalTables\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getExternalTables.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the external tables from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExternalTables.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "externalTables": {
                        "description": "The external tables in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getExternalTablesExternalTable:getExternalTablesExternalTable"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the external tables from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "externalTables",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFailoverGroups:getFailoverGroups": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFailoverGroups.\n",
                "properties": {
                    "inAccount": {
                        "type": "string",
                        "description": "Specifies the identifier for the account\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFailoverGroups.\n",
                "properties": {
                    "failoverGroups": {
                        "description": "List of all the failover groups available in the system.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFailoverGroupsFailoverGroup:getFailoverGroupsFailoverGroup"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "inAccount": {
                        "description": "Specifies the identifier for the account\n",
                        "type": "string"
                    }
                },
                "required": [
                    "failoverGroups",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFileFormats:getFileFormats": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getFileFormats({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_file_formats(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetFileFormats.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetFileFormats(ctx, \u0026snowflake.GetFileFormatsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetFileFormatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getFileFormats(GetFileFormatsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getFileFormats\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFileFormats.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the file formats from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFileFormats.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "fileFormats": {
                        "description": "The file formats in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFileFormatsFileFormat:getFileFormatsFileFormat"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the file formats from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "fileFormats",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getFunctions:getFunctions": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getFunctions({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_functions(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetFunctions.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetFunctions(ctx, \u0026snowflake.GetFunctionsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetFunctionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getFunctions(GetFunctionsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getFunctions\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctions.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the functions from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctions.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "functions": {
                        "description": "The functions in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getFunctionsFunction:getFunctionsFunction"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the functions from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "functions",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getGitRepositories:getGitRepositories": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nData source used to get details of filtered git repositories. Filtering is aligned with the current possibilities for [SHOW GIT REPOSITORIES](https://docs.snowflake.com/en/sql-reference/sql/show-git-repositories) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `git_repositories`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitRepositories.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesIn:getGitRepositoriesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesLimit:getGitRepositoriesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC GIT REPOSITORY for each git repository returned by SHOW GIT REPOSITORIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitRepositories.\n",
                "properties": {
                    "gitRepositories": {
                        "description": "Holds the aggregated output of all git repositories details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getGitRepositoriesGitRepository:getGitRepositoriesGitRepository"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesIn:getGitRepositoriesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getGitRepositoriesLimit:getGitRepositoriesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC GIT REPOSITORY for each git repository returned by SHOW GIT REPOSITORIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "gitRepositories",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getGrants:getGrants": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\n//#################################\n//## SHOW GRANTS ON ...\n//#################################\n// account\nconst exampleOnAccount = snowflake.getGrants({\n    grantsOn: {\n        account: true,\n    },\n});\n// account object (e.g. database)\nconst exampleOnAccountObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"some_database\",\n        objectType: \"DATABASE\",\n    },\n});\n// database object (e.g. schema)\nconst exampleOnDatabaseObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"\\\"some_database\\\".\\\"some_schema\\\"\",\n        objectType: \"SCHEMA\",\n    },\n});\n// schema object (e.g. table)\nconst exampleOnSchemaObject = snowflake.getGrants({\n    grantsOn: {\n        objectName: \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n        objectType: \"TABLE\",\n    },\n});\n// application\nconst exampleToApplication = snowflake.getGrants({\n    grantsTo: {\n        application: \"some_application\",\n    },\n});\n// application role\nconst exampleToApplicationRole = snowflake.getGrants({\n    grantsTo: {\n        applicationRole: \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n    },\n});\n// account role\nconst exampleToRole = snowflake.getGrants({\n    grantsTo: {\n        accountRole: \"some_role\",\n    },\n});\n// database role\nconst exampleToDatabaseRole = snowflake.getGrants({\n    grantsTo: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n// share\nconst exampleToShare = snowflake.getGrants({\n    grantsTo: {\n        share: {\n            shareName: \"some_share\",\n        },\n    },\n});\n// user\nconst exampleToUser = snowflake.getGrants({\n    grantsTo: {\n        user: \"some_user\",\n    },\n});\n// application role\nconst exampleOfApplicationRole = snowflake.getGrants({\n    grantsOf: {\n        applicationRole: \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n    },\n});\n// database role\nconst exampleOfDatabaseRole = snowflake.getGrants({\n    grantsOf: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n// account role\nconst exampleOfRole = snowflake.getGrants({\n    grantsOf: {\n        accountRole: \"some_role\",\n    },\n});\n// share\nconst exampleOfShare = snowflake.getGrants({\n    grantsOf: {\n        share: \"some_share\",\n    },\n});\n// database\nconst exampleFutureInDatabase = snowflake.getGrants({\n    futureGrantsIn: {\n        database: \"some_database\",\n    },\n});\n// schema\nconst exampleFutureInSchema = snowflake.getGrants({\n    futureGrantsIn: {\n        schema: \"\\\"some_database\\\".\\\"some_schema\\\"\",\n    },\n});\n// account role\nconst exampleFutureToRole = snowflake.getGrants({\n    futureGrantsTo: {\n        accountRole: \"some_role\",\n    },\n});\n// database role\nconst exampleFutureToDatabaseRole = snowflake.getGrants({\n    futureGrantsTo: {\n        databaseRole: \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\n##################################\n### SHOW GRANTS ON ...\n##################################\n# account\nexample_on_account = snowflake.get_grants(grants_on={\n    \"account\": True,\n})\n# account object (e.g. database)\nexample_on_account_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"some_database\",\n    \"object_type\": \"DATABASE\",\n})\n# database object (e.g. schema)\nexample_on_database_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"\\\"some_database\\\".\\\"some_schema\\\"\",\n    \"object_type\": \"SCHEMA\",\n})\n# schema object (e.g. table)\nexample_on_schema_object = snowflake.get_grants(grants_on={\n    \"object_name\": \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n    \"object_type\": \"TABLE\",\n})\n# application\nexample_to_application = snowflake.get_grants(grants_to={\n    \"application\": \"some_application\",\n})\n# application role\nexample_to_application_role = snowflake.get_grants(grants_to={\n    \"application_role\": \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n})\n# account role\nexample_to_role = snowflake.get_grants(grants_to={\n    \"account_role\": \"some_role\",\n})\n# database role\nexample_to_database_role = snowflake.get_grants(grants_to={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n# share\nexample_to_share = snowflake.get_grants(grants_to={\n    \"share\": {\n        \"share_name\": \"some_share\",\n    },\n})\n# user\nexample_to_user = snowflake.get_grants(grants_to={\n    \"user\": \"some_user\",\n})\n# application role\nexample_of_application_role = snowflake.get_grants(grants_of={\n    \"application_role\": \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n})\n# database role\nexample_of_database_role = snowflake.get_grants(grants_of={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n# account role\nexample_of_role = snowflake.get_grants(grants_of={\n    \"account_role\": \"some_role\",\n})\n# share\nexample_of_share = snowflake.get_grants(grants_of={\n    \"share\": \"some_share\",\n})\n# database\nexample_future_in_database = snowflake.get_grants(future_grants_in={\n    \"database\": \"some_database\",\n})\n# schema\nexample_future_in_schema = snowflake.get_grants(future_grants_in={\n    \"schema\": \"\\\"some_database\\\".\\\"some_schema\\\"\",\n})\n# account role\nexample_future_to_role = snowflake.get_grants(future_grants_to={\n    \"account_role\": \"some_role\",\n})\n# database role\nexample_future_to_database_role = snowflake.get_grants(future_grants_to={\n    \"database_role\": \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //#################################\n    //## SHOW GRANTS ON ...\n    //#################################\n    // account\n    var exampleOnAccount = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            Account = true,\n        },\n    });\n\n    // account object (e.g. database)\n    var exampleOnAccountObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"some_database\",\n            ObjectType = \"DATABASE\",\n        },\n    });\n\n    // database object (e.g. schema)\n    var exampleOnDatabaseObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"\\\"some_database\\\".\\\"some_schema\\\"\",\n            ObjectType = \"SCHEMA\",\n        },\n    });\n\n    // schema object (e.g. table)\n    var exampleOnSchemaObject = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOn = new Snowflake.Inputs.GetGrantsGrantsOnInputArgs\n        {\n            ObjectName = \"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\",\n            ObjectType = \"TABLE\",\n        },\n    });\n\n    // application\n    var exampleToApplication = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            Application = \"some_application\",\n        },\n    });\n\n    // application role\n    var exampleToApplicationRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            ApplicationRole = \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n        },\n    });\n\n    // account role\n    var exampleToRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // database role\n    var exampleToDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n    // share\n    var exampleToShare = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            Share = new Snowflake.Inputs.GetGrantsGrantsToShareInputArgs\n            {\n                ShareName = \"some_share\",\n            },\n        },\n    });\n\n    // user\n    var exampleToUser = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsTo = new Snowflake.Inputs.GetGrantsGrantsToInputArgs\n        {\n            User = \"some_user\",\n        },\n    });\n\n    // application role\n    var exampleOfApplicationRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            ApplicationRole = \"\\\"some_application\\\".\\\"some_application_role\\\"\",\n        },\n    });\n\n    // database role\n    var exampleOfDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n    // account role\n    var exampleOfRole = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // share\n    var exampleOfShare = Snowflake.GetGrants.Invoke(new()\n    {\n        GrantsOf = new Snowflake.Inputs.GetGrantsGrantsOfInputArgs\n        {\n            Share = \"some_share\",\n        },\n    });\n\n    // database\n    var exampleFutureInDatabase = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsIn = new Snowflake.Inputs.GetGrantsFutureGrantsInInputArgs\n        {\n            Database = \"some_database\",\n        },\n    });\n\n    // schema\n    var exampleFutureInSchema = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsIn = new Snowflake.Inputs.GetGrantsFutureGrantsInInputArgs\n        {\n            Schema = \"\\\"some_database\\\".\\\"some_schema\\\"\",\n        },\n    });\n\n    // account role\n    var exampleFutureToRole = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsTo = new Snowflake.Inputs.GetGrantsFutureGrantsToInputArgs\n        {\n            AccountRole = \"some_role\",\n        },\n    });\n\n    // database role\n    var exampleFutureToDatabaseRole = Snowflake.GetGrants.Invoke(new()\n    {\n        FutureGrantsTo = new Snowflake.Inputs.GetGrantsFutureGrantsToInputArgs\n        {\n            DatabaseRole = \"\\\"some_database\\\".\\\"some_database_role\\\"\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// #################################\n\t\t// ## SHOW GRANTS ON ...\n\t\t// #################################\n\t\t// account\n\t\t_, err := snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tAccount: pulumi.BoolRef(true),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account object (e.g. database)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"some_database\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"DATABASE\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database object (e.g. schema)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\"\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"SCHEMA\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// schema object (e.g. table)\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOn: snowflake.GetGrantsGrantsOn{\n\t\t\t\tObjectName: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\"),\n\t\t\t\tObjectType: pulumi.StringRef(\"TABLE\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tApplication: pulumi.StringRef(\"some_application\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tApplicationRole: pulumi.StringRef(\"\\\"some_application\\\".\\\"some_application_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// share\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tShare: snowflake.GetGrantsGrantsToShare{\n\t\t\t\t\tShareName: \"some_share\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// user\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsTo: snowflake.GetGrantsGrantsTo{\n\t\t\t\tUser: pulumi.StringRef(\"some_user\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// application role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tApplicationRole: pulumi.StringRef(\"\\\"some_application\\\".\\\"some_application_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// share\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tGrantsOf: snowflake.GetGrantsGrantsOf{\n\t\t\t\tShare: pulumi.StringRef(\"some_share\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsIn: snowflake.GetGrantsFutureGrantsIn{\n\t\t\t\tDatabase: pulumi.StringRef(\"some_database\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// schema\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsIn: snowflake.GetGrantsFutureGrantsIn{\n\t\t\t\tSchema: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_schema\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// account role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsTo: snowflake.GetGrantsFutureGrantsTo{\n\t\t\t\tAccountRole: pulumi.StringRef(\"some_role\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// database role\n\t\t_, err = snowflake.GetGrants(ctx, \u0026snowflake.GetGrantsArgs{\n\t\t\tFutureGrantsTo: snowflake.GetGrantsFutureGrantsTo{\n\t\t\t\tDatabaseRole: pulumi.StringRef(\"\\\"some_database\\\".\\\"some_database_role\\\"\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetGrantsArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsOnArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsToArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsToShareArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsGrantsOfArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsFutureGrantsInArgs;\nimport com.pulumi.snowflake.inputs.GetGrantsFutureGrantsToArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //#################################\n        //## SHOW GRANTS ON ...\n        //#################################\n        // account\n        final var exampleOnAccount = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .account(true)\n                .build())\n            .build());\n\n        // account object (e.g. database)\n        final var exampleOnAccountObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"some_database\")\n                .objectType(\"DATABASE\")\n                .build())\n            .build());\n\n        // database object (e.g. schema)\n        final var exampleOnDatabaseObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"\\\"some_database\\\".\\\"some_schema\\\"\")\n                .objectType(\"SCHEMA\")\n                .build())\n            .build());\n\n        // schema object (e.g. table)\n        final var exampleOnSchemaObject = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOn(GetGrantsGrantsOnArgs.builder()\n                .objectName(\"\\\"some_database\\\".\\\"some_schema\\\".\\\"some_table\\\"\")\n                .objectType(\"TABLE\")\n                .build())\n            .build());\n\n        // application\n        final var exampleToApplication = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .application(\"some_application\")\n                .build())\n            .build());\n\n        // application role\n        final var exampleToApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .applicationRole(\"\\\"some_application\\\".\\\"some_application_role\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n        // share\n        final var exampleToShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .share(GetGrantsGrantsToShareArgs.builder()\n                    .shareName(\"some_share\")\n                    .build())\n                .build())\n            .build());\n\n        // user\n        final var exampleToUser = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsTo(GetGrantsGrantsToArgs.builder()\n                .user(\"some_user\")\n                .build())\n            .build());\n\n        // application role\n        final var exampleOfApplicationRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .applicationRole(\"\\\"some_application\\\".\\\"some_application_role\\\"\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleOfDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleOfRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // share\n        final var exampleOfShare = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .grantsOf(GetGrantsGrantsOfArgs.builder()\n                .share(\"some_share\")\n                .build())\n            .build());\n\n        // database\n        final var exampleFutureInDatabase = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()\n                .database(\"some_database\")\n                .build())\n            .build());\n\n        // schema\n        final var exampleFutureInSchema = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsIn(GetGrantsFutureGrantsInArgs.builder()\n                .schema(\"\\\"some_database\\\".\\\"some_schema\\\"\")\n                .build())\n            .build());\n\n        // account role\n        final var exampleFutureToRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()\n                .accountRole(\"some_role\")\n                .build())\n            .build());\n\n        // database role\n        final var exampleFutureToDatabaseRole = SnowflakeFunctions.getGrants(GetGrantsArgs.builder()\n            .futureGrantsTo(GetGrantsFutureGrantsToArgs.builder()\n                .databaseRole(\"\\\"some_database\\\".\\\"some_database_role\\\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ##################################\n  ### SHOW GRANTS ON ...\n  ##################################\n\n  # account\n  exampleOnAccount:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOn:\n          account: true\n  # account object (e.g. database)\n  exampleOnAccountObject:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOn:\n          objectName: some_database\n          objectType: DATABASE\n  # database object (e.g. schema)\n  exampleOnDatabaseObject:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOn:\n          objectName: '\"some_database\".\"some_schema\"'\n          objectType: SCHEMA\n  # schema object (e.g. table)\n  exampleOnSchemaObject: ##################################\n  ### SHOW GRANTS TO ...\n  ##################################\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOn:\n          objectName: '\"some_database\".\"some_schema\".\"some_table\"'\n          objectType: TABLE\n  # application\n  exampleToApplication:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          application: some_application\n  # application role\n  exampleToApplicationRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          applicationRole: '\"some_application\".\"some_application_role\"'\n  # account role\n  exampleToRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          accountRole: some_role\n  # database role\n  exampleToDatabaseRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n  # share\n  exampleToShare:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          share:\n            shareName: some_share\n  # user\n  exampleToUser: ##################################\n  ### SHOW GRANTS OF ...\n  ##################################\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsTo:\n          user: some_user\n  # application role\n  exampleOfApplicationRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOf:\n          applicationRole: '\"some_application\".\"some_application_role\"'\n  # database role\n  exampleOfDatabaseRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOf:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n  # account role\n  exampleOfRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOf:\n          accountRole: some_role\n  # share\n  exampleOfShare: ##################################\n  ### SHOW FUTURE GRANTS IN ...\n  ##################################\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        grantsOf:\n          share: some_share\n  # database\n  exampleFutureInDatabase:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        futureGrantsIn:\n          database: some_database\n  # schema\n  exampleFutureInSchema: ##################################\n  ### SHOW FUTURE GRANTS TO ...\n  ##################################\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        futureGrantsIn:\n          schema: '\"some_database\".\"some_schema\"'\n  # account role\n  exampleFutureToRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        futureGrantsTo:\n          accountRole: some_role\n  # database role\n  exampleFutureToDatabaseRole:\n    fn::invoke:\n      function: snowflake:getGrants\n      arguments:\n        futureGrantsTo:\n          databaseRole: '\"some_database\".\"some_database_role\"'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn",
                        "description": "Lists all privileges on new (i.e. future) objects.\n"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo",
                        "description": "Lists all privileges granted to the object on new (i.e. future) objects.\n"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf",
                        "description": "Lists all objects to which the given object has been granted.\n"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn",
                        "description": "Lists all privileges that have been granted on an object or on an account.\n"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo",
                        "description": "Lists all privileges granted to the object.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGrants.\n",
                "properties": {
                    "futureGrantsIn": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsIn:getGrantsFutureGrantsIn",
                        "description": "Lists all privileges on new (i.e. future) objects.\n"
                    },
                    "futureGrantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsFutureGrantsTo:getGrantsFutureGrantsTo",
                        "description": "Lists all privileges granted to the object on new (i.e. future) objects.\n"
                    },
                    "grants": {
                        "description": "The list of grants\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getGrantsGrant:getGrantsGrant"
                        },
                        "type": "array"
                    },
                    "grantsOf": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOf:getGrantsGrantsOf",
                        "description": "Lists all objects to which the given object has been granted.\n"
                    },
                    "grantsOn": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsOn:getGrantsGrantsOn",
                        "description": "Lists all privileges that have been granted on an object or on an account.\n"
                    },
                    "grantsTo": {
                        "$ref": "#/types/snowflake:index/getGrantsGrantsTo:getGrantsGrantsTo",
                        "description": "Lists all privileges granted to the object.\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    }
                },
                "required": [
                    "grants",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getImageRepositories:getImageRepositories": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nData source used to get details of filtered image repositories. Filtering is aligned with the current possibilities for [SHOW IMAGE REPOSITORIES](https://docs.snowflake.com/en/sql-reference/sql/show-image-repositories) query. The results of SHOW are encapsulated in one output collection `image_repositories`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImageRepositories.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getImageRepositoriesIn:getImageRepositoriesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImageRepositories.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "imageRepositories": {
                        "description": "Holds the aggregated output of all image repositories details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getImageRepositoriesImageRepository:getImageRepositoriesImageRepository"
                        },
                        "type": "array"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getImageRepositoriesIn:getImageRepositoriesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "imageRepositories",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaskingPolicies:getMaskingPolicies": {
            "description": "!\u003e **Sensitive values** This data source's `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).\n\nData source used to get details of filtered masking policies. Filtering is aligned with the current possibilities for [SHOW MASKING POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `masking_policies`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMaskingPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn",
                        "description": "IN clause to filter the list of masking policies\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC MASKING POLICY for each masking policy returned by SHOW MASKING POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMaskingPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesIn:getMaskingPoliciesIn",
                        "description": "IN clause to filter the list of masking policies\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getMaskingPoliciesLimit:getMaskingPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "maskingPolicies": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaskingPoliciesMaskingPolicy:getMaskingPoliciesMaskingPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC MASKING POLICY for each masking policy returned by SHOW MASKING POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "maskingPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getMaterializedViews:getMaterializedViews": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getMaterializedViews({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_materialized_views(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetMaterializedViews.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetMaterializedViews(ctx, \u0026snowflake.GetMaterializedViewsArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetMaterializedViewsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getMaterializedViews(GetMaterializedViewsArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getMaterializedViews\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the views from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMaterializedViews.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "materializedViews": {
                        "description": "The views in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getMaterializedViewsMaterializedView:getMaterializedViewsMaterializedView"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the views from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "materializedViews",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getNetworkPolicies:getNetworkPolicies": {
            "description": "Data source used to get details of filtered network policies. Filtering is aligned with the current possibilities for [SHOW NETWORK POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-network-policies) query (`like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkPolicies.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC NETWORK POLICY for each network policy returned by SHOW NETWORK POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "networkPolicies": {
                        "description": "Holds the aggregated output of all network policies details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getNetworkPoliciesNetworkPolicy:getNetworkPoliciesNetworkPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC NETWORK POLICY for each network policy returned by SHOW NETWORK POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "networkPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getParameters:getParameters": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst d = new snowflake.Database(\"d\", {name: \"TEST_DB\"});\n// read all object parameters in database TEST_DB\nconst p = snowflake.getParametersOutput({\n    parameterType: \"OBJECT\",\n    objectType: \"DATABASE\",\n    objectName: d.name,\n});\n// read all account parameters with the pattern '%TIMESTAMP%'\nconst p2 = snowflake.getParameters({\n    parameterType: \"ACCOUNT\",\n    pattern: \"%TIMESTAMP%\",\n});\n// read the exact session parameter ROWS_PER_RESULTSET\nconst p3 = snowflake.getParameters({\n    parameterType: \"SESSION\",\n    pattern: \"ROWS_PER_RESULTSET\",\n    user: \"TEST_USER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nd = snowflake.Database(\"d\", name=\"TEST_DB\")\n# read all object parameters in database TEST_DB\np = snowflake.get_parameters_output(parameter_type=\"OBJECT\",\n    object_type=\"DATABASE\",\n    object_name=d.name)\n# read all account parameters with the pattern '%TIMESTAMP%'\np2 = snowflake.get_parameters(parameter_type=\"ACCOUNT\",\n    pattern=\"%TIMESTAMP%\")\n# read the exact session parameter ROWS_PER_RESULTSET\np3 = snowflake.get_parameters(parameter_type=\"SESSION\",\n    pattern=\"ROWS_PER_RESULTSET\",\n    user=\"TEST_USER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var d = new Snowflake.Database(\"d\", new()\n    {\n        Name = \"TEST_DB\",\n    });\n\n    // read all object parameters in database TEST_DB\n    var p = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"OBJECT\",\n        ObjectType = \"DATABASE\",\n        ObjectName = d.Name,\n    });\n\n    // read all account parameters with the pattern '%TIMESTAMP%'\n    var p2 = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"ACCOUNT\",\n        Pattern = \"%TIMESTAMP%\",\n    });\n\n    // read the exact session parameter ROWS_PER_RESULTSET\n    var p3 = Snowflake.GetParameters.Invoke(new()\n    {\n        ParameterType = \"SESSION\",\n        Pattern = \"ROWS_PER_RESULTSET\",\n        User = \"TEST_USER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\td, err := snowflake.NewDatabase(ctx, \"d\", \u0026snowflake.DatabaseArgs{\n\t\t\tName: pulumi.String(\"TEST_DB\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// read all object parameters in database TEST_DB\n\t\t_ = snowflake.GetParametersOutput(ctx, snowflake.GetParametersOutputArgs{\n\t\t\tParameterType: pulumi.String(\"OBJECT\"),\n\t\t\tObjectType:    pulumi.String(\"DATABASE\"),\n\t\t\tObjectName:    d.Name,\n\t\t}, nil)\n\t\t// read all account parameters with the pattern '%TIMESTAMP%'\n\t\t_, err = snowflake.GetParameters(ctx, \u0026snowflake.GetParametersArgs{\n\t\t\tParameterType: pulumi.StringRef(\"ACCOUNT\"),\n\t\t\tPattern:       pulumi.StringRef(\"%TIMESTAMP%\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// read the exact session parameter ROWS_PER_RESULTSET\n\t\t_, err = snowflake.GetParameters(ctx, \u0026snowflake.GetParametersArgs{\n\t\t\tParameterType: pulumi.StringRef(\"SESSION\"),\n\t\t\tPattern:       pulumi.StringRef(\"ROWS_PER_RESULTSET\"),\n\t\t\tUser:          pulumi.StringRef(\"TEST_USER\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.Database;\nimport com.pulumi.snowflake.DatabaseArgs;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetParametersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var d = new Database(\"d\", DatabaseArgs.builder()\n            .name(\"TEST_DB\")\n            .build());\n\n        // read all object parameters in database TEST_DB\n        final var p = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"OBJECT\")\n            .objectType(\"DATABASE\")\n            .objectName(d.name())\n            .build());\n\n        // read all account parameters with the pattern '%TIMESTAMP%'\n        final var p2 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"ACCOUNT\")\n            .pattern(\"%TIMESTAMP%\")\n            .build());\n\n        // read the exact session parameter ROWS_PER_RESULTSET\n        final var p3 = SnowflakeFunctions.getParameters(GetParametersArgs.builder()\n            .parameterType(\"SESSION\")\n            .pattern(\"ROWS_PER_RESULTSET\")\n            .user(\"TEST_USER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  d:\n    type: snowflake:Database\n    properties:\n      name: TEST_DB\nvariables:\n  # read all object parameters in database TEST_DB\n  p:\n    fn::invoke:\n      function: snowflake:getParameters\n      arguments:\n        parameterType: OBJECT\n        objectType: DATABASE\n        objectName: ${d.name}\n  # read all account parameters with the pattern '%TIMESTAMP%'\n  p2:\n    fn::invoke:\n      function: snowflake:getParameters\n      arguments:\n        parameterType: ACCOUNT\n        pattern: '%TIMESTAMP%'\n  # read the exact session parameter ROWS_PER_RESULTSET\n  p3:\n    fn::invoke:\n      function: snowflake:getParameters\n      arguments:\n        parameterType: SESSION\n        pattern: ROWS_PER_RESULTSET\n        user: TEST_USER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getParameters.\n",
                "properties": {
                    "objectName": {
                        "type": "string",
                        "description": "If parameter*type is set to \"OBJECT\" then object*name is the name of the object to display object parameters for.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "If parameter*type is set to \"OBJECT\" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE\n"
                    },
                    "parameterType": {
                        "type": "string",
                        "description": "(Default: `ACCOUNT`) The type of parameter to filter by. Valid values are: \"ACCOUNT\", \"SESSION\", \"OBJECT\".\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "If parameter_type is set to \"SESSION\" then user is the name of the user to display session parameters for.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getParameters.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "objectName": {
                        "description": "If parameter*type is set to \"OBJECT\" then object*name is the name of the object to display object parameters for.\n",
                        "type": "string"
                    },
                    "objectType": {
                        "description": "If parameter*type is set to \"OBJECT\" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE\n",
                        "type": "string"
                    },
                    "parameterType": {
                        "description": "(Default: `ACCOUNT`) The type of parameter to filter by. Valid values are: \"ACCOUNT\", \"SESSION\", \"OBJECT\".\n",
                        "type": "string"
                    },
                    "parameters": {
                        "description": "The pipes in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getParametersParameter:getParametersParameter"
                        },
                        "type": "array"
                    },
                    "pattern": {
                        "description": "Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)\n",
                        "type": "string"
                    },
                    "user": {
                        "description": "If parameter_type is set to \"SESSION\" then user is the name of the user to display session parameters for.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "parameters",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getPipes:getPipes": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getPipes({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_pipes(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetPipes.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetPipes(ctx, \u0026snowflake.GetPipesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetPipesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getPipes(GetPipesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getPipes\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipes.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the pipes from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipes.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "pipes": {
                        "description": "The pipes in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getPipesPipe:getPipesPipe"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the pipes from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "pipes",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getProcedures:getProcedures": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getProcedures({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_procedures(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetProcedures.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetProcedures(ctx, \u0026snowflake.GetProceduresArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetProceduresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getProcedures(GetProceduresArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getProcedures\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProcedures.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the procedures from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProcedures.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "procedures": {
                        "description": "The procedures in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getProceduresProcedure:getProceduresProcedure"
                        },
                        "type": "array"
                    },
                    "schema": {
                        "description": "The schema from which to return the procedures from.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "database",
                    "procedures",
                    "schema",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getResourceMonitors:getResourceMonitors": {
            "description": "Data source used to get details of filtered resource monitors. Filtering is aligned with the current possibilities for [SHOW RESOURCE MONITORS](https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors) query (`like` is supported). The results of SHOW is encapsulated in show_output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceMonitors.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceMonitors.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "resourceMonitors": {
                        "description": "Holds the aggregated output of all resource monitor details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getResourceMonitorsResourceMonitor:getResourceMonitorsResourceMonitor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resourceMonitors",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getRowAccessPolicies:getRowAccessPolicies": {
            "description": "!\u003e **Sensitive values** This data source's `describe_output.body` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. If you use one of these fields, they may be present in logs, so ensure that the provider logs are properly restricted. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).\n\nData source used to get details of filtered row access policies. Filtering is aligned with the current possibilities for [SHOW ROW ACCESS POLICIES](https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `row_access_policies`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRowAccessPolicies.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn",
                        "description": "IN clause to filter the list of row access policies\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRowAccessPolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesIn:getRowAccessPoliciesIn",
                        "description": "IN clause to filter the list of row access policies\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getRowAccessPoliciesLimit:getRowAccessPoliciesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "rowAccessPolicies": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getRowAccessPoliciesRowAccessPolicy:getRowAccessPoliciesRowAccessPolicy"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC ROW ACCESS POLICY for each row access policy returned by SHOW ROW ACCESS POLICIES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "rowAccessPolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSchemas:getSchemas": {
            "description": "\u003c!-- TODO(SNOW-1844996): Remove this note.--\u003e\n\u003e **Note** Field `WITH PRIVILEGES` is currently missing. It will be added in the future.\n\nData source used to get details of filtered schemas. Filtering is aligned with the current possibilities for [SHOW SCHEMAS](https://docs.snowflake.com/en/sql-reference/sql/show-schemas) query. The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemas.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSchemas.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getSchemasIn:getSchemasIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getSchemasLimit:getSchemasLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "schemas": {
                        "description": "Holds the aggregated output of all SCHEMA details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSchemasSchema:getSchemasSchema"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR SCHEMA for each schema returned by SHOW SCHEMAS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "schemas",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSecrets:getSecrets": {
            "description": "Data source used to get details of filtered secrets. Filtering is aligned with the current possibilities for [SHOW SECRETS](https://docs.snowflake.com/en/sql-reference/sql/show-secrets) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `secrets`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\n// Simple usage\nconst simple = snowflake.getSecrets({});\nexport const simpleOutput = simple.then(simple =\u003e simple.secrets);\n// Filtering (like)\nconst like = snowflake.getSecrets({\n    like: \"secret-name\",\n});\nexport const likeOutput = like.then(like =\u003e like.secrets);\n// Filtering by prefix (like)\nconst likePrefix = snowflake.getSecrets({\n    like: \"prefix%\",\n});\nexport const likePrefixOutput = likePrefix.then(likePrefix =\u003e likePrefix.secrets);\n// Filtering (in)\nconst _in = snowflake.getSecrets({\n    \"in\": {\n        schema: test.fullyQualifiedName,\n    },\n});\nexport const inOutput = _in.then(_in =\u003e _in.secrets);\n// Without additional data (to limit the number of calls make for every found secret)\nconst onlyShow = snowflake.getSecrets({\n    withDescribe: false,\n});\nexport const onlyShowOutput = onlyShow.then(onlyShow =\u003e onlyShow.secrets);\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\n# Simple usage\nsimple = snowflake.get_secrets()\npulumi.export(\"simpleOutput\", simple.secrets)\n# Filtering (like)\nlike = snowflake.get_secrets(like=\"secret-name\")\npulumi.export(\"likeOutput\", like.secrets)\n# Filtering by prefix (like)\nlike_prefix = snowflake.get_secrets(like=\"prefix%\")\npulumi.export(\"likePrefixOutput\", like_prefix.secrets)\n# Filtering (in)\nin_ = snowflake.get_secrets(in_={\n    \"schema\": test[\"fullyQualifiedName\"],\n})\npulumi.export(\"inOutput\", in_.secrets)\n# Without additional data (to limit the number of calls make for every found secret)\nonly_show = snowflake.get_secrets(with_describe=False)\npulumi.export(\"onlyShowOutput\", only_show.secrets)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Simple usage\n    var simple = Snowflake.GetSecrets.Invoke();\n\n    // Filtering (like)\n    var like = Snowflake.GetSecrets.Invoke(new()\n    {\n        Like = \"secret-name\",\n    });\n\n    // Filtering by prefix (like)\n    var likePrefix = Snowflake.GetSecrets.Invoke(new()\n    {\n        Like = \"prefix%\",\n    });\n\n    // Filtering (in)\n    var @in = Snowflake.GetSecrets.Invoke(new()\n    {\n        In = new Snowflake.Inputs.GetSecretsInInputArgs\n        {\n            Schema = test.FullyQualifiedName,\n        },\n    });\n\n    // Without additional data (to limit the number of calls make for every found secret)\n    var onlyShow = Snowflake.GetSecrets.Invoke(new()\n    {\n        WithDescribe = false,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"simpleOutput\"] = simple.Apply(getSecretsResult =\u003e getSecretsResult.Secrets),\n        [\"likeOutput\"] = like.Apply(getSecretsResult =\u003e getSecretsResult.Secrets),\n        [\"likePrefixOutput\"] = likePrefix.Apply(getSecretsResult =\u003e getSecretsResult.Secrets),\n        [\"inOutput\"] = @in.Apply(@in =\u003e @in.Apply(getSecretsResult =\u003e getSecretsResult.Secrets)),\n        [\"onlyShowOutput\"] = onlyShow.Apply(getSecretsResult =\u003e getSecretsResult.Secrets),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Simple usage\n\t\tsimple, err := snowflake.GetSecrets(ctx, \u0026snowflake.GetSecretsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"simpleOutput\", simple.Secrets)\n\t\t// Filtering (like)\n\t\tlike, err := snowflake.GetSecrets(ctx, \u0026snowflake.GetSecretsArgs{\n\t\t\tLike: pulumi.StringRef(\"secret-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"likeOutput\", like.Secrets)\n\t\t// Filtering by prefix (like)\n\t\tlikePrefix, err := snowflake.GetSecrets(ctx, \u0026snowflake.GetSecretsArgs{\n\t\t\tLike: pulumi.StringRef(\"prefix%\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"likePrefixOutput\", likePrefix.Secrets)\n\t\t// Filtering (in)\n\t\tin, err := snowflake.GetSecrets(ctx, \u0026snowflake.GetSecretsArgs{\n\t\t\tIn: snowflake.GetSecretsIn{\n\t\t\t\tSchema: pulumi.StringRef(test.FullyQualifiedName),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"inOutput\", in.Secrets)\n\t\t// Without additional data (to limit the number of calls make for every found secret)\n\t\tonlyShow, err := snowflake.GetSecrets(ctx, \u0026snowflake.GetSecretsArgs{\n\t\t\tWithDescribe: pulumi.BoolRef(false),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"onlyShowOutput\", onlyShow.Secrets)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSecretsArgs;\nimport com.pulumi.snowflake.inputs.GetSecretsInArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Simple usage\n        final var simple = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()\n            .build());\n\n        ctx.export(\"simpleOutput\", simple.secrets());\n        // Filtering (like)\n        final var like = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()\n            .like(\"secret-name\")\n            .build());\n\n        ctx.export(\"likeOutput\", like.secrets());\n        // Filtering by prefix (like)\n        final var likePrefix = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()\n            .like(\"prefix%\")\n            .build());\n\n        ctx.export(\"likePrefixOutput\", likePrefix.secrets());\n        // Filtering (in)\n        final var in = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()\n            .in(GetSecretsInArgs.builder()\n                .schema(test.fullyQualifiedName())\n                .build())\n            .build());\n\n        ctx.export(\"inOutput\", in.secrets());\n        // Without additional data (to limit the number of calls make for every found secret)\n        final var onlyShow = SnowflakeFunctions.getSecrets(GetSecretsArgs.builder()\n            .withDescribe(false)\n            .build());\n\n        ctx.export(\"onlyShowOutput\", onlyShow.secrets());\n    }\n}\n```\n```yaml\nvariables:\n  # Simple usage\n  simple:\n    fn::invoke:\n      function: snowflake:getSecrets\n      arguments: {}\n  # Filtering (like)\n  like:\n    fn::invoke:\n      function: snowflake:getSecrets\n      arguments:\n        like: secret-name\n  # Filtering by prefix (like)\n  likePrefix:\n    fn::invoke:\n      function: snowflake:getSecrets\n      arguments:\n        like: prefix%\n  # Filtering (in)\n  in:\n    fn::invoke:\n      function: snowflake:getSecrets\n      arguments:\n        in:\n          schema: ${test.fullyQualifiedName}\n  # Without additional data (to limit the number of calls make for every found secret)\n  onlyShow:\n    fn::invoke:\n      function: snowflake:getSecrets\n      arguments:\n        withDescribe: false\noutputs:\n  simpleOutput: ${simple.secrets}\n  likeOutput: ${like.secrets}\n  likePrefixOutput: ${likePrefix.secrets}\n  inOutput: ${in.secrets}\n  onlyShowOutput: ${onlyShow.secrets}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecrets.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getSecretsIn:getSecretsIn",
                        "description": "IN clause to filter the list of secrets\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC SECRET for each secret returned by SHOW SECRETS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecrets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getSecretsIn:getSecretsIn",
                        "description": "IN clause to filter the list of secrets\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "secrets": {
                        "description": "Holds the aggregated output of all secrets details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSecretsSecret:getSecretsSecret"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC SECRET for each secret returned by SHOW SECRETS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "secrets",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSecurityIntegrations:getSecurityIntegrations": {
            "description": "## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityIntegrations.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC SECURITY INTEGRATION for each security integration returned by SHOW SECURITY INTEGRATIONS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "securityIntegrations": {
                        "description": "Holds the aggregated output of all security integrations details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSecurityIntegrationsSecurityIntegration:getSecurityIntegrationsSecurityIntegration"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC SECURITY INTEGRATION for each security integration returned by SHOW SECURITY INTEGRATIONS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "securityIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSequences:getSequences": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getSequences({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_sequences(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetSequences.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSequences(ctx, \u0026snowflake.GetSequencesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSequencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getSequences(GetSequencesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getSequences\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the sequences from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSequences.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the sequences from.\n",
                        "type": "string"
                    },
                    "sequences": {
                        "description": "The sequences in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSequencesSequence:getSequencesSequence"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "sequences",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getServices:getServices": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nData source used to get details of filtered services. Filtering is aligned with the current possibilities for [SHOW SERVICES](https://docs.snowflake.com/en/sql-reference/sql/show-services) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `services`. By default, the results includes both services and job services. If you want to filter only services or job service, set `service_type` with a relevant option.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getServicesIn:getServicesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getServicesLimit:getServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "(Default: `ALL`) The type filtering of `SHOW SERVICES` results. `ALL` returns both services and job services. `JOBS_ONLY` returns only job services (`JOB` option in SQL). `SERVICES_ONLY` returns only services (`EXCLUDE_JOBS` option in SQL).\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC SERVICE for each service returned by SHOW SERVICES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getServicesIn:getServicesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getServicesLimit:getServicesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "serviceType": {
                        "description": "(Default: `ALL`) The type filtering of `SHOW SERVICES` results. `ALL` returns both services and job services. `JOBS_ONLY` returns only job services (`JOB` option in SQL). `SERVICES_ONLY` returns only services (`EXCLUDE_JOBS` option in SQL).\n",
                        "type": "string"
                    },
                    "services": {
                        "description": "Holds the aggregated output of all services details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getServicesService:getServicesService"
                        },
                        "type": "array"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC SERVICE for each service returned by SHOW SERVICES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "services",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getShares:getShares": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst _this = snowflake.getShares({});\nconst ad = snowflake.getShares({\n    pattern: \"usage\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_shares()\nad = snowflake.get_shares(pattern=\"usage\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Snowflake.GetShares.Invoke();\n\n    var ad = Snowflake.GetShares.Invoke(new()\n    {\n        Pattern = \"usage\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetShares(ctx, \u0026snowflake.GetSharesArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.GetShares(ctx, \u0026snowflake.GetSharesArgs{\n\t\t\tPattern: pulumi.StringRef(\"usage\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSharesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SnowflakeFunctions.getShares(GetSharesArgs.builder()\n            .build());\n\n        final var ad = SnowflakeFunctions.getShares(GetSharesArgs.builder()\n            .pattern(\"usage\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      function: snowflake:getShares\n      arguments: {}\n  ad:\n    fn::invoke:\n      function: snowflake:getShares\n      arguments:\n        pattern: usage\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getShares.\n",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Filters the command output by object name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getShares.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "Filters the command output by object name.\n",
                        "type": "string"
                    },
                    "shares": {
                        "description": "List of all the shares available in the system.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getSharesShare:getSharesShare"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "shares",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStages:getStages": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getStages({\n    database: \"MYDB\",\n    schema: \"MYSCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_stages(database=\"MYDB\",\n    schema=\"MYSCHEMA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetStages.Invoke(new()\n    {\n        Database = \"MYDB\",\n        Schema = \"MYSCHEMA\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetStages(ctx, \u0026snowflake.GetStagesArgs{\n\t\t\tDatabase: \"MYDB\",\n\t\t\tSchema:   \"MYSCHEMA\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetStagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getStages(GetStagesArgs.builder()\n            .database(\"MYDB\")\n            .schema(\"MYSCHEMA\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getStages\n      arguments:\n        database: MYDB\n        schema: MYSCHEMA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStages.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database from which to return the schemas from.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema from which to return the stages from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schema"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStages.\n",
                "properties": {
                    "database": {
                        "description": "The database from which to return the schemas from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The schema from which to return the stages from.\n",
                        "type": "string"
                    },
                    "stages": {
                        "description": "The stages in the schema\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStagesStage:getStagesStage"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "database",
                    "schema",
                    "stages",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStorageIntegrations:getStorageIntegrations": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst current = snowflake.getStorageIntegrations({});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ncurrent = snowflake.get_storage_integrations()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Snowflake.GetStorageIntegrations.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetStorageIntegrations(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = SnowflakeFunctions.getStorageIntegrations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      function: snowflake:getStorageIntegrations\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "outputs": {
                "description": "A collection of values returned by getStorageIntegrations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "storageIntegrations": {
                        "description": "The storage integrations in the database\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStorageIntegrationsStorageIntegration:getStorageIntegrationsStorageIntegration"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "storageIntegrations",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreamlits:getStreamlits": {
            "description": "Data source used to get details of filtered streamlits. Filtering is aligned with the current possibilities for [SHOW STREAMLITS](https://docs.snowflake.com/en/sql-reference/sql/show-streamlits) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `streamlits`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStreamlits.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStreamlits.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamlitsIn:getStreamlitsIn",
                        "description": "IN clause to filter the list of streamlits\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamlitsLimit:getStreamlitsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "streamlits": {
                        "description": "Holds the aggregated output of all streamlits details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamlitsStreamlit:getStreamlitsStreamlit"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC STREAMLIT for each streamlit returned by SHOW STREAMLITS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "streamlits",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getStreams:getStreams": {
            "description": "Data source used to get details of filtered streams. Filtering is aligned with the current possibilities for [SHOW STREAMS](https://docs.snowflake.com/en/sql-reference/sql/show-streams) query. The results of SHOW and DESCRIBE are encapsulated in one output collection `streams`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStreams.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamsIn:getStreamsIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamsLimit:getStreamsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC STREAM for each user returned by SHOW STREAMS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStreams.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getStreamsIn:getStreamsIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getStreamsLimit:getStreamsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "streams": {
                        "description": "Holds the aggregated output of all streams details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getStreamsStream:getStreamsStream"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC STREAM for each user returned by SHOW STREAMS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "streams",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst scim = snowflake.getSystemGenerateScimAccessToken({\n    integrationName: \"AAD_PROVISIONING\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nscim = snowflake.get_system_generate_scim_access_token(integration_name=\"AAD_PROVISIONING\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var scim = Snowflake.GetSystemGenerateScimAccessToken.Invoke(new()\n    {\n        IntegrationName = \"AAD_PROVISIONING\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSystemGenerateScimAccessToken(ctx, \u0026snowflake.GetSystemGenerateScimAccessTokenArgs{\n\t\t\tIntegrationName: \"AAD_PROVISIONING\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSystemGenerateScimAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var scim = SnowflakeFunctions.getSystemGenerateScimAccessToken(GetSystemGenerateScimAccessTokenArgs.builder()\n            .integrationName(\"AAD_PROVISIONING\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  scim:\n    fn::invoke:\n      function: snowflake:getSystemGenerateScimAccessToken\n      arguments:\n        integrationName: AAD_PROVISIONING\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "integrationName": {
                        "type": "string",
                        "description": "SCIM Integration Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "accessToken": {
                        "description": "SCIM Access Token\n",
                        "secret": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "integrationName": {
                        "description": "SCIM Integration Name\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessToken",
                    "integrationName",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst snowflakePolicy = snowflake.getSystemGetAwsSnsIamPolicy({\n    awsSnsTopicArn: \"\u003caws_sns_topic_arn\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nsnowflake_policy = snowflake.get_system_get_aws_sns_iam_policy(aws_sns_topic_arn=\"\u003caws_sns_topic_arn\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snowflakePolicy = Snowflake.GetSystemGetAwsSnsIamPolicy.Invoke(new()\n    {\n        AwsSnsTopicArn = \"\u003caws_sns_topic_arn\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSystemGetAwsSnsIamPolicy(ctx, \u0026snowflake.GetSystemGetAwsSnsIamPolicyArgs{\n\t\t\tAwsSnsTopicArn: \"\u003caws_sns_topic_arn\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.snowflake.inputs.GetSystemGetAwsSnsIamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snowflakePolicy = SnowflakeFunctions.getSystemGetAwsSnsIamPolicy(GetSystemGetAwsSnsIamPolicyArgs.builder()\n            .awsSnsTopicArn(\"\u003caws_sns_topic_arn\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  snowflakePolicy:\n    fn::invoke:\n      function: snowflake:getSystemGetAwsSnsIamPolicy\n      arguments:\n        awsSnsTopicArn: \u003caws_sns_topic_arn\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsSnsTopicArn"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n",
                        "type": "string"
                    },
                    "awsSnsTopicPolicyJson": {
                        "description": "IAM policy for Snowflake’s SQS queue to subscribe to this topic\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    }
                },
                "required": [
                    "awsSnsTopicArn",
                    "awsSnsTopicPolicyJson",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst snowflakePrivateLink = snowflake.getSystemGetPrivateLinkConfig({});\nconst snowflakePrivateLinkSecurityGroup = new aws.index.SecurityGroup(\"snowflake_private_link\", {\n    vpcId: vpcId,\n    ingress: [\n        {\n            fromPort: 80,\n            toPort: 80,\n            cidrBlocks: vpcCidr,\n            protocol: \"tcp\",\n        },\n        {\n            fromPort: 443,\n            toPort: 443,\n            cidrBlocks: vpcCidr,\n            protocol: \"tcp\",\n        },\n    ],\n});\nconst snowflakePrivateLinkVpcEndpoint = new aws.index.VpcEndpoint(\"snowflake_private_link\", {\n    vpcId: vpcId,\n    serviceName: snowflakePrivateLink.awsVpceId,\n    vpcEndpointType: \"Interface\",\n    securityGroupIds: [snowflakePrivateLinkSecurityGroup.id],\n    subnetIds: subnetIds,\n    privateDnsEnabled: false,\n});\nconst snowflakePrivateLinkRoute53Zone = new aws.index.Route53Zone(\"snowflake_private_link\", {\n    name: \"privatelink.snowflakecomputing.com\",\n    vpc: [{\n        vpcId: vpcId,\n    }],\n});\nconst snowflakePrivateLinkUrl = new aws.index.Route53Record(\"snowflake_private_link_url\", {\n    zoneId: snowflakePrivateLinkRoute53Zone.zoneId,\n    name: snowflakePrivateLink.accountUrl,\n    type: \"CNAME\",\n    ttl: \"300\",\n    records: [snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name],\n});\nconst snowflakePrivateLinkOcspUrl = new aws.index.Route53Record(\"snowflake_private_link_ocsp_url\", {\n    zoneId: snowflakePrivateLinkRoute53Zone.zoneId,\n    name: snowflakePrivateLink.ocspUrl,\n    type: \"CNAME\",\n    ttl: \"300\",\n    records: [snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_snowflake as snowflake\n\nsnowflake_private_link = snowflake.get_system_get_private_link_config()\nsnowflake_private_link_security_group = aws.index.SecurityGroup(\"snowflake_private_link\",\n    vpc_id=vpc_id,\n    ingress=[\n        {\n            fromPort: 80,\n            toPort: 80,\n            cidrBlocks: vpc_cidr,\n            protocol: tcp,\n        },\n        {\n            fromPort: 443,\n            toPort: 443,\n            cidrBlocks: vpc_cidr,\n            protocol: tcp,\n        },\n    ])\nsnowflake_private_link_vpc_endpoint = aws.index.VpcEndpoint(\"snowflake_private_link\",\n    vpc_id=vpc_id,\n    service_name=snowflake_private_link.aws_vpce_id,\n    vpc_endpoint_type=Interface,\n    security_group_ids=[snowflake_private_link_security_group.id],\n    subnet_ids=subnet_ids,\n    private_dns_enabled=False)\nsnowflake_private_link_route53_zone = aws.index.Route53Zone(\"snowflake_private_link\",\n    name=privatelink.snowflakecomputing.com,\n    vpc=[{\n        vpcId: vpc_id,\n    }])\nsnowflake_private_link_url = aws.index.Route53Record(\"snowflake_private_link_url\",\n    zone_id=snowflake_private_link_route53_zone.zone_id,\n    name=snowflake_private_link.account_url,\n    type=CNAME,\n    ttl=300,\n    records=[snowflake_private_link_vpc_endpoint.dns_entry[0].dns_name])\nsnowflake_private_link_ocsp_url = aws.index.Route53Record(\"snowflake_private_link_ocsp_url\",\n    zone_id=snowflake_private_link_route53_zone.zone_id,\n    name=snowflake_private_link.ocsp_url,\n    type=CNAME,\n    ttl=300,\n    records=[snowflake_private_link_vpc_endpoint.dns_entry[0].dns_name])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Snowflake = Pulumi.Snowflake;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snowflakePrivateLink = Snowflake.GetSystemGetPrivateLinkConfig.Invoke();\n\n    var snowflakePrivateLinkSecurityGroup = new Aws.Index.SecurityGroup(\"snowflake_private_link\", new()\n    {\n        VpcId = vpcId,\n        Ingress = new[]\n        {\n            \n            {\n                { \"fromPort\", 80 },\n                { \"toPort\", 80 },\n                { \"cidrBlocks\", vpcCidr },\n                { \"protocol\", \"tcp\" },\n            },\n            \n            {\n                { \"fromPort\", 443 },\n                { \"toPort\", 443 },\n                { \"cidrBlocks\", vpcCidr },\n                { \"protocol\", \"tcp\" },\n            },\n        },\n    });\n\n    var snowflakePrivateLinkVpcEndpoint = new Aws.Index.VpcEndpoint(\"snowflake_private_link\", new()\n    {\n        VpcId = vpcId,\n        ServiceName = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.AwsVpceId),\n        VpcEndpointType = \"Interface\",\n        SecurityGroupIds = new[]\n        {\n            snowflakePrivateLinkSecurityGroup.Id,\n        },\n        SubnetIds = subnetIds,\n        PrivateDnsEnabled = false,\n    });\n\n    var snowflakePrivateLinkRoute53Zone = new Aws.Index.Route53Zone(\"snowflake_private_link\", new()\n    {\n        Name = \"privatelink.snowflakecomputing.com\",\n        Vpc = new[]\n        {\n            \n            {\n                { \"vpcId\", vpcId },\n            },\n        },\n    });\n\n    var snowflakePrivateLinkUrl = new Aws.Index.Route53Record(\"snowflake_private_link_url\", new()\n    {\n        ZoneId = snowflakePrivateLinkRoute53Zone.ZoneId,\n        Name = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.AccountUrl),\n        Type = \"CNAME\",\n        Ttl = \"300\",\n        Records = new[]\n        {\n            snowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n        },\n    });\n\n    var snowflakePrivateLinkOcspUrl = new Aws.Index.Route53Record(\"snowflake_private_link_ocsp_url\", new()\n    {\n        ZoneId = snowflakePrivateLinkRoute53Zone.ZoneId,\n        Name = snowflakePrivateLink.Apply(getSystemGetPrivateLinkConfigResult =\u003e getSystemGetPrivateLinkConfigResult.OcspUrl),\n        Type = \"CNAME\",\n        Ttl = \"300\",\n        Records = new[]\n        {\n            snowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws\"\n\t\"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsnowflakePrivateLink, err := snowflake.GetSystemGetPrivateLinkConfig(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkSecurityGroup, err := aws.NewSecurityGroup(ctx, \"snowflake_private_link\", \u0026aws.SecurityGroupArgs{\n\t\t\tVpcId: vpcId,\n\t\t\tIngress: []interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"fromPort\":   80,\n\t\t\t\t\t\"toPort\":     80,\n\t\t\t\t\t\"cidrBlocks\": vpcCidr,\n\t\t\t\t\t\"protocol\":   \"tcp\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"fromPort\":   443,\n\t\t\t\t\t\"toPort\":     443,\n\t\t\t\t\t\"cidrBlocks\": vpcCidr,\n\t\t\t\t\t\"protocol\":   \"tcp\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkVpcEndpoint, err := aws.NewVpcEndpoint(ctx, \"snowflake_private_link\", \u0026aws.VpcEndpointArgs{\n\t\t\tVpcId:           vpcId,\n\t\t\tServiceName:     snowflakePrivateLink.AwsVpceId,\n\t\t\tVpcEndpointType: \"Interface\",\n\t\t\tSecurityGroupIds: []interface{}{\n\t\t\t\tsnowflakePrivateLinkSecurityGroup.Id,\n\t\t\t},\n\t\t\tSubnetIds:         subnetIds,\n\t\t\tPrivateDnsEnabled: false,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnowflakePrivateLinkRoute53Zone, err := aws.NewRoute53Zone(ctx, \"snowflake_private_link\", \u0026aws.Route53ZoneArgs{\n\t\t\tName: \"privatelink.snowflakecomputing.com\",\n\t\t\tVpc: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"vpcId\": vpcId,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewRoute53Record(ctx, \"snowflake_private_link_url\", \u0026aws.Route53RecordArgs{\n\t\t\tZoneId: snowflakePrivateLinkRoute53Zone.ZoneId,\n\t\t\tName:   snowflakePrivateLink.AccountUrl,\n\t\t\tType:   \"CNAME\",\n\t\t\tTtl:    \"300\",\n\t\t\tRecords: []interface{}{\n\t\t\t\tsnowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewRoute53Record(ctx, \"snowflake_private_link_ocsp_url\", \u0026aws.Route53RecordArgs{\n\t\t\tZoneId: snowflakePrivateLinkRoute53Zone.ZoneId,\n\t\t\tName:   snowflakePrivateLink.OcspUrl,\n\t\t\tType:   \"CNAME\",\n\t\t\tTtl:    \"300\",\n\t\t\tRecords: []interface{}{\n\t\t\t\tsnowflakePrivateLinkVpcEndpoint.DnsEntry[0].Dns_name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.snowflake.SnowflakeFunctions;\nimport com.pulumi.aws.securityGroup;\nimport com.pulumi.aws.securityGroupArgs;\nimport com.pulumi.aws.vpcEndpoint;\nimport com.pulumi.aws.vpcEndpointArgs;\nimport com.pulumi.aws.route53Zone;\nimport com.pulumi.aws.route53ZoneArgs;\nimport com.pulumi.aws.route53Record;\nimport com.pulumi.aws.route53RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snowflakePrivateLink = SnowflakeFunctions.getSystemGetPrivateLinkConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n        var snowflakePrivateLinkSecurityGroup = new SecurityGroup(\"snowflakePrivateLinkSecurityGroup\", SecurityGroupArgs.builder()\n            .vpcId(vpcId)\n            .ingress(List.of(            \n                Map.ofEntries(\n                    Map.entry(\"fromPort\", 80),\n                    Map.entry(\"toPort\", 80),\n                    Map.entry(\"cidrBlocks\", vpcCidr),\n                    Map.entry(\"protocol\", \"tcp\")\n                ),\n                Map.ofEntries(\n                    Map.entry(\"fromPort\", 443),\n                    Map.entry(\"toPort\", 443),\n                    Map.entry(\"cidrBlocks\", vpcCidr),\n                    Map.entry(\"protocol\", \"tcp\")\n                )))\n            .build());\n\n        var snowflakePrivateLinkVpcEndpoint = new VpcEndpoint(\"snowflakePrivateLinkVpcEndpoint\", VpcEndpointArgs.builder()\n            .vpcId(vpcId)\n            .serviceName(snowflakePrivateLink.awsVpceId())\n            .vpcEndpointType(\"Interface\")\n            .securityGroupIds(List.of(snowflakePrivateLinkSecurityGroup.id()))\n            .subnetIds(subnetIds)\n            .privateDnsEnabled(false)\n            .build());\n\n        var snowflakePrivateLinkRoute53Zone = new Route53Zone(\"snowflakePrivateLinkRoute53Zone\", Route53ZoneArgs.builder()\n            .name(\"privatelink.snowflakecomputing.com\")\n            .vpc(List.of(Map.of(\"vpcId\", vpcId)))\n            .build());\n\n        var snowflakePrivateLinkUrl = new Route53Record(\"snowflakePrivateLinkUrl\", Route53RecordArgs.builder()\n            .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())\n            .name(snowflakePrivateLink.accountUrl())\n            .type(\"CNAME\")\n            .ttl(\"300\")\n            .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))\n            .build());\n\n        var snowflakePrivateLinkOcspUrl = new Route53Record(\"snowflakePrivateLinkOcspUrl\", Route53RecordArgs.builder()\n            .zoneId(snowflakePrivateLinkRoute53Zone.zoneId())\n            .name(snowflakePrivateLink.ocspUrl())\n            .type(\"CNAME\")\n            .ttl(\"300\")\n            .records(List.of(snowflakePrivateLinkVpcEndpoint.dnsEntry()[0].dns_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  snowflakePrivateLinkSecurityGroup:\n    type: aws:securityGroup\n    name: snowflake_private_link\n    properties:\n      vpcId: ${vpcId}\n      ingress:\n        - fromPort: 80\n          toPort: 80\n          cidrBlocks: ${vpcCidr}\n          protocol: tcp\n        - fromPort: 443\n          toPort: 443\n          cidrBlocks: ${vpcCidr}\n          protocol: tcp\n  snowflakePrivateLinkVpcEndpoint:\n    type: aws:vpcEndpoint\n    name: snowflake_private_link\n    properties:\n      vpcId: ${vpcId}\n      serviceName: ${snowflakePrivateLink.awsVpceId}\n      vpcEndpointType: Interface\n      securityGroupIds:\n        - ${snowflakePrivateLinkSecurityGroup.id}\n      subnetIds: ${subnetIds}\n      privateDnsEnabled: false\n  snowflakePrivateLinkRoute53Zone:\n    type: aws:route53Zone\n    name: snowflake_private_link\n    properties:\n      name: privatelink.snowflakecomputing.com\n      vpc:\n        - vpcId: ${vpcId}\n  snowflakePrivateLinkUrl:\n    type: aws:route53Record\n    name: snowflake_private_link_url\n    properties:\n      zoneId: ${snowflakePrivateLinkRoute53Zone.zoneId}\n      name: ${snowflakePrivateLink.accountUrl}\n      type: CNAME\n      ttl: '300'\n      records:\n        - ${snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name}\n  snowflakePrivateLinkOcspUrl:\n    type: aws:route53Record\n    name: snowflake_private_link_ocsp_url\n    properties:\n      zoneId: ${snowflakePrivateLinkRoute53Zone.zoneId}\n      name: ${snowflakePrivateLink.ocspUrl}\n      type: CNAME\n      ttl: '300'\n      records:\n        - ${snowflakePrivateLinkVpcEndpoint.dnsEntry[0].dns_name}\nvariables:\n  snowflakePrivateLink:\n    fn::invoke:\n      function: snowflake:getSystemGetPrivateLinkConfig\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "outputs": {
                "description": "A collection of values returned by getSystemGetPrivateLinkConfig.\n",
                "properties": {
                    "accountName": {
                        "description": "The name of your Snowflake account.\n",
                        "type": "string"
                    },
                    "accountUrl": {
                        "description": "The URL used to connect to Snowflake through AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "awsVpceId": {
                        "description": "The AWS VPCE ID for your account.\n",
                        "type": "string"
                    },
                    "azurePlsId": {
                        "description": "The Azure Private Link Service ID for your account.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "internalStage": {
                        "description": "The endpoint to connect to your Snowflake internal stage using AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "ocspUrl": {
                        "description": "The OCSP URL corresponding to your Snowflake account that uses AWS PrivateLink or Azure Private Link.\n",
                        "type": "string"
                    },
                    "regionlessAccountUrl": {
                        "description": "The regionless URL to connect to your Snowflake account using AWS PrivateLink, Azure Private Link, or Google Cloud Private Service Connect.\n",
                        "type": "string"
                    },
                    "regionlessSnowsightUrl": {
                        "description": "The URL for your organization to access Snowsight using Private Connectivity to the Snowflake Service.\n",
                        "type": "string"
                    },
                    "snowsightUrl": {
                        "description": "The URL containing the cloud region to access Snowsight and the Snowflake Marketplace using Private Connectivity to the Snowflake Service.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountName",
                    "accountUrl",
                    "awsVpceId",
                    "azurePlsId",
                    "internalStage",
                    "ocspUrl",
                    "regionlessAccountUrl",
                    "regionlessSnowsightUrl",
                    "snowsightUrl",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\n\u003e **Note** If a field has a default value, it is shown next to the type in the schema.\n",
            "outputs": {
                "description": "A collection of values returned by getSystemGetSnowflakePlatformInfo.\n",
                "properties": {
                    "awsVpcIds": {
                        "description": "Snowflake AWS Virtual Private Cloud IDs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "azureVnetSubnetIds": {
                        "description": "Snowflake Azure Virtual Network Subnet IDs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    }
                },
                "required": [
                    "awsVpcIds",
                    "azureVnetSubnetIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTables:getTables": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nDatasource used to get details of filtered tables. Filtering is aligned with the current possibilities for [SHOW TABLES](https://docs.snowflake.com/en/sql-reference/sql/show-tables) query. The results of SHOW and DESCRIBE (COLUMNS) are encapsulated in one output collection `tables`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTables.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getTablesIn:getTablesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTablesLimit:getTablesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC TABLE for each table returned by SHOW TABLES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTables.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getTablesIn:getTablesIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTablesLimit:getTablesLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "tables": {
                        "description": "Holds the aggregated output of all tables details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getTablesTable:getTablesTable"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC TABLE for each table returned by SHOW TABLES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "tables",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTags:getTags": {
            "description": "Data source used to get details of filtered tags. Filtering is aligned with the current possibilities for [SHOW TAGS](https://docs.snowflake.com/en/sql-reference/sql/show-tags) query. The results of SHOW are encapsulated in one output collection `tags`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTags.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getTagsIn:getTagsIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getTagsIn:getTagsIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Holds the aggregated output of all tags details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getTagsTag:getTagsTag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getTasks:getTasks": {
            "description": "!\u003e **Sensitive values** This data source's `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).\n\nData source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTasks.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getTasksIn:getTasksIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTasksLimit:getTasksLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "rootOnly": {
                        "type": "boolean",
                        "description": "Filters the command output to return only root tasks (tasks with no predecessors).\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTasks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getTasksIn:getTasksIn",
                        "description": "IN clause to filter the list of objects\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getTasksLimit:getTasksLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "rootOnly": {
                        "description": "Filters the command output to return only root tasks (tasks with no predecessors).\n",
                        "type": "boolean"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "tasks": {
                        "description": "Holds the aggregated output of all task details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getTasksTask:getTasksTask"
                        },
                        "type": "array"
                    },
                    "withParameters": {
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "tasks",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getUserProgrammaticAccessTokens:getUserProgrammaticAccessTokens": {
            "description": "!\u003e **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `preview_features_enabled` field in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.\n\nData source used to get details of filtered user programmatic access tokens. Filtering is aligned with the current possibilities for [SHOW USER PROGRAMMATIC ACCESS TOKENS](https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens) query. The results of SHOW are encapsulated in one output collection `user_programmatic_access_tokens`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserProgrammaticAccessTokens.\n",
                "properties": {
                    "forUser": {
                        "type": "string",
                        "description": "Returns programmatic access tokens for the specified user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "forUser"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserProgrammaticAccessTokens.\n",
                "properties": {
                    "forUser": {
                        "description": "Returns programmatic access tokens for the specified user.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "userProgrammaticAccessTokens": {
                        "description": "Holds the aggregated output of all user programmatic access tokens details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getUserProgrammaticAccessTokensUserProgrammaticAccessToken:getUserProgrammaticAccessTokensUserProgrammaticAccessToken"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "forUser",
                    "userProgrammaticAccessTokens",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getUsers:getUsers": {
            "description": "## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC USER for each user returned by SHOW USERS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR USER for each user returned by SHOW USERS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getUsersLimit:getUsersLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "users": {
                        "description": "Holds the aggregated output of all user details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC USER for each user returned by SHOW USERS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR USER for each user returned by SHOW USERS. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getViews:getViews": {
            "description": "!\u003e **Sensitive values** This resource's `show_output.text` field is not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).\n\nData source used to get details of filtered views. Filtering is aligned with the current possibilities for [SHOW VIEWS](https://docs.snowflake.com/en/sql-reference/sql/show-views) query (only `like` is supported). The results of SHOW and DESCRIBE are encapsulated in one output collection `views`.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getViews.\n",
                "properties": {
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn",
                        "description": "IN clause to filter the list of views\n"
                    },
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC VIEW for each view returned by SHOW VIEWS. The output of describe is saved to the description field. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getViews.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "in": {
                        "$ref": "#/types/snowflake:index/getViewsIn:getViewsIn",
                        "description": "IN clause to filter the list of views\n"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "limit": {
                        "$ref": "#/types/snowflake:index/getViewsLimit:getViewsLimit",
                        "description": "Limits the number of rows returned. If the `limit.from` is set, then the limit will start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `starts_with` or `like`.\n"
                    },
                    "startsWith": {
                        "description": "Filters the output with **case-sensitive** characters indicating the beginning of the object name.\n",
                        "type": "string"
                    },
                    "views": {
                        "description": "Holds the aggregated output of all views details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getViewsView:getViewsView"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC VIEW for each view returned by SHOW VIEWS. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "views",
                    "id"
                ],
                "type": "object"
            }
        },
        "snowflake:index/getWarehouses:getWarehouses": {
            "description": "Data source used to get details of filtered warehouses. Filtering is aligned with the current possibilities for [SHOW WAREHOUSES](https://docs.snowflake.com/en/sql-reference/sql/show-warehouses) query (only `like` is supported). The results of SHOW, DESCRIBE, and SHOW PARAMETERS IN are encapsulated in one output collection.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWarehouses.\n",
                "properties": {
                    "like": {
                        "type": "string",
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n"
                    },
                    "withDescribe": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs DESC WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the description field. By default this value is set to true.\n"
                    },
                    "withParameters": {
                        "type": "boolean",
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWarehouses.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "like": {
                        "description": "Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).\n",
                        "type": "string"
                    },
                    "warehouses": {
                        "description": "Holds the aggregated output of all warehouse details queries.\n",
                        "items": {
                            "$ref": "#/types/snowflake:index/getWarehousesWarehouse:getWarehousesWarehouse"
                        },
                        "type": "array"
                    },
                    "withDescribe": {
                        "description": "(Default: `true`) Runs DESC WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the description field. By default this value is set to true.\n",
                        "type": "boolean"
                    },
                    "withParameters": {
                        "description": "(Default: `true`) Runs SHOW PARAMETERS FOR WAREHOUSE for each warehouse returned by SHOW WAREHOUSES. The output of describe is saved to the parameters field as a map. By default this value is set to true.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "warehouses",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}