// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "snowflake:index/account:Account":
		r = &Account{}
	case "snowflake:index/accountAuthenticationPolicyAttachment:AccountAuthenticationPolicyAttachment":
		r = &AccountAuthenticationPolicyAttachment{}
	case "snowflake:index/accountParameter:AccountParameter":
		r = &AccountParameter{}
	case "snowflake:index/accountPasswordPolicyAttachment:AccountPasswordPolicyAttachment":
		r = &AccountPasswordPolicyAttachment{}
	case "snowflake:index/accountRole:AccountRole":
		r = &AccountRole{}
	case "snowflake:index/alert:Alert":
		r = &Alert{}
	case "snowflake:index/apiAuthenticationIntegrationWithAuthorizationCodeGrant:ApiAuthenticationIntegrationWithAuthorizationCodeGrant":
		r = &ApiAuthenticationIntegrationWithAuthorizationCodeGrant{}
	case "snowflake:index/apiAuthenticationIntegrationWithClientCredentials:ApiAuthenticationIntegrationWithClientCredentials":
		r = &ApiAuthenticationIntegrationWithClientCredentials{}
	case "snowflake:index/apiAuthenticationIntegrationWithJwtBearer:ApiAuthenticationIntegrationWithJwtBearer":
		r = &ApiAuthenticationIntegrationWithJwtBearer{}
	case "snowflake:index/apiIntegration:ApiIntegration":
		r = &ApiIntegration{}
	case "snowflake:index/authenticationPolicy:AuthenticationPolicy":
		r = &AuthenticationPolicy{}
	case "snowflake:index/cortexSearchService:CortexSearchService":
		r = &CortexSearchService{}
	case "snowflake:index/database:Database":
		r = &Database{}
	case "snowflake:index/databaseRole:DatabaseRole":
		r = &DatabaseRole{}
	case "snowflake:index/dynamicTable:DynamicTable":
		r = &DynamicTable{}
	case "snowflake:index/emailNotificationIntegration:EmailNotificationIntegration":
		r = &EmailNotificationIntegration{}
	case "snowflake:index/execute:Execute":
		r = &Execute{}
	case "snowflake:index/externalFunction:ExternalFunction":
		r = &ExternalFunction{}
	case "snowflake:index/externalOauthIntegration:ExternalOauthIntegration":
		r = &ExternalOauthIntegration{}
	case "snowflake:index/externalTable:ExternalTable":
		r = &ExternalTable{}
	case "snowflake:index/externalVolume:ExternalVolume":
		r = &ExternalVolume{}
	case "snowflake:index/failoverGroup:FailoverGroup":
		r = &FailoverGroup{}
	case "snowflake:index/fileFormat:FileFormat":
		r = &FileFormat{}
	case "snowflake:index/functionJava:FunctionJava":
		r = &FunctionJava{}
	case "snowflake:index/functionJavascript:FunctionJavascript":
		r = &FunctionJavascript{}
	case "snowflake:index/functionPython:FunctionPython":
		r = &FunctionPython{}
	case "snowflake:index/functionScala:FunctionScala":
		r = &FunctionScala{}
	case "snowflake:index/functionSql:FunctionSql":
		r = &FunctionSql{}
	case "snowflake:index/grantAccountRole:GrantAccountRole":
		r = &GrantAccountRole{}
	case "snowflake:index/grantApplicationRole:GrantApplicationRole":
		r = &GrantApplicationRole{}
	case "snowflake:index/grantDatabaseRole:GrantDatabaseRole":
		r = &GrantDatabaseRole{}
	case "snowflake:index/grantOwnership:GrantOwnership":
		r = &GrantOwnership{}
	case "snowflake:index/grantPrivilegesToAccountRole:GrantPrivilegesToAccountRole":
		r = &GrantPrivilegesToAccountRole{}
	case "snowflake:index/grantPrivilegesToDatabaseRole:GrantPrivilegesToDatabaseRole":
		r = &GrantPrivilegesToDatabaseRole{}
	case "snowflake:index/grantPrivilegesToShare:GrantPrivilegesToShare":
		r = &GrantPrivilegesToShare{}
	case "snowflake:index/legacyServiceUser:LegacyServiceUser":
		r = &LegacyServiceUser{}
	case "snowflake:index/managedAccount:ManagedAccount":
		r = &ManagedAccount{}
	case "snowflake:index/maskingPolicy:MaskingPolicy":
		r = &MaskingPolicy{}
	case "snowflake:index/materializedView:MaterializedView":
		r = &MaterializedView{}
	case "snowflake:index/networkPolicy:NetworkPolicy":
		r = &NetworkPolicy{}
	case "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment":
		r = &NetworkPolicyAttachment{}
	case "snowflake:index/networkRule:NetworkRule":
		r = &NetworkRule{}
	case "snowflake:index/notificationIntegration:NotificationIntegration":
		r = &NotificationIntegration{}
	case "snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients":
		r = &OauthIntegrationForCustomClients{}
	case "snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications":
		r = &OauthIntegrationForPartnerApplications{}
	case "snowflake:index/objectParameter:ObjectParameter":
		r = &ObjectParameter{}
	case "snowflake:index/passwordPolicy:PasswordPolicy":
		r = &PasswordPolicy{}
	case "snowflake:index/pipe:Pipe":
		r = &Pipe{}
	case "snowflake:index/primaryConnection:PrimaryConnection":
		r = &PrimaryConnection{}
	case "snowflake:index/procedureJava:ProcedureJava":
		r = &ProcedureJava{}
	case "snowflake:index/procedureJavascript:ProcedureJavascript":
		r = &ProcedureJavascript{}
	case "snowflake:index/procedurePython:ProcedurePython":
		r = &ProcedurePython{}
	case "snowflake:index/procedureScala:ProcedureScala":
		r = &ProcedureScala{}
	case "snowflake:index/procedureSql:ProcedureSql":
		r = &ProcedureSql{}
	case "snowflake:index/resourceMonitor:ResourceMonitor":
		r = &ResourceMonitor{}
	case "snowflake:index/rowAccessPolicy:RowAccessPolicy":
		r = &RowAccessPolicy{}
	case "snowflake:index/saml2Integration:Saml2Integration":
		r = &Saml2Integration{}
	case "snowflake:index/schema:Schema":
		r = &Schema{}
	case "snowflake:index/scimIntegration:ScimIntegration":
		r = &ScimIntegration{}
	case "snowflake:index/secondaryConnection:SecondaryConnection":
		r = &SecondaryConnection{}
	case "snowflake:index/secondaryDatabase:SecondaryDatabase":
		r = &SecondaryDatabase{}
	case "snowflake:index/secretWithAuthorizationCodeGrant:SecretWithAuthorizationCodeGrant":
		r = &SecretWithAuthorizationCodeGrant{}
	case "snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication":
		r = &SecretWithBasicAuthentication{}
	case "snowflake:index/secretWithClientCredentials:SecretWithClientCredentials":
		r = &SecretWithClientCredentials{}
	case "snowflake:index/secretWithGenericString:SecretWithGenericString":
		r = &SecretWithGenericString{}
	case "snowflake:index/sequence:Sequence":
		r = &Sequence{}
	case "snowflake:index/serviceUser:ServiceUser":
		r = &ServiceUser{}
	case "snowflake:index/share:Share":
		r = &Share{}
	case "snowflake:index/sharedDatabase:SharedDatabase":
		r = &SharedDatabase{}
	case "snowflake:index/stage:Stage":
		r = &Stage{}
	case "snowflake:index/storageIntegration:StorageIntegration":
		r = &StorageIntegration{}
	case "snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable":
		r = &StreamOnDirectoryTable{}
	case "snowflake:index/streamOnExternalTable:StreamOnExternalTable":
		r = &StreamOnExternalTable{}
	case "snowflake:index/streamOnTable:StreamOnTable":
		r = &StreamOnTable{}
	case "snowflake:index/streamOnView:StreamOnView":
		r = &StreamOnView{}
	case "snowflake:index/streamlit:Streamlit":
		r = &Streamlit{}
	case "snowflake:index/table:Table":
		r = &Table{}
	case "snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication":
		r = &TableColumnMaskingPolicyApplication{}
	case "snowflake:index/tableConstraint:TableConstraint":
		r = &TableConstraint{}
	case "snowflake:index/tag:Tag":
		r = &Tag{}
	case "snowflake:index/tagAssociation:TagAssociation":
		r = &TagAssociation{}
	case "snowflake:index/task:Task":
		r = &Task{}
	case "snowflake:index/user:User":
		r = &User{}
	case "snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment":
		r = &UserAuthenticationPolicyAttachment{}
	case "snowflake:index/userPasswordPolicyAttachment:UserPasswordPolicyAttachment":
		r = &UserPasswordPolicyAttachment{}
	case "snowflake:index/userPublicKeys:UserPublicKeys":
		r = &UserPublicKeys{}
	case "snowflake:index/view:View":
		r = &View{}
	case "snowflake:index/warehouse:Warehouse":
		r = &Warehouse{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:snowflake" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/account",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/accountAuthenticationPolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/accountParameter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/accountPasswordPolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/accountRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/alert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/apiAuthenticationIntegrationWithAuthorizationCodeGrant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/apiAuthenticationIntegrationWithClientCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/apiAuthenticationIntegrationWithJwtBearer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/apiIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/authenticationPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/cortexSearchService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/databaseRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/dynamicTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/emailNotificationIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/execute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/externalFunction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/externalOauthIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/externalTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/externalVolume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/failoverGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/fileFormat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/functionJava",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/functionJavascript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/functionPython",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/functionScala",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/functionSql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantAccountRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantApplicationRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantDatabaseRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantOwnership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantPrivilegesToAccountRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantPrivilegesToDatabaseRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/grantPrivilegesToShare",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/legacyServiceUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/managedAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/maskingPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/materializedView",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/networkPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/networkPolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/networkRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/notificationIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/oauthIntegrationForCustomClients",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/oauthIntegrationForPartnerApplications",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/objectParameter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/passwordPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/pipe",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/primaryConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/procedureJava",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/procedureJavascript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/procedurePython",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/procedureScala",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/procedureSql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/resourceMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/rowAccessPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/saml2Integration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/schema",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/scimIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secondaryConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secondaryDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secretWithAuthorizationCodeGrant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secretWithBasicAuthentication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secretWithClientCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/secretWithGenericString",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/sequence",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/serviceUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/share",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/sharedDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/stage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/storageIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/streamOnDirectoryTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/streamOnExternalTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/streamOnTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/streamOnView",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/streamlit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/table",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/tableColumnMaskingPolicyApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/tableConstraint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/tag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/tagAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/task",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/userAuthenticationPolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/userPasswordPolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/userPublicKeys",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/view",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"snowflake",
		"index/warehouse",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"snowflake",
		&pkg{version},
	)
}
