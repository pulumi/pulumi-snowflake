// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a masking policy to a tag. Requires a current warehouse to be set. Either with SNOWFLAKE_WAREHOUSE env variable or in current session. If no warehouse is provided, a temporary warehouse will be created.
//
// ## Import
//
// format is tag database name | tag schema name | tag name | masking policy database | masking policy schema | masking policy name
//
// ```sh
// $ pulumi import snowflake:index/tagMaskingPolicyAssociation:TagMaskingPolicyAssociation example 'tag_db|tag_schema|tag_name|mp_db|mp_schema|mp_name'
// ```
type TagMaskingPolicyAssociation struct {
	pulumi.CustomResourceState

	// The resource id of the masking policy
	MaskingPolicyId pulumi.StringOutput `pulumi:"maskingPolicyId"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringOutput `pulumi:"tagId"`
}

// NewTagMaskingPolicyAssociation registers a new resource with the given unique name, arguments, and options.
func NewTagMaskingPolicyAssociation(ctx *pulumi.Context,
	name string, args *TagMaskingPolicyAssociationArgs, opts ...pulumi.ResourceOption) (*TagMaskingPolicyAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaskingPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'MaskingPolicyId'")
	}
	if args.TagId == nil {
		return nil, errors.New("invalid value for required argument 'TagId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagMaskingPolicyAssociation
	err := ctx.RegisterResource("snowflake:index/tagMaskingPolicyAssociation:TagMaskingPolicyAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagMaskingPolicyAssociation gets an existing TagMaskingPolicyAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagMaskingPolicyAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagMaskingPolicyAssociationState, opts ...pulumi.ResourceOption) (*TagMaskingPolicyAssociation, error) {
	var resource TagMaskingPolicyAssociation
	err := ctx.ReadResource("snowflake:index/tagMaskingPolicyAssociation:TagMaskingPolicyAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagMaskingPolicyAssociation resources.
type tagMaskingPolicyAssociationState struct {
	// The resource id of the masking policy
	MaskingPolicyId *string `pulumi:"maskingPolicyId"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId *string `pulumi:"tagId"`
}

type TagMaskingPolicyAssociationState struct {
	// The resource id of the masking policy
	MaskingPolicyId pulumi.StringPtrInput
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringPtrInput
}

func (TagMaskingPolicyAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagMaskingPolicyAssociationState)(nil)).Elem()
}

type tagMaskingPolicyAssociationArgs struct {
	// The resource id of the masking policy
	MaskingPolicyId string `pulumi:"maskingPolicyId"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId string `pulumi:"tagId"`
}

// The set of arguments for constructing a TagMaskingPolicyAssociation resource.
type TagMaskingPolicyAssociationArgs struct {
	// The resource id of the masking policy
	MaskingPolicyId pulumi.StringInput
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringInput
}

func (TagMaskingPolicyAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagMaskingPolicyAssociationArgs)(nil)).Elem()
}

type TagMaskingPolicyAssociationInput interface {
	pulumi.Input

	ToTagMaskingPolicyAssociationOutput() TagMaskingPolicyAssociationOutput
	ToTagMaskingPolicyAssociationOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationOutput
}

func (*TagMaskingPolicyAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TagMaskingPolicyAssociation)(nil)).Elem()
}

func (i *TagMaskingPolicyAssociation) ToTagMaskingPolicyAssociationOutput() TagMaskingPolicyAssociationOutput {
	return i.ToTagMaskingPolicyAssociationOutputWithContext(context.Background())
}

func (i *TagMaskingPolicyAssociation) ToTagMaskingPolicyAssociationOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMaskingPolicyAssociationOutput)
}

// TagMaskingPolicyAssociationArrayInput is an input type that accepts TagMaskingPolicyAssociationArray and TagMaskingPolicyAssociationArrayOutput values.
// You can construct a concrete instance of `TagMaskingPolicyAssociationArrayInput` via:
//
//	TagMaskingPolicyAssociationArray{ TagMaskingPolicyAssociationArgs{...} }
type TagMaskingPolicyAssociationArrayInput interface {
	pulumi.Input

	ToTagMaskingPolicyAssociationArrayOutput() TagMaskingPolicyAssociationArrayOutput
	ToTagMaskingPolicyAssociationArrayOutputWithContext(context.Context) TagMaskingPolicyAssociationArrayOutput
}

type TagMaskingPolicyAssociationArray []TagMaskingPolicyAssociationInput

func (TagMaskingPolicyAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagMaskingPolicyAssociation)(nil)).Elem()
}

func (i TagMaskingPolicyAssociationArray) ToTagMaskingPolicyAssociationArrayOutput() TagMaskingPolicyAssociationArrayOutput {
	return i.ToTagMaskingPolicyAssociationArrayOutputWithContext(context.Background())
}

func (i TagMaskingPolicyAssociationArray) ToTagMaskingPolicyAssociationArrayOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMaskingPolicyAssociationArrayOutput)
}

// TagMaskingPolicyAssociationMapInput is an input type that accepts TagMaskingPolicyAssociationMap and TagMaskingPolicyAssociationMapOutput values.
// You can construct a concrete instance of `TagMaskingPolicyAssociationMapInput` via:
//
//	TagMaskingPolicyAssociationMap{ "key": TagMaskingPolicyAssociationArgs{...} }
type TagMaskingPolicyAssociationMapInput interface {
	pulumi.Input

	ToTagMaskingPolicyAssociationMapOutput() TagMaskingPolicyAssociationMapOutput
	ToTagMaskingPolicyAssociationMapOutputWithContext(context.Context) TagMaskingPolicyAssociationMapOutput
}

type TagMaskingPolicyAssociationMap map[string]TagMaskingPolicyAssociationInput

func (TagMaskingPolicyAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagMaskingPolicyAssociation)(nil)).Elem()
}

func (i TagMaskingPolicyAssociationMap) ToTagMaskingPolicyAssociationMapOutput() TagMaskingPolicyAssociationMapOutput {
	return i.ToTagMaskingPolicyAssociationMapOutputWithContext(context.Background())
}

func (i TagMaskingPolicyAssociationMap) ToTagMaskingPolicyAssociationMapOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMaskingPolicyAssociationMapOutput)
}

type TagMaskingPolicyAssociationOutput struct{ *pulumi.OutputState }

func (TagMaskingPolicyAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagMaskingPolicyAssociation)(nil)).Elem()
}

func (o TagMaskingPolicyAssociationOutput) ToTagMaskingPolicyAssociationOutput() TagMaskingPolicyAssociationOutput {
	return o
}

func (o TagMaskingPolicyAssociationOutput) ToTagMaskingPolicyAssociationOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationOutput {
	return o
}

// The resource id of the masking policy
func (o TagMaskingPolicyAssociationOutput) MaskingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagMaskingPolicyAssociation) pulumi.StringOutput { return v.MaskingPolicyId }).(pulumi.StringOutput)
}

// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
func (o TagMaskingPolicyAssociationOutput) TagId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagMaskingPolicyAssociation) pulumi.StringOutput { return v.TagId }).(pulumi.StringOutput)
}

type TagMaskingPolicyAssociationArrayOutput struct{ *pulumi.OutputState }

func (TagMaskingPolicyAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagMaskingPolicyAssociation)(nil)).Elem()
}

func (o TagMaskingPolicyAssociationArrayOutput) ToTagMaskingPolicyAssociationArrayOutput() TagMaskingPolicyAssociationArrayOutput {
	return o
}

func (o TagMaskingPolicyAssociationArrayOutput) ToTagMaskingPolicyAssociationArrayOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationArrayOutput {
	return o
}

func (o TagMaskingPolicyAssociationArrayOutput) Index(i pulumi.IntInput) TagMaskingPolicyAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagMaskingPolicyAssociation {
		return vs[0].([]*TagMaskingPolicyAssociation)[vs[1].(int)]
	}).(TagMaskingPolicyAssociationOutput)
}

type TagMaskingPolicyAssociationMapOutput struct{ *pulumi.OutputState }

func (TagMaskingPolicyAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagMaskingPolicyAssociation)(nil)).Elem()
}

func (o TagMaskingPolicyAssociationMapOutput) ToTagMaskingPolicyAssociationMapOutput() TagMaskingPolicyAssociationMapOutput {
	return o
}

func (o TagMaskingPolicyAssociationMapOutput) ToTagMaskingPolicyAssociationMapOutputWithContext(ctx context.Context) TagMaskingPolicyAssociationMapOutput {
	return o
}

func (o TagMaskingPolicyAssociationMapOutput) MapIndex(k pulumi.StringInput) TagMaskingPolicyAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagMaskingPolicyAssociation {
		return vs[0].(map[string]*TagMaskingPolicyAssociation)[vs[1].(string)]
	}).(TagMaskingPolicyAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagMaskingPolicyAssociationInput)(nil)).Elem(), &TagMaskingPolicyAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagMaskingPolicyAssociationArrayInput)(nil)).Elem(), TagMaskingPolicyAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagMaskingPolicyAssociationMapInput)(nil)).Elem(), TagMaskingPolicyAssociationMap{})
	pulumi.RegisterOutputType(TagMaskingPolicyAssociationOutput{})
	pulumi.RegisterOutputType(TagMaskingPolicyAssociationArrayOutput{})
	pulumi.RegisterOutputType(TagMaskingPolicyAssociationMapOutput{})
}
