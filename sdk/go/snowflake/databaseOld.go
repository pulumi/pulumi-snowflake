// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/databaseOld:DatabaseOld example 'database_name'
// ```
type DatabaseOld struct {
	pulumi.CustomResourceState

	// Specifies a comment for the database.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntPtrOutput `pulumi:"dataRetentionTimeInDays"`
	// Specify a database to create a clone from.
	FromDatabase pulumi.StringPtrOutput `pulumi:"fromDatabase"`
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
	FromReplica pulumi.StringPtrOutput `pulumi:"fromReplica"`
	// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
	FromShare pulumi.StringMapOutput `pulumi:"fromShare"`
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrOutput `pulumi:"isTransient"`
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringOutput `pulumi:"name"`
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration DatabaseOldReplicationConfigurationPtrOutput `pulumi:"replicationConfiguration"`
}

// NewDatabaseOld registers a new resource with the given unique name, arguments, and options.
func NewDatabaseOld(ctx *pulumi.Context,
	name string, args *DatabaseOldArgs, opts ...pulumi.ResourceOption) (*DatabaseOld, error) {
	if args == nil {
		args = &DatabaseOldArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseOld
	err := ctx.RegisterResource("snowflake:index/databaseOld:DatabaseOld", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseOld gets an existing DatabaseOld resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseOld(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseOldState, opts ...pulumi.ResourceOption) (*DatabaseOld, error) {
	var resource DatabaseOld
	err := ctx.ReadResource("snowflake:index/databaseOld:DatabaseOld", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseOld resources.
type databaseOldState struct {
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays *int `pulumi:"dataRetentionTimeInDays"`
	// Specify a database to create a clone from.
	FromDatabase *string `pulumi:"fromDatabase"`
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
	FromReplica *string `pulumi:"fromReplica"`
	// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
	FromShare map[string]string `pulumi:"fromShare"`
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `pulumi:"isTransient"`
	// Specifies the identifier for the database; must be unique for your account.
	Name *string `pulumi:"name"`
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration *DatabaseOldReplicationConfiguration `pulumi:"replicationConfiguration"`
}

type DatabaseOldState struct {
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntPtrInput
	// Specify a database to create a clone from.
	FromDatabase pulumi.StringPtrInput
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
	FromReplica pulumi.StringPtrInput
	// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
	FromShare pulumi.StringMapInput
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrInput
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringPtrInput
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration DatabaseOldReplicationConfigurationPtrInput
}

func (DatabaseOldState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseOldState)(nil)).Elem()
}

type databaseOldArgs struct {
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays *int `pulumi:"dataRetentionTimeInDays"`
	// Specify a database to create a clone from.
	FromDatabase *string `pulumi:"fromDatabase"`
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
	FromReplica *string `pulumi:"fromReplica"`
	// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
	FromShare map[string]string `pulumi:"fromShare"`
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `pulumi:"isTransient"`
	// Specifies the identifier for the database; must be unique for your account.
	Name *string `pulumi:"name"`
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration *DatabaseOldReplicationConfiguration `pulumi:"replicationConfiguration"`
}

// The set of arguments for constructing a DatabaseOld resource.
type DatabaseOldArgs struct {
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntPtrInput
	// Specify a database to create a clone from.
	FromDatabase pulumi.StringPtrInput
	// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
	FromReplica pulumi.StringPtrInput
	// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
	FromShare pulumi.StringMapInput
	// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrInput
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringPtrInput
	// When set, specifies the configurations for database replication.
	ReplicationConfiguration DatabaseOldReplicationConfigurationPtrInput
}

func (DatabaseOldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseOldArgs)(nil)).Elem()
}

type DatabaseOldInput interface {
	pulumi.Input

	ToDatabaseOldOutput() DatabaseOldOutput
	ToDatabaseOldOutputWithContext(ctx context.Context) DatabaseOldOutput
}

func (*DatabaseOld) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOld)(nil)).Elem()
}

func (i *DatabaseOld) ToDatabaseOldOutput() DatabaseOldOutput {
	return i.ToDatabaseOldOutputWithContext(context.Background())
}

func (i *DatabaseOld) ToDatabaseOldOutputWithContext(ctx context.Context) DatabaseOldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOldOutput)
}

// DatabaseOldArrayInput is an input type that accepts DatabaseOldArray and DatabaseOldArrayOutput values.
// You can construct a concrete instance of `DatabaseOldArrayInput` via:
//
//	DatabaseOldArray{ DatabaseOldArgs{...} }
type DatabaseOldArrayInput interface {
	pulumi.Input

	ToDatabaseOldArrayOutput() DatabaseOldArrayOutput
	ToDatabaseOldArrayOutputWithContext(context.Context) DatabaseOldArrayOutput
}

type DatabaseOldArray []DatabaseOldInput

func (DatabaseOldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseOld)(nil)).Elem()
}

func (i DatabaseOldArray) ToDatabaseOldArrayOutput() DatabaseOldArrayOutput {
	return i.ToDatabaseOldArrayOutputWithContext(context.Background())
}

func (i DatabaseOldArray) ToDatabaseOldArrayOutputWithContext(ctx context.Context) DatabaseOldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOldArrayOutput)
}

// DatabaseOldMapInput is an input type that accepts DatabaseOldMap and DatabaseOldMapOutput values.
// You can construct a concrete instance of `DatabaseOldMapInput` via:
//
//	DatabaseOldMap{ "key": DatabaseOldArgs{...} }
type DatabaseOldMapInput interface {
	pulumi.Input

	ToDatabaseOldMapOutput() DatabaseOldMapOutput
	ToDatabaseOldMapOutputWithContext(context.Context) DatabaseOldMapOutput
}

type DatabaseOldMap map[string]DatabaseOldInput

func (DatabaseOldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseOld)(nil)).Elem()
}

func (i DatabaseOldMap) ToDatabaseOldMapOutput() DatabaseOldMapOutput {
	return i.ToDatabaseOldMapOutputWithContext(context.Background())
}

func (i DatabaseOldMap) ToDatabaseOldMapOutputWithContext(ctx context.Context) DatabaseOldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOldMapOutput)
}

type DatabaseOldOutput struct{ *pulumi.OutputState }

func (DatabaseOldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOld)(nil)).Elem()
}

func (o DatabaseOldOutput) ToDatabaseOldOutput() DatabaseOldOutput {
	return o
}

func (o DatabaseOldOutput) ToDatabaseOldOutputWithContext(ctx context.Context) DatabaseOldOutput {
	return o
}

// Specifies a comment for the database.
func (o DatabaseOldOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Number of days for which Snowflake retains historical data for performing Time Travel actions (SELECT, CLONE, UNDROP) on the object. A value of 0 effectively disables Time Travel for the specified database. Default value for this field is set to -1, which is a fallback to use Snowflake default. For more information, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
func (o DatabaseOldOutput) DataRetentionTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.IntPtrOutput { return v.DataRetentionTimeInDays }).(pulumi.IntPtrOutput)
}

// Specify a database to create a clone from.
func (o DatabaseOldOutput) FromDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.StringPtrOutput { return v.FromDatabase }).(pulumi.StringPtrOutput)
}

// Specify a fully-qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<db_name>"`. An example would be: `"myorg1"."account1"."db1"`
func (o DatabaseOldOutput) FromReplica() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.StringPtrOutput { return v.FromReplica }).(pulumi.StringPtrOutput)
}

// Specify a provider and a share in this map to create a database from a share. As of version 0.87.0, the provider field is the account locator.
func (o DatabaseOldOutput) FromShare() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.StringMapOutput { return v.FromShare }).(pulumi.StringMapOutput)
}

// Specifies a database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
func (o DatabaseOldOutput) IsTransient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.BoolPtrOutput { return v.IsTransient }).(pulumi.BoolPtrOutput)
}

// Specifies the identifier for the database; must be unique for your account.
func (o DatabaseOldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseOld) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// When set, specifies the configurations for database replication.
func (o DatabaseOldOutput) ReplicationConfiguration() DatabaseOldReplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *DatabaseOld) DatabaseOldReplicationConfigurationPtrOutput { return v.ReplicationConfiguration }).(DatabaseOldReplicationConfigurationPtrOutput)
}

type DatabaseOldArrayOutput struct{ *pulumi.OutputState }

func (DatabaseOldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseOld)(nil)).Elem()
}

func (o DatabaseOldArrayOutput) ToDatabaseOldArrayOutput() DatabaseOldArrayOutput {
	return o
}

func (o DatabaseOldArrayOutput) ToDatabaseOldArrayOutputWithContext(ctx context.Context) DatabaseOldArrayOutput {
	return o
}

func (o DatabaseOldArrayOutput) Index(i pulumi.IntInput) DatabaseOldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseOld {
		return vs[0].([]*DatabaseOld)[vs[1].(int)]
	}).(DatabaseOldOutput)
}

type DatabaseOldMapOutput struct{ *pulumi.OutputState }

func (DatabaseOldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseOld)(nil)).Elem()
}

func (o DatabaseOldMapOutput) ToDatabaseOldMapOutput() DatabaseOldMapOutput {
	return o
}

func (o DatabaseOldMapOutput) ToDatabaseOldMapOutputWithContext(ctx context.Context) DatabaseOldMapOutput {
	return o
}

func (o DatabaseOldMapOutput) MapIndex(k pulumi.StringInput) DatabaseOldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseOld {
		return vs[0].(map[string]*DatabaseOld)[vs[1].(string)]
	}).(DatabaseOldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOldInput)(nil)).Elem(), &DatabaseOld{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOldArrayInput)(nil)).Elem(), DatabaseOldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOldMapInput)(nil)).Elem(), DatabaseOldMap{})
	pulumi.RegisterOutputType(DatabaseOldOutput{})
	pulumi.RegisterOutputType(DatabaseOldArrayOutput{})
	pulumi.RegisterOutputType(DatabaseOldMapOutput{})
}
