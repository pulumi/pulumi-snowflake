// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/primaryConnection:PrimaryConnection example '"<primary_connection_name>"'
// ```
type PrimaryConnection struct {
	pulumi.CustomResourceState

	// Specifies a comment for the connection.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
	EnableFailoverToAccounts pulumi.StringArrayOutput `pulumi:"enableFailoverToAccounts"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	IsPrimary          pulumi.BoolOutput   `pulumi:"isPrimary"`
	// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Outputs the result of `SHOW CONNECTIONS` for the given connection.
	ShowOutputs PrimaryConnectionShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewPrimaryConnection registers a new resource with the given unique name, arguments, and options.
func NewPrimaryConnection(ctx *pulumi.Context,
	name string, args *PrimaryConnectionArgs, opts ...pulumi.ResourceOption) (*PrimaryConnection, error) {
	if args == nil {
		args = &PrimaryConnectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrimaryConnection
	err := ctx.RegisterResource("snowflake:index/primaryConnection:PrimaryConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimaryConnection gets an existing PrimaryConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimaryConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimaryConnectionState, opts ...pulumi.ResourceOption) (*PrimaryConnection, error) {
	var resource PrimaryConnection
	err := ctx.ReadResource("snowflake:index/primaryConnection:PrimaryConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrimaryConnection resources.
type primaryConnectionState struct {
	// Specifies a comment for the connection.
	Comment *string `pulumi:"comment"`
	// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
	EnableFailoverToAccounts []string `pulumi:"enableFailoverToAccounts"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	IsPrimary          *bool   `pulumi:"isPrimary"`
	// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Outputs the result of `SHOW CONNECTIONS` for the given connection.
	ShowOutputs []PrimaryConnectionShowOutput `pulumi:"showOutputs"`
}

type PrimaryConnectionState struct {
	// Specifies a comment for the connection.
	Comment pulumi.StringPtrInput
	// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
	EnableFailoverToAccounts pulumi.StringArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	IsPrimary          pulumi.BoolPtrInput
	// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Outputs the result of `SHOW CONNECTIONS` for the given connection.
	ShowOutputs PrimaryConnectionShowOutputArrayInput
}

func (PrimaryConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryConnectionState)(nil)).Elem()
}

type primaryConnectionArgs struct {
	// Specifies a comment for the connection.
	Comment *string `pulumi:"comment"`
	// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
	EnableFailoverToAccounts []string `pulumi:"enableFailoverToAccounts"`
	// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PrimaryConnection resource.
type PrimaryConnectionArgs struct {
	// Specifies a comment for the connection.
	Comment pulumi.StringPtrInput
	// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
	EnableFailoverToAccounts pulumi.StringArrayInput
	// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
}

func (PrimaryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryConnectionArgs)(nil)).Elem()
}

type PrimaryConnectionInput interface {
	pulumi.Input

	ToPrimaryConnectionOutput() PrimaryConnectionOutput
	ToPrimaryConnectionOutputWithContext(ctx context.Context) PrimaryConnectionOutput
}

func (*PrimaryConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryConnection)(nil)).Elem()
}

func (i *PrimaryConnection) ToPrimaryConnectionOutput() PrimaryConnectionOutput {
	return i.ToPrimaryConnectionOutputWithContext(context.Background())
}

func (i *PrimaryConnection) ToPrimaryConnectionOutputWithContext(ctx context.Context) PrimaryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryConnectionOutput)
}

// PrimaryConnectionArrayInput is an input type that accepts PrimaryConnectionArray and PrimaryConnectionArrayOutput values.
// You can construct a concrete instance of `PrimaryConnectionArrayInput` via:
//
//	PrimaryConnectionArray{ PrimaryConnectionArgs{...} }
type PrimaryConnectionArrayInput interface {
	pulumi.Input

	ToPrimaryConnectionArrayOutput() PrimaryConnectionArrayOutput
	ToPrimaryConnectionArrayOutputWithContext(context.Context) PrimaryConnectionArrayOutput
}

type PrimaryConnectionArray []PrimaryConnectionInput

func (PrimaryConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryConnection)(nil)).Elem()
}

func (i PrimaryConnectionArray) ToPrimaryConnectionArrayOutput() PrimaryConnectionArrayOutput {
	return i.ToPrimaryConnectionArrayOutputWithContext(context.Background())
}

func (i PrimaryConnectionArray) ToPrimaryConnectionArrayOutputWithContext(ctx context.Context) PrimaryConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryConnectionArrayOutput)
}

// PrimaryConnectionMapInput is an input type that accepts PrimaryConnectionMap and PrimaryConnectionMapOutput values.
// You can construct a concrete instance of `PrimaryConnectionMapInput` via:
//
//	PrimaryConnectionMap{ "key": PrimaryConnectionArgs{...} }
type PrimaryConnectionMapInput interface {
	pulumi.Input

	ToPrimaryConnectionMapOutput() PrimaryConnectionMapOutput
	ToPrimaryConnectionMapOutputWithContext(context.Context) PrimaryConnectionMapOutput
}

type PrimaryConnectionMap map[string]PrimaryConnectionInput

func (PrimaryConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryConnection)(nil)).Elem()
}

func (i PrimaryConnectionMap) ToPrimaryConnectionMapOutput() PrimaryConnectionMapOutput {
	return i.ToPrimaryConnectionMapOutputWithContext(context.Background())
}

func (i PrimaryConnectionMap) ToPrimaryConnectionMapOutputWithContext(ctx context.Context) PrimaryConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryConnectionMapOutput)
}

type PrimaryConnectionOutput struct{ *pulumi.OutputState }

func (PrimaryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryConnection)(nil)).Elem()
}

func (o PrimaryConnectionOutput) ToPrimaryConnectionOutput() PrimaryConnectionOutput {
	return o
}

func (o PrimaryConnectionOutput) ToPrimaryConnectionOutputWithContext(ctx context.Context) PrimaryConnectionOutput {
	return o
}

// Specifies a comment for the connection.
func (o PrimaryConnectionOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryConnection) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enables failover for given connection to provided accounts. Specifies a list of accounts in your organization where a secondary connection for this primary connection can be promoted to serve as the primary connection. Include your organization name for each account in the list. For more information about this resource, see docs.
func (o PrimaryConnectionOutput) EnableFailoverToAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrimaryConnection) pulumi.StringArrayOutput { return v.EnableFailoverToAccounts }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o PrimaryConnectionOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryConnection) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o PrimaryConnectionOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v *PrimaryConnection) pulumi.BoolOutput { return v.IsPrimary }).(pulumi.BoolOutput)
}

// String that specifies the identifier (i.e. name) for the connection. Must start with an alphabetic character and may only contain letters, decimal digits (0-9), and underscores (*). For a primary connection, the name must be unique across connection names and account names in the organization.  Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o PrimaryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW CONNECTIONS` for the given connection.
func (o PrimaryConnectionOutput) ShowOutputs() PrimaryConnectionShowOutputArrayOutput {
	return o.ApplyT(func(v *PrimaryConnection) PrimaryConnectionShowOutputArrayOutput { return v.ShowOutputs }).(PrimaryConnectionShowOutputArrayOutput)
}

type PrimaryConnectionArrayOutput struct{ *pulumi.OutputState }

func (PrimaryConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryConnection)(nil)).Elem()
}

func (o PrimaryConnectionArrayOutput) ToPrimaryConnectionArrayOutput() PrimaryConnectionArrayOutput {
	return o
}

func (o PrimaryConnectionArrayOutput) ToPrimaryConnectionArrayOutputWithContext(ctx context.Context) PrimaryConnectionArrayOutput {
	return o
}

func (o PrimaryConnectionArrayOutput) Index(i pulumi.IntInput) PrimaryConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrimaryConnection {
		return vs[0].([]*PrimaryConnection)[vs[1].(int)]
	}).(PrimaryConnectionOutput)
}

type PrimaryConnectionMapOutput struct{ *pulumi.OutputState }

func (PrimaryConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryConnection)(nil)).Elem()
}

func (o PrimaryConnectionMapOutput) ToPrimaryConnectionMapOutput() PrimaryConnectionMapOutput {
	return o
}

func (o PrimaryConnectionMapOutput) ToPrimaryConnectionMapOutputWithContext(ctx context.Context) PrimaryConnectionMapOutput {
	return o
}

func (o PrimaryConnectionMapOutput) MapIndex(k pulumi.StringInput) PrimaryConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrimaryConnection {
		return vs[0].(map[string]*PrimaryConnection)[vs[1].(string)]
	}).(PrimaryConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryConnectionInput)(nil)).Elem(), &PrimaryConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryConnectionArrayInput)(nil)).Elem(), PrimaryConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryConnectionMapInput)(nil)).Elem(), PrimaryConnectionMap{})
	pulumi.RegisterOutputType(PrimaryConnectionOutput{})
	pulumi.RegisterOutputType(PrimaryConnectionArrayOutput{})
	pulumi.RegisterOutputType(PrimaryConnectionMapOutput{})
}
