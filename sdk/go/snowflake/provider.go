// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the snowflake package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The name of the Snowflake account. Can also come from the `SNOWFLAKE_ACCOUNT` environment variable.
	Account pulumi.StringOutput `pulumi:"account"`
	// Supports passing in a custom host value to the snowflake go driver for use with privatelink.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_refresh_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN` environment
	// variable.
	OauthAccessToken pulumi.StringPtrOutput `pulumi:"oauthAccessToken"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
	OauthClientId pulumi.StringPtrOutput `pulumi:"oauthClientId"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
	OauthClientSecret pulumi.StringPtrOutput `pulumi:"oauthClientSecret"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
	OauthEndpoint pulumi.StringPtrOutput `pulumi:"oauthEndpoint"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment variable.
	OauthRedirectUrl pulumi.StringPtrOutput `pulumi:"oauthRedirectUrl"`
	// Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
	// `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_access_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN` environment
	// variable.
	OauthRefreshToken pulumi.StringPtrOutput `pulumi:"oauthRefreshToken"`
	// Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can be sourced from
	// `SNOWFLAKE_PASSWORD` environment variable.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can be sourced from
	// `SNOWFLAKE_PRIVATE_KEY` environment variable.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
	// des-ede3-cbc
	PrivateKeyPassphrase pulumi.StringPtrOutput `pulumi:"privateKeyPassphrase"`
	// Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
	// `password`. Can be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
	PrivateKeyPath pulumi.StringPtrOutput `pulumi:"privateKeyPath"`
	// Support custom protocols to snowflake go driver. Can be sourced from `SNOWFLAKE_PROTOCOL` environment variable.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
	// format for the `account`
	// identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
	// in the form of `<cloud_region_id>.<cloud>`. Can be sourced from the `SNOWFLAKE_REGION` environment variable.
	Region pulumi.StringOutput `pulumi:"region"`
	// Snowflake role to use for operations. If left unset, default role for user will be used. Can be sourced from the
	// `SNOWFLAKE_ROLE` environment variable.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Username for username+password authentication. Can come from the `SNOWFLAKE_USER` environment variable.
	Username pulumi.StringOutput `pulumi:"username"`
	// Sets the default warehouse. Optional. Can be sourced from SNOWFLAKE_WAREHOUSE environment variable.
	Warehouse pulumi.StringPtrOutput `pulumi:"warehouse"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.OauthAccessToken != nil {
		args.OauthAccessToken = pulumi.ToSecret(args.OauthAccessToken).(pulumi.StringPtrInput)
	}
	if args.OauthClientId != nil {
		args.OauthClientId = pulumi.ToSecret(args.OauthClientId).(pulumi.StringPtrInput)
	}
	if args.OauthClientSecret != nil {
		args.OauthClientSecret = pulumi.ToSecret(args.OauthClientSecret).(pulumi.StringPtrInput)
	}
	if args.OauthEndpoint != nil {
		args.OauthEndpoint = pulumi.ToSecret(args.OauthEndpoint).(pulumi.StringPtrInput)
	}
	if args.OauthRedirectUrl != nil {
		args.OauthRedirectUrl = pulumi.ToSecret(args.OauthRedirectUrl).(pulumi.StringPtrInput)
	}
	if args.OauthRefreshToken != nil {
		args.OauthRefreshToken = pulumi.ToSecret(args.OauthRefreshToken).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyPassphrase != nil {
		args.PrivateKeyPassphrase = pulumi.ToSecret(args.PrivateKeyPassphrase).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyPath != nil {
		args.PrivateKeyPath = pulumi.ToSecret(args.PrivateKeyPath).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"oauthAccessToken",
		"oauthClientId",
		"oauthClientSecret",
		"oauthEndpoint",
		"oauthRedirectUrl",
		"oauthRefreshToken",
		"password",
		"privateKey",
		"privateKeyPassphrase",
		"privateKeyPath",
	})
	opts = append(opts, secrets)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:snowflake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The name of the Snowflake account. Can also come from the `SNOWFLAKE_ACCOUNT` environment variable.
	Account string `pulumi:"account"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.
	BrowserAuth *bool `pulumi:"browserAuth"`
	// Supports passing in a custom host value to the snowflake go driver for use with privatelink.
	Host *string `pulumi:"host"`
	// Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_refresh_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN` environment
	// variable.
	OauthAccessToken *string `pulumi:"oauthAccessToken"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
	OauthClientId *string `pulumi:"oauthClientId"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
	OauthClientSecret *string `pulumi:"oauthClientSecret"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
	OauthEndpoint *string `pulumi:"oauthEndpoint"`
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment variable.
	OauthRedirectUrl *string `pulumi:"oauthRedirectUrl"`
	// Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
	// `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_access_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN` environment
	// variable.
	OauthRefreshToken *string `pulumi:"oauthRefreshToken"`
	// Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can be sourced from
	// `SNOWFLAKE_PASSWORD` environment variable.
	Password *string `pulumi:"password"`
	// Support custom port values to snowflake go driver for use with privatelink. Can be sourced from `SNOWFLAKE_PORT`
	// environment variable.
	Port *int `pulumi:"port"`
	// Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can be sourced from
	// `SNOWFLAKE_PRIVATE_KEY` environment variable.
	PrivateKey *string `pulumi:"privateKey"`
	// Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
	// des-ede3-cbc
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
	// `password`. Can be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
	// Support custom protocols to snowflake go driver. Can be sourced from `SNOWFLAKE_PROTOCOL` environment variable.
	Protocol *string `pulumi:"protocol"`
	// [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
	// format for the `account`
	// identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
	// in the form of `<cloud_region_id>.<cloud>`. Can be sourced from the `SNOWFLAKE_REGION` environment variable.
	Region string `pulumi:"region"`
	// Snowflake role to use for operations. If left unset, default role for user will be used. Can be sourced from the
	// `SNOWFLAKE_ROLE` environment variable.
	Role *string `pulumi:"role"`
	// Username for username+password authentication. Can come from the `SNOWFLAKE_USER` environment variable.
	Username string `pulumi:"username"`
	// Sets the default warehouse. Optional. Can be sourced from SNOWFLAKE_WAREHOUSE environment variable.
	Warehouse *string `pulumi:"warehouse"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The name of the Snowflake account. Can also come from the `SNOWFLAKE_ACCOUNT` environment variable.
	Account pulumi.StringInput
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_USE_BROWSER_AUTH` environment variable.
	BrowserAuth pulumi.BoolPtrInput
	// Supports passing in a custom host value to the snowflake go driver for use with privatelink.
	Host pulumi.StringPtrInput
	// Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_refresh_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN` environment
	// variable.
	OauthAccessToken pulumi.StringPtrInput
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
	OauthClientId pulumi.StringPtrInput
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
	OauthClientSecret pulumi.StringPtrInput
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
	OauthEndpoint pulumi.StringPtrInput
	// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment variable.
	OauthRedirectUrl pulumi.StringPtrInput
	// Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
	// `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
	// `private_key_path`, `oauth_access_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN` environment
	// variable.
	OauthRefreshToken pulumi.StringPtrInput
	// Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can be sourced from
	// `SNOWFLAKE_PASSWORD` environment variable.
	Password pulumi.StringPtrInput
	// Support custom port values to snowflake go driver for use with privatelink. Can be sourced from `SNOWFLAKE_PORT`
	// environment variable.
	Port pulumi.IntPtrInput
	// Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can be sourced from
	// `SNOWFLAKE_PRIVATE_KEY` environment variable.
	PrivateKey pulumi.StringPtrInput
	// Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
	// des-ede3-cbc
	PrivateKeyPassphrase pulumi.StringPtrInput
	// Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
	// `password`. Can be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
	PrivateKeyPath pulumi.StringPtrInput
	// Support custom protocols to snowflake go driver. Can be sourced from `SNOWFLAKE_PROTOCOL` environment variable.
	Protocol pulumi.StringPtrInput
	// [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
	// format for the `account`
	// identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
	// in the form of `<cloud_region_id>.<cloud>`. Can be sourced from the `SNOWFLAKE_REGION` environment variable.
	Region pulumi.StringInput
	// Snowflake role to use for operations. If left unset, default role for user will be used. Can be sourced from the
	// `SNOWFLAKE_ROLE` environment variable.
	Role pulumi.StringPtrInput
	// Username for username+password authentication. Can come from the `SNOWFLAKE_USER` environment variable.
	Username pulumi.StringInput
	// Sets the default warehouse. Optional. Can be sourced from SNOWFLAKE_WAREHOUSE environment variable.
	Warehouse pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The name of the Snowflake account. Can also come from the `SNOWFLAKE_ACCOUNT` environment variable.
func (o ProviderOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

// Supports passing in a custom host value to the snowflake go driver for use with privatelink.
func (o ProviderOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// Token for use with OAuth. Generating the token is left to other tools. Cannot be used with `browser_auth`,
// `private_key_path`, `oauth_refresh_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_ACCESS_TOKEN` environment
// variable.
func (o ProviderOutput) OauthAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthAccessToken }).(pulumi.StringPtrOutput)
}

// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_ID` environment variable.
func (o ProviderOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthClientId }).(pulumi.StringPtrOutput)
}

// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_CLIENT_SECRET` environment variable.
func (o ProviderOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthClientSecret }).(pulumi.StringPtrOutput)
}

// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_ENDPOINT` environment variable.
func (o ProviderOutput) OauthEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthEndpoint }).(pulumi.StringPtrOutput)
}

// Required when `oauth_refresh_token` is used. Can be sourced from `SNOWFLAKE_OAUTH_REDIRECT_URL` environment variable.
func (o ProviderOutput) OauthRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthRedirectUrl }).(pulumi.StringPtrOutput)
}

// Token for use with OAuth. Setup and generation of the token is left to other tools. Should be used in conjunction with
// `oauth_client_id`, `oauth_client_secret`, `oauth_endpoint`, `oauth_redirect_url`. Cannot be used with `browser_auth`,
// `private_key_path`, `oauth_access_token` or `password`. Can be sourced from `SNOWFLAKE_OAUTH_REFRESH_TOKEN` environment
// variable.
func (o ProviderOutput) OauthRefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OauthRefreshToken }).(pulumi.StringPtrOutput)
}

// Password for username+password auth. Cannot be used with `browser_auth` or `private_key_path`. Can be sourced from
// `SNOWFLAKE_PASSWORD` environment variable.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Private Key for username+private-key auth. Cannot be used with `browser_auth` or `password`. Can be sourced from
// `SNOWFLAKE_PRIVATE_KEY` environment variable.
func (o ProviderOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and
// des-ede3-cbc
func (o ProviderOutput) PrivateKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PrivateKeyPassphrase }).(pulumi.StringPtrOutput)
}

// Path to a private key for using keypair authentication. Cannot be used with `browser_auth`, `oauth_access_token` or
// `password`. Can be sourced from `SNOWFLAKE_PRIVATE_KEY_PATH` environment variable.
func (o ProviderOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PrivateKeyPath }).(pulumi.StringPtrOutput)
}

// Support custom protocols to snowflake go driver. Can be sourced from `SNOWFLAKE_PROTOCOL` environment variable.
func (o ProviderOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// [Snowflake region](https://docs.snowflake.com/en/user-guide/intro-regions.html) to use. Required if using the [legacy
// format for the `account`
// identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region)
// in the form of `<cloud_region_id>.<cloud>`. Can be sourced from the `SNOWFLAKE_REGION` environment variable.
func (o ProviderOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Snowflake role to use for operations. If left unset, default role for user will be used. Can be sourced from the
// `SNOWFLAKE_ROLE` environment variable.
func (o ProviderOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Username for username+password authentication. Can come from the `SNOWFLAKE_USER` environment variable.
func (o ProviderOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Sets the default warehouse. Optional. Can be sourced from SNOWFLAKE_WAREHOUSE environment variable.
func (o ProviderOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Warehouse }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
