// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecretWithClientCredentials struct {
	pulumi.CustomResourceState

	// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
	// information about this resource, see docs.
	ApiAuthentication pulumi.StringOutput `pulumi:"apiAuthentication"`
	// Specifies a comment for the secret.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs SecretWithClientCredentialsDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
	// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
	// during the OAuth client credentials flow.
	OauthScopes pulumi.StringArrayOutput `pulumi:"oauthScopes"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if
	// needed.
	SecretType pulumi.StringOutput `pulumi:"secretType"`
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs SecretWithClientCredentialsShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewSecretWithClientCredentials registers a new resource with the given unique name, arguments, and options.
func NewSecretWithClientCredentials(ctx *pulumi.Context,
	name string, args *SecretWithClientCredentialsArgs, opts ...pulumi.ResourceOption) (*SecretWithClientCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiAuthentication == nil {
		return nil, errors.New("invalid value for required argument 'ApiAuthentication'")
	}
	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.OauthScopes == nil {
		return nil, errors.New("invalid value for required argument 'OauthScopes'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretWithClientCredentials
	err := ctx.RegisterResource("snowflake:index/secretWithClientCredentials:SecretWithClientCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretWithClientCredentials gets an existing SecretWithClientCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretWithClientCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretWithClientCredentialsState, opts ...pulumi.ResourceOption) (*SecretWithClientCredentials, error) {
	var resource SecretWithClientCredentials
	err := ctx.ReadResource("snowflake:index/secretWithClientCredentials:SecretWithClientCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretWithClientCredentials resources.
type secretWithClientCredentialsState struct {
	// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
	// information about this resource, see docs.
	ApiAuthentication *string `pulumi:"apiAuthentication"`
	// Specifies a comment for the secret.
	Comment *string `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs []SecretWithClientCredentialsDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
	// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
	// during the OAuth client credentials flow.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if
	// needed.
	SecretType *string `pulumi:"secretType"`
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs []SecretWithClientCredentialsShowOutput `pulumi:"showOutputs"`
}

type SecretWithClientCredentialsState struct {
	// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
	// information about this resource, see docs.
	ApiAuthentication pulumi.StringPtrInput
	// Specifies a comment for the secret.
	Comment pulumi.StringPtrInput
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs SecretWithClientCredentialsDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
	// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
	// during the OAuth client credentials flow.
	OauthScopes pulumi.StringArrayInput
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if
	// needed.
	SecretType pulumi.StringPtrInput
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs SecretWithClientCredentialsShowOutputArrayInput
}

func (SecretWithClientCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretWithClientCredentialsState)(nil)).Elem()
}

type secretWithClientCredentialsArgs struct {
	// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
	// information about this resource, see docs.
	ApiAuthentication string `pulumi:"apiAuthentication"`
	// Specifies a comment for the secret.
	Comment *string `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
	// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
	// during the OAuth client credentials flow.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a SecretWithClientCredentials resource.
type SecretWithClientCredentialsArgs struct {
	// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
	// information about this resource, see docs.
	ApiAuthentication pulumi.StringInput
	// Specifies a comment for the secret.
	Comment pulumi.StringPtrInput
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
	// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
	// during the OAuth client credentials flow.
	OauthScopes pulumi.StringArrayInput
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
}

func (SecretWithClientCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretWithClientCredentialsArgs)(nil)).Elem()
}

type SecretWithClientCredentialsInput interface {
	pulumi.Input

	ToSecretWithClientCredentialsOutput() SecretWithClientCredentialsOutput
	ToSecretWithClientCredentialsOutputWithContext(ctx context.Context) SecretWithClientCredentialsOutput
}

func (*SecretWithClientCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretWithClientCredentials)(nil)).Elem()
}

func (i *SecretWithClientCredentials) ToSecretWithClientCredentialsOutput() SecretWithClientCredentialsOutput {
	return i.ToSecretWithClientCredentialsOutputWithContext(context.Background())
}

func (i *SecretWithClientCredentials) ToSecretWithClientCredentialsOutputWithContext(ctx context.Context) SecretWithClientCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithClientCredentialsOutput)
}

// SecretWithClientCredentialsArrayInput is an input type that accepts SecretWithClientCredentialsArray and SecretWithClientCredentialsArrayOutput values.
// You can construct a concrete instance of `SecretWithClientCredentialsArrayInput` via:
//
//	SecretWithClientCredentialsArray{ SecretWithClientCredentialsArgs{...} }
type SecretWithClientCredentialsArrayInput interface {
	pulumi.Input

	ToSecretWithClientCredentialsArrayOutput() SecretWithClientCredentialsArrayOutput
	ToSecretWithClientCredentialsArrayOutputWithContext(context.Context) SecretWithClientCredentialsArrayOutput
}

type SecretWithClientCredentialsArray []SecretWithClientCredentialsInput

func (SecretWithClientCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretWithClientCredentials)(nil)).Elem()
}

func (i SecretWithClientCredentialsArray) ToSecretWithClientCredentialsArrayOutput() SecretWithClientCredentialsArrayOutput {
	return i.ToSecretWithClientCredentialsArrayOutputWithContext(context.Background())
}

func (i SecretWithClientCredentialsArray) ToSecretWithClientCredentialsArrayOutputWithContext(ctx context.Context) SecretWithClientCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithClientCredentialsArrayOutput)
}

// SecretWithClientCredentialsMapInput is an input type that accepts SecretWithClientCredentialsMap and SecretWithClientCredentialsMapOutput values.
// You can construct a concrete instance of `SecretWithClientCredentialsMapInput` via:
//
//	SecretWithClientCredentialsMap{ "key": SecretWithClientCredentialsArgs{...} }
type SecretWithClientCredentialsMapInput interface {
	pulumi.Input

	ToSecretWithClientCredentialsMapOutput() SecretWithClientCredentialsMapOutput
	ToSecretWithClientCredentialsMapOutputWithContext(context.Context) SecretWithClientCredentialsMapOutput
}

type SecretWithClientCredentialsMap map[string]SecretWithClientCredentialsInput

func (SecretWithClientCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretWithClientCredentials)(nil)).Elem()
}

func (i SecretWithClientCredentialsMap) ToSecretWithClientCredentialsMapOutput() SecretWithClientCredentialsMapOutput {
	return i.ToSecretWithClientCredentialsMapOutputWithContext(context.Background())
}

func (i SecretWithClientCredentialsMap) ToSecretWithClientCredentialsMapOutputWithContext(ctx context.Context) SecretWithClientCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithClientCredentialsMapOutput)
}

type SecretWithClientCredentialsOutput struct{ *pulumi.OutputState }

func (SecretWithClientCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretWithClientCredentials)(nil)).Elem()
}

func (o SecretWithClientCredentialsOutput) ToSecretWithClientCredentialsOutput() SecretWithClientCredentialsOutput {
	return o
}

func (o SecretWithClientCredentialsOutput) ToSecretWithClientCredentialsOutputWithContext(ctx context.Context) SecretWithClientCredentialsOutput {
	return o
}

// Specifies the name value of the Snowflake security integration that connects Snowflake to an external service. For more
// information about this resource, see docs.
func (o SecretWithClientCredentialsOutput) ApiAuthentication() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.ApiAuthentication }).(pulumi.StringOutput)
}

// Specifies a comment for the secret.
func (o SecretWithClientCredentialsOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the secret Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o SecretWithClientCredentialsOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE SECRET` for the given secret.
func (o SecretWithClientCredentialsOutput) DescribeOutputs() SecretWithClientCredentialsDescribeOutputArrayOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) SecretWithClientCredentialsDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(SecretWithClientCredentialsDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name
// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o SecretWithClientCredentialsOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical
// limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o SecretWithClientCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of scopes to use when making a request from the OAuth server by a role with USAGE on the integration
// during the OAuth client credentials flow.
func (o SecretWithClientCredentialsOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringArrayOutput { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o SecretWithClientCredentialsOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if
// needed.
func (o SecretWithClientCredentialsOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) pulumi.StringOutput { return v.SecretType }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW SECRETS` for the given secret.
func (o SecretWithClientCredentialsOutput) ShowOutputs() SecretWithClientCredentialsShowOutputArrayOutput {
	return o.ApplyT(func(v *SecretWithClientCredentials) SecretWithClientCredentialsShowOutputArrayOutput {
		return v.ShowOutputs
	}).(SecretWithClientCredentialsShowOutputArrayOutput)
}

type SecretWithClientCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SecretWithClientCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretWithClientCredentials)(nil)).Elem()
}

func (o SecretWithClientCredentialsArrayOutput) ToSecretWithClientCredentialsArrayOutput() SecretWithClientCredentialsArrayOutput {
	return o
}

func (o SecretWithClientCredentialsArrayOutput) ToSecretWithClientCredentialsArrayOutputWithContext(ctx context.Context) SecretWithClientCredentialsArrayOutput {
	return o
}

func (o SecretWithClientCredentialsArrayOutput) Index(i pulumi.IntInput) SecretWithClientCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretWithClientCredentials {
		return vs[0].([]*SecretWithClientCredentials)[vs[1].(int)]
	}).(SecretWithClientCredentialsOutput)
}

type SecretWithClientCredentialsMapOutput struct{ *pulumi.OutputState }

func (SecretWithClientCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretWithClientCredentials)(nil)).Elem()
}

func (o SecretWithClientCredentialsMapOutput) ToSecretWithClientCredentialsMapOutput() SecretWithClientCredentialsMapOutput {
	return o
}

func (o SecretWithClientCredentialsMapOutput) ToSecretWithClientCredentialsMapOutputWithContext(ctx context.Context) SecretWithClientCredentialsMapOutput {
	return o
}

func (o SecretWithClientCredentialsMapOutput) MapIndex(k pulumi.StringInput) SecretWithClientCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretWithClientCredentials {
		return vs[0].(map[string]*SecretWithClientCredentials)[vs[1].(string)]
	}).(SecretWithClientCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithClientCredentialsInput)(nil)).Elem(), &SecretWithClientCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithClientCredentialsArrayInput)(nil)).Elem(), SecretWithClientCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithClientCredentialsMapInput)(nil)).Elem(), SecretWithClientCredentialsMap{})
	pulumi.RegisterOutputType(SecretWithClientCredentialsOutput{})
	pulumi.RegisterOutputType(SecretWithClientCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SecretWithClientCredentialsMapOutput{})
}
