// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients example '"<integration_name>"'
// ```
type OauthIntegrationForCustomClients struct {
	pulumi.CustomResourceState

	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayOutput `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs OauthIntegrationForCustomClientsDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrOutput `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
	NetworkPolicy pulumi.StringPtrOutput `pulumi:"networkPolicy"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthAllowNonTlsRedirectUri pulumi.StringPtrOutput `pulumi:"oauthAllowNonTlsRedirectUri"`
	OauthClientRsaPublicKey     pulumi.StringPtrOutput `pulumi:"oauthClientRsaPublicKey"`
	OauthClientRsaPublicKey2    pulumi.StringPtrOutput `pulumi:"oauthClientRsaPublicKey2"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
	OauthClientType pulumi.StringOutput `pulumi:"oauthClientType"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthEnforcePkce pulumi.StringPtrOutput `pulumi:"oauthEnforcePkce"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrOutput `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringOutput `pulumi:"oauthRedirectUri"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrOutput `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrOutput `pulumi:"oauthUseSecondaryRoles"`
	// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
	PreAuthorizedRolesLists pulumi.StringArrayOutput `pulumi:"preAuthorizedRolesLists"`
	// Parameters related to this security integration.
	RelatedParameters OauthIntegrationForCustomClientsRelatedParameterArrayOutput `pulumi:"relatedParameters"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs OauthIntegrationForCustomClientsShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewOauthIntegrationForCustomClients registers a new resource with the given unique name, arguments, and options.
func NewOauthIntegrationForCustomClients(ctx *pulumi.Context,
	name string, args *OauthIntegrationForCustomClientsArgs, opts ...pulumi.ResourceOption) (*OauthIntegrationForCustomClients, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OauthClientType == nil {
		return nil, errors.New("invalid value for required argument 'OauthClientType'")
	}
	if args.OauthRedirectUri == nil {
		return nil, errors.New("invalid value for required argument 'OauthRedirectUri'")
	}
	if args.OauthRedirectUri != nil {
		args.OauthRedirectUri = pulumi.ToSecret(args.OauthRedirectUri).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"oauthRedirectUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OauthIntegrationForCustomClients
	err := ctx.RegisterResource("snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOauthIntegrationForCustomClients gets an existing OauthIntegrationForCustomClients resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOauthIntegrationForCustomClients(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OauthIntegrationForCustomClientsState, opts ...pulumi.ResourceOption) (*OauthIntegrationForCustomClients, error) {
	var resource OauthIntegrationForCustomClients
	err := ctx.ReadResource("snowflake:index/oauthIntegrationForCustomClients:OauthIntegrationForCustomClients", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OauthIntegrationForCustomClients resources.
type oauthIntegrationForCustomClientsState struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs []OauthIntegrationForCustomClientsDescribeOutput `pulumi:"describeOutputs"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthAllowNonTlsRedirectUri *string `pulumi:"oauthAllowNonTlsRedirectUri"`
	OauthClientRsaPublicKey     *string `pulumi:"oauthClientRsaPublicKey"`
	OauthClientRsaPublicKey2    *string `pulumi:"oauthClientRsaPublicKey2"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
	OauthClientType *string `pulumi:"oauthClientType"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthEnforcePkce *string `pulumi:"oauthEnforcePkce"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens *string `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri *string `pulumi:"oauthRedirectUri"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
	// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
	PreAuthorizedRolesLists []string `pulumi:"preAuthorizedRolesLists"`
	// Parameters related to this security integration.
	RelatedParameters []OauthIntegrationForCustomClientsRelatedParameter `pulumi:"relatedParameters"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs []OauthIntegrationForCustomClientsShowOutput `pulumi:"showOutputs"`
}

type OauthIntegrationForCustomClientsState struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs OauthIntegrationForCustomClientsDescribeOutputArrayInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
	NetworkPolicy pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthAllowNonTlsRedirectUri pulumi.StringPtrInput
	OauthClientRsaPublicKey     pulumi.StringPtrInput
	OauthClientRsaPublicKey2    pulumi.StringPtrInput
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
	OauthClientType pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthEnforcePkce pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrInput
	// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
	PreAuthorizedRolesLists pulumi.StringArrayInput
	// Parameters related to this security integration.
	RelatedParameters OauthIntegrationForCustomClientsRelatedParameterArrayInput
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs OauthIntegrationForCustomClientsShowOutputArrayInput
}

func (OauthIntegrationForCustomClientsState) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationForCustomClientsState)(nil)).Elem()
}

type oauthIntegrationForCustomClientsArgs struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthAllowNonTlsRedirectUri *string `pulumi:"oauthAllowNonTlsRedirectUri"`
	OauthClientRsaPublicKey     *string `pulumi:"oauthClientRsaPublicKey"`
	OauthClientRsaPublicKey2    *string `pulumi:"oauthClientRsaPublicKey2"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
	OauthClientType string `pulumi:"oauthClientType"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthEnforcePkce *string `pulumi:"oauthEnforcePkce"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens *string `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri string `pulumi:"oauthRedirectUri"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
	// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
	PreAuthorizedRolesLists []string `pulumi:"preAuthorizedRolesLists"`
}

// The set of arguments for constructing a OauthIntegrationForCustomClients resource.
type OauthIntegrationForCustomClientsArgs struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
	NetworkPolicy pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthAllowNonTlsRedirectUri pulumi.StringPtrInput
	OauthClientRsaPublicKey     pulumi.StringPtrInput
	OauthClientRsaPublicKey2    pulumi.StringPtrInput
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
	OauthClientType pulumi.StringInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthEnforcePkce pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrInput
	// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
	PreAuthorizedRolesLists pulumi.StringArrayInput
}

func (OauthIntegrationForCustomClientsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationForCustomClientsArgs)(nil)).Elem()
}

type OauthIntegrationForCustomClientsInput interface {
	pulumi.Input

	ToOauthIntegrationForCustomClientsOutput() OauthIntegrationForCustomClientsOutput
	ToOauthIntegrationForCustomClientsOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsOutput
}

func (*OauthIntegrationForCustomClients) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegrationForCustomClients)(nil)).Elem()
}

func (i *OauthIntegrationForCustomClients) ToOauthIntegrationForCustomClientsOutput() OauthIntegrationForCustomClientsOutput {
	return i.ToOauthIntegrationForCustomClientsOutputWithContext(context.Background())
}

func (i *OauthIntegrationForCustomClients) ToOauthIntegrationForCustomClientsOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForCustomClientsOutput)
}

// OauthIntegrationForCustomClientsArrayInput is an input type that accepts OauthIntegrationForCustomClientsArray and OauthIntegrationForCustomClientsArrayOutput values.
// You can construct a concrete instance of `OauthIntegrationForCustomClientsArrayInput` via:
//
//	OauthIntegrationForCustomClientsArray{ OauthIntegrationForCustomClientsArgs{...} }
type OauthIntegrationForCustomClientsArrayInput interface {
	pulumi.Input

	ToOauthIntegrationForCustomClientsArrayOutput() OauthIntegrationForCustomClientsArrayOutput
	ToOauthIntegrationForCustomClientsArrayOutputWithContext(context.Context) OauthIntegrationForCustomClientsArrayOutput
}

type OauthIntegrationForCustomClientsArray []OauthIntegrationForCustomClientsInput

func (OauthIntegrationForCustomClientsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegrationForCustomClients)(nil)).Elem()
}

func (i OauthIntegrationForCustomClientsArray) ToOauthIntegrationForCustomClientsArrayOutput() OauthIntegrationForCustomClientsArrayOutput {
	return i.ToOauthIntegrationForCustomClientsArrayOutputWithContext(context.Background())
}

func (i OauthIntegrationForCustomClientsArray) ToOauthIntegrationForCustomClientsArrayOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForCustomClientsArrayOutput)
}

// OauthIntegrationForCustomClientsMapInput is an input type that accepts OauthIntegrationForCustomClientsMap and OauthIntegrationForCustomClientsMapOutput values.
// You can construct a concrete instance of `OauthIntegrationForCustomClientsMapInput` via:
//
//	OauthIntegrationForCustomClientsMap{ "key": OauthIntegrationForCustomClientsArgs{...} }
type OauthIntegrationForCustomClientsMapInput interface {
	pulumi.Input

	ToOauthIntegrationForCustomClientsMapOutput() OauthIntegrationForCustomClientsMapOutput
	ToOauthIntegrationForCustomClientsMapOutputWithContext(context.Context) OauthIntegrationForCustomClientsMapOutput
}

type OauthIntegrationForCustomClientsMap map[string]OauthIntegrationForCustomClientsInput

func (OauthIntegrationForCustomClientsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegrationForCustomClients)(nil)).Elem()
}

func (i OauthIntegrationForCustomClientsMap) ToOauthIntegrationForCustomClientsMapOutput() OauthIntegrationForCustomClientsMapOutput {
	return i.ToOauthIntegrationForCustomClientsMapOutputWithContext(context.Background())
}

func (i OauthIntegrationForCustomClientsMap) ToOauthIntegrationForCustomClientsMapOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForCustomClientsMapOutput)
}

type OauthIntegrationForCustomClientsOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForCustomClientsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegrationForCustomClients)(nil)).Elem()
}

func (o OauthIntegrationForCustomClientsOutput) ToOauthIntegrationForCustomClientsOutput() OauthIntegrationForCustomClientsOutput {
	return o
}

func (o OauthIntegrationForCustomClientsOutput) ToOauthIntegrationForCustomClientsOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsOutput {
	return o
}

// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
func (o OauthIntegrationForCustomClientsOutput) BlockedRolesLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringArrayOutput { return v.BlockedRolesLists }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the OAuth integration.
func (o OauthIntegrationForCustomClientsOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
func (o OauthIntegrationForCustomClientsOutput) DescribeOutputs() OauthIntegrationForCustomClientsDescribeOutputArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) OauthIntegrationForCustomClientsDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(OauthIntegrationForCustomClientsDescribeOutputArrayOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForCustomClientsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o OauthIntegrationForCustomClientsOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o OauthIntegrationForCustomClientsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies an existing network policy. This network policy controls network traffic that is attempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new access token. For more information about this resource, see docs.
func (o OauthIntegrationForCustomClientsOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) If true, allows setting oauth*redirect*uri to a URI not protected by TLS. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForCustomClientsOutput) OauthAllowNonTlsRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthAllowNonTlsRedirectUri }).(pulumi.StringPtrOutput)
}

func (o OauthIntegrationForCustomClientsOutput) OauthClientRsaPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthClientRsaPublicKey }).(pulumi.StringPtrOutput)
}

func (o OauthIntegrationForCustomClientsOutput) OauthClientRsaPublicKey2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthClientRsaPublicKey2 }).(pulumi.StringPtrOutput)
}

// Specifies the type of client being registered. Snowflake supports both confidential and public clients. Valid options are: `PUBLIC` | `CONFIDENTIAL`.
func (o OauthIntegrationForCustomClientsOutput) OauthClientType() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringOutput { return v.OauthClientType }).(pulumi.StringOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForCustomClientsOutput) OauthEnforcePkce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthEnforcePkce }).(pulumi.StringPtrOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForCustomClientsOutput) OauthIssueRefreshTokens() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthIssueRefreshTokens }).(pulumi.StringPtrOutput)
}

// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
func (o OauthIntegrationForCustomClientsOutput) OauthRedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringOutput { return v.OauthRedirectUri }).(pulumi.StringOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
func (o OauthIntegrationForCustomClientsOutput) OauthRefreshTokenValidity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.IntPtrOutput { return v.OauthRefreshTokenValidity }).(pulumi.IntPtrOutput)
}

// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
func (o OauthIntegrationForCustomClientsOutput) OauthUseSecondaryRoles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringPtrOutput { return v.OauthUseSecondaryRoles }).(pulumi.StringPtrOutput)
}

// A set of Snowflake roles that a user does not need to explicitly consent to using after authenticating. For more information about this resource, see docs.
func (o OauthIntegrationForCustomClientsOutput) PreAuthorizedRolesLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) pulumi.StringArrayOutput { return v.PreAuthorizedRolesLists }).(pulumi.StringArrayOutput)
}

// Parameters related to this security integration.
func (o OauthIntegrationForCustomClientsOutput) RelatedParameters() OauthIntegrationForCustomClientsRelatedParameterArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) OauthIntegrationForCustomClientsRelatedParameterArrayOutput {
		return v.RelatedParameters
	}).(OauthIntegrationForCustomClientsRelatedParameterArrayOutput)
}

// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
func (o OauthIntegrationForCustomClientsOutput) ShowOutputs() OauthIntegrationForCustomClientsShowOutputArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForCustomClients) OauthIntegrationForCustomClientsShowOutputArrayOutput {
		return v.ShowOutputs
	}).(OauthIntegrationForCustomClientsShowOutputArrayOutput)
}

type OauthIntegrationForCustomClientsArrayOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForCustomClientsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegrationForCustomClients)(nil)).Elem()
}

func (o OauthIntegrationForCustomClientsArrayOutput) ToOauthIntegrationForCustomClientsArrayOutput() OauthIntegrationForCustomClientsArrayOutput {
	return o
}

func (o OauthIntegrationForCustomClientsArrayOutput) ToOauthIntegrationForCustomClientsArrayOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsArrayOutput {
	return o
}

func (o OauthIntegrationForCustomClientsArrayOutput) Index(i pulumi.IntInput) OauthIntegrationForCustomClientsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OauthIntegrationForCustomClients {
		return vs[0].([]*OauthIntegrationForCustomClients)[vs[1].(int)]
	}).(OauthIntegrationForCustomClientsOutput)
}

type OauthIntegrationForCustomClientsMapOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForCustomClientsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegrationForCustomClients)(nil)).Elem()
}

func (o OauthIntegrationForCustomClientsMapOutput) ToOauthIntegrationForCustomClientsMapOutput() OauthIntegrationForCustomClientsMapOutput {
	return o
}

func (o OauthIntegrationForCustomClientsMapOutput) ToOauthIntegrationForCustomClientsMapOutputWithContext(ctx context.Context) OauthIntegrationForCustomClientsMapOutput {
	return o
}

func (o OauthIntegrationForCustomClientsMapOutput) MapIndex(k pulumi.StringInput) OauthIntegrationForCustomClientsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OauthIntegrationForCustomClients {
		return vs[0].(map[string]*OauthIntegrationForCustomClients)[vs[1].(string)]
	}).(OauthIntegrationForCustomClientsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForCustomClientsInput)(nil)).Elem(), &OauthIntegrationForCustomClients{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForCustomClientsArrayInput)(nil)).Elem(), OauthIntegrationForCustomClientsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForCustomClientsMapInput)(nil)).Elem(), OauthIntegrationForCustomClientsMap{})
	pulumi.RegisterOutputType(OauthIntegrationForCustomClientsOutput{})
	pulumi.RegisterOutputType(OauthIntegrationForCustomClientsArrayOutput{})
	pulumi.RegisterOutputType(OauthIntegrationForCustomClientsMapOutput{})
}
