// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserAuthenticationPolicyAttachment struct {
	pulumi.CustomResourceState

	// Fully qualified name of the authentication policy
	AuthenticationPolicyName pulumi.StringOutput `pulumi:"authenticationPolicyName"`
	// User name of the user you want to attach the authentication policy to
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUserAuthenticationPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewUserAuthenticationPolicyAttachment(ctx *pulumi.Context,
	name string, args *UserAuthenticationPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*UserAuthenticationPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationPolicyName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAuthenticationPolicyAttachment
	err := ctx.RegisterResource("snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAuthenticationPolicyAttachment gets an existing UserAuthenticationPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAuthenticationPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAuthenticationPolicyAttachmentState, opts ...pulumi.ResourceOption) (*UserAuthenticationPolicyAttachment, error) {
	var resource UserAuthenticationPolicyAttachment
	err := ctx.ReadResource("snowflake:index/userAuthenticationPolicyAttachment:UserAuthenticationPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAuthenticationPolicyAttachment resources.
type userAuthenticationPolicyAttachmentState struct {
	// Fully qualified name of the authentication policy
	AuthenticationPolicyName *string `pulumi:"authenticationPolicyName"`
	// User name of the user you want to attach the authentication policy to
	UserName *string `pulumi:"userName"`
}

type UserAuthenticationPolicyAttachmentState struct {
	// Fully qualified name of the authentication policy
	AuthenticationPolicyName pulumi.StringPtrInput
	// User name of the user you want to attach the authentication policy to
	UserName pulumi.StringPtrInput
}

func (UserAuthenticationPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAuthenticationPolicyAttachmentState)(nil)).Elem()
}

type userAuthenticationPolicyAttachmentArgs struct {
	// Fully qualified name of the authentication policy
	AuthenticationPolicyName string `pulumi:"authenticationPolicyName"`
	// User name of the user you want to attach the authentication policy to
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserAuthenticationPolicyAttachment resource.
type UserAuthenticationPolicyAttachmentArgs struct {
	// Fully qualified name of the authentication policy
	AuthenticationPolicyName pulumi.StringInput
	// User name of the user you want to attach the authentication policy to
	UserName pulumi.StringInput
}

func (UserAuthenticationPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAuthenticationPolicyAttachmentArgs)(nil)).Elem()
}

type UserAuthenticationPolicyAttachmentInput interface {
	pulumi.Input

	ToUserAuthenticationPolicyAttachmentOutput() UserAuthenticationPolicyAttachmentOutput
	ToUserAuthenticationPolicyAttachmentOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentOutput
}

func (*UserAuthenticationPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (i *UserAuthenticationPolicyAttachment) ToUserAuthenticationPolicyAttachmentOutput() UserAuthenticationPolicyAttachmentOutput {
	return i.ToUserAuthenticationPolicyAttachmentOutputWithContext(context.Background())
}

func (i *UserAuthenticationPolicyAttachment) ToUserAuthenticationPolicyAttachmentOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationPolicyAttachmentOutput)
}

// UserAuthenticationPolicyAttachmentArrayInput is an input type that accepts UserAuthenticationPolicyAttachmentArray and UserAuthenticationPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `UserAuthenticationPolicyAttachmentArrayInput` via:
//
//	UserAuthenticationPolicyAttachmentArray{ UserAuthenticationPolicyAttachmentArgs{...} }
type UserAuthenticationPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToUserAuthenticationPolicyAttachmentArrayOutput() UserAuthenticationPolicyAttachmentArrayOutput
	ToUserAuthenticationPolicyAttachmentArrayOutputWithContext(context.Context) UserAuthenticationPolicyAttachmentArrayOutput
}

type UserAuthenticationPolicyAttachmentArray []UserAuthenticationPolicyAttachmentInput

func (UserAuthenticationPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (i UserAuthenticationPolicyAttachmentArray) ToUserAuthenticationPolicyAttachmentArrayOutput() UserAuthenticationPolicyAttachmentArrayOutput {
	return i.ToUserAuthenticationPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i UserAuthenticationPolicyAttachmentArray) ToUserAuthenticationPolicyAttachmentArrayOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationPolicyAttachmentArrayOutput)
}

// UserAuthenticationPolicyAttachmentMapInput is an input type that accepts UserAuthenticationPolicyAttachmentMap and UserAuthenticationPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `UserAuthenticationPolicyAttachmentMapInput` via:
//
//	UserAuthenticationPolicyAttachmentMap{ "key": UserAuthenticationPolicyAttachmentArgs{...} }
type UserAuthenticationPolicyAttachmentMapInput interface {
	pulumi.Input

	ToUserAuthenticationPolicyAttachmentMapOutput() UserAuthenticationPolicyAttachmentMapOutput
	ToUserAuthenticationPolicyAttachmentMapOutputWithContext(context.Context) UserAuthenticationPolicyAttachmentMapOutput
}

type UserAuthenticationPolicyAttachmentMap map[string]UserAuthenticationPolicyAttachmentInput

func (UserAuthenticationPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (i UserAuthenticationPolicyAttachmentMap) ToUserAuthenticationPolicyAttachmentMapOutput() UserAuthenticationPolicyAttachmentMapOutput {
	return i.ToUserAuthenticationPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i UserAuthenticationPolicyAttachmentMap) ToUserAuthenticationPolicyAttachmentMapOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationPolicyAttachmentMapOutput)
}

type UserAuthenticationPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (UserAuthenticationPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (o UserAuthenticationPolicyAttachmentOutput) ToUserAuthenticationPolicyAttachmentOutput() UserAuthenticationPolicyAttachmentOutput {
	return o
}

func (o UserAuthenticationPolicyAttachmentOutput) ToUserAuthenticationPolicyAttachmentOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentOutput {
	return o
}

// Fully qualified name of the authentication policy
func (o UserAuthenticationPolicyAttachmentOutput) AuthenticationPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAuthenticationPolicyAttachment) pulumi.StringOutput { return v.AuthenticationPolicyName }).(pulumi.StringOutput)
}

// User name of the user you want to attach the authentication policy to
func (o UserAuthenticationPolicyAttachmentOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAuthenticationPolicyAttachment) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type UserAuthenticationPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (UserAuthenticationPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (o UserAuthenticationPolicyAttachmentArrayOutput) ToUserAuthenticationPolicyAttachmentArrayOutput() UserAuthenticationPolicyAttachmentArrayOutput {
	return o
}

func (o UserAuthenticationPolicyAttachmentArrayOutput) ToUserAuthenticationPolicyAttachmentArrayOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentArrayOutput {
	return o
}

func (o UserAuthenticationPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) UserAuthenticationPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAuthenticationPolicyAttachment {
		return vs[0].([]*UserAuthenticationPolicyAttachment)[vs[1].(int)]
	}).(UserAuthenticationPolicyAttachmentOutput)
}

type UserAuthenticationPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (UserAuthenticationPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAuthenticationPolicyAttachment)(nil)).Elem()
}

func (o UserAuthenticationPolicyAttachmentMapOutput) ToUserAuthenticationPolicyAttachmentMapOutput() UserAuthenticationPolicyAttachmentMapOutput {
	return o
}

func (o UserAuthenticationPolicyAttachmentMapOutput) ToUserAuthenticationPolicyAttachmentMapOutputWithContext(ctx context.Context) UserAuthenticationPolicyAttachmentMapOutput {
	return o
}

func (o UserAuthenticationPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) UserAuthenticationPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAuthenticationPolicyAttachment {
		return vs[0].(map[string]*UserAuthenticationPolicyAttachment)[vs[1].(string)]
	}).(UserAuthenticationPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAuthenticationPolicyAttachmentInput)(nil)).Elem(), &UserAuthenticationPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAuthenticationPolicyAttachmentArrayInput)(nil)).Elem(), UserAuthenticationPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAuthenticationPolicyAttachmentMapInput)(nil)).Elem(), UserAuthenticationPolicyAttachmentMap{})
	pulumi.RegisterOutputType(UserAuthenticationPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(UserAuthenticationPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(UserAuthenticationPolicyAttachmentMapOutput{})
}
