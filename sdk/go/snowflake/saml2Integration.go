// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/saml2Integration:Saml2Integration example "name"
// ```
type Saml2Integration struct {
	pulumi.CustomResourceState

	// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedEmailPatterns pulumi.StringArrayOutput `pulumi:"allowedEmailPatterns"`
	// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedUserDomains pulumi.StringArrayOutput `pulumi:"allowedUserDomains"`
	// Specifies a comment for the integration.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs Saml2IntegrationDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrOutput `pulumi:"enabled"`
	// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2EnableSpInitiated pulumi.StringPtrOutput `pulumi:"saml2EnableSpInitiated"`
	// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2ForceAuthn pulumi.StringPtrOutput `pulumi:"saml2ForceAuthn"`
	// The string containing the IdP EntityID / Issuer.
	Saml2Issuer pulumi.StringOutput `pulumi:"saml2Issuer"`
	// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
	Saml2PostLogoutRedirectUrl pulumi.StringPtrOutput `pulumi:"saml2PostLogoutRedirectUrl"`
	// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
	Saml2Provider pulumi.StringOutput `pulumi:"saml2Provider"`
	// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	Saml2RequestedNameidFormat pulumi.StringPtrOutput `pulumi:"saml2RequestedNameidFormat"`
	// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2SignRequest pulumi.StringPtrOutput `pulumi:"saml2SignRequest"`
	// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeAcsUrl pulumi.StringPtrOutput `pulumi:"saml2SnowflakeAcsUrl"`
	// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeIssuerUrl pulumi.StringPtrOutput `pulumi:"saml2SnowflakeIssuerUrl"`
	// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	Saml2SpInitiatedLoginPageLabel pulumi.StringPtrOutput `pulumi:"saml2SpInitiatedLoginPageLabel"`
	// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
	Saml2SsoUrl pulumi.StringOutput `pulumi:"saml2SsoUrl"`
	// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
	Saml2X509Cert pulumi.StringOutput `pulumi:"saml2X509Cert"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs Saml2IntegrationShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewSaml2Integration registers a new resource with the given unique name, arguments, and options.
func NewSaml2Integration(ctx *pulumi.Context,
	name string, args *Saml2IntegrationArgs, opts ...pulumi.ResourceOption) (*Saml2Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Saml2Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Saml2Issuer'")
	}
	if args.Saml2Provider == nil {
		return nil, errors.New("invalid value for required argument 'Saml2Provider'")
	}
	if args.Saml2SsoUrl == nil {
		return nil, errors.New("invalid value for required argument 'Saml2SsoUrl'")
	}
	if args.Saml2X509Cert == nil {
		return nil, errors.New("invalid value for required argument 'Saml2X509Cert'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Saml2Integration
	err := ctx.RegisterResource("snowflake:index/saml2Integration:Saml2Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaml2Integration gets an existing Saml2Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml2Integration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Saml2IntegrationState, opts ...pulumi.ResourceOption) (*Saml2Integration, error) {
	var resource Saml2Integration
	err := ctx.ReadResource("snowflake:index/saml2Integration:Saml2Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saml2Integration resources.
type saml2IntegrationState struct {
	// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedEmailPatterns []string `pulumi:"allowedEmailPatterns"`
	// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedUserDomains []string `pulumi:"allowedUserDomains"`
	// Specifies a comment for the integration.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs []Saml2IntegrationDescribeOutput `pulumi:"describeOutputs"`
	// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name *string `pulumi:"name"`
	// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2EnableSpInitiated *string `pulumi:"saml2EnableSpInitiated"`
	// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2ForceAuthn *string `pulumi:"saml2ForceAuthn"`
	// The string containing the IdP EntityID / Issuer.
	Saml2Issuer *string `pulumi:"saml2Issuer"`
	// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
	Saml2PostLogoutRedirectUrl *string `pulumi:"saml2PostLogoutRedirectUrl"`
	// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
	Saml2Provider *string `pulumi:"saml2Provider"`
	// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	Saml2RequestedNameidFormat *string `pulumi:"saml2RequestedNameidFormat"`
	// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2SignRequest *string `pulumi:"saml2SignRequest"`
	// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeAcsUrl *string `pulumi:"saml2SnowflakeAcsUrl"`
	// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeIssuerUrl *string `pulumi:"saml2SnowflakeIssuerUrl"`
	// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	Saml2SpInitiatedLoginPageLabel *string `pulumi:"saml2SpInitiatedLoginPageLabel"`
	// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
	Saml2SsoUrl *string `pulumi:"saml2SsoUrl"`
	// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
	Saml2X509Cert *string `pulumi:"saml2X509Cert"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs []Saml2IntegrationShowOutput `pulumi:"showOutputs"`
}

type Saml2IntegrationState struct {
	// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedEmailPatterns pulumi.StringArrayInput
	// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedUserDomains pulumi.StringArrayInput
	// Specifies a comment for the integration.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs Saml2IntegrationDescribeOutputArrayInput
	// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringPtrInput
	// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2EnableSpInitiated pulumi.StringPtrInput
	// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2ForceAuthn pulumi.StringPtrInput
	// The string containing the IdP EntityID / Issuer.
	Saml2Issuer pulumi.StringPtrInput
	// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
	Saml2PostLogoutRedirectUrl pulumi.StringPtrInput
	// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
	Saml2Provider pulumi.StringPtrInput
	// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	Saml2RequestedNameidFormat pulumi.StringPtrInput
	// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2SignRequest pulumi.StringPtrInput
	// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeAcsUrl pulumi.StringPtrInput
	// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeIssuerUrl pulumi.StringPtrInput
	// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	Saml2SpInitiatedLoginPageLabel pulumi.StringPtrInput
	// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
	Saml2SsoUrl pulumi.StringPtrInput
	// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
	Saml2X509Cert pulumi.StringPtrInput
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs Saml2IntegrationShowOutputArrayInput
}

func (Saml2IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*saml2IntegrationState)(nil)).Elem()
}

type saml2IntegrationArgs struct {
	// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedEmailPatterns []string `pulumi:"allowedEmailPatterns"`
	// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedUserDomains []string `pulumi:"allowedUserDomains"`
	// Specifies a comment for the integration.
	Comment *string `pulumi:"comment"`
	// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name *string `pulumi:"name"`
	// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2EnableSpInitiated *string `pulumi:"saml2EnableSpInitiated"`
	// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2ForceAuthn *string `pulumi:"saml2ForceAuthn"`
	// The string containing the IdP EntityID / Issuer.
	Saml2Issuer string `pulumi:"saml2Issuer"`
	// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
	Saml2PostLogoutRedirectUrl *string `pulumi:"saml2PostLogoutRedirectUrl"`
	// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
	Saml2Provider string `pulumi:"saml2Provider"`
	// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	Saml2RequestedNameidFormat *string `pulumi:"saml2RequestedNameidFormat"`
	// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2SignRequest *string `pulumi:"saml2SignRequest"`
	// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeAcsUrl *string `pulumi:"saml2SnowflakeAcsUrl"`
	// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeIssuerUrl *string `pulumi:"saml2SnowflakeIssuerUrl"`
	// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	Saml2SpInitiatedLoginPageLabel *string `pulumi:"saml2SpInitiatedLoginPageLabel"`
	// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
	Saml2SsoUrl string `pulumi:"saml2SsoUrl"`
	// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
	Saml2X509Cert string `pulumi:"saml2X509Cert"`
}

// The set of arguments for constructing a Saml2Integration resource.
type Saml2IntegrationArgs struct {
	// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedEmailPatterns pulumi.StringArrayInput
	// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	AllowedUserDomains pulumi.StringArrayInput
	// Specifies a comment for the integration.
	Comment pulumi.StringPtrInput
	// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringPtrInput
	// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2EnableSpInitiated pulumi.StringPtrInput
	// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2ForceAuthn pulumi.StringPtrInput
	// The string containing the IdP EntityID / Issuer.
	Saml2Issuer pulumi.StringInput
	// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
	Saml2PostLogoutRedirectUrl pulumi.StringPtrInput
	// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
	Saml2Provider pulumi.StringInput
	// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
	Saml2RequestedNameidFormat pulumi.StringPtrInput
	// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Saml2SignRequest pulumi.StringPtrInput
	// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeAcsUrl pulumi.StringPtrInput
	// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
	Saml2SnowflakeIssuerUrl pulumi.StringPtrInput
	// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
	Saml2SpInitiatedLoginPageLabel pulumi.StringPtrInput
	// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
	Saml2SsoUrl pulumi.StringInput
	// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
	Saml2X509Cert pulumi.StringInput
}

func (Saml2IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*saml2IntegrationArgs)(nil)).Elem()
}

type Saml2IntegrationInput interface {
	pulumi.Input

	ToSaml2IntegrationOutput() Saml2IntegrationOutput
	ToSaml2IntegrationOutputWithContext(ctx context.Context) Saml2IntegrationOutput
}

func (*Saml2Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml2Integration)(nil)).Elem()
}

func (i *Saml2Integration) ToSaml2IntegrationOutput() Saml2IntegrationOutput {
	return i.ToSaml2IntegrationOutputWithContext(context.Background())
}

func (i *Saml2Integration) ToSaml2IntegrationOutputWithContext(ctx context.Context) Saml2IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Saml2IntegrationOutput)
}

// Saml2IntegrationArrayInput is an input type that accepts Saml2IntegrationArray and Saml2IntegrationArrayOutput values.
// You can construct a concrete instance of `Saml2IntegrationArrayInput` via:
//
//	Saml2IntegrationArray{ Saml2IntegrationArgs{...} }
type Saml2IntegrationArrayInput interface {
	pulumi.Input

	ToSaml2IntegrationArrayOutput() Saml2IntegrationArrayOutput
	ToSaml2IntegrationArrayOutputWithContext(context.Context) Saml2IntegrationArrayOutput
}

type Saml2IntegrationArray []Saml2IntegrationInput

func (Saml2IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml2Integration)(nil)).Elem()
}

func (i Saml2IntegrationArray) ToSaml2IntegrationArrayOutput() Saml2IntegrationArrayOutput {
	return i.ToSaml2IntegrationArrayOutputWithContext(context.Background())
}

func (i Saml2IntegrationArray) ToSaml2IntegrationArrayOutputWithContext(ctx context.Context) Saml2IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Saml2IntegrationArrayOutput)
}

// Saml2IntegrationMapInput is an input type that accepts Saml2IntegrationMap and Saml2IntegrationMapOutput values.
// You can construct a concrete instance of `Saml2IntegrationMapInput` via:
//
//	Saml2IntegrationMap{ "key": Saml2IntegrationArgs{...} }
type Saml2IntegrationMapInput interface {
	pulumi.Input

	ToSaml2IntegrationMapOutput() Saml2IntegrationMapOutput
	ToSaml2IntegrationMapOutputWithContext(context.Context) Saml2IntegrationMapOutput
}

type Saml2IntegrationMap map[string]Saml2IntegrationInput

func (Saml2IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml2Integration)(nil)).Elem()
}

func (i Saml2IntegrationMap) ToSaml2IntegrationMapOutput() Saml2IntegrationMapOutput {
	return i.ToSaml2IntegrationMapOutputWithContext(context.Background())
}

func (i Saml2IntegrationMap) ToSaml2IntegrationMapOutputWithContext(ctx context.Context) Saml2IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Saml2IntegrationMapOutput)
}

type Saml2IntegrationOutput struct{ *pulumi.OutputState }

func (Saml2IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml2Integration)(nil)).Elem()
}

func (o Saml2IntegrationOutput) ToSaml2IntegrationOutput() Saml2IntegrationOutput {
	return o
}

func (o Saml2IntegrationOutput) ToSaml2IntegrationOutputWithContext(ctx context.Context) Saml2IntegrationOutput {
	return o
}

// A list of regular expressions that email addresses are matched against to authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
func (o Saml2IntegrationOutput) AllowedEmailPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringArrayOutput { return v.AllowedEmailPatterns }).(pulumi.StringArrayOutput)
}

// A list of email domains that can authenticate with a SAML2 security integration. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
func (o Saml2IntegrationOutput) AllowedUserDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringArrayOutput { return v.AllowedUserDomains }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the integration.
func (o Saml2IntegrationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
func (o Saml2IntegrationOutput) DescribeOutputs() Saml2IntegrationDescribeOutputArrayOutput {
	return o.ApplyT(func(v *Saml2Integration) Saml2IntegrationDescribeOutputArrayOutput { return v.DescribeOutputs }).(Saml2IntegrationDescribeOutputArrayOutput)
}

// Specifies whether this security integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o Saml2IntegrationOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Specifies the name of the SAML2 integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
func (o Saml2IntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Boolean indicating if the Log In With button will be shown on the login page. TRUE: displays the Log in With button on the login page. FALSE: does not display the Log in With button on the login page. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o Saml2IntegrationOutput) Saml2EnableSpInitiated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2EnableSpInitiated }).(pulumi.StringPtrOutput)
}

// The Boolean indicating whether users, during the initial authentication flow, are forced to authenticate again to access Snowflake. When set to TRUE, Snowflake sets the ForceAuthn SAML parameter to TRUE in the outgoing request from Snowflake to the identity provider. TRUE: forces users to authenticate again to access Snowflake, even if a valid session with the identity provider exists. FALSE: does not force users to authenticate again to access Snowflake. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o Saml2IntegrationOutput) Saml2ForceAuthn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2ForceAuthn }).(pulumi.StringPtrOutput)
}

// The string containing the IdP EntityID / Issuer.
func (o Saml2IntegrationOutput) Saml2Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringOutput { return v.Saml2Issuer }).(pulumi.StringOutput)
}

// The endpoint to which Snowflake redirects users after clicking the Log Out button in the classic Snowflake web interface. Snowflake terminates the Snowflake session upon redirecting to the specified endpoint.
func (o Saml2IntegrationOutput) Saml2PostLogoutRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2PostLogoutRedirectUrl }).(pulumi.StringPtrOutput)
}

// The string describing the IdP. Valid options are: [OKTA ADFS CUSTOM].
func (o Saml2IntegrationOutput) Saml2Provider() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringOutput { return v.Saml2Provider }).(pulumi.StringOutput)
}

// The SAML NameID format allows Snowflake to set an expectation of the identifying attribute of the user (i.e. SAML Subject) in the SAML assertion from the IdP to ensure a valid authentication to Snowflake. Valid options are: [urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient]
func (o Saml2IntegrationOutput) Saml2RequestedNameidFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2RequestedNameidFormat }).(pulumi.StringPtrOutput)
}

// The Boolean indicating whether SAML requests are signed. TRUE: allows SAML requests to be signed. FALSE: does not allow SAML requests to be signed. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o Saml2IntegrationOutput) Saml2SignRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2SignRequest }).(pulumi.StringPtrOutput)
}

// The string containing the Snowflake Assertion Consumer Service URL to which the IdP will send its SAML authentication response back to Snowflake. This property will be set in the SAML authentication request generated by Snowflake when initiating a SAML SSO operation with the IdP. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
func (o Saml2IntegrationOutput) Saml2SnowflakeAcsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2SnowflakeAcsUrl }).(pulumi.StringPtrOutput)
}

// The string containing the EntityID / Issuer for the Snowflake service provider. If an incorrect value is specified, Snowflake returns an error message indicating the acceptable values to use.
func (o Saml2IntegrationOutput) Saml2SnowflakeIssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2SnowflakeIssuerUrl }).(pulumi.StringPtrOutput)
}

// The string containing the label to display after the Log In With button on the login page. If this field changes value from non-empty to empty, the whole resource is recreated because of Snowflake limitations.
func (o Saml2IntegrationOutput) Saml2SpInitiatedLoginPageLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringPtrOutput { return v.Saml2SpInitiatedLoginPageLabel }).(pulumi.StringPtrOutput)
}

// The string containing the IdP SSO URL, where the user should be redirected by Snowflake (the Service Provider) with a SAML AuthnRequest message.
func (o Saml2IntegrationOutput) Saml2SsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringOutput { return v.Saml2SsoUrl }).(pulumi.StringOutput)
}

// The Base64 encoded IdP signing certificate on a single line without the leading -----BEGIN CERTIFICATE----- and ending -----END CERTIFICATE----- markers.
func (o Saml2IntegrationOutput) Saml2X509Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *Saml2Integration) pulumi.StringOutput { return v.Saml2X509Cert }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
func (o Saml2IntegrationOutput) ShowOutputs() Saml2IntegrationShowOutputArrayOutput {
	return o.ApplyT(func(v *Saml2Integration) Saml2IntegrationShowOutputArrayOutput { return v.ShowOutputs }).(Saml2IntegrationShowOutputArrayOutput)
}

type Saml2IntegrationArrayOutput struct{ *pulumi.OutputState }

func (Saml2IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saml2Integration)(nil)).Elem()
}

func (o Saml2IntegrationArrayOutput) ToSaml2IntegrationArrayOutput() Saml2IntegrationArrayOutput {
	return o
}

func (o Saml2IntegrationArrayOutput) ToSaml2IntegrationArrayOutputWithContext(ctx context.Context) Saml2IntegrationArrayOutput {
	return o
}

func (o Saml2IntegrationArrayOutput) Index(i pulumi.IntInput) Saml2IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Saml2Integration {
		return vs[0].([]*Saml2Integration)[vs[1].(int)]
	}).(Saml2IntegrationOutput)
}

type Saml2IntegrationMapOutput struct{ *pulumi.OutputState }

func (Saml2IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saml2Integration)(nil)).Elem()
}

func (o Saml2IntegrationMapOutput) ToSaml2IntegrationMapOutput() Saml2IntegrationMapOutput {
	return o
}

func (o Saml2IntegrationMapOutput) ToSaml2IntegrationMapOutputWithContext(ctx context.Context) Saml2IntegrationMapOutput {
	return o
}

func (o Saml2IntegrationMapOutput) MapIndex(k pulumi.StringInput) Saml2IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Saml2Integration {
		return vs[0].(map[string]*Saml2Integration)[vs[1].(string)]
	}).(Saml2IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Saml2IntegrationInput)(nil)).Elem(), &Saml2Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*Saml2IntegrationArrayInput)(nil)).Elem(), Saml2IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Saml2IntegrationMapInput)(nil)).Elem(), Saml2IntegrationMap{})
	pulumi.RegisterOutputType(Saml2IntegrationOutput{})
	pulumi.RegisterOutputType(Saml2IntegrationArrayOutput{})
	pulumi.RegisterOutputType(Saml2IntegrationMapOutput{})
}
