// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/scimIntegration:ScimIntegration example "name"
// ```
type ScimIntegration struct {
	pulumi.CustomResourceState

	// Specifies a comment for the integration.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
	DescribeOutputs ScimIntegrationDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Specify whether the security integration is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies an existing network policy that controls SCIM network traffic.
	NetworkPolicy pulumi.StringPtrOutput `pulumi:"networkPolicy"`
	// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
	RunAsRole pulumi.StringOutput `pulumi:"runAsRole"`
	// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
	ScimClient pulumi.StringOutput `pulumi:"scimClient"`
	// Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
	ShowOutputs ScimIntegrationShowOutputArrayOutput `pulumi:"showOutputs"`
	// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	SyncPassword pulumi.StringPtrOutput `pulumi:"syncPassword"`
}

// NewScimIntegration registers a new resource with the given unique name, arguments, and options.
func NewScimIntegration(ctx *pulumi.Context,
	name string, args *ScimIntegrationArgs, opts ...pulumi.ResourceOption) (*ScimIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.RunAsRole == nil {
		return nil, errors.New("invalid value for required argument 'RunAsRole'")
	}
	if args.ScimClient == nil {
		return nil, errors.New("invalid value for required argument 'ScimClient'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScimIntegration
	err := ctx.RegisterResource("snowflake:index/scimIntegration:ScimIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScimIntegration gets an existing ScimIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScimIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScimIntegrationState, opts ...pulumi.ResourceOption) (*ScimIntegration, error) {
	var resource ScimIntegration
	err := ctx.ReadResource("snowflake:index/scimIntegration:ScimIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScimIntegration resources.
type scimIntegrationState struct {
	// Specifies a comment for the integration.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
	DescribeOutputs []ScimIntegrationDescribeOutput `pulumi:"describeOutputs"`
	// Specify whether the security integration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
	Name *string `pulumi:"name"`
	// Specifies an existing network policy that controls SCIM network traffic.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
	RunAsRole *string `pulumi:"runAsRole"`
	// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
	ScimClient *string `pulumi:"scimClient"`
	// Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
	ShowOutputs []ScimIntegrationShowOutput `pulumi:"showOutputs"`
	// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	SyncPassword *string `pulumi:"syncPassword"`
}

type ScimIntegrationState struct {
	// Specifies a comment for the integration.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
	DescribeOutputs ScimIntegrationDescribeOutputArrayInput
	// Specify whether the security integration is enabled.
	Enabled pulumi.BoolPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
	Name pulumi.StringPtrInput
	// Specifies an existing network policy that controls SCIM network traffic.
	NetworkPolicy pulumi.StringPtrInput
	// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
	RunAsRole pulumi.StringPtrInput
	// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
	ScimClient pulumi.StringPtrInput
	// Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
	ShowOutputs ScimIntegrationShowOutputArrayInput
	// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	SyncPassword pulumi.StringPtrInput
}

func (ScimIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*scimIntegrationState)(nil)).Elem()
}

type scimIntegrationArgs struct {
	// Specifies a comment for the integration.
	Comment *string `pulumi:"comment"`
	// Specify whether the security integration is enabled.
	Enabled bool `pulumi:"enabled"`
	// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
	Name *string `pulumi:"name"`
	// Specifies an existing network policy that controls SCIM network traffic.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
	RunAsRole string `pulumi:"runAsRole"`
	// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
	ScimClient string `pulumi:"scimClient"`
	// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	SyncPassword *string `pulumi:"syncPassword"`
}

// The set of arguments for constructing a ScimIntegration resource.
type ScimIntegrationArgs struct {
	// Specifies a comment for the integration.
	Comment pulumi.StringPtrInput
	// Specify whether the security integration is enabled.
	Enabled pulumi.BoolInput
	// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
	Name pulumi.StringPtrInput
	// Specifies an existing network policy that controls SCIM network traffic.
	NetworkPolicy pulumi.StringPtrInput
	// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
	RunAsRole pulumi.StringInput
	// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
	ScimClient pulumi.StringInput
	// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	SyncPassword pulumi.StringPtrInput
}

func (ScimIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scimIntegrationArgs)(nil)).Elem()
}

type ScimIntegrationInput interface {
	pulumi.Input

	ToScimIntegrationOutput() ScimIntegrationOutput
	ToScimIntegrationOutputWithContext(ctx context.Context) ScimIntegrationOutput
}

func (*ScimIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimIntegration)(nil)).Elem()
}

func (i *ScimIntegration) ToScimIntegrationOutput() ScimIntegrationOutput {
	return i.ToScimIntegrationOutputWithContext(context.Background())
}

func (i *ScimIntegration) ToScimIntegrationOutputWithContext(ctx context.Context) ScimIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimIntegrationOutput)
}

// ScimIntegrationArrayInput is an input type that accepts ScimIntegrationArray and ScimIntegrationArrayOutput values.
// You can construct a concrete instance of `ScimIntegrationArrayInput` via:
//
//	ScimIntegrationArray{ ScimIntegrationArgs{...} }
type ScimIntegrationArrayInput interface {
	pulumi.Input

	ToScimIntegrationArrayOutput() ScimIntegrationArrayOutput
	ToScimIntegrationArrayOutputWithContext(context.Context) ScimIntegrationArrayOutput
}

type ScimIntegrationArray []ScimIntegrationInput

func (ScimIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimIntegration)(nil)).Elem()
}

func (i ScimIntegrationArray) ToScimIntegrationArrayOutput() ScimIntegrationArrayOutput {
	return i.ToScimIntegrationArrayOutputWithContext(context.Background())
}

func (i ScimIntegrationArray) ToScimIntegrationArrayOutputWithContext(ctx context.Context) ScimIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimIntegrationArrayOutput)
}

// ScimIntegrationMapInput is an input type that accepts ScimIntegrationMap and ScimIntegrationMapOutput values.
// You can construct a concrete instance of `ScimIntegrationMapInput` via:
//
//	ScimIntegrationMap{ "key": ScimIntegrationArgs{...} }
type ScimIntegrationMapInput interface {
	pulumi.Input

	ToScimIntegrationMapOutput() ScimIntegrationMapOutput
	ToScimIntegrationMapOutputWithContext(context.Context) ScimIntegrationMapOutput
}

type ScimIntegrationMap map[string]ScimIntegrationInput

func (ScimIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimIntegration)(nil)).Elem()
}

func (i ScimIntegrationMap) ToScimIntegrationMapOutput() ScimIntegrationMapOutput {
	return i.ToScimIntegrationMapOutputWithContext(context.Background())
}

func (i ScimIntegrationMap) ToScimIntegrationMapOutputWithContext(ctx context.Context) ScimIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimIntegrationMapOutput)
}

type ScimIntegrationOutput struct{ *pulumi.OutputState }

func (ScimIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimIntegration)(nil)).Elem()
}

func (o ScimIntegrationOutput) ToScimIntegrationOutput() ScimIntegrationOutput {
	return o
}

func (o ScimIntegrationOutput) ToScimIntegrationOutputWithContext(ctx context.Context) ScimIntegrationOutput {
	return o
}

// Specifies a comment for the integration.
func (o ScimIntegrationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE SECURITY INTEGRATIONS` for the given security integration.
func (o ScimIntegrationOutput) DescribeOutputs() ScimIntegrationDescribeOutputArrayOutput {
	return o.ApplyT(func(v *ScimIntegration) ScimIntegrationDescribeOutputArrayOutput { return v.DescribeOutputs }).(ScimIntegrationDescribeOutputArrayOutput)
}

// Specify whether the security integration is enabled.
func (o ScimIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ScimIntegrationOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// String that specifies the identifier (i.e. name) for the integration; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`
func (o ScimIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies an existing network policy that controls SCIM network traffic.
func (o ScimIntegrationOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringPtrOutput { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM. Provider assumes that the specified role is already provided. Valid options are: `OKTA_PROVISIONER` | `AAD_PROVISIONER` | `GENERIC_SCIM_PROVISIONER`.
func (o ScimIntegrationOutput) RunAsRole() pulumi.StringOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringOutput { return v.RunAsRole }).(pulumi.StringOutput)
}

// Specifies the client type for the scim integration. Valid options are: `OKTA` | `AZURE` | `GENERIC`.
func (o ScimIntegrationOutput) ScimClient() pulumi.StringOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringOutput { return v.ScimClient }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW SECURITY INTEGRATIONS` for the given security integration.
func (o ScimIntegrationOutput) ShowOutputs() ScimIntegrationShowOutputArrayOutput {
	return o.ApplyT(func(v *ScimIntegration) ScimIntegrationShowOutputArrayOutput { return v.ShowOutputs }).(ScimIntegrationShowOutputArrayOutput)
}

// Specifies whether to enable or disable the synchronization of a user password from an Okta SCIM client as part of the API request to Snowflake. This property is not supported for Azure SCIM. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ScimIntegrationOutput) SyncPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScimIntegration) pulumi.StringPtrOutput { return v.SyncPassword }).(pulumi.StringPtrOutput)
}

type ScimIntegrationArrayOutput struct{ *pulumi.OutputState }

func (ScimIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimIntegration)(nil)).Elem()
}

func (o ScimIntegrationArrayOutput) ToScimIntegrationArrayOutput() ScimIntegrationArrayOutput {
	return o
}

func (o ScimIntegrationArrayOutput) ToScimIntegrationArrayOutputWithContext(ctx context.Context) ScimIntegrationArrayOutput {
	return o
}

func (o ScimIntegrationArrayOutput) Index(i pulumi.IntInput) ScimIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScimIntegration {
		return vs[0].([]*ScimIntegration)[vs[1].(int)]
	}).(ScimIntegrationOutput)
}

type ScimIntegrationMapOutput struct{ *pulumi.OutputState }

func (ScimIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimIntegration)(nil)).Elem()
}

func (o ScimIntegrationMapOutput) ToScimIntegrationMapOutput() ScimIntegrationMapOutput {
	return o
}

func (o ScimIntegrationMapOutput) ToScimIntegrationMapOutputWithContext(ctx context.Context) ScimIntegrationMapOutput {
	return o
}

func (o ScimIntegrationMapOutput) MapIndex(k pulumi.StringInput) ScimIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScimIntegration {
		return vs[0].(map[string]*ScimIntegration)[vs[1].(string)]
	}).(ScimIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScimIntegrationInput)(nil)).Elem(), &ScimIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimIntegrationArrayInput)(nil)).Elem(), ScimIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimIntegrationMapInput)(nil)).Elem(), ScimIntegrationMap{})
	pulumi.RegisterOutputType(ScimIntegrationOutput{})
	pulumi.RegisterOutputType(ScimIntegrationArrayOutput{})
	pulumi.RegisterOutputType(ScimIntegrationMapOutput{})
}
