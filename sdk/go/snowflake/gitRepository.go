// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/gitRepository:GitRepository example '"<db_name>"."<schema_name>"."<git_repository_name>"'
// ```
type GitRepository struct {
	pulumi.CustomResourceState

	// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
	ApiIntegration pulumi.StringOutput `pulumi:"apiIntegration"`
	// Specifies a comment for the git repository.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
	DescribeOutputs GitRepositoryDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
	GitCredentials pulumi.StringPtrOutput `pulumi:"gitCredentials"`
	// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
	ShowOutputs GitRepositoryShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewGitRepository registers a new resource with the given unique name, arguments, and options.
func NewGitRepository(ctx *pulumi.Context,
	name string, args *GitRepositoryArgs, opts ...pulumi.ResourceOption) (*GitRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiIntegration == nil {
		return nil, errors.New("invalid value for required argument 'ApiIntegration'")
	}
	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Origin == nil {
		return nil, errors.New("invalid value for required argument 'Origin'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitRepository
	err := ctx.RegisterResource("snowflake:index/gitRepository:GitRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitRepository gets an existing GitRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitRepositoryState, opts ...pulumi.ResourceOption) (*GitRepository, error) {
	var resource GitRepository
	err := ctx.ReadResource("snowflake:index/gitRepository:GitRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitRepository resources.
type gitRepositoryState struct {
	// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
	ApiIntegration *string `pulumi:"apiIntegration"`
	// Specifies a comment for the git repository.
	Comment *string `pulumi:"comment"`
	// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
	DescribeOutputs []GitRepositoryDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
	GitCredentials *string `pulumi:"gitCredentials"`
	// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
	Origin *string `pulumi:"origin"`
	// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
	ShowOutputs []GitRepositoryShowOutput `pulumi:"showOutputs"`
}

type GitRepositoryState struct {
	// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
	ApiIntegration pulumi.StringPtrInput
	// Specifies a comment for the git repository.
	Comment pulumi.StringPtrInput
	// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
	DescribeOutputs GitRepositoryDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
	GitCredentials pulumi.StringPtrInput
	// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
	Origin pulumi.StringPtrInput
	// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
	ShowOutputs GitRepositoryShowOutputArrayInput
}

func (GitRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryState)(nil)).Elem()
}

type gitRepositoryArgs struct {
	// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
	ApiIntegration string `pulumi:"apiIntegration"`
	// Specifies a comment for the git repository.
	Comment *string `pulumi:"comment"`
	// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
	GitCredentials *string `pulumi:"gitCredentials"`
	// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
	Origin string `pulumi:"origin"`
	// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a GitRepository resource.
type GitRepositoryArgs struct {
	// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
	ApiIntegration pulumi.StringInput
	// Specifies a comment for the git repository.
	Comment pulumi.StringPtrInput
	// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
	GitCredentials pulumi.StringPtrInput
	// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
	Origin pulumi.StringInput
	// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
}

func (GitRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryArgs)(nil)).Elem()
}

type GitRepositoryInput interface {
	pulumi.Input

	ToGitRepositoryOutput() GitRepositoryOutput
	ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput
}

func (*GitRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepository)(nil)).Elem()
}

func (i *GitRepository) ToGitRepositoryOutput() GitRepositoryOutput {
	return i.ToGitRepositoryOutputWithContext(context.Background())
}

func (i *GitRepository) ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryOutput)
}

// GitRepositoryArrayInput is an input type that accepts GitRepositoryArray and GitRepositoryArrayOutput values.
// You can construct a concrete instance of `GitRepositoryArrayInput` via:
//
//	GitRepositoryArray{ GitRepositoryArgs{...} }
type GitRepositoryArrayInput interface {
	pulumi.Input

	ToGitRepositoryArrayOutput() GitRepositoryArrayOutput
	ToGitRepositoryArrayOutputWithContext(context.Context) GitRepositoryArrayOutput
}

type GitRepositoryArray []GitRepositoryInput

func (GitRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepository)(nil)).Elem()
}

func (i GitRepositoryArray) ToGitRepositoryArrayOutput() GitRepositoryArrayOutput {
	return i.ToGitRepositoryArrayOutputWithContext(context.Background())
}

func (i GitRepositoryArray) ToGitRepositoryArrayOutputWithContext(ctx context.Context) GitRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryArrayOutput)
}

// GitRepositoryMapInput is an input type that accepts GitRepositoryMap and GitRepositoryMapOutput values.
// You can construct a concrete instance of `GitRepositoryMapInput` via:
//
//	GitRepositoryMap{ "key": GitRepositoryArgs{...} }
type GitRepositoryMapInput interface {
	pulumi.Input

	ToGitRepositoryMapOutput() GitRepositoryMapOutput
	ToGitRepositoryMapOutputWithContext(context.Context) GitRepositoryMapOutput
}

type GitRepositoryMap map[string]GitRepositoryInput

func (GitRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepository)(nil)).Elem()
}

func (i GitRepositoryMap) ToGitRepositoryMapOutput() GitRepositoryMapOutput {
	return i.ToGitRepositoryMapOutputWithContext(context.Background())
}

func (i GitRepositoryMap) ToGitRepositoryMapOutputWithContext(ctx context.Context) GitRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryMapOutput)
}

type GitRepositoryOutput struct{ *pulumi.OutputState }

func (GitRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepository)(nil)).Elem()
}

func (o GitRepositoryOutput) ToGitRepositoryOutput() GitRepositoryOutput {
	return o
}

func (o GitRepositoryOutput) ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput {
	return o
}

// Identifier of API INTEGRATION containing information about the remote Git repository such as allowed credentials and prefixes for target URLs.
func (o GitRepositoryOutput) ApiIntegration() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.ApiIntegration }).(pulumi.StringOutput)
}

// Specifies a comment for the git repository.
func (o GitRepositoryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o GitRepositoryOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE GIT REPOSITORY` for the given git repository.
func (o GitRepositoryOutput) DescribeOutputs() GitRepositoryDescribeOutputArrayOutput {
	return o.ApplyT(func(v *GitRepository) GitRepositoryDescribeOutputArrayOutput { return v.DescribeOutputs }).(GitRepositoryDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o GitRepositoryOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the Snowflake secret fully qualified name (e.g `"\"<db_name>\".\"<schema_name>\".\"<secret_name>\""`) containing the credentials to use for authenticating with the remote Git repository. Omit this parameter to use the default secret specified by the API integration or if this integration does not require authentication.
func (o GitRepositoryOutput) GitCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringPtrOutput { return v.GitCredentials }).(pulumi.StringPtrOutput)
}

// Specifies the identifier for the git repository; must be unique for the schema in which the git repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o GitRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the origin URL of the remote Git repository that this Git repository clone represents. The URL must use HTTPS.
func (o GitRepositoryOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// The schema in which to create the git repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o GitRepositoryOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW GIT REPOSITORIES` for the given git repository.
func (o GitRepositoryOutput) ShowOutputs() GitRepositoryShowOutputArrayOutput {
	return o.ApplyT(func(v *GitRepository) GitRepositoryShowOutputArrayOutput { return v.ShowOutputs }).(GitRepositoryShowOutputArrayOutput)
}

type GitRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepository)(nil)).Elem()
}

func (o GitRepositoryArrayOutput) ToGitRepositoryArrayOutput() GitRepositoryArrayOutput {
	return o
}

func (o GitRepositoryArrayOutput) ToGitRepositoryArrayOutputWithContext(ctx context.Context) GitRepositoryArrayOutput {
	return o
}

func (o GitRepositoryArrayOutput) Index(i pulumi.IntInput) GitRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitRepository {
		return vs[0].([]*GitRepository)[vs[1].(int)]
	}).(GitRepositoryOutput)
}

type GitRepositoryMapOutput struct{ *pulumi.OutputState }

func (GitRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepository)(nil)).Elem()
}

func (o GitRepositoryMapOutput) ToGitRepositoryMapOutput() GitRepositoryMapOutput {
	return o
}

func (o GitRepositoryMapOutput) ToGitRepositoryMapOutputWithContext(ctx context.Context) GitRepositoryMapOutput {
	return o
}

func (o GitRepositoryMapOutput) MapIndex(k pulumi.StringInput) GitRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitRepository {
		return vs[0].(map[string]*GitRepository)[vs[1].(string)]
	}).(GitRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryInput)(nil)).Elem(), &GitRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryArrayInput)(nil)).Elem(), GitRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryMapInput)(nil)).Elem(), GitRepositoryMap{})
	pulumi.RegisterOutputType(GitRepositoryOutput{})
	pulumi.RegisterOutputType(GitRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryMapOutput{})
}
