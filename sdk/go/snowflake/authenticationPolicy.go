// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/authenticationPolicy:AuthenticationPolicy example '"<database_name>"."<schema_name>"."<authentication_policy_name>"'
// ```
type AuthenticationPolicy struct {
	pulumi.CustomResourceState

	// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
	AuthenticationMethods pulumi.StringArrayOutput `pulumi:"authenticationMethods"`
	// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
	ClientTypes pulumi.StringArrayOutput `pulumi:"clientTypes"`
	// Specifies a comment for the authentication policy.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
	DescribeOutputs AuthenticationPolicyDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
	MfaAuthenticationMethods pulumi.StringArrayOutput `pulumi:"mfaAuthenticationMethods"`
	// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
	MfaEnrollment pulumi.StringPtrOutput `pulumi:"mfaEnrollment"`
	// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
	SecurityIntegrations pulumi.StringArrayOutput `pulumi:"securityIntegrations"`
	// Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
	ShowOutputs AuthenticationPolicyShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewAuthenticationPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthenticationPolicy(ctx *pulumi.Context,
	name string, args *AuthenticationPolicyArgs, opts ...pulumi.ResourceOption) (*AuthenticationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthenticationPolicy
	err := ctx.RegisterResource("snowflake:index/authenticationPolicy:AuthenticationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticationPolicy gets an existing AuthenticationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticationPolicyState, opts ...pulumi.ResourceOption) (*AuthenticationPolicy, error) {
	var resource AuthenticationPolicy
	err := ctx.ReadResource("snowflake:index/authenticationPolicy:AuthenticationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticationPolicy resources.
type authenticationPolicyState struct {
	// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
	AuthenticationMethods []string `pulumi:"authenticationMethods"`
	// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
	ClientTypes []string `pulumi:"clientTypes"`
	// Specifies a comment for the authentication policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
	DescribeOutputs []AuthenticationPolicyDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
	MfaAuthenticationMethods []string `pulumi:"mfaAuthenticationMethods"`
	// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
	MfaEnrollment *string `pulumi:"mfaEnrollment"`
	// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
	SecurityIntegrations []string `pulumi:"securityIntegrations"`
	// Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
	ShowOutputs []AuthenticationPolicyShowOutput `pulumi:"showOutputs"`
}

type AuthenticationPolicyState struct {
	// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
	AuthenticationMethods pulumi.StringArrayInput
	// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
	ClientTypes pulumi.StringArrayInput
	// Specifies a comment for the authentication policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
	DescribeOutputs AuthenticationPolicyDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
	MfaAuthenticationMethods pulumi.StringArrayInput
	// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
	MfaEnrollment pulumi.StringPtrInput
	// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
	SecurityIntegrations pulumi.StringArrayInput
	// Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
	ShowOutputs AuthenticationPolicyShowOutputArrayInput
}

func (AuthenticationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationPolicyState)(nil)).Elem()
}

type authenticationPolicyArgs struct {
	// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
	AuthenticationMethods []string `pulumi:"authenticationMethods"`
	// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
	ClientTypes []string `pulumi:"clientTypes"`
	// Specifies a comment for the authentication policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
	MfaAuthenticationMethods []string `pulumi:"mfaAuthenticationMethods"`
	// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
	MfaEnrollment *string `pulumi:"mfaEnrollment"`
	// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
	SecurityIntegrations []string `pulumi:"securityIntegrations"`
}

// The set of arguments for constructing a AuthenticationPolicy resource.
type AuthenticationPolicyArgs struct {
	// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
	AuthenticationMethods pulumi.StringArrayInput
	// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
	ClientTypes pulumi.StringArrayInput
	// Specifies a comment for the authentication policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
	MfaAuthenticationMethods pulumi.StringArrayInput
	// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
	MfaEnrollment pulumi.StringPtrInput
	// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
	SecurityIntegrations pulumi.StringArrayInput
}

func (AuthenticationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationPolicyArgs)(nil)).Elem()
}

type AuthenticationPolicyInput interface {
	pulumi.Input

	ToAuthenticationPolicyOutput() AuthenticationPolicyOutput
	ToAuthenticationPolicyOutputWithContext(ctx context.Context) AuthenticationPolicyOutput
}

func (*AuthenticationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationPolicy)(nil)).Elem()
}

func (i *AuthenticationPolicy) ToAuthenticationPolicyOutput() AuthenticationPolicyOutput {
	return i.ToAuthenticationPolicyOutputWithContext(context.Background())
}

func (i *AuthenticationPolicy) ToAuthenticationPolicyOutputWithContext(ctx context.Context) AuthenticationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPolicyOutput)
}

// AuthenticationPolicyArrayInput is an input type that accepts AuthenticationPolicyArray and AuthenticationPolicyArrayOutput values.
// You can construct a concrete instance of `AuthenticationPolicyArrayInput` via:
//
//	AuthenticationPolicyArray{ AuthenticationPolicyArgs{...} }
type AuthenticationPolicyArrayInput interface {
	pulumi.Input

	ToAuthenticationPolicyArrayOutput() AuthenticationPolicyArrayOutput
	ToAuthenticationPolicyArrayOutputWithContext(context.Context) AuthenticationPolicyArrayOutput
}

type AuthenticationPolicyArray []AuthenticationPolicyInput

func (AuthenticationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationPolicy)(nil)).Elem()
}

func (i AuthenticationPolicyArray) ToAuthenticationPolicyArrayOutput() AuthenticationPolicyArrayOutput {
	return i.ToAuthenticationPolicyArrayOutputWithContext(context.Background())
}

func (i AuthenticationPolicyArray) ToAuthenticationPolicyArrayOutputWithContext(ctx context.Context) AuthenticationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPolicyArrayOutput)
}

// AuthenticationPolicyMapInput is an input type that accepts AuthenticationPolicyMap and AuthenticationPolicyMapOutput values.
// You can construct a concrete instance of `AuthenticationPolicyMapInput` via:
//
//	AuthenticationPolicyMap{ "key": AuthenticationPolicyArgs{...} }
type AuthenticationPolicyMapInput interface {
	pulumi.Input

	ToAuthenticationPolicyMapOutput() AuthenticationPolicyMapOutput
	ToAuthenticationPolicyMapOutputWithContext(context.Context) AuthenticationPolicyMapOutput
}

type AuthenticationPolicyMap map[string]AuthenticationPolicyInput

func (AuthenticationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationPolicy)(nil)).Elem()
}

func (i AuthenticationPolicyMap) ToAuthenticationPolicyMapOutput() AuthenticationPolicyMapOutput {
	return i.ToAuthenticationPolicyMapOutputWithContext(context.Background())
}

func (i AuthenticationPolicyMap) ToAuthenticationPolicyMapOutputWithContext(ctx context.Context) AuthenticationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPolicyMapOutput)
}

type AuthenticationPolicyOutput struct{ *pulumi.OutputState }

func (AuthenticationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationPolicy)(nil)).Elem()
}

func (o AuthenticationPolicyOutput) ToAuthenticationPolicyOutput() AuthenticationPolicyOutput {
	return o
}

func (o AuthenticationPolicyOutput) ToAuthenticationPolicyOutputWithContext(ctx context.Context) AuthenticationPolicyOutput {
	return o
}

// A list of authentication methods that are allowed during login. This parameter accepts one or more of the following values: `ALL` | `SAML` | `PASSWORD` | `OAUTH` | `KEYPAIR`
func (o AuthenticationPolicyOutput) AuthenticationMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringArrayOutput { return v.AuthenticationMethods }).(pulumi.StringArrayOutput)
}

// A list of clients that can authenticate with Snowflake. If a client tries to connect, and the client is not one of the valid CLIENT*TYPES, then the login attempt fails. Allowed values are `ALL` | `SNOWFLAKE_UI` | `DRIVERS` | `SNOWSQL`. The CLIENT*TYPES property of an authentication policy is a best effort method to block user logins based on specific clients. It should not be used as the sole control to establish a security boundary.
func (o AuthenticationPolicyOutput) ClientTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringArrayOutput { return v.ClientTypes }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the authentication policy.
func (o AuthenticationPolicyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o AuthenticationPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE AUTHENTICATION POLICY` for the given policy.
func (o AuthenticationPolicyOutput) DescribeOutputs() AuthenticationPolicyDescribeOutputArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) AuthenticationPolicyDescribeOutputArrayOutput { return v.DescribeOutputs }).(AuthenticationPolicyDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o AuthenticationPolicyOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// A list of authentication methods that enforce multi-factor authentication (MFA) during login. Authentication methods not listed in this parameter do not prompt for multi-factor authentication. Allowed values are `ALL` | `SAML` | `PASSWORD`.
func (o AuthenticationPolicyOutput) MfaAuthenticationMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringArrayOutput { return v.MfaAuthenticationMethods }).(pulumi.StringArrayOutput)
}

// (Default: `OPTIONAL`) Determines whether a user must enroll in multi-factor authentication. Allowed values are REQUIRED and OPTIONAL. When REQUIRED is specified, Enforces users to enroll in MFA. If this value is used, then the CLIENT*TYPES parameter must include SNOWFLAKE*UI, because Snowsight is the only place users can enroll in multi-factor authentication (MFA).
func (o AuthenticationPolicyOutput) MfaEnrollment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringPtrOutput { return v.MfaEnrollment }).(pulumi.StringPtrOutput)
}

// Specifies the identifier for the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o AuthenticationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the authentication policy. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o AuthenticationPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// A list of security integrations the authentication policy is associated with. This parameter has no effect when SAML or OAUTH are not in the AUTHENTICATION*METHODS list. All values in the SECURITY*INTEGRATIONS list must be compatible with the values in the AUTHENTICATION*METHODS list. For example, if SECURITY*INTEGRATIONS contains a SAML security integration, and AUTHENTICATION_METHODS contains OAUTH, then you cannot create the authentication policy. To allow all security integrations use ALL as parameter.
func (o AuthenticationPolicyOutput) SecurityIntegrations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) pulumi.StringArrayOutput { return v.SecurityIntegrations }).(pulumi.StringArrayOutput)
}

// Outputs the result of `SHOW AUTHENTICATION POLICIES` for the given policy.
func (o AuthenticationPolicyOutput) ShowOutputs() AuthenticationPolicyShowOutputArrayOutput {
	return o.ApplyT(func(v *AuthenticationPolicy) AuthenticationPolicyShowOutputArrayOutput { return v.ShowOutputs }).(AuthenticationPolicyShowOutputArrayOutput)
}

type AuthenticationPolicyArrayOutput struct{ *pulumi.OutputState }

func (AuthenticationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationPolicy)(nil)).Elem()
}

func (o AuthenticationPolicyArrayOutput) ToAuthenticationPolicyArrayOutput() AuthenticationPolicyArrayOutput {
	return o
}

func (o AuthenticationPolicyArrayOutput) ToAuthenticationPolicyArrayOutputWithContext(ctx context.Context) AuthenticationPolicyArrayOutput {
	return o
}

func (o AuthenticationPolicyArrayOutput) Index(i pulumi.IntInput) AuthenticationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticationPolicy {
		return vs[0].([]*AuthenticationPolicy)[vs[1].(int)]
	}).(AuthenticationPolicyOutput)
}

type AuthenticationPolicyMapOutput struct{ *pulumi.OutputState }

func (AuthenticationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationPolicy)(nil)).Elem()
}

func (o AuthenticationPolicyMapOutput) ToAuthenticationPolicyMapOutput() AuthenticationPolicyMapOutput {
	return o
}

func (o AuthenticationPolicyMapOutput) ToAuthenticationPolicyMapOutputWithContext(ctx context.Context) AuthenticationPolicyMapOutput {
	return o
}

func (o AuthenticationPolicyMapOutput) MapIndex(k pulumi.StringInput) AuthenticationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticationPolicy {
		return vs[0].(map[string]*AuthenticationPolicy)[vs[1].(string)]
	}).(AuthenticationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationPolicyInput)(nil)).Elem(), &AuthenticationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationPolicyArrayInput)(nil)).Elem(), AuthenticationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationPolicyMapInput)(nil)).Elem(), AuthenticationPolicyMap{})
	pulumi.RegisterOutputType(AuthenticationPolicyOutput{})
	pulumi.RegisterOutputType(AuthenticationPolicyArrayOutput{})
	pulumi.RegisterOutputType(AuthenticationPolicyMapOutput{})
}
