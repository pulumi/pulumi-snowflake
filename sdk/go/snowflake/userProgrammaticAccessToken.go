// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken example '"<user_name>"|"<token_name>"'
// ```
type UserProgrammaticAccessToken struct {
	pulumi.CustomResourceState

	// Descriptive comment about the programmatic access token.
	Comment      pulumi.StringPtrOutput `pulumi:"comment"`
	DaysToExpiry pulumi.IntPtrOutput    `pulumi:"daysToExpiry"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Disabled pulumi.StringPtrOutput `pulumi:"disabled"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
	ExpireRotatedTokenAfterHours pulumi.IntPtrOutput `pulumi:"expireRotatedTokenAfterHours"`
	// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
	Keeper                               pulumi.StringPtrOutput `pulumi:"keeper"`
	MinsToBypassNetworkPolicyRequirement pulumi.IntPtrOutput    `pulumi:"minsToBypassNetworkPolicyRequirement"`
	// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	RoleRestriction pulumi.StringPtrOutput `pulumi:"roleRestriction"`
	// Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
	RotatedTokenName pulumi.StringOutput `pulumi:"rotatedTokenName"`
	// Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
	ShowOutputs UserProgrammaticAccessTokenShowOutputArrayOutput `pulumi:"showOutputs"`
	// The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
	Token pulumi.StringOutput `pulumi:"token"`
	// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewUserProgrammaticAccessToken registers a new resource with the given unique name, arguments, and options.
func NewUserProgrammaticAccessToken(ctx *pulumi.Context,
	name string, args *UserProgrammaticAccessTokenArgs, opts ...pulumi.ResourceOption) (*UserProgrammaticAccessToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserProgrammaticAccessToken
	err := ctx.RegisterResource("snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserProgrammaticAccessToken gets an existing UserProgrammaticAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserProgrammaticAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserProgrammaticAccessTokenState, opts ...pulumi.ResourceOption) (*UserProgrammaticAccessToken, error) {
	var resource UserProgrammaticAccessToken
	err := ctx.ReadResource("snowflake:index/userProgrammaticAccessToken:UserProgrammaticAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserProgrammaticAccessToken resources.
type userProgrammaticAccessTokenState struct {
	// Descriptive comment about the programmatic access token.
	Comment      *string `pulumi:"comment"`
	DaysToExpiry *int    `pulumi:"daysToExpiry"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Disabled *string `pulumi:"disabled"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
	ExpireRotatedTokenAfterHours *int `pulumi:"expireRotatedTokenAfterHours"`
	// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
	Keeper                               *string `pulumi:"keeper"`
	MinsToBypassNetworkPolicyRequirement *int    `pulumi:"minsToBypassNetworkPolicyRequirement"`
	// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	RoleRestriction *string `pulumi:"roleRestriction"`
	// Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
	RotatedTokenName *string `pulumi:"rotatedTokenName"`
	// Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
	ShowOutputs []UserProgrammaticAccessTokenShowOutput `pulumi:"showOutputs"`
	// The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
	Token *string `pulumi:"token"`
	// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	User *string `pulumi:"user"`
}

type UserProgrammaticAccessTokenState struct {
	// Descriptive comment about the programmatic access token.
	Comment      pulumi.StringPtrInput
	DaysToExpiry pulumi.IntPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Disabled pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
	ExpireRotatedTokenAfterHours pulumi.IntPtrInput
	// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
	Keeper                               pulumi.StringPtrInput
	MinsToBypassNetworkPolicyRequirement pulumi.IntPtrInput
	// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	RoleRestriction pulumi.StringPtrInput
	// Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
	RotatedTokenName pulumi.StringPtrInput
	// Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
	ShowOutputs UserProgrammaticAccessTokenShowOutputArrayInput
	// The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
	Token pulumi.StringPtrInput
	// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	User pulumi.StringPtrInput
}

func (UserProgrammaticAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*userProgrammaticAccessTokenState)(nil)).Elem()
}

type userProgrammaticAccessTokenArgs struct {
	// Descriptive comment about the programmatic access token.
	Comment      *string `pulumi:"comment"`
	DaysToExpiry *int    `pulumi:"daysToExpiry"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Disabled *string `pulumi:"disabled"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
	ExpireRotatedTokenAfterHours *int `pulumi:"expireRotatedTokenAfterHours"`
	// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
	Keeper                               *string `pulumi:"keeper"`
	MinsToBypassNetworkPolicyRequirement *int    `pulumi:"minsToBypassNetworkPolicyRequirement"`
	// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	RoleRestriction *string `pulumi:"roleRestriction"`
	// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a UserProgrammaticAccessToken resource.
type UserProgrammaticAccessTokenArgs struct {
	// Descriptive comment about the programmatic access token.
	Comment      pulumi.StringPtrInput
	DaysToExpiry pulumi.IntPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Disabled pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
	ExpireRotatedTokenAfterHours pulumi.IntPtrInput
	// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
	Keeper                               pulumi.StringPtrInput
	MinsToBypassNetworkPolicyRequirement pulumi.IntPtrInput
	// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	RoleRestriction pulumi.StringPtrInput
	// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	User pulumi.StringInput
}

func (UserProgrammaticAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userProgrammaticAccessTokenArgs)(nil)).Elem()
}

type UserProgrammaticAccessTokenInput interface {
	pulumi.Input

	ToUserProgrammaticAccessTokenOutput() UserProgrammaticAccessTokenOutput
	ToUserProgrammaticAccessTokenOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenOutput
}

func (*UserProgrammaticAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProgrammaticAccessToken)(nil)).Elem()
}

func (i *UserProgrammaticAccessToken) ToUserProgrammaticAccessTokenOutput() UserProgrammaticAccessTokenOutput {
	return i.ToUserProgrammaticAccessTokenOutputWithContext(context.Background())
}

func (i *UserProgrammaticAccessToken) ToUserProgrammaticAccessTokenOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProgrammaticAccessTokenOutput)
}

// UserProgrammaticAccessTokenArrayInput is an input type that accepts UserProgrammaticAccessTokenArray and UserProgrammaticAccessTokenArrayOutput values.
// You can construct a concrete instance of `UserProgrammaticAccessTokenArrayInput` via:
//
//	UserProgrammaticAccessTokenArray{ UserProgrammaticAccessTokenArgs{...} }
type UserProgrammaticAccessTokenArrayInput interface {
	pulumi.Input

	ToUserProgrammaticAccessTokenArrayOutput() UserProgrammaticAccessTokenArrayOutput
	ToUserProgrammaticAccessTokenArrayOutputWithContext(context.Context) UserProgrammaticAccessTokenArrayOutput
}

type UserProgrammaticAccessTokenArray []UserProgrammaticAccessTokenInput

func (UserProgrammaticAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserProgrammaticAccessToken)(nil)).Elem()
}

func (i UserProgrammaticAccessTokenArray) ToUserProgrammaticAccessTokenArrayOutput() UserProgrammaticAccessTokenArrayOutput {
	return i.ToUserProgrammaticAccessTokenArrayOutputWithContext(context.Background())
}

func (i UserProgrammaticAccessTokenArray) ToUserProgrammaticAccessTokenArrayOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProgrammaticAccessTokenArrayOutput)
}

// UserProgrammaticAccessTokenMapInput is an input type that accepts UserProgrammaticAccessTokenMap and UserProgrammaticAccessTokenMapOutput values.
// You can construct a concrete instance of `UserProgrammaticAccessTokenMapInput` via:
//
//	UserProgrammaticAccessTokenMap{ "key": UserProgrammaticAccessTokenArgs{...} }
type UserProgrammaticAccessTokenMapInput interface {
	pulumi.Input

	ToUserProgrammaticAccessTokenMapOutput() UserProgrammaticAccessTokenMapOutput
	ToUserProgrammaticAccessTokenMapOutputWithContext(context.Context) UserProgrammaticAccessTokenMapOutput
}

type UserProgrammaticAccessTokenMap map[string]UserProgrammaticAccessTokenInput

func (UserProgrammaticAccessTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserProgrammaticAccessToken)(nil)).Elem()
}

func (i UserProgrammaticAccessTokenMap) ToUserProgrammaticAccessTokenMapOutput() UserProgrammaticAccessTokenMapOutput {
	return i.ToUserProgrammaticAccessTokenMapOutputWithContext(context.Background())
}

func (i UserProgrammaticAccessTokenMap) ToUserProgrammaticAccessTokenMapOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProgrammaticAccessTokenMapOutput)
}

type UserProgrammaticAccessTokenOutput struct{ *pulumi.OutputState }

func (UserProgrammaticAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProgrammaticAccessToken)(nil)).Elem()
}

func (o UserProgrammaticAccessTokenOutput) ToUserProgrammaticAccessTokenOutput() UserProgrammaticAccessTokenOutput {
	return o
}

func (o UserProgrammaticAccessTokenOutput) ToUserProgrammaticAccessTokenOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenOutput {
	return o
}

// Descriptive comment about the programmatic access token.
func (o UserProgrammaticAccessTokenOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o UserProgrammaticAccessTokenOutput) DaysToExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.IntPtrOutput { return v.DaysToExpiry }).(pulumi.IntPtrOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Disables or enables the programmatic access token. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o UserProgrammaticAccessTokenOutput) Disabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringPtrOutput { return v.Disabled }).(pulumi.StringPtrOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) This field is only used when the token is rotated by changing the `keeper` field. Sets the expiration time of the existing token secret to expire after the specified number of hours. You can set this to a value of 0 to expire the current token secret immediately.
func (o UserProgrammaticAccessTokenOutput) ExpireRotatedTokenAfterHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.IntPtrOutput { return v.ExpireRotatedTokenAfterHours }).(pulumi.IntPtrOutput)
}

// Arbitrary string that, if and only if, changed from a non-empty to a different non-empty value (or known after apply), will trigger a key to be rotated. When you add this field to the configuration, or remove it from the configuration, the rotation is not triggered. When the token is rotated, the `token` and `rotatedTokenName` fields are marked as computed.
func (o UserProgrammaticAccessTokenOutput) Keeper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringPtrOutput { return v.Keeper }).(pulumi.StringPtrOutput)
}

func (o UserProgrammaticAccessTokenOutput) MinsToBypassNetworkPolicyRequirement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.IntPtrOutput {
		return v.MinsToBypassNetworkPolicyRequirement
	}).(pulumi.IntPtrOutput)
}

// Specifies the name for the programmatic access token; must be unique for the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o UserProgrammaticAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the role used for privilege evaluation and object creation. This must be one of the roles that has already been granted to the user. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o UserProgrammaticAccessTokenOutput) RoleRestriction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringPtrOutput { return v.RoleRestriction }).(pulumi.StringPtrOutput)
}

// Name of the token that represents the prior secret. This field is updated only when the token is rotated. In this case, the field is marked as computed.
func (o UserProgrammaticAccessTokenOutput) RotatedTokenName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringOutput { return v.RotatedTokenName }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW USER PROGRAMMATIC ACCESS TOKENS` for the given user programmatic access token.
func (o UserProgrammaticAccessTokenOutput) ShowOutputs() UserProgrammaticAccessTokenShowOutputArrayOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) UserProgrammaticAccessTokenShowOutputArrayOutput {
		return v.ShowOutputs
	}).(UserProgrammaticAccessTokenShowOutputArrayOutput)
}

// The token itself. Use this to authenticate to an endpoint. The data in this field is updated only when the token is created or rotated. In this case, the field is marked as computed.
func (o UserProgrammaticAccessTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The name of the user that the token is associated with. A user cannot use another user's programmatic access token to authenticate. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o UserProgrammaticAccessTokenOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProgrammaticAccessToken) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type UserProgrammaticAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (UserProgrammaticAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserProgrammaticAccessToken)(nil)).Elem()
}

func (o UserProgrammaticAccessTokenArrayOutput) ToUserProgrammaticAccessTokenArrayOutput() UserProgrammaticAccessTokenArrayOutput {
	return o
}

func (o UserProgrammaticAccessTokenArrayOutput) ToUserProgrammaticAccessTokenArrayOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenArrayOutput {
	return o
}

func (o UserProgrammaticAccessTokenArrayOutput) Index(i pulumi.IntInput) UserProgrammaticAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserProgrammaticAccessToken {
		return vs[0].([]*UserProgrammaticAccessToken)[vs[1].(int)]
	}).(UserProgrammaticAccessTokenOutput)
}

type UserProgrammaticAccessTokenMapOutput struct{ *pulumi.OutputState }

func (UserProgrammaticAccessTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserProgrammaticAccessToken)(nil)).Elem()
}

func (o UserProgrammaticAccessTokenMapOutput) ToUserProgrammaticAccessTokenMapOutput() UserProgrammaticAccessTokenMapOutput {
	return o
}

func (o UserProgrammaticAccessTokenMapOutput) ToUserProgrammaticAccessTokenMapOutputWithContext(ctx context.Context) UserProgrammaticAccessTokenMapOutput {
	return o
}

func (o UserProgrammaticAccessTokenMapOutput) MapIndex(k pulumi.StringInput) UserProgrammaticAccessTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserProgrammaticAccessToken {
		return vs[0].(map[string]*UserProgrammaticAccessToken)[vs[1].(string)]
	}).(UserProgrammaticAccessTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserProgrammaticAccessTokenInput)(nil)).Elem(), &UserProgrammaticAccessToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserProgrammaticAccessTokenArrayInput)(nil)).Elem(), UserProgrammaticAccessTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserProgrammaticAccessTokenMapInput)(nil)).Elem(), UserProgrammaticAccessTokenMap{})
	pulumi.RegisterOutputType(UserProgrammaticAccessTokenOutput{})
	pulumi.RegisterOutputType(UserProgrammaticAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(UserProgrammaticAccessTokenMapOutput{})
}
