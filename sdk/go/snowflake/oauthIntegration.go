// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Deprecation** This resource is deprecated and will be removed in a future major version release. Please use OauthIntegrationForCustomClients or OauthIntegrationForPartnerApplications instead. <deprecation>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := snowflake.NewOauthIntegration(ctx, "tableau_desktop", &snowflake.OauthIntegrationArgs{
//				Name:                      pulumi.String("TABLEAU_DESKTOP"),
//				OauthClient:               pulumi.String("TABLEAU_DESKTOP"),
//				Enabled:                   pulumi.Bool(true),
//				OauthIssueRefreshTokens:   pulumi.Bool(true),
//				OauthRefreshTokenValidity: pulumi.Int(3600),
//				BlockedRolesLists: pulumi.StringArray{
//					pulumi.String("SYSADMIN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/oauthIntegration:OauthIntegration example name
// ```
type OauthIntegration struct {
	pulumi.CustomResourceState

	// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
	BlockedRolesLists pulumi.StringArrayOutput `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Date and time when the OAuth integration was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Specifies whether this OAuth integration is enabled or disabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the OAuth client type.
	OauthClient pulumi.StringOutput `pulumi:"oauthClient"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
	OauthClientType pulumi.StringPtrOutput `pulumi:"oauthClientType"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
	OauthIssueRefreshTokens pulumi.BoolPtrOutput `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringPtrOutput `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrOutput `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
	OauthUseSecondaryRoles pulumi.StringPtrOutput `pulumi:"oauthUseSecondaryRoles"`
}

// NewOauthIntegration registers a new resource with the given unique name, arguments, and options.
func NewOauthIntegration(ctx *pulumi.Context,
	name string, args *OauthIntegrationArgs, opts ...pulumi.ResourceOption) (*OauthIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OauthClient == nil {
		return nil, errors.New("invalid value for required argument 'OauthClient'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OauthIntegration
	err := ctx.RegisterResource("snowflake:index/oauthIntegration:OauthIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOauthIntegration gets an existing OauthIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOauthIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OauthIntegrationState, opts ...pulumi.ResourceOption) (*OauthIntegration, error) {
	var resource OauthIntegration
	err := ctx.ReadResource("snowflake:index/oauthIntegration:OauthIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OauthIntegration resources.
type oauthIntegrationState struct {
	// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// Date and time when the OAuth integration was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Specifies whether this OAuth integration is enabled or disabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name *string `pulumi:"name"`
	// Specifies the OAuth client type.
	OauthClient *string `pulumi:"oauthClient"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
	OauthClientType *string `pulumi:"oauthClientType"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
	OauthIssueRefreshTokens *bool `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri *string `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
}

type OauthIntegrationState struct {
	// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// Date and time when the OAuth integration was created.
	CreatedOn pulumi.StringPtrInput
	// Specifies whether this OAuth integration is enabled or disabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringPtrInput
	// Specifies the OAuth client type.
	OauthClient pulumi.StringPtrInput
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
	OauthClientType pulumi.StringPtrInput
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
	OauthIssueRefreshTokens pulumi.BoolPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringPtrInput
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
	OauthUseSecondaryRoles pulumi.StringPtrInput
}

func (OauthIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationState)(nil)).Elem()
}

type oauthIntegrationArgs struct {
	// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// Specifies whether this OAuth integration is enabled or disabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name *string `pulumi:"name"`
	// Specifies the OAuth client type.
	OauthClient string `pulumi:"oauthClient"`
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
	OauthClientType *string `pulumi:"oauthClientType"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
	OauthIssueRefreshTokens *bool `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri *string `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
}

// The set of arguments for constructing a OauthIntegration resource.
type OauthIntegrationArgs struct {
	// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// Specifies whether this OAuth integration is enabled or disabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
	Name pulumi.StringPtrInput
	// Specifies the OAuth client type.
	OauthClient pulumi.StringInput
	// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
	OauthClientType pulumi.StringPtrInput
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
	OauthIssueRefreshTokens pulumi.BoolPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
	OauthRedirectUri pulumi.StringPtrInput
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
	OauthUseSecondaryRoles pulumi.StringPtrInput
}

func (OauthIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationArgs)(nil)).Elem()
}

type OauthIntegrationInput interface {
	pulumi.Input

	ToOauthIntegrationOutput() OauthIntegrationOutput
	ToOauthIntegrationOutputWithContext(ctx context.Context) OauthIntegrationOutput
}

func (*OauthIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegration)(nil)).Elem()
}

func (i *OauthIntegration) ToOauthIntegrationOutput() OauthIntegrationOutput {
	return i.ToOauthIntegrationOutputWithContext(context.Background())
}

func (i *OauthIntegration) ToOauthIntegrationOutputWithContext(ctx context.Context) OauthIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationOutput)
}

// OauthIntegrationArrayInput is an input type that accepts OauthIntegrationArray and OauthIntegrationArrayOutput values.
// You can construct a concrete instance of `OauthIntegrationArrayInput` via:
//
//	OauthIntegrationArray{ OauthIntegrationArgs{...} }
type OauthIntegrationArrayInput interface {
	pulumi.Input

	ToOauthIntegrationArrayOutput() OauthIntegrationArrayOutput
	ToOauthIntegrationArrayOutputWithContext(context.Context) OauthIntegrationArrayOutput
}

type OauthIntegrationArray []OauthIntegrationInput

func (OauthIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegration)(nil)).Elem()
}

func (i OauthIntegrationArray) ToOauthIntegrationArrayOutput() OauthIntegrationArrayOutput {
	return i.ToOauthIntegrationArrayOutputWithContext(context.Background())
}

func (i OauthIntegrationArray) ToOauthIntegrationArrayOutputWithContext(ctx context.Context) OauthIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationArrayOutput)
}

// OauthIntegrationMapInput is an input type that accepts OauthIntegrationMap and OauthIntegrationMapOutput values.
// You can construct a concrete instance of `OauthIntegrationMapInput` via:
//
//	OauthIntegrationMap{ "key": OauthIntegrationArgs{...} }
type OauthIntegrationMapInput interface {
	pulumi.Input

	ToOauthIntegrationMapOutput() OauthIntegrationMapOutput
	ToOauthIntegrationMapOutputWithContext(context.Context) OauthIntegrationMapOutput
}

type OauthIntegrationMap map[string]OauthIntegrationInput

func (OauthIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegration)(nil)).Elem()
}

func (i OauthIntegrationMap) ToOauthIntegrationMapOutput() OauthIntegrationMapOutput {
	return i.ToOauthIntegrationMapOutputWithContext(context.Background())
}

func (i OauthIntegrationMap) ToOauthIntegrationMapOutputWithContext(ctx context.Context) OauthIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationMapOutput)
}

type OauthIntegrationOutput struct{ *pulumi.OutputState }

func (OauthIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegration)(nil)).Elem()
}

func (o OauthIntegrationOutput) ToOauthIntegrationOutput() OauthIntegrationOutput {
	return o
}

func (o OauthIntegrationOutput) ToOauthIntegrationOutputWithContext(ctx context.Context) OauthIntegrationOutput {
	return o
}

// List of roles that a user cannot explicitly consent to using after authenticating. Do not include ACCOUNTADMIN, ORGADMIN or SECURITYADMIN as they are already implicitly enforced and will cause in-place updates.
func (o OauthIntegrationOutput) BlockedRolesLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringArrayOutput { return v.BlockedRolesLists }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the OAuth integration.
func (o OauthIntegrationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Date and time when the OAuth integration was created.
func (o OauthIntegrationOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Specifies whether this OAuth integration is enabled or disabled.
func (o OauthIntegrationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.
func (o OauthIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the OAuth client type.
func (o OauthIntegrationOutput) OauthClient() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringOutput { return v.OauthClient }).(pulumi.StringOutput)
}

// Specifies the type of client being registered. Snowflake supports both confidential and public clients.
func (o OauthIntegrationOutput) OauthClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringPtrOutput { return v.OauthClientType }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired.
func (o OauthIntegrationOutput) OauthIssueRefreshTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.BoolPtrOutput { return v.OauthIssueRefreshTokens }).(pulumi.BoolPtrOutput)
}

// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.
func (o OauthIntegrationOutput) OauthRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringPtrOutput { return v.OauthRedirectUri }).(pulumi.StringPtrOutput)
}

// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
func (o OauthIntegrationOutput) OauthRefreshTokenValidity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.IntPtrOutput { return v.OauthRefreshTokenValidity }).(pulumi.IntPtrOutput)
}

// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened.
func (o OauthIntegrationOutput) OauthUseSecondaryRoles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegration) pulumi.StringPtrOutput { return v.OauthUseSecondaryRoles }).(pulumi.StringPtrOutput)
}

type OauthIntegrationArrayOutput struct{ *pulumi.OutputState }

func (OauthIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegration)(nil)).Elem()
}

func (o OauthIntegrationArrayOutput) ToOauthIntegrationArrayOutput() OauthIntegrationArrayOutput {
	return o
}

func (o OauthIntegrationArrayOutput) ToOauthIntegrationArrayOutputWithContext(ctx context.Context) OauthIntegrationArrayOutput {
	return o
}

func (o OauthIntegrationArrayOutput) Index(i pulumi.IntInput) OauthIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OauthIntegration {
		return vs[0].([]*OauthIntegration)[vs[1].(int)]
	}).(OauthIntegrationOutput)
}

type OauthIntegrationMapOutput struct{ *pulumi.OutputState }

func (OauthIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegration)(nil)).Elem()
}

func (o OauthIntegrationMapOutput) ToOauthIntegrationMapOutput() OauthIntegrationMapOutput {
	return o
}

func (o OauthIntegrationMapOutput) ToOauthIntegrationMapOutputWithContext(ctx context.Context) OauthIntegrationMapOutput {
	return o
}

func (o OauthIntegrationMapOutput) MapIndex(k pulumi.StringInput) OauthIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OauthIntegration {
		return vs[0].(map[string]*OauthIntegration)[vs[1].(string)]
	}).(OauthIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationInput)(nil)).Elem(), &OauthIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationArrayInput)(nil)).Elem(), OauthIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationMapInput)(nil)).Elem(), OauthIntegrationMap{})
	pulumi.RegisterOutputType(OauthIntegrationOutput{})
	pulumi.RegisterOutputType(OauthIntegrationArrayOutput{})
	pulumi.RegisterOutputType(OauthIntegrationMapOutput{})
}
