// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/functionSql:FunctionSql example '"<database_name>"."<schema_name>"."<function_name>"(varchar, varchar, varchar)'
// ```
//
// Note: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).
//
// Also, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.
type FunctionSql struct {
	pulumi.CustomResourceState

	// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionSqlArgumentArrayOutput `pulumi:"arguments"`
	// (Default: `user-defined function`) Specifies a comment for the function.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringOutput `pulumi:"functionDefinition"`
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage pulumi.StringOutput    `pulumi:"functionLanguage"`
	IsSecure         pulumi.StringPtrOutput `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringOutput `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters FunctionSqlParameterArrayOutput `pulumi:"parameters"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrOutput `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringOutput `pulumi:"returnType"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs FunctionSqlShowOutputArrayOutput `pulumi:"showOutputs"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
}

// NewFunctionSql registers a new resource with the given unique name, arguments, and options.
func NewFunctionSql(ctx *pulumi.Context,
	name string, args *FunctionSqlArgs, opts ...pulumi.ResourceOption) (*FunctionSql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.FunctionDefinition == nil {
		return nil, errors.New("invalid value for required argument 'FunctionDefinition'")
	}
	if args.ReturnType == nil {
		return nil, errors.New("invalid value for required argument 'ReturnType'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionSql
	err := ctx.RegisterResource("snowflake:index/functionSql:FunctionSql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionSql gets an existing FunctionSql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionSql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionSqlState, opts ...pulumi.ResourceOption) (*FunctionSql, error) {
	var resource FunctionSql
	err := ctx.ReadResource("snowflake:index/functionSql:FunctionSql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionSql resources.
type functionSqlState struct {
	// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments []FunctionSqlArgument `pulumi:"arguments"`
	// (Default: `user-defined function`) Specifies a comment for the function.
	Comment *string `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	FunctionDefinition *string `pulumi:"functionDefinition"`
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage *string `pulumi:"functionLanguage"`
	IsSecure         *string `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters []FunctionSqlParameter `pulumi:"parameters"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
	ReturnResultsBehavior *string `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType *string `pulumi:"returnType"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs []FunctionSqlShowOutput `pulumi:"showOutputs"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

type FunctionSqlState struct {
	// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionSqlArgumentArrayInput
	// (Default: `user-defined function`) Specifies a comment for the function.
	Comment pulumi.StringPtrInput
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringPtrInput
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage pulumi.StringPtrInput
	IsSecure         pulumi.StringPtrInput
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters FunctionSqlParameterArrayInput
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrInput
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringPtrInput
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs FunctionSqlShowOutputArrayInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (FunctionSqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionSqlState)(nil)).Elem()
}

type functionSqlArgs struct {
	// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments []FunctionSqlArgument `pulumi:"arguments"`
	// (Default: `user-defined function`) Specifies a comment for the function.
	Comment *string `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	FunctionDefinition string  `pulumi:"functionDefinition"`
	IsSecure           *string `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
	ReturnResultsBehavior *string `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType string `pulumi:"returnType"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

// The set of arguments for constructing a FunctionSql resource.
type FunctionSqlArgs struct {
	// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionSqlArgumentArrayInput
	// (Default: `user-defined function`) Specifies a comment for the function.
	Comment pulumi.StringPtrInput
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringInput
	IsSecure           pulumi.StringPtrInput
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrInput
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringInput
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (FunctionSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionSqlArgs)(nil)).Elem()
}

type FunctionSqlInput interface {
	pulumi.Input

	ToFunctionSqlOutput() FunctionSqlOutput
	ToFunctionSqlOutputWithContext(ctx context.Context) FunctionSqlOutput
}

func (*FunctionSql) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSql)(nil)).Elem()
}

func (i *FunctionSql) ToFunctionSqlOutput() FunctionSqlOutput {
	return i.ToFunctionSqlOutputWithContext(context.Background())
}

func (i *FunctionSql) ToFunctionSqlOutputWithContext(ctx context.Context) FunctionSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSqlOutput)
}

// FunctionSqlArrayInput is an input type that accepts FunctionSqlArray and FunctionSqlArrayOutput values.
// You can construct a concrete instance of `FunctionSqlArrayInput` via:
//
//	FunctionSqlArray{ FunctionSqlArgs{...} }
type FunctionSqlArrayInput interface {
	pulumi.Input

	ToFunctionSqlArrayOutput() FunctionSqlArrayOutput
	ToFunctionSqlArrayOutputWithContext(context.Context) FunctionSqlArrayOutput
}

type FunctionSqlArray []FunctionSqlInput

func (FunctionSqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionSql)(nil)).Elem()
}

func (i FunctionSqlArray) ToFunctionSqlArrayOutput() FunctionSqlArrayOutput {
	return i.ToFunctionSqlArrayOutputWithContext(context.Background())
}

func (i FunctionSqlArray) ToFunctionSqlArrayOutputWithContext(ctx context.Context) FunctionSqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSqlArrayOutput)
}

// FunctionSqlMapInput is an input type that accepts FunctionSqlMap and FunctionSqlMapOutput values.
// You can construct a concrete instance of `FunctionSqlMapInput` via:
//
//	FunctionSqlMap{ "key": FunctionSqlArgs{...} }
type FunctionSqlMapInput interface {
	pulumi.Input

	ToFunctionSqlMapOutput() FunctionSqlMapOutput
	ToFunctionSqlMapOutputWithContext(context.Context) FunctionSqlMapOutput
}

type FunctionSqlMap map[string]FunctionSqlInput

func (FunctionSqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionSql)(nil)).Elem()
}

func (i FunctionSqlMap) ToFunctionSqlMapOutput() FunctionSqlMapOutput {
	return i.ToFunctionSqlMapOutputWithContext(context.Background())
}

func (i FunctionSqlMap) ToFunctionSqlMapOutputWithContext(ctx context.Context) FunctionSqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSqlMapOutput)
}

type FunctionSqlOutput struct{ *pulumi.OutputState }

func (FunctionSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSql)(nil)).Elem()
}

func (o FunctionSqlOutput) ToFunctionSqlOutput() FunctionSqlOutput {
	return o
}

func (o FunctionSqlOutput) ToFunctionSqlOutputWithContext(ctx context.Context) FunctionSqlOutput {
	return o
}

// List of the arguments for the function. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
func (o FunctionSqlOutput) Arguments() FunctionSqlArgumentArrayOutput {
	return o.ApplyT(func(v *FunctionSql) FunctionSqlArgumentArrayOutput { return v.Arguments }).(FunctionSqlArgumentArrayOutput)
}

// (Default: `user-defined function`) Specifies a comment for the function.
func (o FunctionSqlOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o FunctionSqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
func (o FunctionSqlOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o FunctionSqlOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically; do not include them. The `functionDefinition` value must be SQL source code. For more information, see [Introduction to SQL UDFs](https://docs.snowflake.com/en/developer-guide/udf/sql/udf-sql-introduction). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
func (o FunctionSqlOutput) FunctionDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.FunctionDefinition }).(pulumi.StringOutput)
}

// Specifies language for the user. Used to detect external changes.
func (o FunctionSqlOutput) FunctionLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.FunctionLanguage }).(pulumi.StringOutput)
}

func (o FunctionSqlOutput) IsSecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringPtrOutput { return v.IsSecure }).(pulumi.StringPtrOutput)
}

// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
func (o FunctionSqlOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
func (o FunctionSqlOutput) MetricLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.MetricLevel }).(pulumi.StringOutput)
}

// The name of the function; the identifier does not need to be unique for the schema in which the function is created because UDFs are identified and resolved by the combination of the name and argument types. Check the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o FunctionSqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
func (o FunctionSqlOutput) Parameters() FunctionSqlParameterArrayOutput {
	return o.ApplyT(func(v *FunctionSql) FunctionSqlParameterArrayOutput { return v.Parameters }).(FunctionSqlParameterArrayOutput)
}

// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` | `IMMUTABLE`.
func (o FunctionSqlOutput) ReturnResultsBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringPtrOutput { return v.ReturnResultsBehavior }).(pulumi.StringPtrOutput)
}

// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
func (o FunctionSqlOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.ReturnType }).(pulumi.StringOutput)
}

// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o FunctionSqlOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW FUNCTION` for the given function.
func (o FunctionSqlOutput) ShowOutputs() FunctionSqlShowOutputArrayOutput {
	return o.ApplyT(func(v *FunctionSql) FunctionSqlShowOutputArrayOutput { return v.ShowOutputs }).(FunctionSqlShowOutputArrayOutput)
}

// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
func (o FunctionSqlOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionSql) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

type FunctionSqlArrayOutput struct{ *pulumi.OutputState }

func (FunctionSqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionSql)(nil)).Elem()
}

func (o FunctionSqlArrayOutput) ToFunctionSqlArrayOutput() FunctionSqlArrayOutput {
	return o
}

func (o FunctionSqlArrayOutput) ToFunctionSqlArrayOutputWithContext(ctx context.Context) FunctionSqlArrayOutput {
	return o
}

func (o FunctionSqlArrayOutput) Index(i pulumi.IntInput) FunctionSqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionSql {
		return vs[0].([]*FunctionSql)[vs[1].(int)]
	}).(FunctionSqlOutput)
}

type FunctionSqlMapOutput struct{ *pulumi.OutputState }

func (FunctionSqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionSql)(nil)).Elem()
}

func (o FunctionSqlMapOutput) ToFunctionSqlMapOutput() FunctionSqlMapOutput {
	return o
}

func (o FunctionSqlMapOutput) ToFunctionSqlMapOutputWithContext(ctx context.Context) FunctionSqlMapOutput {
	return o
}

func (o FunctionSqlMapOutput) MapIndex(k pulumi.StringInput) FunctionSqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionSql {
		return vs[0].(map[string]*FunctionSql)[vs[1].(string)]
	}).(FunctionSqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSqlInput)(nil)).Elem(), &FunctionSql{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSqlArrayInput)(nil)).Elem(), FunctionSqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSqlMapInput)(nil)).Elem(), FunctionSqlMap{})
	pulumi.RegisterOutputType(FunctionSqlOutput{})
	pulumi.RegisterOutputType(FunctionSqlArrayOutput{})
	pulumi.RegisterOutputType(FunctionSqlMapOutput{})
}
