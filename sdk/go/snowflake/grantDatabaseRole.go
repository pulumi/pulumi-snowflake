// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// format is database_role_name (string) | object_type (ROLE|DATABASE ROLE|SHARE) | grantee_name (string)
//
// ```sh
// $ pulumi import snowflake:index/grantDatabaseRole:GrantDatabaseRole \"test_db_role\"|ROLE|\"test_parent_role\""
// ```
type GrantDatabaseRole struct {
	pulumi.CustomResourceState

	// The fully qualified name of the database role which will be granted to share or parent role.
	DatabaseRoleName pulumi.StringOutput `pulumi:"databaseRoleName"`
	// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
	ParentDatabaseRoleName pulumi.StringPtrOutput `pulumi:"parentDatabaseRoleName"`
	// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
	ParentRoleName pulumi.StringPtrOutput `pulumi:"parentRoleName"`
	// The fully qualified name of the share on which privileges will be granted.
	ShareName pulumi.StringPtrOutput `pulumi:"shareName"`
}

// NewGrantDatabaseRole registers a new resource with the given unique name, arguments, and options.
func NewGrantDatabaseRole(ctx *pulumi.Context,
	name string, args *GrantDatabaseRoleArgs, opts ...pulumi.ResourceOption) (*GrantDatabaseRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseRoleName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseRoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrantDatabaseRole
	err := ctx.RegisterResource("snowflake:index/grantDatabaseRole:GrantDatabaseRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrantDatabaseRole gets an existing GrantDatabaseRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrantDatabaseRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantDatabaseRoleState, opts ...pulumi.ResourceOption) (*GrantDatabaseRole, error) {
	var resource GrantDatabaseRole
	err := ctx.ReadResource("snowflake:index/grantDatabaseRole:GrantDatabaseRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrantDatabaseRole resources.
type grantDatabaseRoleState struct {
	// The fully qualified name of the database role which will be granted to share or parent role.
	DatabaseRoleName *string `pulumi:"databaseRoleName"`
	// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
	ParentDatabaseRoleName *string `pulumi:"parentDatabaseRoleName"`
	// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
	ParentRoleName *string `pulumi:"parentRoleName"`
	// The fully qualified name of the share on which privileges will be granted.
	ShareName *string `pulumi:"shareName"`
}

type GrantDatabaseRoleState struct {
	// The fully qualified name of the database role which will be granted to share or parent role.
	DatabaseRoleName pulumi.StringPtrInput
	// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
	ParentDatabaseRoleName pulumi.StringPtrInput
	// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
	ParentRoleName pulumi.StringPtrInput
	// The fully qualified name of the share on which privileges will be granted.
	ShareName pulumi.StringPtrInput
}

func (GrantDatabaseRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantDatabaseRoleState)(nil)).Elem()
}

type grantDatabaseRoleArgs struct {
	// The fully qualified name of the database role which will be granted to share or parent role.
	DatabaseRoleName string `pulumi:"databaseRoleName"`
	// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
	ParentDatabaseRoleName *string `pulumi:"parentDatabaseRoleName"`
	// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
	ParentRoleName *string `pulumi:"parentRoleName"`
	// The fully qualified name of the share on which privileges will be granted.
	ShareName *string `pulumi:"shareName"`
}

// The set of arguments for constructing a GrantDatabaseRole resource.
type GrantDatabaseRoleArgs struct {
	// The fully qualified name of the database role which will be granted to share or parent role.
	DatabaseRoleName pulumi.StringInput
	// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
	ParentDatabaseRoleName pulumi.StringPtrInput
	// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
	ParentRoleName pulumi.StringPtrInput
	// The fully qualified name of the share on which privileges will be granted.
	ShareName pulumi.StringPtrInput
}

func (GrantDatabaseRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantDatabaseRoleArgs)(nil)).Elem()
}

type GrantDatabaseRoleInput interface {
	pulumi.Input

	ToGrantDatabaseRoleOutput() GrantDatabaseRoleOutput
	ToGrantDatabaseRoleOutputWithContext(ctx context.Context) GrantDatabaseRoleOutput
}

func (*GrantDatabaseRole) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantDatabaseRole)(nil)).Elem()
}

func (i *GrantDatabaseRole) ToGrantDatabaseRoleOutput() GrantDatabaseRoleOutput {
	return i.ToGrantDatabaseRoleOutputWithContext(context.Background())
}

func (i *GrantDatabaseRole) ToGrantDatabaseRoleOutputWithContext(ctx context.Context) GrantDatabaseRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantDatabaseRoleOutput)
}

// GrantDatabaseRoleArrayInput is an input type that accepts GrantDatabaseRoleArray and GrantDatabaseRoleArrayOutput values.
// You can construct a concrete instance of `GrantDatabaseRoleArrayInput` via:
//
//	GrantDatabaseRoleArray{ GrantDatabaseRoleArgs{...} }
type GrantDatabaseRoleArrayInput interface {
	pulumi.Input

	ToGrantDatabaseRoleArrayOutput() GrantDatabaseRoleArrayOutput
	ToGrantDatabaseRoleArrayOutputWithContext(context.Context) GrantDatabaseRoleArrayOutput
}

type GrantDatabaseRoleArray []GrantDatabaseRoleInput

func (GrantDatabaseRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantDatabaseRole)(nil)).Elem()
}

func (i GrantDatabaseRoleArray) ToGrantDatabaseRoleArrayOutput() GrantDatabaseRoleArrayOutput {
	return i.ToGrantDatabaseRoleArrayOutputWithContext(context.Background())
}

func (i GrantDatabaseRoleArray) ToGrantDatabaseRoleArrayOutputWithContext(ctx context.Context) GrantDatabaseRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantDatabaseRoleArrayOutput)
}

// GrantDatabaseRoleMapInput is an input type that accepts GrantDatabaseRoleMap and GrantDatabaseRoleMapOutput values.
// You can construct a concrete instance of `GrantDatabaseRoleMapInput` via:
//
//	GrantDatabaseRoleMap{ "key": GrantDatabaseRoleArgs{...} }
type GrantDatabaseRoleMapInput interface {
	pulumi.Input

	ToGrantDatabaseRoleMapOutput() GrantDatabaseRoleMapOutput
	ToGrantDatabaseRoleMapOutputWithContext(context.Context) GrantDatabaseRoleMapOutput
}

type GrantDatabaseRoleMap map[string]GrantDatabaseRoleInput

func (GrantDatabaseRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantDatabaseRole)(nil)).Elem()
}

func (i GrantDatabaseRoleMap) ToGrantDatabaseRoleMapOutput() GrantDatabaseRoleMapOutput {
	return i.ToGrantDatabaseRoleMapOutputWithContext(context.Background())
}

func (i GrantDatabaseRoleMap) ToGrantDatabaseRoleMapOutputWithContext(ctx context.Context) GrantDatabaseRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantDatabaseRoleMapOutput)
}

type GrantDatabaseRoleOutput struct{ *pulumi.OutputState }

func (GrantDatabaseRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantDatabaseRole)(nil)).Elem()
}

func (o GrantDatabaseRoleOutput) ToGrantDatabaseRoleOutput() GrantDatabaseRoleOutput {
	return o
}

func (o GrantDatabaseRoleOutput) ToGrantDatabaseRoleOutputWithContext(ctx context.Context) GrantDatabaseRoleOutput {
	return o
}

// The fully qualified name of the database role which will be granted to share or parent role.
func (o GrantDatabaseRoleOutput) DatabaseRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *GrantDatabaseRole) pulumi.StringOutput { return v.DatabaseRoleName }).(pulumi.StringOutput)
}

// The fully qualified name of the parent database role which will create a parent-child relationship between the roles.
func (o GrantDatabaseRoleOutput) ParentDatabaseRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantDatabaseRole) pulumi.StringPtrOutput { return v.ParentDatabaseRoleName }).(pulumi.StringPtrOutput)
}

// The fully qualified name of the parent account role which will create a parent-child relationship between the roles.
func (o GrantDatabaseRoleOutput) ParentRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantDatabaseRole) pulumi.StringPtrOutput { return v.ParentRoleName }).(pulumi.StringPtrOutput)
}

// The fully qualified name of the share on which privileges will be granted.
func (o GrantDatabaseRoleOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantDatabaseRole) pulumi.StringPtrOutput { return v.ShareName }).(pulumi.StringPtrOutput)
}

type GrantDatabaseRoleArrayOutput struct{ *pulumi.OutputState }

func (GrantDatabaseRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantDatabaseRole)(nil)).Elem()
}

func (o GrantDatabaseRoleArrayOutput) ToGrantDatabaseRoleArrayOutput() GrantDatabaseRoleArrayOutput {
	return o
}

func (o GrantDatabaseRoleArrayOutput) ToGrantDatabaseRoleArrayOutputWithContext(ctx context.Context) GrantDatabaseRoleArrayOutput {
	return o
}

func (o GrantDatabaseRoleArrayOutput) Index(i pulumi.IntInput) GrantDatabaseRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrantDatabaseRole {
		return vs[0].([]*GrantDatabaseRole)[vs[1].(int)]
	}).(GrantDatabaseRoleOutput)
}

type GrantDatabaseRoleMapOutput struct{ *pulumi.OutputState }

func (GrantDatabaseRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantDatabaseRole)(nil)).Elem()
}

func (o GrantDatabaseRoleMapOutput) ToGrantDatabaseRoleMapOutput() GrantDatabaseRoleMapOutput {
	return o
}

func (o GrantDatabaseRoleMapOutput) ToGrantDatabaseRoleMapOutputWithContext(ctx context.Context) GrantDatabaseRoleMapOutput {
	return o
}

func (o GrantDatabaseRoleMapOutput) MapIndex(k pulumi.StringInput) GrantDatabaseRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrantDatabaseRole {
		return vs[0].(map[string]*GrantDatabaseRole)[vs[1].(string)]
	}).(GrantDatabaseRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantDatabaseRoleInput)(nil)).Elem(), &GrantDatabaseRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantDatabaseRoleArrayInput)(nil)).Elem(), GrantDatabaseRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantDatabaseRoleMapInput)(nil)).Elem(), GrantDatabaseRoleMap{})
	pulumi.RegisterOutputType(GrantDatabaseRoleOutput{})
	pulumi.RegisterOutputType(GrantDatabaseRoleArrayOutput{})
	pulumi.RegisterOutputType(GrantDatabaseRoleMapOutput{})
}
