// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/streamOnExternalTable:StreamOnExternalTable example '"<database_name>"."<schema_name>"."<stream_name>"'
// ```
type StreamOnExternalTable struct {
	pulumi.CustomResourceState

	At     StreamOnExternalTableAtPtrOutput     `pulumi:"at"`
	Before StreamOnExternalTableBeforePtrOutput `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrOutput `pulumi:"comment"`
	CopyGrants pulumi.BoolPtrOutput   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnExternalTableDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ExternalTable pulumi.StringOutput `pulumi:"externalTable"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	InsertOnly pulumi.StringPtrOutput `pulumi:"insertOnly"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnExternalTableShowOutputArrayOutput `pulumi:"showOutputs"`
	Stale       pulumi.BoolOutput                          `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringOutput `pulumi:"streamType"`
}

// NewStreamOnExternalTable registers a new resource with the given unique name, arguments, and options.
func NewStreamOnExternalTable(ctx *pulumi.Context,
	name string, args *StreamOnExternalTableArgs, opts ...pulumi.ResourceOption) (*StreamOnExternalTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.ExternalTable == nil {
		return nil, errors.New("invalid value for required argument 'ExternalTable'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamOnExternalTable
	err := ctx.RegisterResource("snowflake:index/streamOnExternalTable:StreamOnExternalTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamOnExternalTable gets an existing StreamOnExternalTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamOnExternalTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamOnExternalTableState, opts ...pulumi.ResourceOption) (*StreamOnExternalTable, error) {
	var resource StreamOnExternalTable
	err := ctx.ReadResource("snowflake:index/streamOnExternalTable:StreamOnExternalTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamOnExternalTable resources.
type streamOnExternalTableState struct {
	At     *StreamOnExternalTableAt     `pulumi:"at"`
	Before *StreamOnExternalTableBefore `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs []StreamOnExternalTableDescribeOutput `pulumi:"describeOutputs"`
	// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ExternalTable *string `pulumi:"externalTable"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	InsertOnly *string `pulumi:"insertOnly"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs []StreamOnExternalTableShowOutput `pulumi:"showOutputs"`
	Stale       *bool                             `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType *string `pulumi:"streamType"`
}

type StreamOnExternalTableState struct {
	At     StreamOnExternalTableAtPtrInput
	Before StreamOnExternalTableBeforePtrInput
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnExternalTableDescribeOutputArrayInput
	// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ExternalTable pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	InsertOnly pulumi.StringPtrInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnExternalTableShowOutputArrayInput
	Stale       pulumi.BoolPtrInput
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringPtrInput
}

func (StreamOnExternalTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnExternalTableState)(nil)).Elem()
}

type streamOnExternalTableArgs struct {
	At     *StreamOnExternalTableAt     `pulumi:"at"`
	Before *StreamOnExternalTableBefore `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ExternalTable string `pulumi:"externalTable"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	InsertOnly *string `pulumi:"insertOnly"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a StreamOnExternalTable resource.
type StreamOnExternalTableArgs struct {
	At     StreamOnExternalTableAtPtrInput
	Before StreamOnExternalTableBeforePtrInput
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ExternalTable pulumi.StringInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	InsertOnly pulumi.StringPtrInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
}

func (StreamOnExternalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnExternalTableArgs)(nil)).Elem()
}

type StreamOnExternalTableInput interface {
	pulumi.Input

	ToStreamOnExternalTableOutput() StreamOnExternalTableOutput
	ToStreamOnExternalTableOutputWithContext(ctx context.Context) StreamOnExternalTableOutput
}

func (*StreamOnExternalTable) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnExternalTable)(nil)).Elem()
}

func (i *StreamOnExternalTable) ToStreamOnExternalTableOutput() StreamOnExternalTableOutput {
	return i.ToStreamOnExternalTableOutputWithContext(context.Background())
}

func (i *StreamOnExternalTable) ToStreamOnExternalTableOutputWithContext(ctx context.Context) StreamOnExternalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnExternalTableOutput)
}

// StreamOnExternalTableArrayInput is an input type that accepts StreamOnExternalTableArray and StreamOnExternalTableArrayOutput values.
// You can construct a concrete instance of `StreamOnExternalTableArrayInput` via:
//
//	StreamOnExternalTableArray{ StreamOnExternalTableArgs{...} }
type StreamOnExternalTableArrayInput interface {
	pulumi.Input

	ToStreamOnExternalTableArrayOutput() StreamOnExternalTableArrayOutput
	ToStreamOnExternalTableArrayOutputWithContext(context.Context) StreamOnExternalTableArrayOutput
}

type StreamOnExternalTableArray []StreamOnExternalTableInput

func (StreamOnExternalTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnExternalTable)(nil)).Elem()
}

func (i StreamOnExternalTableArray) ToStreamOnExternalTableArrayOutput() StreamOnExternalTableArrayOutput {
	return i.ToStreamOnExternalTableArrayOutputWithContext(context.Background())
}

func (i StreamOnExternalTableArray) ToStreamOnExternalTableArrayOutputWithContext(ctx context.Context) StreamOnExternalTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnExternalTableArrayOutput)
}

// StreamOnExternalTableMapInput is an input type that accepts StreamOnExternalTableMap and StreamOnExternalTableMapOutput values.
// You can construct a concrete instance of `StreamOnExternalTableMapInput` via:
//
//	StreamOnExternalTableMap{ "key": StreamOnExternalTableArgs{...} }
type StreamOnExternalTableMapInput interface {
	pulumi.Input

	ToStreamOnExternalTableMapOutput() StreamOnExternalTableMapOutput
	ToStreamOnExternalTableMapOutputWithContext(context.Context) StreamOnExternalTableMapOutput
}

type StreamOnExternalTableMap map[string]StreamOnExternalTableInput

func (StreamOnExternalTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnExternalTable)(nil)).Elem()
}

func (i StreamOnExternalTableMap) ToStreamOnExternalTableMapOutput() StreamOnExternalTableMapOutput {
	return i.ToStreamOnExternalTableMapOutputWithContext(context.Background())
}

func (i StreamOnExternalTableMap) ToStreamOnExternalTableMapOutputWithContext(ctx context.Context) StreamOnExternalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnExternalTableMapOutput)
}

type StreamOnExternalTableOutput struct{ *pulumi.OutputState }

func (StreamOnExternalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnExternalTable)(nil)).Elem()
}

func (o StreamOnExternalTableOutput) ToStreamOnExternalTableOutput() StreamOnExternalTableOutput {
	return o
}

func (o StreamOnExternalTableOutput) ToStreamOnExternalTableOutputWithContext(ctx context.Context) StreamOnExternalTableOutput {
	return o
}

func (o StreamOnExternalTableOutput) At() StreamOnExternalTableAtPtrOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) StreamOnExternalTableAtPtrOutput { return v.At }).(StreamOnExternalTableAtPtrOutput)
}

func (o StreamOnExternalTableOutput) Before() StreamOnExternalTableBeforePtrOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) StreamOnExternalTableBeforePtrOutput { return v.Before }).(StreamOnExternalTableBeforePtrOutput)
}

// Specifies a comment for the stream.
func (o StreamOnExternalTableOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o StreamOnExternalTableOutput) CopyGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.BoolPtrOutput { return v.CopyGrants }).(pulumi.BoolPtrOutput)
}

// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnExternalTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE STREAM` for the given stream.
func (o StreamOnExternalTableOutput) DescribeOutputs() StreamOnExternalTableDescribeOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) StreamOnExternalTableDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(StreamOnExternalTableDescribeOutputArrayOutput)
}

// Specifies an identifier for the external table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
func (o StreamOnExternalTableOutput) ExternalTable() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.ExternalTable }).(pulumi.StringOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o StreamOnExternalTableOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an insert-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o StreamOnExternalTableOutput) InsertOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringPtrOutput { return v.InsertOnly }).(pulumi.StringPtrOutput)
}

// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnExternalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnExternalTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW STREAMS` for the given stream.
func (o StreamOnExternalTableOutput) ShowOutputs() StreamOnExternalTableShowOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) StreamOnExternalTableShowOutputArrayOutput { return v.ShowOutputs }).(StreamOnExternalTableShowOutputArrayOutput)
}

func (o StreamOnExternalTableOutput) Stale() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.BoolOutput { return v.Stale }).(pulumi.BoolOutput)
}

// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
func (o StreamOnExternalTableOutput) StreamType() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnExternalTable) pulumi.StringOutput { return v.StreamType }).(pulumi.StringOutput)
}

type StreamOnExternalTableArrayOutput struct{ *pulumi.OutputState }

func (StreamOnExternalTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnExternalTable)(nil)).Elem()
}

func (o StreamOnExternalTableArrayOutput) ToStreamOnExternalTableArrayOutput() StreamOnExternalTableArrayOutput {
	return o
}

func (o StreamOnExternalTableArrayOutput) ToStreamOnExternalTableArrayOutputWithContext(ctx context.Context) StreamOnExternalTableArrayOutput {
	return o
}

func (o StreamOnExternalTableArrayOutput) Index(i pulumi.IntInput) StreamOnExternalTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamOnExternalTable {
		return vs[0].([]*StreamOnExternalTable)[vs[1].(int)]
	}).(StreamOnExternalTableOutput)
}

type StreamOnExternalTableMapOutput struct{ *pulumi.OutputState }

func (StreamOnExternalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnExternalTable)(nil)).Elem()
}

func (o StreamOnExternalTableMapOutput) ToStreamOnExternalTableMapOutput() StreamOnExternalTableMapOutput {
	return o
}

func (o StreamOnExternalTableMapOutput) ToStreamOnExternalTableMapOutputWithContext(ctx context.Context) StreamOnExternalTableMapOutput {
	return o
}

func (o StreamOnExternalTableMapOutput) MapIndex(k pulumi.StringInput) StreamOnExternalTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamOnExternalTable {
		return vs[0].(map[string]*StreamOnExternalTable)[vs[1].(string)]
	}).(StreamOnExternalTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnExternalTableInput)(nil)).Elem(), &StreamOnExternalTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnExternalTableArrayInput)(nil)).Elem(), StreamOnExternalTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnExternalTableMapInput)(nil)).Elem(), StreamOnExternalTableMap{})
	pulumi.RegisterOutputType(StreamOnExternalTableOutput{})
	pulumi.RegisterOutputType(StreamOnExternalTableArrayOutput{})
	pulumi.RegisterOutputType(StreamOnExternalTableMapOutput{})
}
