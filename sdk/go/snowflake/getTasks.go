// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **Sensitive values** This data source's `show_output.config` and `show_output.definition` fields are not marked as sensitive in the provider. Ensure that no personal data, sensitive data, export-controlled data, or other regulated data is entered as metadata when using the provider. For more information, see Sensitive values limitations and [Metadata fields in Snowflake](https://docs.snowflake.com/en/sql-reference/metadata).
//
// Data source used to get details of filtered tasks. Filtering is aligned with the current possibilities for [SHOW TASKS](https://docs.snowflake.com/en/sql-reference/sql/show-tasks) query. The results of SHOW and SHOW PARAMETERS IN are encapsulated in one output collection `tasks`.
func GetTasks(ctx *pulumi.Context, args *GetTasksArgs, opts ...pulumi.InvokeOption) (*GetTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTasksResult
	err := ctx.Invoke("snowflake:index/getTasks:getTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTasks.
type GetTasksArgs struct {
	// IN clause to filter the list of objects
	In *GetTasksIn `pulumi:"in"`
	// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
	Like *string `pulumi:"like"`
	// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
	Limit *GetTasksLimit `pulumi:"limit"`
	// Filters the command output to return only root tasks (tasks with no predecessors).
	RootOnly *bool `pulumi:"rootOnly"`
	// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
	StartsWith *string `pulumi:"startsWith"`
	// (Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
	WithParameters *bool `pulumi:"withParameters"`
}

// A collection of values returned by getTasks.
type GetTasksResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IN clause to filter the list of objects
	In *GetTasksIn `pulumi:"in"`
	// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
	Like *string `pulumi:"like"`
	// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
	Limit *GetTasksLimit `pulumi:"limit"`
	// Filters the command output to return only root tasks (tasks with no predecessors).
	RootOnly *bool `pulumi:"rootOnly"`
	// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
	StartsWith *string `pulumi:"startsWith"`
	// Holds the aggregated output of all task details queries.
	Tasks []GetTasksTask `pulumi:"tasks"`
	// (Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
	WithParameters *bool `pulumi:"withParameters"`
}

func GetTasksOutput(ctx *pulumi.Context, args GetTasksOutputArgs, opts ...pulumi.InvokeOption) GetTasksResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTasksResultOutput, error) {
			args := v.(GetTasksArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("snowflake:index/getTasks:getTasks", args, GetTasksResultOutput{}, options).(GetTasksResultOutput), nil
		}).(GetTasksResultOutput)
}

// A collection of arguments for invoking getTasks.
type GetTasksOutputArgs struct {
	// IN clause to filter the list of objects
	In GetTasksInPtrInput `pulumi:"in"`
	// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
	Like pulumi.StringPtrInput `pulumi:"like"`
	// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
	Limit GetTasksLimitPtrInput `pulumi:"limit"`
	// Filters the command output to return only root tasks (tasks with no predecessors).
	RootOnly pulumi.BoolPtrInput `pulumi:"rootOnly"`
	// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
	StartsWith pulumi.StringPtrInput `pulumi:"startsWith"`
	// (Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
	WithParameters pulumi.BoolPtrInput `pulumi:"withParameters"`
}

func (GetTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksArgs)(nil)).Elem()
}

// A collection of values returned by getTasks.
type GetTasksResultOutput struct{ *pulumi.OutputState }

func (GetTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksResult)(nil)).Elem()
}

func (o GetTasksResultOutput) ToGetTasksResultOutput() GetTasksResultOutput {
	return o
}

func (o GetTasksResultOutput) ToGetTasksResultOutputWithContext(ctx context.Context) GetTasksResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

// IN clause to filter the list of objects
func (o GetTasksResultOutput) In() GetTasksInPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *GetTasksIn { return v.In }).(GetTasksInPtrOutput)
}

// Filters the output with **case-insensitive** pattern, with support for SQL wildcard characters (`%` and `_`).
func (o GetTasksResultOutput) Like() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *string { return v.Like }).(pulumi.StringPtrOutput)
}

// Limits the number of rows returned. If the `limit.from` is set, then the limit wll start from the first element matched by the expression. The expression is only used to match with the first element, later on the elements are not matched by the prefix, but you can enforce a certain pattern with `startsWith` or `like`.
func (o GetTasksResultOutput) Limit() GetTasksLimitPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *GetTasksLimit { return v.Limit }).(GetTasksLimitPtrOutput)
}

// Filters the command output to return only root tasks (tasks with no predecessors).
func (o GetTasksResultOutput) RootOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *bool { return v.RootOnly }).(pulumi.BoolPtrOutput)
}

// Filters the output with **case-sensitive** characters indicating the beginning of the object name.
func (o GetTasksResultOutput) StartsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *string { return v.StartsWith }).(pulumi.StringPtrOutput)
}

// Holds the aggregated output of all task details queries.
func (o GetTasksResultOutput) Tasks() GetTasksTaskArrayOutput {
	return o.ApplyT(func(v GetTasksResult) []GetTasksTask { return v.Tasks }).(GetTasksTaskArrayOutput)
}

// (Default: `true`) Runs SHOW PARAMETERS FOR TASK for each task returned by SHOW TASK and saves the output to the parameters field as a map. By default this value is set to true.
func (o GetTasksResultOutput) WithParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTasksResult) *bool { return v.WithParameters }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTasksResultOutput{})
}
