// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable example '"<database_name>"."<schema_name>"."<stream_name>"'
// ```
type StreamOnDirectoryTable struct {
	pulumi.CustomResourceState

	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrOutput `pulumi:"comment"`
	CopyGrants pulumi.BoolPtrOutput   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnDirectoryTableDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnDirectoryTableShowOutputArrayOutput `pulumi:"showOutputs"`
	// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Stage pulumi.StringOutput `pulumi:"stage"`
	Stale pulumi.BoolOutput   `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringOutput `pulumi:"streamType"`
}

// NewStreamOnDirectoryTable registers a new resource with the given unique name, arguments, and options.
func NewStreamOnDirectoryTable(ctx *pulumi.Context,
	name string, args *StreamOnDirectoryTableArgs, opts ...pulumi.ResourceOption) (*StreamOnDirectoryTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Stage == nil {
		return nil, errors.New("invalid value for required argument 'Stage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamOnDirectoryTable
	err := ctx.RegisterResource("snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamOnDirectoryTable gets an existing StreamOnDirectoryTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamOnDirectoryTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamOnDirectoryTableState, opts ...pulumi.ResourceOption) (*StreamOnDirectoryTable, error) {
	var resource StreamOnDirectoryTable
	err := ctx.ReadResource("snowflake:index/streamOnDirectoryTable:StreamOnDirectoryTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamOnDirectoryTable resources.
type streamOnDirectoryTableState struct {
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs []StreamOnDirectoryTableDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs []StreamOnDirectoryTableShowOutput `pulumi:"showOutputs"`
	// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Stage *string `pulumi:"stage"`
	Stale *bool   `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType *string `pulumi:"streamType"`
}

type StreamOnDirectoryTableState struct {
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnDirectoryTableDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnDirectoryTableShowOutputArrayInput
	// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Stage pulumi.StringPtrInput
	Stale pulumi.BoolPtrInput
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringPtrInput
}

func (StreamOnDirectoryTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnDirectoryTableState)(nil)).Elem()
}

type streamOnDirectoryTableArgs struct {
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Stage string `pulumi:"stage"`
}

// The set of arguments for constructing a StreamOnDirectoryTable resource.
type StreamOnDirectoryTableArgs struct {
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Stage pulumi.StringInput
}

func (StreamOnDirectoryTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnDirectoryTableArgs)(nil)).Elem()
}

type StreamOnDirectoryTableInput interface {
	pulumi.Input

	ToStreamOnDirectoryTableOutput() StreamOnDirectoryTableOutput
	ToStreamOnDirectoryTableOutputWithContext(ctx context.Context) StreamOnDirectoryTableOutput
}

func (*StreamOnDirectoryTable) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnDirectoryTable)(nil)).Elem()
}

func (i *StreamOnDirectoryTable) ToStreamOnDirectoryTableOutput() StreamOnDirectoryTableOutput {
	return i.ToStreamOnDirectoryTableOutputWithContext(context.Background())
}

func (i *StreamOnDirectoryTable) ToStreamOnDirectoryTableOutputWithContext(ctx context.Context) StreamOnDirectoryTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnDirectoryTableOutput)
}

// StreamOnDirectoryTableArrayInput is an input type that accepts StreamOnDirectoryTableArray and StreamOnDirectoryTableArrayOutput values.
// You can construct a concrete instance of `StreamOnDirectoryTableArrayInput` via:
//
//	StreamOnDirectoryTableArray{ StreamOnDirectoryTableArgs{...} }
type StreamOnDirectoryTableArrayInput interface {
	pulumi.Input

	ToStreamOnDirectoryTableArrayOutput() StreamOnDirectoryTableArrayOutput
	ToStreamOnDirectoryTableArrayOutputWithContext(context.Context) StreamOnDirectoryTableArrayOutput
}

type StreamOnDirectoryTableArray []StreamOnDirectoryTableInput

func (StreamOnDirectoryTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnDirectoryTable)(nil)).Elem()
}

func (i StreamOnDirectoryTableArray) ToStreamOnDirectoryTableArrayOutput() StreamOnDirectoryTableArrayOutput {
	return i.ToStreamOnDirectoryTableArrayOutputWithContext(context.Background())
}

func (i StreamOnDirectoryTableArray) ToStreamOnDirectoryTableArrayOutputWithContext(ctx context.Context) StreamOnDirectoryTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnDirectoryTableArrayOutput)
}

// StreamOnDirectoryTableMapInput is an input type that accepts StreamOnDirectoryTableMap and StreamOnDirectoryTableMapOutput values.
// You can construct a concrete instance of `StreamOnDirectoryTableMapInput` via:
//
//	StreamOnDirectoryTableMap{ "key": StreamOnDirectoryTableArgs{...} }
type StreamOnDirectoryTableMapInput interface {
	pulumi.Input

	ToStreamOnDirectoryTableMapOutput() StreamOnDirectoryTableMapOutput
	ToStreamOnDirectoryTableMapOutputWithContext(context.Context) StreamOnDirectoryTableMapOutput
}

type StreamOnDirectoryTableMap map[string]StreamOnDirectoryTableInput

func (StreamOnDirectoryTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnDirectoryTable)(nil)).Elem()
}

func (i StreamOnDirectoryTableMap) ToStreamOnDirectoryTableMapOutput() StreamOnDirectoryTableMapOutput {
	return i.ToStreamOnDirectoryTableMapOutputWithContext(context.Background())
}

func (i StreamOnDirectoryTableMap) ToStreamOnDirectoryTableMapOutputWithContext(ctx context.Context) StreamOnDirectoryTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnDirectoryTableMapOutput)
}

type StreamOnDirectoryTableOutput struct{ *pulumi.OutputState }

func (StreamOnDirectoryTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnDirectoryTable)(nil)).Elem()
}

func (o StreamOnDirectoryTableOutput) ToStreamOnDirectoryTableOutput() StreamOnDirectoryTableOutput {
	return o
}

func (o StreamOnDirectoryTableOutput) ToStreamOnDirectoryTableOutputWithContext(ctx context.Context) StreamOnDirectoryTableOutput {
	return o
}

// Specifies a comment for the stream.
func (o StreamOnDirectoryTableOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o StreamOnDirectoryTableOutput) CopyGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.BoolPtrOutput { return v.CopyGrants }).(pulumi.BoolPtrOutput)
}

// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnDirectoryTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE STREAM` for the given stream.
func (o StreamOnDirectoryTableOutput) DescribeOutputs() StreamOnDirectoryTableDescribeOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) StreamOnDirectoryTableDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(StreamOnDirectoryTableDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o StreamOnDirectoryTableOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnDirectoryTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnDirectoryTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW STREAMS` for the given stream.
func (o StreamOnDirectoryTableOutput) ShowOutputs() StreamOnDirectoryTableShowOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) StreamOnDirectoryTableShowOutputArrayOutput { return v.ShowOutputs }).(StreamOnDirectoryTableShowOutputArrayOutput)
}

// Specifies an identifier for the stage the stream will monitor. Due to Snowflake limitations, the provider can not read the stage's database and schema. For stages, Snowflake returns only partially qualified name instead of fully qualified name. Please use stages located in the same schema as the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
func (o StreamOnDirectoryTableOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.Stage }).(pulumi.StringOutput)
}

func (o StreamOnDirectoryTableOutput) Stale() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.BoolOutput { return v.Stale }).(pulumi.BoolOutput)
}

// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
func (o StreamOnDirectoryTableOutput) StreamType() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnDirectoryTable) pulumi.StringOutput { return v.StreamType }).(pulumi.StringOutput)
}

type StreamOnDirectoryTableArrayOutput struct{ *pulumi.OutputState }

func (StreamOnDirectoryTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnDirectoryTable)(nil)).Elem()
}

func (o StreamOnDirectoryTableArrayOutput) ToStreamOnDirectoryTableArrayOutput() StreamOnDirectoryTableArrayOutput {
	return o
}

func (o StreamOnDirectoryTableArrayOutput) ToStreamOnDirectoryTableArrayOutputWithContext(ctx context.Context) StreamOnDirectoryTableArrayOutput {
	return o
}

func (o StreamOnDirectoryTableArrayOutput) Index(i pulumi.IntInput) StreamOnDirectoryTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamOnDirectoryTable {
		return vs[0].([]*StreamOnDirectoryTable)[vs[1].(int)]
	}).(StreamOnDirectoryTableOutput)
}

type StreamOnDirectoryTableMapOutput struct{ *pulumi.OutputState }

func (StreamOnDirectoryTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnDirectoryTable)(nil)).Elem()
}

func (o StreamOnDirectoryTableMapOutput) ToStreamOnDirectoryTableMapOutput() StreamOnDirectoryTableMapOutput {
	return o
}

func (o StreamOnDirectoryTableMapOutput) ToStreamOnDirectoryTableMapOutputWithContext(ctx context.Context) StreamOnDirectoryTableMapOutput {
	return o
}

func (o StreamOnDirectoryTableMapOutput) MapIndex(k pulumi.StringInput) StreamOnDirectoryTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamOnDirectoryTable {
		return vs[0].(map[string]*StreamOnDirectoryTable)[vs[1].(string)]
	}).(StreamOnDirectoryTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnDirectoryTableInput)(nil)).Elem(), &StreamOnDirectoryTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnDirectoryTableArrayInput)(nil)).Elem(), StreamOnDirectoryTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnDirectoryTableMapInput)(nil)).Elem(), StreamOnDirectoryTableMap{})
	pulumi.RegisterOutputType(StreamOnDirectoryTableOutput{})
	pulumi.RegisterOutputType(StreamOnDirectoryTableArrayOutput{})
	pulumi.RegisterOutputType(StreamOnDirectoryTableMapOutput{})
}
