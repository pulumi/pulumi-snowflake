// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProcedureJava struct {
	pulumi.CustomResourceState

	// List of the arguments for the procedure. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedureJavaArgumentArrayOutput `pulumi:"arguments"`
	// Specifies a comment for the procedure.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
	// more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
	// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
	// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
	// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
	// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
	// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
	// (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrOutput `pulumi:"executeAs"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this procedure’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayOutput `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
	// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
	// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
	// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
	// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
	// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedureJavaImportArrayOutput `pulumi:"imports"`
	// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
	// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
	// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
	// there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrOutput `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringOutput `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
	// because stored procedures are [identified and resolved by the combination of the name and argument
	// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
	// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrOutput `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
	// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
	// attribute. For more information about Snowpark, see [Snowpark
	// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters ProcedureJavaParameterArrayOutput `pulumi:"parameters"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
	// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
	// more information, see [Java (using
	// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
	// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrOutput `pulumi:"procedureDefinition"`
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage pulumi.StringOutput `pulumi:"procedureLanguage"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
	// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
	// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
	// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
	// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
	// time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringOutput `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 11.
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets ProcedureJavaSecretArrayOutput `pulumi:"secrets"`
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs ProcedureJavaShowOutputArrayOutput `pulumi:"showOutputs"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about
	// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringOutput `pulumi:"snowparkPackage"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	TargetPath ProcedureJavaTargetPathPtrOutput `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
}

// NewProcedureJava registers a new resource with the given unique name, arguments, and options.
func NewProcedureJava(ctx *pulumi.Context,
	name string, args *ProcedureJavaArgs, opts ...pulumi.ResourceOption) (*ProcedureJava, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.ReturnType == nil {
		return nil, errors.New("invalid value for required argument 'ReturnType'")
	}
	if args.RuntimeVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeVersion'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.SnowparkPackage == nil {
		return nil, errors.New("invalid value for required argument 'SnowparkPackage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcedureJava
	err := ctx.RegisterResource("snowflake:index/procedureJava:ProcedureJava", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcedureJava gets an existing ProcedureJava resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcedureJava(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcedureJavaState, opts ...pulumi.ResourceOption) (*ProcedureJava, error) {
	var resource ProcedureJava
	err := ctx.ReadResource("snowflake:index/procedureJava:ProcedureJava", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcedureJava resources.
type procedureJavaState struct {
	// List of the arguments for the procedure. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments []ProcedureJavaArgument `pulumi:"arguments"`
	// Specifies a comment for the procedure.
	Comment *string `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
	// more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
	// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
	// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
	// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
	// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
	// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
	// (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs *string `pulumi:"executeAs"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this procedure’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	Handler *string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
	// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
	// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
	// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
	// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
	// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports []ProcedureJavaImport `pulumi:"imports"`
	// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
	// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
	// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
	// there which means to use the Snowflake default for this value.
	IsSecure *string `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
	// because stored procedures are [identified and resolved by the combination of the name and argument
	// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
	// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
	// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
	// attribute. For more information about Snowpark, see [Snowpark
	// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages []string `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters []ProcedureJavaParameter `pulumi:"parameters"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
	// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
	// more information, see [Java (using
	// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
	// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	ProcedureDefinition *string `pulumi:"procedureDefinition"`
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage *string `pulumi:"procedureLanguage"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
	// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
	// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
	// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
	// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
	// time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType *string `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 11.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets []ProcedureJavaSecret `pulumi:"secrets"`
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs []ProcedureJavaShowOutput `pulumi:"showOutputs"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about
	// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage *string `pulumi:"snowparkPackage"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	TargetPath *ProcedureJavaTargetPath `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

type ProcedureJavaState struct {
	// List of the arguments for the procedure. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedureJavaArgumentArrayInput
	// Specifies a comment for the procedure.
	Comment pulumi.StringPtrInput
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
	// more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
	// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
	// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
	// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
	// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
	// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
	// (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrInput
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this procedure’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	Handler pulumi.StringPtrInput
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
	// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
	// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
	// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
	// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
	// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedureJavaImportArrayInput
	// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
	// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
	// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
	// there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrInput
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
	// because stored procedures are [identified and resolved by the combination of the name and argument
	// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
	// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
	// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
	// attribute. For more information about Snowpark, see [Snowpark
	// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayInput
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters ProcedureJavaParameterArrayInput
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
	// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
	// more information, see [Java (using
	// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
	// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrInput
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage pulumi.StringPtrInput
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
	// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
	// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
	// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
	// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
	// time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringPtrInput
	// The language runtime version to use. Currently, the supported versions are: 11.
	RuntimeVersion pulumi.StringPtrInput
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets ProcedureJavaSecretArrayInput
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs ProcedureJavaShowOutputArrayInput
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about
	// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringPtrInput
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	TargetPath ProcedureJavaTargetPathPtrInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (ProcedureJavaState) ElementType() reflect.Type {
	return reflect.TypeOf((*procedureJavaState)(nil)).Elem()
}

type procedureJavaArgs struct {
	// List of the arguments for the procedure. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments []ProcedureJavaArgument `pulumi:"arguments"`
	// Specifies a comment for the procedure.
	Comment *string `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
	// more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
	// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
	// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
	// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
	// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
	// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
	// (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs *string `pulumi:"executeAs"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this procedure’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	Handler string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
	// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
	// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
	// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
	// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
	// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports []ProcedureJavaImport `pulumi:"imports"`
	// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
	// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
	// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
	// there which means to use the Snowflake default for this value.
	IsSecure *string `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
	// because stored procedures are [identified and resolved by the combination of the name and argument
	// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
	// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
	// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
	// attribute. For more information about Snowpark, see [Snowpark
	// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages []string `pulumi:"packages"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
	// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
	// more information, see [Java (using
	// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
	// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	ProcedureDefinition *string `pulumi:"procedureDefinition"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
	// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
	// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
	// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
	// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
	// time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType string `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 11.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets []ProcedureJavaSecret `pulumi:"secrets"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about
	// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage string `pulumi:"snowparkPackage"`
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	TargetPath *ProcedureJavaTargetPath `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

// The set of arguments for constructing a ProcedureJava resource.
type ProcedureJavaArgs struct {
	// List of the arguments for the procedure. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedureJavaArgumentArrayInput
	// Specifies a comment for the procedure.
	Comment pulumi.StringPtrInput
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
	// more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
	// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
	// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
	// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
	// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
	// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
	// (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrInput
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this procedure’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	Handler pulumi.StringInput
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
	// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
	// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
	// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
	// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
	// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedureJavaImportArrayInput
	// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
	// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
	// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
	// there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrInput
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
	// because stored procedures are [identified and resolved by the combination of the name and argument
	// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
	// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
	// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
	// attribute. For more information about Snowpark, see [Snowpark
	// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayInput
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
	// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
	// more information, see [Java (using
	// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
	// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrInput
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
	// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
	// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
	// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
	// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
	// time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringInput
	// The language runtime version to use. Currently, the supported versions are: 11.
	RuntimeVersion pulumi.StringInput
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets ProcedureJavaSecretArrayInput
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about
	// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringInput
	// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
	// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
	// object or class: `package com.my_company.my_package;`.
	TargetPath ProcedureJavaTargetPathPtrInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (ProcedureJavaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*procedureJavaArgs)(nil)).Elem()
}

type ProcedureJavaInput interface {
	pulumi.Input

	ToProcedureJavaOutput() ProcedureJavaOutput
	ToProcedureJavaOutputWithContext(ctx context.Context) ProcedureJavaOutput
}

func (*ProcedureJava) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedureJava)(nil)).Elem()
}

func (i *ProcedureJava) ToProcedureJavaOutput() ProcedureJavaOutput {
	return i.ToProcedureJavaOutputWithContext(context.Background())
}

func (i *ProcedureJava) ToProcedureJavaOutputWithContext(ctx context.Context) ProcedureJavaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureJavaOutput)
}

// ProcedureJavaArrayInput is an input type that accepts ProcedureJavaArray and ProcedureJavaArrayOutput values.
// You can construct a concrete instance of `ProcedureJavaArrayInput` via:
//
//	ProcedureJavaArray{ ProcedureJavaArgs{...} }
type ProcedureJavaArrayInput interface {
	pulumi.Input

	ToProcedureJavaArrayOutput() ProcedureJavaArrayOutput
	ToProcedureJavaArrayOutputWithContext(context.Context) ProcedureJavaArrayOutput
}

type ProcedureJavaArray []ProcedureJavaInput

func (ProcedureJavaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedureJava)(nil)).Elem()
}

func (i ProcedureJavaArray) ToProcedureJavaArrayOutput() ProcedureJavaArrayOutput {
	return i.ToProcedureJavaArrayOutputWithContext(context.Background())
}

func (i ProcedureJavaArray) ToProcedureJavaArrayOutputWithContext(ctx context.Context) ProcedureJavaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureJavaArrayOutput)
}

// ProcedureJavaMapInput is an input type that accepts ProcedureJavaMap and ProcedureJavaMapOutput values.
// You can construct a concrete instance of `ProcedureJavaMapInput` via:
//
//	ProcedureJavaMap{ "key": ProcedureJavaArgs{...} }
type ProcedureJavaMapInput interface {
	pulumi.Input

	ToProcedureJavaMapOutput() ProcedureJavaMapOutput
	ToProcedureJavaMapOutputWithContext(context.Context) ProcedureJavaMapOutput
}

type ProcedureJavaMap map[string]ProcedureJavaInput

func (ProcedureJavaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedureJava)(nil)).Elem()
}

func (i ProcedureJavaMap) ToProcedureJavaMapOutput() ProcedureJavaMapOutput {
	return i.ToProcedureJavaMapOutputWithContext(context.Background())
}

func (i ProcedureJavaMap) ToProcedureJavaMapOutputWithContext(ctx context.Context) ProcedureJavaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureJavaMapOutput)
}

type ProcedureJavaOutput struct{ *pulumi.OutputState }

func (ProcedureJavaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedureJava)(nil)).Elem()
}

func (o ProcedureJavaOutput) ToProcedureJavaOutput() ProcedureJavaOutput {
	return o
}

func (o ProcedureJavaOutput) ToProcedureJavaOutputWithContext(ctx context.Context) ProcedureJavaOutput {
	return o
}

// List of the arguments for the procedure. Consult the
// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
func (o ProcedureJavaOutput) Arguments() ProcedureJavaArgumentArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaArgumentArrayOutput { return v.Arguments }).(ProcedureJavaArgumentArrayOutput)
}

// Specifies a comment for the procedure.
func (o ProcedureJavaOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o ProcedureJavaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL). For
// more information, check [ENABLE_CONSOLE_OUTPUT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
func (o ProcedureJavaOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored
// procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the
// statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights
// procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights
// procedure. For more information, see [Understanding caller’s rights and owner’s rights stored
// procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are
// (case-insensitive): `CALLER` | `OWNER`.
func (o ProcedureJavaOutput) ExecuteAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringPtrOutput { return v.ExecuteAs }).(pulumi.StringPtrOutput)
}

// The names of [external access
// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
// this procedure’s handler code to access external networks. An external access integration specifies [network
// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
func (o ProcedureJavaOutput) ExternalAccessIntegrations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringArrayOutput { return v.ExternalAccessIntegrations }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name
// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ProcedureJavaOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
// object or class: `package com.my_company.my_package;`.
func (o ProcedureJavaOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that
// your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your
// code depends on classes defined outside the stored procedure or resource files. If you are writing a stored procedure
// with a staged handler, you must also include a path to the JAR file containing the stored procedure’s handler code.
// The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in
// the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
func (o ProcedureJavaOutput) Imports() ProcedureJavaImportArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaImportArrayOutput { return v.Imports }).(ProcedureJavaImportArrayOutput)
}

// Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive
// Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure).
// Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default"
// there which means to use the Snowflake default for this value.
func (o ProcedureJavaOutput) IsSecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringPtrOutput { return v.IsSecure }).(pulumi.StringPtrOutput)
}

// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
func (o ProcedureJavaOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
func (o ProcedureJavaOutput) MetricLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.MetricLevel }).(pulumi.StringOutput)
}

// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created
// because stored procedures are [identified and resolved by the combination of the name and argument
// types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading).
// Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ProcedureJavaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON
// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
func (o ProcedureJavaOutput) NullInputBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringPtrOutput { return v.NullInputBehavior }).(pulumi.StringPtrOutput)
}

// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution
// environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage`
// attribute. For more information about Snowpark, see [Snowpark
// API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
func (o ProcedureJavaOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
func (o ProcedureJavaOutput) Parameters() ProcedureJavaParameterArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaParameterArrayOutput { return v.Parameters }).(ProcedureJavaParameterArrayOutput)
}

// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are
// added by the provider automatically; do not include them. The `procedureDefinition` value must be Java source code. For
// more information, see [Java (using
// Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java). To mitigate permadiff
// on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
// change in case or run of whitespace is semantically significant.
func (o ProcedureJavaOutput) ProcedureDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringPtrOutput { return v.ProcedureDefinition }).(pulumi.StringPtrOutput)
}

// Specifies language for the procedure. Used to detect external changes.
func (o ProcedureJavaOutput) ProcedureLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.ProcedureLanguage }).(pulumi.StringOutput)
}

// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type
// that corresponds to the type of the language that you are using (see [SQL-Java Data Type
// Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-java-data-type-mappings)).
// For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the
// returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run
// time), you can omit the column names and types (i.e. `TABLE ()`).
func (o ProcedureJavaOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.ReturnType }).(pulumi.StringOutput)
}

// The language runtime version to use. Currently, the supported versions are: 11.
func (o ProcedureJavaOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o ProcedureJavaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
// specify here must be allowed by the [external access
// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
func (o ProcedureJavaOutput) Secrets() ProcedureJavaSecretArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaSecretArrayOutput { return v.Secrets }).(ProcedureJavaSecretArrayOutput)
}

// Outputs the result of `SHOW PROCEDURE` for the given procedure.
func (o ProcedureJavaOutput) ShowOutputs() ProcedureJavaShowOutputArrayOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaShowOutputArrayOutput { return v.ShowOutputs }).(ProcedureJavaShowOutputArrayOutput)
}

// The Snowpark package is required for stored procedures, so it must always be present. For more information about
// Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
func (o ProcedureJavaOutput) SnowparkPackage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.SnowparkPackage }).(pulumi.StringOutput)
}

// Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form
// `com.my_company.my_package.MyClass.myMethod` where `com.my_company.my_package` corresponds to the package containing the
// object or class: `package com.my_company.my_package;`.
func (o ProcedureJavaOutput) TargetPath() ProcedureJavaTargetPathPtrOutput {
	return o.ApplyT(func(v *ProcedureJava) ProcedureJavaTargetPathPtrOutput { return v.TargetPath }).(ProcedureJavaTargetPathPtrOutput)
}

// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
func (o ProcedureJavaOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureJava) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

type ProcedureJavaArrayOutput struct{ *pulumi.OutputState }

func (ProcedureJavaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedureJava)(nil)).Elem()
}

func (o ProcedureJavaArrayOutput) ToProcedureJavaArrayOutput() ProcedureJavaArrayOutput {
	return o
}

func (o ProcedureJavaArrayOutput) ToProcedureJavaArrayOutputWithContext(ctx context.Context) ProcedureJavaArrayOutput {
	return o
}

func (o ProcedureJavaArrayOutput) Index(i pulumi.IntInput) ProcedureJavaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcedureJava {
		return vs[0].([]*ProcedureJava)[vs[1].(int)]
	}).(ProcedureJavaOutput)
}

type ProcedureJavaMapOutput struct{ *pulumi.OutputState }

func (ProcedureJavaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedureJava)(nil)).Elem()
}

func (o ProcedureJavaMapOutput) ToProcedureJavaMapOutput() ProcedureJavaMapOutput {
	return o
}

func (o ProcedureJavaMapOutput) ToProcedureJavaMapOutputWithContext(ctx context.Context) ProcedureJavaMapOutput {
	return o
}

func (o ProcedureJavaMapOutput) MapIndex(k pulumi.StringInput) ProcedureJavaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcedureJava {
		return vs[0].(map[string]*ProcedureJava)[vs[1].(string)]
	}).(ProcedureJavaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureJavaInput)(nil)).Elem(), &ProcedureJava{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureJavaArrayInput)(nil)).Elem(), ProcedureJavaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureJavaMapInput)(nil)).Elem(), ProcedureJavaMap{})
	pulumi.RegisterOutputType(ProcedureJavaOutput{})
	pulumi.RegisterOutputType(ProcedureJavaArrayOutput{})
	pulumi.RegisterOutputType(ProcedureJavaMapOutput{})
}
