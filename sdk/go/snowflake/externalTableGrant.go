// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Deprecation** This resource is deprecated and will be removed in a future major version release. Please use GrantPrivilegesToAccountRole instead. <deprecation>
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := snowflake.NewExternalTableGrant(ctx, "grant", &snowflake.ExternalTableGrantArgs{
//				DatabaseName:      pulumi.String("database"),
//				SchemaName:        pulumi.String("schema"),
//				ExternalTableName: pulumi.String("external_table"),
//				Privilege:         pulumi.String("SELECT"),
//				Roles: pulumi.StringArray{
//					pulumi.String("role1"),
//					pulumi.String("role2"),
//				},
//				Shares: pulumi.StringArray{
//					pulumi.String("share1"),
//					pulumi.String("share2"),
//				},
//				OnFuture:        pulumi.Bool(false),
//				WithGrantOption: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// format is database|schema|external_table|privilege|with_grant_option|on_future|roles|shares
//
// ```sh
// $ pulumi import snowflake:index/externalTableGrant:ExternalTableGrant example "MY_DATABASE|MY_SCHEMA|MY_TABLE_NAME|SELECT|false|false|role1,role2|share1,share2"
// ```
type ExternalTableGrant struct {
	pulumi.CustomResourceState

	// The name of the database containing the current or future external tables on which to grant privileges.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrOutput `pulumi:"enableMultipleGrants"`
	// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
	ExternalTableName pulumi.StringPtrOutput `pulumi:"externalTableName"`
	// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
	OnAll pulumi.BoolPtrOutput `pulumi:"onAll"`
	// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
	OnFuture pulumi.BoolPtrOutput `pulumi:"onFuture"`
	// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrOutput `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrOutput `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The name of the schema containing the current or future external tables on which to grant privileges.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is false).
	Shares pulumi.StringArrayOutput `pulumi:"shares"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrOutput `pulumi:"withGrantOption"`
}

// NewExternalTableGrant registers a new resource with the given unique name, arguments, and options.
func NewExternalTableGrant(ctx *pulumi.Context,
	name string, args *ExternalTableGrantArgs, opts ...pulumi.ResourceOption) (*ExternalTableGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalTableGrant
	err := ctx.RegisterResource("snowflake:index/externalTableGrant:ExternalTableGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalTableGrant gets an existing ExternalTableGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalTableGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalTableGrantState, opts ...pulumi.ResourceOption) (*ExternalTableGrant, error) {
	var resource ExternalTableGrant
	err := ctx.ReadResource("snowflake:index/externalTableGrant:ExternalTableGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalTableGrant resources.
type externalTableGrantState struct {
	// The name of the database containing the current or future external tables on which to grant privileges.
	DatabaseName *string `pulumi:"databaseName"`
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants *bool `pulumi:"enableMultipleGrants"`
	// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
	ExternalTableName *string `pulumi:"externalTableName"`
	// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
	OnAll *bool `pulumi:"onAll"`
	// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
	OnFuture *bool `pulumi:"onFuture"`
	// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege *string `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName *string `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// The name of the schema containing the current or future external tables on which to grant privileges.
	SchemaName *string `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is false).
	Shares []string `pulumi:"shares"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

type ExternalTableGrantState struct {
	// The name of the database containing the current or future external tables on which to grant privileges.
	DatabaseName pulumi.StringPtrInput
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrInput
	// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
	ExternalTableName pulumi.StringPtrInput
	// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
	OnAll pulumi.BoolPtrInput
	// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
	OnFuture pulumi.BoolPtrInput
	// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrInput
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// The name of the schema containing the current or future external tables on which to grant privileges.
	SchemaName pulumi.StringPtrInput
	// Grants privilege to these shares (only valid if onFuture is false).
	Shares pulumi.StringArrayInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (ExternalTableGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalTableGrantState)(nil)).Elem()
}

type externalTableGrantArgs struct {
	// The name of the database containing the current or future external tables on which to grant privileges.
	DatabaseName string `pulumi:"databaseName"`
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants *bool `pulumi:"enableMultipleGrants"`
	// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
	ExternalTableName *string `pulumi:"externalTableName"`
	// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
	OnAll *bool `pulumi:"onAll"`
	// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
	OnFuture *bool `pulumi:"onFuture"`
	// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege *string `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName *string `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// The name of the schema containing the current or future external tables on which to grant privileges.
	SchemaName *string `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is false).
	Shares []string `pulumi:"shares"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

// The set of arguments for constructing a ExternalTableGrant resource.
type ExternalTableGrantArgs struct {
	// The name of the database containing the current or future external tables on which to grant privileges.
	DatabaseName pulumi.StringInput
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrInput
	// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
	ExternalTableName pulumi.StringPtrInput
	// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
	OnAll pulumi.BoolPtrInput
	// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
	OnFuture pulumi.BoolPtrInput
	// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrInput
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// The name of the schema containing the current or future external tables on which to grant privileges.
	SchemaName pulumi.StringPtrInput
	// Grants privilege to these shares (only valid if onFuture is false).
	Shares pulumi.StringArrayInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (ExternalTableGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalTableGrantArgs)(nil)).Elem()
}

type ExternalTableGrantInput interface {
	pulumi.Input

	ToExternalTableGrantOutput() ExternalTableGrantOutput
	ToExternalTableGrantOutputWithContext(ctx context.Context) ExternalTableGrantOutput
}

func (*ExternalTableGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalTableGrant)(nil)).Elem()
}

func (i *ExternalTableGrant) ToExternalTableGrantOutput() ExternalTableGrantOutput {
	return i.ToExternalTableGrantOutputWithContext(context.Background())
}

func (i *ExternalTableGrant) ToExternalTableGrantOutputWithContext(ctx context.Context) ExternalTableGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableGrantOutput)
}

// ExternalTableGrantArrayInput is an input type that accepts ExternalTableGrantArray and ExternalTableGrantArrayOutput values.
// You can construct a concrete instance of `ExternalTableGrantArrayInput` via:
//
//	ExternalTableGrantArray{ ExternalTableGrantArgs{...} }
type ExternalTableGrantArrayInput interface {
	pulumi.Input

	ToExternalTableGrantArrayOutput() ExternalTableGrantArrayOutput
	ToExternalTableGrantArrayOutputWithContext(context.Context) ExternalTableGrantArrayOutput
}

type ExternalTableGrantArray []ExternalTableGrantInput

func (ExternalTableGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalTableGrant)(nil)).Elem()
}

func (i ExternalTableGrantArray) ToExternalTableGrantArrayOutput() ExternalTableGrantArrayOutput {
	return i.ToExternalTableGrantArrayOutputWithContext(context.Background())
}

func (i ExternalTableGrantArray) ToExternalTableGrantArrayOutputWithContext(ctx context.Context) ExternalTableGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableGrantArrayOutput)
}

// ExternalTableGrantMapInput is an input type that accepts ExternalTableGrantMap and ExternalTableGrantMapOutput values.
// You can construct a concrete instance of `ExternalTableGrantMapInput` via:
//
//	ExternalTableGrantMap{ "key": ExternalTableGrantArgs{...} }
type ExternalTableGrantMapInput interface {
	pulumi.Input

	ToExternalTableGrantMapOutput() ExternalTableGrantMapOutput
	ToExternalTableGrantMapOutputWithContext(context.Context) ExternalTableGrantMapOutput
}

type ExternalTableGrantMap map[string]ExternalTableGrantInput

func (ExternalTableGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalTableGrant)(nil)).Elem()
}

func (i ExternalTableGrantMap) ToExternalTableGrantMapOutput() ExternalTableGrantMapOutput {
	return i.ToExternalTableGrantMapOutputWithContext(context.Background())
}

func (i ExternalTableGrantMap) ToExternalTableGrantMapOutputWithContext(ctx context.Context) ExternalTableGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableGrantMapOutput)
}

type ExternalTableGrantOutput struct{ *pulumi.OutputState }

func (ExternalTableGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalTableGrant)(nil)).Elem()
}

func (o ExternalTableGrantOutput) ToExternalTableGrantOutput() ExternalTableGrantOutput {
	return o
}

func (o ExternalTableGrantOutput) ToExternalTableGrantOutputWithContext(ctx context.Context) ExternalTableGrantOutput {
	return o
}

// The name of the database containing the current or future external tables on which to grant privileges.
func (o ExternalTableGrantOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
// grants applied to roles and objects outside Terraform.
func (o ExternalTableGrantOutput) EnableMultipleGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.BoolPtrOutput { return v.EnableMultipleGrants }).(pulumi.BoolPtrOutput)
}

// The name of the external table on which to grant privileges immediately (only valid if onFuture is false).
func (o ExternalTableGrantOutput) ExternalTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringPtrOutput { return v.ExternalTableName }).(pulumi.StringPtrOutput)
}

// When this is set to true and a schema*name is provided, apply this grant on all external tables in the given schema. When this is true and no schema*name is provided apply this grant on all external tables in the given database. The external*table*name and shares fields must be unset in order to use on*all. Cannot be used together with on*future.
func (o ExternalTableGrantOutput) OnAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.BoolPtrOutput { return v.OnAll }).(pulumi.BoolPtrOutput)
}

// When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on*future. Cannot be used together with on*all.
func (o ExternalTableGrantOutput) OnFuture() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.BoolPtrOutput { return v.OnFuture }).(pulumi.BoolPtrOutput)
}

// The privilege to grant on the current or future external table. To grant all privileges, use the value `ALL PRIVILEGES`
func (o ExternalTableGrantOutput) Privilege() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringPtrOutput { return v.Privilege }).(pulumi.StringPtrOutput)
}

// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
func (o ExternalTableGrantOutput) RevertOwnershipToRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringPtrOutput { return v.RevertOwnershipToRoleName }).(pulumi.StringPtrOutput)
}

// Grants privilege to these roles.
func (o ExternalTableGrantOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The name of the schema containing the current or future external tables on which to grant privileges.
func (o ExternalTableGrantOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringPtrOutput { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Grants privilege to these shares (only valid if onFuture is false).
func (o ExternalTableGrantOutput) Shares() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.StringArrayOutput { return v.Shares }).(pulumi.StringArrayOutput)
}

// When this is set to true, allows the recipient role to grant the privileges to other roles.
func (o ExternalTableGrantOutput) WithGrantOption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalTableGrant) pulumi.BoolPtrOutput { return v.WithGrantOption }).(pulumi.BoolPtrOutput)
}

type ExternalTableGrantArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalTableGrant)(nil)).Elem()
}

func (o ExternalTableGrantArrayOutput) ToExternalTableGrantArrayOutput() ExternalTableGrantArrayOutput {
	return o
}

func (o ExternalTableGrantArrayOutput) ToExternalTableGrantArrayOutputWithContext(ctx context.Context) ExternalTableGrantArrayOutput {
	return o
}

func (o ExternalTableGrantArrayOutput) Index(i pulumi.IntInput) ExternalTableGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalTableGrant {
		return vs[0].([]*ExternalTableGrant)[vs[1].(int)]
	}).(ExternalTableGrantOutput)
}

type ExternalTableGrantMapOutput struct{ *pulumi.OutputState }

func (ExternalTableGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalTableGrant)(nil)).Elem()
}

func (o ExternalTableGrantMapOutput) ToExternalTableGrantMapOutput() ExternalTableGrantMapOutput {
	return o
}

func (o ExternalTableGrantMapOutput) ToExternalTableGrantMapOutputWithContext(ctx context.Context) ExternalTableGrantMapOutput {
	return o
}

func (o ExternalTableGrantMapOutput) MapIndex(k pulumi.StringInput) ExternalTableGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalTableGrant {
		return vs[0].(map[string]*ExternalTableGrant)[vs[1].(string)]
	}).(ExternalTableGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableGrantInput)(nil)).Elem(), &ExternalTableGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableGrantArrayInput)(nil)).Elem(), ExternalTableGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableGrantMapInput)(nil)).Elem(), ExternalTableGrantMap{})
	pulumi.RegisterOutputType(ExternalTableGrantOutput{})
	pulumi.RegisterOutputType(ExternalTableGrantArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableGrantMapOutput{})
}
