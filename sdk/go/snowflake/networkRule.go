// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := snowflake.NewNetworkRule(ctx, "rule", &snowflake.NetworkRuleArgs{
//				Name:     pulumi.String("rule"),
//				Database: pulumi.String("EXAMPLE_DB"),
//				Schema:   pulumi.String("EXAMPLE_SCHEMA"),
//				Comment:  pulumi.String("A rule."),
//				Type:     pulumi.String("IPV4"),
//				Mode:     pulumi.String("INGRESS"),
//				ValueLists: pulumi.StringArray{
//					pulumi.String("192.168.0.100/24"),
//					pulumi.String("29.254.123.20"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/networkRule:NetworkRule example 'databaseName|schemaName|networkRuleName'
// ```
type NetworkRule struct {
	pulumi.CustomResourceState

	// Specifies a comment for the network rule.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the network rule.
	Database pulumi.StringOutput `pulumi:"database"`
	// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Qualified name of the network rule.
	QualifiedName pulumi.StringOutput `pulumi:"qualifiedName"`
	// The schema in which to create the network rule.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	ValueLists pulumi.StringArrayOutput `pulumi:"valueLists"`
}

// NewNetworkRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkRule(ctx *pulumi.Context,
	name string, args *NetworkRuleArgs, opts ...pulumi.ResourceOption) (*NetworkRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ValueLists == nil {
		return nil, errors.New("invalid value for required argument 'ValueLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkRule
	err := ctx.RegisterResource("snowflake:index/networkRule:NetworkRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkRule gets an existing NetworkRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkRuleState, opts ...pulumi.ResourceOption) (*NetworkRule, error) {
	var resource NetworkRule
	err := ctx.ReadResource("snowflake:index/networkRule:NetworkRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkRule resources.
type networkRuleState struct {
	// Specifies a comment for the network rule.
	Comment *string `pulumi:"comment"`
	// The database in which to create the network rule.
	Database *string `pulumi:"database"`
	// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Mode *string `pulumi:"mode"`
	// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
	Name *string `pulumi:"name"`
	// Qualified name of the network rule.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The schema in which to create the network rule.
	Schema *string `pulumi:"schema"`
	// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Type *string `pulumi:"type"`
	// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	ValueLists []string `pulumi:"valueLists"`
}

type NetworkRuleState struct {
	// Specifies a comment for the network rule.
	Comment pulumi.StringPtrInput
	// The database in which to create the network rule.
	Database pulumi.StringPtrInput
	// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Mode pulumi.StringPtrInput
	// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
	Name pulumi.StringPtrInput
	// Qualified name of the network rule.
	QualifiedName pulumi.StringPtrInput
	// The schema in which to create the network rule.
	Schema pulumi.StringPtrInput
	// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Type pulumi.StringPtrInput
	// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	ValueLists pulumi.StringArrayInput
}

func (NetworkRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRuleState)(nil)).Elem()
}

type networkRuleArgs struct {
	// Specifies a comment for the network rule.
	Comment *string `pulumi:"comment"`
	// The database in which to create the network rule.
	Database string `pulumi:"database"`
	// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Mode string `pulumi:"mode"`
	// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
	Name *string `pulumi:"name"`
	// The schema in which to create the network rule.
	Schema string `pulumi:"schema"`
	// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Type string `pulumi:"type"`
	// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	ValueLists []string `pulumi:"valueLists"`
}

// The set of arguments for constructing a NetworkRule resource.
type NetworkRuleArgs struct {
	// Specifies a comment for the network rule.
	Comment pulumi.StringPtrInput
	// The database in which to create the network rule.
	Database pulumi.StringInput
	// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Mode pulumi.StringInput
	// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
	Name pulumi.StringPtrInput
	// The schema in which to create the network rule.
	Schema pulumi.StringInput
	// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	Type pulumi.StringInput
	// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
	ValueLists pulumi.StringArrayInput
}

func (NetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRuleArgs)(nil)).Elem()
}

type NetworkRuleInput interface {
	pulumi.Input

	ToNetworkRuleOutput() NetworkRuleOutput
	ToNetworkRuleOutputWithContext(ctx context.Context) NetworkRuleOutput
}

func (*NetworkRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRule)(nil)).Elem()
}

func (i *NetworkRule) ToNetworkRuleOutput() NetworkRuleOutput {
	return i.ToNetworkRuleOutputWithContext(context.Background())
}

func (i *NetworkRule) ToNetworkRuleOutputWithContext(ctx context.Context) NetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleOutput)
}

// NetworkRuleArrayInput is an input type that accepts NetworkRuleArray and NetworkRuleArrayOutput values.
// You can construct a concrete instance of `NetworkRuleArrayInput` via:
//
//	NetworkRuleArray{ NetworkRuleArgs{...} }
type NetworkRuleArrayInput interface {
	pulumi.Input

	ToNetworkRuleArrayOutput() NetworkRuleArrayOutput
	ToNetworkRuleArrayOutputWithContext(context.Context) NetworkRuleArrayOutput
}

type NetworkRuleArray []NetworkRuleInput

func (NetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRule)(nil)).Elem()
}

func (i NetworkRuleArray) ToNetworkRuleArrayOutput() NetworkRuleArrayOutput {
	return i.ToNetworkRuleArrayOutputWithContext(context.Background())
}

func (i NetworkRuleArray) ToNetworkRuleArrayOutputWithContext(ctx context.Context) NetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleArrayOutput)
}

// NetworkRuleMapInput is an input type that accepts NetworkRuleMap and NetworkRuleMapOutput values.
// You can construct a concrete instance of `NetworkRuleMapInput` via:
//
//	NetworkRuleMap{ "key": NetworkRuleArgs{...} }
type NetworkRuleMapInput interface {
	pulumi.Input

	ToNetworkRuleMapOutput() NetworkRuleMapOutput
	ToNetworkRuleMapOutputWithContext(context.Context) NetworkRuleMapOutput
}

type NetworkRuleMap map[string]NetworkRuleInput

func (NetworkRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRule)(nil)).Elem()
}

func (i NetworkRuleMap) ToNetworkRuleMapOutput() NetworkRuleMapOutput {
	return i.ToNetworkRuleMapOutputWithContext(context.Background())
}

func (i NetworkRuleMap) ToNetworkRuleMapOutputWithContext(ctx context.Context) NetworkRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRuleMapOutput)
}

type NetworkRuleOutput struct{ *pulumi.OutputState }

func (NetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRule)(nil)).Elem()
}

func (o NetworkRuleOutput) ToNetworkRuleOutput() NetworkRuleOutput {
	return o
}

func (o NetworkRuleOutput) ToNetworkRuleOutputWithContext(ctx context.Context) NetworkRuleOutput {
	return o
}

// Specifies a comment for the network rule.
func (o NetworkRuleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the network rule.
func (o NetworkRuleOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Specifies what is restricted by the network rule. Valid values are INGRESS, INTERNAL_STAGE and EGRESS; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
func (o NetworkRuleOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the identifier for the network rule; must be unique for the database and schema in which the network rule is created.
func (o NetworkRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Qualified name of the network rule.
func (o NetworkRuleOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.QualifiedName }).(pulumi.StringOutput)
}

// The schema in which to create the network rule.
func (o NetworkRuleOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies the type of network identifiers being allowed or blocked. A network rule can have only one type. Allowed values are IPV4, AWSVPCEID, AZURELINKID and HOST_PORT; allowed values are determined by the mode of the network rule; see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
func (o NetworkRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the network identifiers that will be allowed or blocked. Valid values in the list are determined by the type of network rule, see https://docs.snowflake.com/en/sql-reference/sql/create-network-rule#required-parameters for details.
func (o NetworkRuleOutput) ValueLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkRule) pulumi.StringArrayOutput { return v.ValueLists }).(pulumi.StringArrayOutput)
}

type NetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRule)(nil)).Elem()
}

func (o NetworkRuleArrayOutput) ToNetworkRuleArrayOutput() NetworkRuleArrayOutput {
	return o
}

func (o NetworkRuleArrayOutput) ToNetworkRuleArrayOutputWithContext(ctx context.Context) NetworkRuleArrayOutput {
	return o
}

func (o NetworkRuleArrayOutput) Index(i pulumi.IntInput) NetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkRule {
		return vs[0].([]*NetworkRule)[vs[1].(int)]
	}).(NetworkRuleOutput)
}

type NetworkRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRule)(nil)).Elem()
}

func (o NetworkRuleMapOutput) ToNetworkRuleMapOutput() NetworkRuleMapOutput {
	return o
}

func (o NetworkRuleMapOutput) ToNetworkRuleMapOutputWithContext(ctx context.Context) NetworkRuleMapOutput {
	return o
}

func (o NetworkRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkRule {
		return vs[0].(map[string]*NetworkRule)[vs[1].(string)]
	}).(NetworkRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRuleInput)(nil)).Elem(), &NetworkRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRuleArrayInput)(nil)).Elem(), NetworkRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRuleMapInput)(nil)).Elem(), NetworkRuleMap{})
	pulumi.RegisterOutputType(NetworkRuleOutput{})
	pulumi.RegisterOutputType(NetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkRuleMapOutput{})
}
