// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// DatabaseTagInput is an input type that accepts DatabaseTagArgs and DatabaseTagOutput values.
// You can construct a concrete instance of `DatabaseTagInput` via:
//
//          DatabaseTagArgs{...}
type DatabaseTagInput interface {
	pulumi.Input

	ToDatabaseTagOutput() DatabaseTagOutput
	ToDatabaseTagOutputWithContext(context.Context) DatabaseTagOutput
}

type DatabaseTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DatabaseTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTag)(nil)).Elem()
}

func (i DatabaseTagArgs) ToDatabaseTagOutput() DatabaseTagOutput {
	return i.ToDatabaseTagOutputWithContext(context.Background())
}

func (i DatabaseTagArgs) ToDatabaseTagOutputWithContext(ctx context.Context) DatabaseTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTagOutput)
}

// DatabaseTagArrayInput is an input type that accepts DatabaseTagArray and DatabaseTagArrayOutput values.
// You can construct a concrete instance of `DatabaseTagArrayInput` via:
//
//          DatabaseTagArray{ DatabaseTagArgs{...} }
type DatabaseTagArrayInput interface {
	pulumi.Input

	ToDatabaseTagArrayOutput() DatabaseTagArrayOutput
	ToDatabaseTagArrayOutputWithContext(context.Context) DatabaseTagArrayOutput
}

type DatabaseTagArray []DatabaseTagInput

func (DatabaseTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTag)(nil)).Elem()
}

func (i DatabaseTagArray) ToDatabaseTagArrayOutput() DatabaseTagArrayOutput {
	return i.ToDatabaseTagArrayOutputWithContext(context.Background())
}

func (i DatabaseTagArray) ToDatabaseTagArrayOutputWithContext(ctx context.Context) DatabaseTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTagArrayOutput)
}

type DatabaseTagOutput struct{ *pulumi.OutputState }

func (DatabaseTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTag)(nil)).Elem()
}

func (o DatabaseTagOutput) ToDatabaseTagOutput() DatabaseTagOutput {
	return o
}

func (o DatabaseTagOutput) ToDatabaseTagOutputWithContext(ctx context.Context) DatabaseTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o DatabaseTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o DatabaseTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o DatabaseTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o DatabaseTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTag) string { return v.Value }).(pulumi.StringOutput)
}

type DatabaseTagArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTag)(nil)).Elem()
}

func (o DatabaseTagArrayOutput) ToDatabaseTagArrayOutput() DatabaseTagArrayOutput {
	return o
}

func (o DatabaseTagArrayOutput) ToDatabaseTagArrayOutputWithContext(ctx context.Context) DatabaseTagArrayOutput {
	return o
}

func (o DatabaseTagArrayOutput) Index(i pulumi.IntInput) DatabaseTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTag {
		return vs[0].([]DatabaseTag)[vs[1].(int)]
	}).(DatabaseTagOutput)
}

type ExternalFunctionArg struct {
	// Argument name
	Name string `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type string `pulumi:"type"`
}

// ExternalFunctionArgInput is an input type that accepts ExternalFunctionArgArgs and ExternalFunctionArgOutput values.
// You can construct a concrete instance of `ExternalFunctionArgInput` via:
//
//          ExternalFunctionArgArgs{...}
type ExternalFunctionArgInput interface {
	pulumi.Input

	ToExternalFunctionArgOutput() ExternalFunctionArgOutput
	ToExternalFunctionArgOutputWithContext(context.Context) ExternalFunctionArgOutput
}

type ExternalFunctionArgArgs struct {
	// Argument name
	Name pulumi.StringInput `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalFunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return i.ToExternalFunctionArgOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgOutput)
}

// ExternalFunctionArgArrayInput is an input type that accepts ExternalFunctionArgArray and ExternalFunctionArgArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionArgArrayInput` via:
//
//          ExternalFunctionArgArray{ ExternalFunctionArgArgs{...} }
type ExternalFunctionArgArrayInput interface {
	pulumi.Input

	ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput
	ToExternalFunctionArgArrayOutputWithContext(context.Context) ExternalFunctionArgArrayOutput
}

type ExternalFunctionArgArray []ExternalFunctionArgInput

func (ExternalFunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return i.ToExternalFunctionArgArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgArrayOutput)
}

type ExternalFunctionArgOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return o
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return o
}

// Argument name
func (o ExternalFunctionArgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Name }).(pulumi.StringOutput)
}

// Argument type, e.g. VARCHAR
func (o ExternalFunctionArgOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalFunctionArgArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) Index(i pulumi.IntInput) ExternalFunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionArg {
		return vs[0].([]ExternalFunctionArg)[vs[1].(int)]
	}).(ExternalFunctionArgOutput)
}

type ExternalFunctionHeader struct {
	// Header name
	Name string `pulumi:"name"`
	// Header value
	Value string `pulumi:"value"`
}

// ExternalFunctionHeaderInput is an input type that accepts ExternalFunctionHeaderArgs and ExternalFunctionHeaderOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderInput` via:
//
//          ExternalFunctionHeaderArgs{...}
type ExternalFunctionHeaderInput interface {
	pulumi.Input

	ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput
	ToExternalFunctionHeaderOutputWithContext(context.Context) ExternalFunctionHeaderOutput
}

type ExternalFunctionHeaderArgs struct {
	// Header name
	Name pulumi.StringInput `pulumi:"name"`
	// Header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalFunctionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return i.ToExternalFunctionHeaderOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderOutput)
}

// ExternalFunctionHeaderArrayInput is an input type that accepts ExternalFunctionHeaderArray and ExternalFunctionHeaderArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderArrayInput` via:
//
//          ExternalFunctionHeaderArray{ ExternalFunctionHeaderArgs{...} }
type ExternalFunctionHeaderArrayInput interface {
	pulumi.Input

	ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput
	ToExternalFunctionHeaderArrayOutputWithContext(context.Context) ExternalFunctionHeaderArrayOutput
}

type ExternalFunctionHeaderArray []ExternalFunctionHeaderInput

func (ExternalFunctionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return i.ToExternalFunctionHeaderArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderArrayOutput)
}

type ExternalFunctionHeaderOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return o
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return o
}

// Header name
func (o ExternalFunctionHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Header value
func (o ExternalFunctionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalFunctionHeaderArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) Index(i pulumi.IntInput) ExternalFunctionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionHeader {
		return vs[0].([]ExternalFunctionHeader)[vs[1].(int)]
	}).(ExternalFunctionHeaderOutput)
}

type ExternalTableColumn struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As string `pulumi:"as"`
	// Column name
	Name string `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// ExternalTableColumnInput is an input type that accepts ExternalTableColumnArgs and ExternalTableColumnOutput values.
// You can construct a concrete instance of `ExternalTableColumnInput` via:
//
//          ExternalTableColumnArgs{...}
type ExternalTableColumnInput interface {
	pulumi.Input

	ToExternalTableColumnOutput() ExternalTableColumnOutput
	ToExternalTableColumnOutputWithContext(context.Context) ExternalTableColumnOutput
}

type ExternalTableColumnArgs struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As pulumi.StringInput `pulumi:"as"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalTableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return i.ToExternalTableColumnOutputWithContext(context.Background())
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnOutput)
}

// ExternalTableColumnArrayInput is an input type that accepts ExternalTableColumnArray and ExternalTableColumnArrayOutput values.
// You can construct a concrete instance of `ExternalTableColumnArrayInput` via:
//
//          ExternalTableColumnArray{ ExternalTableColumnArgs{...} }
type ExternalTableColumnArrayInput interface {
	pulumi.Input

	ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput
	ToExternalTableColumnArrayOutputWithContext(context.Context) ExternalTableColumnArrayOutput
}

type ExternalTableColumnArray []ExternalTableColumnInput

func (ExternalTableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return i.ToExternalTableColumnArrayOutputWithContext(context.Background())
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnArrayOutput)
}

type ExternalTableColumnOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return o
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return o
}

// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
func (o ExternalTableColumnOutput) As() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.As }).(pulumi.StringOutput)
}

// Column name
func (o ExternalTableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Column type, e.g. VARIANT
func (o ExternalTableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalTableColumnArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) Index(i pulumi.IntInput) ExternalTableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableColumn {
		return vs[0].([]ExternalTableColumn)[vs[1].(int)]
	}).(ExternalTableColumnOutput)
}

type ExternalTableTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// ExternalTableTagInput is an input type that accepts ExternalTableTagArgs and ExternalTableTagOutput values.
// You can construct a concrete instance of `ExternalTableTagInput` via:
//
//          ExternalTableTagArgs{...}
type ExternalTableTagInput interface {
	pulumi.Input

	ToExternalTableTagOutput() ExternalTableTagOutput
	ToExternalTableTagOutputWithContext(context.Context) ExternalTableTagOutput
}

type ExternalTableTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableTag)(nil)).Elem()
}

func (i ExternalTableTagArgs) ToExternalTableTagOutput() ExternalTableTagOutput {
	return i.ToExternalTableTagOutputWithContext(context.Background())
}

func (i ExternalTableTagArgs) ToExternalTableTagOutputWithContext(ctx context.Context) ExternalTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableTagOutput)
}

// ExternalTableTagArrayInput is an input type that accepts ExternalTableTagArray and ExternalTableTagArrayOutput values.
// You can construct a concrete instance of `ExternalTableTagArrayInput` via:
//
//          ExternalTableTagArray{ ExternalTableTagArgs{...} }
type ExternalTableTagArrayInput interface {
	pulumi.Input

	ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput
	ToExternalTableTagArrayOutputWithContext(context.Context) ExternalTableTagArrayOutput
}

type ExternalTableTagArray []ExternalTableTagInput

func (ExternalTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableTag)(nil)).Elem()
}

func (i ExternalTableTagArray) ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput {
	return i.ToExternalTableTagArrayOutputWithContext(context.Background())
}

func (i ExternalTableTagArray) ToExternalTableTagArrayOutputWithContext(ctx context.Context) ExternalTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableTagArrayOutput)
}

type ExternalTableTagOutput struct{ *pulumi.OutputState }

func (ExternalTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableTag)(nil)).Elem()
}

func (o ExternalTableTagOutput) ToExternalTableTagOutput() ExternalTableTagOutput {
	return o
}

func (o ExternalTableTagOutput) ToExternalTableTagOutputWithContext(ctx context.Context) ExternalTableTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o ExternalTableTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalTableTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o ExternalTableTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o ExternalTableTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalTableTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o ExternalTableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalTableTagArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableTag)(nil)).Elem()
}

func (o ExternalTableTagArrayOutput) ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput {
	return o
}

func (o ExternalTableTagArrayOutput) ToExternalTableTagArrayOutputWithContext(ctx context.Context) ExternalTableTagArrayOutput {
	return o
}

func (o ExternalTableTagArrayOutput) Index(i pulumi.IntInput) ExternalTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableTag {
		return vs[0].([]ExternalTableTag)[vs[1].(int)]
	}).(ExternalTableTagOutput)
}

type FunctionArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// FunctionArgumentInput is an input type that accepts FunctionArgumentArgs and FunctionArgumentOutput values.
// You can construct a concrete instance of `FunctionArgumentInput` via:
//
//          FunctionArgumentArgs{...}
type FunctionArgumentInput interface {
	pulumi.Input

	ToFunctionArgumentOutput() FunctionArgumentOutput
	ToFunctionArgumentOutputWithContext(context.Context) FunctionArgumentOutput
}

type FunctionArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArgument)(nil)).Elem()
}

func (i FunctionArgumentArgs) ToFunctionArgumentOutput() FunctionArgumentOutput {
	return i.ToFunctionArgumentOutputWithContext(context.Background())
}

func (i FunctionArgumentArgs) ToFunctionArgumentOutputWithContext(ctx context.Context) FunctionArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgumentOutput)
}

// FunctionArgumentArrayInput is an input type that accepts FunctionArgumentArray and FunctionArgumentArrayOutput values.
// You can construct a concrete instance of `FunctionArgumentArrayInput` via:
//
//          FunctionArgumentArray{ FunctionArgumentArgs{...} }
type FunctionArgumentArrayInput interface {
	pulumi.Input

	ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput
	ToFunctionArgumentArrayOutputWithContext(context.Context) FunctionArgumentArrayOutput
}

type FunctionArgumentArray []FunctionArgumentInput

func (FunctionArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArgument)(nil)).Elem()
}

func (i FunctionArgumentArray) ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput {
	return i.ToFunctionArgumentArrayOutputWithContext(context.Background())
}

func (i FunctionArgumentArray) ToFunctionArgumentArrayOutputWithContext(ctx context.Context) FunctionArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgumentArrayOutput)
}

type FunctionArgumentOutput struct{ *pulumi.OutputState }

func (FunctionArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArgument)(nil)).Elem()
}

func (o FunctionArgumentOutput) ToFunctionArgumentOutput() FunctionArgumentOutput {
	return o
}

func (o FunctionArgumentOutput) ToFunctionArgumentOutputWithContext(ctx context.Context) FunctionArgumentOutput {
	return o
}

// The argument name
func (o FunctionArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o FunctionArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionArgument) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionArgumentArrayOutput struct{ *pulumi.OutputState }

func (FunctionArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArgument)(nil)).Elem()
}

func (o FunctionArgumentArrayOutput) ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput {
	return o
}

func (o FunctionArgumentArrayOutput) ToFunctionArgumentArrayOutputWithContext(ctx context.Context) FunctionArgumentArrayOutput {
	return o
}

func (o FunctionArgumentArrayOutput) Index(i pulumi.IntInput) FunctionArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionArgument {
		return vs[0].([]FunctionArgument)[vs[1].(int)]
	}).(FunctionArgumentOutput)
}

type FunctionGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// FunctionGrantArgumentInput is an input type that accepts FunctionGrantArgumentArgs and FunctionGrantArgumentOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentInput` via:
//
//          FunctionGrantArgumentArgs{...}
type FunctionGrantArgumentInput interface {
	pulumi.Input

	ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput
	ToFunctionGrantArgumentOutputWithContext(context.Context) FunctionGrantArgumentOutput
}

type FunctionGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return i.ToFunctionGrantArgumentOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentOutput)
}

// FunctionGrantArgumentArrayInput is an input type that accepts FunctionGrantArgumentArray and FunctionGrantArgumentArrayOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentArrayInput` via:
//
//          FunctionGrantArgumentArray{ FunctionGrantArgumentArgs{...} }
type FunctionGrantArgumentArrayInput interface {
	pulumi.Input

	ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput
	ToFunctionGrantArgumentArrayOutputWithContext(context.Context) FunctionGrantArgumentArrayOutput
}

type FunctionGrantArgumentArray []FunctionGrantArgumentInput

func (FunctionGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return i.ToFunctionGrantArgumentArrayOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentArrayOutput)
}

type FunctionGrantArgumentOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return o
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return o
}

// The argument name
func (o FunctionGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o FunctionGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) Index(i pulumi.IntInput) FunctionGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionGrantArgument {
		return vs[0].([]FunctionGrantArgument)[vs[1].(int)]
	}).(FunctionGrantArgumentOutput)
}

type MaterializedViewTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// MaterializedViewTagInput is an input type that accepts MaterializedViewTagArgs and MaterializedViewTagOutput values.
// You can construct a concrete instance of `MaterializedViewTagInput` via:
//
//          MaterializedViewTagArgs{...}
type MaterializedViewTagInput interface {
	pulumi.Input

	ToMaterializedViewTagOutput() MaterializedViewTagOutput
	ToMaterializedViewTagOutputWithContext(context.Context) MaterializedViewTagOutput
}

type MaterializedViewTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MaterializedViewTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewTag)(nil)).Elem()
}

func (i MaterializedViewTagArgs) ToMaterializedViewTagOutput() MaterializedViewTagOutput {
	return i.ToMaterializedViewTagOutputWithContext(context.Background())
}

func (i MaterializedViewTagArgs) ToMaterializedViewTagOutputWithContext(ctx context.Context) MaterializedViewTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewTagOutput)
}

// MaterializedViewTagArrayInput is an input type that accepts MaterializedViewTagArray and MaterializedViewTagArrayOutput values.
// You can construct a concrete instance of `MaterializedViewTagArrayInput` via:
//
//          MaterializedViewTagArray{ MaterializedViewTagArgs{...} }
type MaterializedViewTagArrayInput interface {
	pulumi.Input

	ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput
	ToMaterializedViewTagArrayOutputWithContext(context.Context) MaterializedViewTagArrayOutput
}

type MaterializedViewTagArray []MaterializedViewTagInput

func (MaterializedViewTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterializedViewTag)(nil)).Elem()
}

func (i MaterializedViewTagArray) ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput {
	return i.ToMaterializedViewTagArrayOutputWithContext(context.Background())
}

func (i MaterializedViewTagArray) ToMaterializedViewTagArrayOutputWithContext(ctx context.Context) MaterializedViewTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewTagArrayOutput)
}

type MaterializedViewTagOutput struct{ *pulumi.OutputState }

func (MaterializedViewTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewTag)(nil)).Elem()
}

func (o MaterializedViewTagOutput) ToMaterializedViewTagOutput() MaterializedViewTagOutput {
	return o
}

func (o MaterializedViewTagOutput) ToMaterializedViewTagOutputWithContext(ctx context.Context) MaterializedViewTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o MaterializedViewTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o MaterializedViewTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o MaterializedViewTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o MaterializedViewTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewTag) string { return v.Value }).(pulumi.StringOutput)
}

type MaterializedViewTagArrayOutput struct{ *pulumi.OutputState }

func (MaterializedViewTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterializedViewTag)(nil)).Elem()
}

func (o MaterializedViewTagArrayOutput) ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput {
	return o
}

func (o MaterializedViewTagArrayOutput) ToMaterializedViewTagArrayOutputWithContext(ctx context.Context) MaterializedViewTagArrayOutput {
	return o
}

func (o MaterializedViewTagArrayOutput) Index(i pulumi.IntInput) MaterializedViewTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaterializedViewTag {
		return vs[0].([]MaterializedViewTag)[vs[1].(int)]
	}).(MaterializedViewTagOutput)
}

type ProcedureArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// ProcedureArgumentInput is an input type that accepts ProcedureArgumentArgs and ProcedureArgumentOutput values.
// You can construct a concrete instance of `ProcedureArgumentInput` via:
//
//          ProcedureArgumentArgs{...}
type ProcedureArgumentInput interface {
	pulumi.Input

	ToProcedureArgumentOutput() ProcedureArgumentOutput
	ToProcedureArgumentOutputWithContext(context.Context) ProcedureArgumentOutput
}

type ProcedureArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProcedureArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureArgument)(nil)).Elem()
}

func (i ProcedureArgumentArgs) ToProcedureArgumentOutput() ProcedureArgumentOutput {
	return i.ToProcedureArgumentOutputWithContext(context.Background())
}

func (i ProcedureArgumentArgs) ToProcedureArgumentOutputWithContext(ctx context.Context) ProcedureArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureArgumentOutput)
}

// ProcedureArgumentArrayInput is an input type that accepts ProcedureArgumentArray and ProcedureArgumentArrayOutput values.
// You can construct a concrete instance of `ProcedureArgumentArrayInput` via:
//
//          ProcedureArgumentArray{ ProcedureArgumentArgs{...} }
type ProcedureArgumentArrayInput interface {
	pulumi.Input

	ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput
	ToProcedureArgumentArrayOutputWithContext(context.Context) ProcedureArgumentArrayOutput
}

type ProcedureArgumentArray []ProcedureArgumentInput

func (ProcedureArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureArgument)(nil)).Elem()
}

func (i ProcedureArgumentArray) ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput {
	return i.ToProcedureArgumentArrayOutputWithContext(context.Background())
}

func (i ProcedureArgumentArray) ToProcedureArgumentArrayOutputWithContext(ctx context.Context) ProcedureArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureArgumentArrayOutput)
}

type ProcedureArgumentOutput struct{ *pulumi.OutputState }

func (ProcedureArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureArgument)(nil)).Elem()
}

func (o ProcedureArgumentOutput) ToProcedureArgumentOutput() ProcedureArgumentOutput {
	return o
}

func (o ProcedureArgumentOutput) ToProcedureArgumentOutputWithContext(ctx context.Context) ProcedureArgumentOutput {
	return o
}

// The argument name
func (o ProcedureArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o ProcedureArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureArgument) string { return v.Type }).(pulumi.StringOutput)
}

type ProcedureArgumentArrayOutput struct{ *pulumi.OutputState }

func (ProcedureArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureArgument)(nil)).Elem()
}

func (o ProcedureArgumentArrayOutput) ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput {
	return o
}

func (o ProcedureArgumentArrayOutput) ToProcedureArgumentArrayOutputWithContext(ctx context.Context) ProcedureArgumentArrayOutput {
	return o
}

func (o ProcedureArgumentArrayOutput) Index(i pulumi.IntInput) ProcedureArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcedureArgument {
		return vs[0].([]ProcedureArgument)[vs[1].(int)]
	}).(ProcedureArgumentOutput)
}

type ProcedureGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// ProcedureGrantArgumentInput is an input type that accepts ProcedureGrantArgumentArgs and ProcedureGrantArgumentOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentInput` via:
//
//          ProcedureGrantArgumentArgs{...}
type ProcedureGrantArgumentInput interface {
	pulumi.Input

	ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput
	ToProcedureGrantArgumentOutputWithContext(context.Context) ProcedureGrantArgumentOutput
}

type ProcedureGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProcedureGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return i.ToProcedureGrantArgumentOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentOutput)
}

// ProcedureGrantArgumentArrayInput is an input type that accepts ProcedureGrantArgumentArray and ProcedureGrantArgumentArrayOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentArrayInput` via:
//
//          ProcedureGrantArgumentArray{ ProcedureGrantArgumentArgs{...} }
type ProcedureGrantArgumentArrayInput interface {
	pulumi.Input

	ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput
	ToProcedureGrantArgumentArrayOutputWithContext(context.Context) ProcedureGrantArgumentArrayOutput
}

type ProcedureGrantArgumentArray []ProcedureGrantArgumentInput

func (ProcedureGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return i.ToProcedureGrantArgumentArrayOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentArrayOutput)
}

type ProcedureGrantArgumentOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return o
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return o
}

// The argument name
func (o ProcedureGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o ProcedureGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type ProcedureGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) Index(i pulumi.IntInput) ProcedureGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcedureGrantArgument {
		return vs[0].([]ProcedureGrantArgument)[vs[1].(int)]
	}).(ProcedureGrantArgumentOutput)
}

type RoleTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// RoleTagInput is an input type that accepts RoleTagArgs and RoleTagOutput values.
// You can construct a concrete instance of `RoleTagInput` via:
//
//          RoleTagArgs{...}
type RoleTagInput interface {
	pulumi.Input

	ToRoleTagOutput() RoleTagOutput
	ToRoleTagOutputWithContext(context.Context) RoleTagOutput
}

type RoleTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (i RoleTagArgs) ToRoleTagOutput() RoleTagOutput {
	return i.ToRoleTagOutputWithContext(context.Background())
}

func (i RoleTagArgs) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagOutput)
}

// RoleTagArrayInput is an input type that accepts RoleTagArray and RoleTagArrayOutput values.
// You can construct a concrete instance of `RoleTagArrayInput` via:
//
//          RoleTagArray{ RoleTagArgs{...} }
type RoleTagArrayInput interface {
	pulumi.Input

	ToRoleTagArrayOutput() RoleTagArrayOutput
	ToRoleTagArrayOutputWithContext(context.Context) RoleTagArrayOutput
}

type RoleTagArray []RoleTagInput

func (RoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (i RoleTagArray) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return i.ToRoleTagArrayOutputWithContext(context.Background())
}

func (i RoleTagArray) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagArrayOutput)
}

type RoleTagOutput struct{ *pulumi.OutputState }

func (RoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (o RoleTagOutput) ToRoleTagOutput() RoleTagOutput {
	return o
}

func (o RoleTagOutput) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o RoleTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o RoleTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o RoleTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o RoleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Value }).(pulumi.StringOutput)
}

type RoleTagArrayOutput struct{ *pulumi.OutputState }

func (RoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) Index(i pulumi.IntInput) RoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleTag {
		return vs[0].([]RoleTag)[vs[1].(int)]
	}).(RoleTagOutput)
}

type SchemaTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// SchemaTagInput is an input type that accepts SchemaTagArgs and SchemaTagOutput values.
// You can construct a concrete instance of `SchemaTagInput` via:
//
//          SchemaTagArgs{...}
type SchemaTagInput interface {
	pulumi.Input

	ToSchemaTagOutput() SchemaTagOutput
	ToSchemaTagOutputWithContext(context.Context) SchemaTagOutput
}

type SchemaTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SchemaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (i SchemaTagArgs) ToSchemaTagOutput() SchemaTagOutput {
	return i.ToSchemaTagOutputWithContext(context.Background())
}

func (i SchemaTagArgs) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagOutput)
}

// SchemaTagArrayInput is an input type that accepts SchemaTagArray and SchemaTagArrayOutput values.
// You can construct a concrete instance of `SchemaTagArrayInput` via:
//
//          SchemaTagArray{ SchemaTagArgs{...} }
type SchemaTagArrayInput interface {
	pulumi.Input

	ToSchemaTagArrayOutput() SchemaTagArrayOutput
	ToSchemaTagArrayOutputWithContext(context.Context) SchemaTagArrayOutput
}

type SchemaTagArray []SchemaTagInput

func (SchemaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (i SchemaTagArray) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return i.ToSchemaTagArrayOutputWithContext(context.Background())
}

func (i SchemaTagArray) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagArrayOutput)
}

type SchemaTagOutput struct{ *pulumi.OutputState }

func (SchemaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (o SchemaTagOutput) ToSchemaTagOutput() SchemaTagOutput {
	return o
}

func (o SchemaTagOutput) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o SchemaTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o SchemaTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o SchemaTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o SchemaTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Value }).(pulumi.StringOutput)
}

type SchemaTagArrayOutput struct{ *pulumi.OutputState }

func (SchemaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) Index(i pulumi.IntInput) SchemaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaTag {
		return vs[0].([]SchemaTag)[vs[1].(int)]
	}).(SchemaTagOutput)
}

type StageTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// StageTagInput is an input type that accepts StageTagArgs and StageTagOutput values.
// You can construct a concrete instance of `StageTagInput` via:
//
//          StageTagArgs{...}
type StageTagInput interface {
	pulumi.Input

	ToStageTagOutput() StageTagOutput
	ToStageTagOutputWithContext(context.Context) StageTagOutput
}

type StageTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageTag)(nil)).Elem()
}

func (i StageTagArgs) ToStageTagOutput() StageTagOutput {
	return i.ToStageTagOutputWithContext(context.Background())
}

func (i StageTagArgs) ToStageTagOutputWithContext(ctx context.Context) StageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageTagOutput)
}

// StageTagArrayInput is an input type that accepts StageTagArray and StageTagArrayOutput values.
// You can construct a concrete instance of `StageTagArrayInput` via:
//
//          StageTagArray{ StageTagArgs{...} }
type StageTagArrayInput interface {
	pulumi.Input

	ToStageTagArrayOutput() StageTagArrayOutput
	ToStageTagArrayOutputWithContext(context.Context) StageTagArrayOutput
}

type StageTagArray []StageTagInput

func (StageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageTag)(nil)).Elem()
}

func (i StageTagArray) ToStageTagArrayOutput() StageTagArrayOutput {
	return i.ToStageTagArrayOutputWithContext(context.Background())
}

func (i StageTagArray) ToStageTagArrayOutputWithContext(ctx context.Context) StageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageTagArrayOutput)
}

type StageTagOutput struct{ *pulumi.OutputState }

func (StageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageTag)(nil)).Elem()
}

func (o StageTagOutput) ToStageTagOutput() StageTagOutput {
	return o
}

func (o StageTagOutput) ToStageTagOutputWithContext(ctx context.Context) StageTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o StageTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o StageTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StageTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o StageTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o StageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StageTag) string { return v.Value }).(pulumi.StringOutput)
}

type StageTagArrayOutput struct{ *pulumi.OutputState }

func (StageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageTag)(nil)).Elem()
}

func (o StageTagArrayOutput) ToStageTagArrayOutput() StageTagArrayOutput {
	return o
}

func (o StageTagArrayOutput) ToStageTagArrayOutputWithContext(ctx context.Context) StageTagArrayOutput {
	return o
}

func (o StageTagArrayOutput) Index(i pulumi.IntInput) StageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageTag {
		return vs[0].([]StageTag)[vs[1].(int)]
	}).(StageTagOutput)
}

type TableColumn struct {
	// Column comment
	Comment *string `pulumi:"comment"`
	// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
	Default *TableColumnDefault `pulumi:"default"`
	// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
	Identity *TableColumnIdentity `pulumi:"identity"`
	// Column name
	Name string `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable *bool `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//          TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// Column comment
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
	Default TableColumnDefaultPtrInput `pulumi:"default"`
	// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
	Identity TableColumnIdentityPtrInput `pulumi:"identity"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//          TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// Column comment
func (o TableColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
func (o TableColumnOutput) Default() TableColumnDefaultPtrOutput {
	return o.ApplyT(func(v TableColumn) *TableColumnDefault { return v.Default }).(TableColumnDefaultPtrOutput)
}

// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
func (o TableColumnOutput) Identity() TableColumnIdentityPtrOutput {
	return o.ApplyT(func(v TableColumn) *TableColumnIdentity { return v.Identity }).(TableColumnIdentityPtrOutput)
}

// Column name
func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
func (o TableColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// Column type, e.g. VARIANT
func (o TableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

type TableColumnDefault struct {
	Constant   *string `pulumi:"constant"`
	Expression *string `pulumi:"expression"`
	Sequence   *string `pulumi:"sequence"`
}

// TableColumnDefaultInput is an input type that accepts TableColumnDefaultArgs and TableColumnDefaultOutput values.
// You can construct a concrete instance of `TableColumnDefaultInput` via:
//
//          TableColumnDefaultArgs{...}
type TableColumnDefaultInput interface {
	pulumi.Input

	ToTableColumnDefaultOutput() TableColumnDefaultOutput
	ToTableColumnDefaultOutputWithContext(context.Context) TableColumnDefaultOutput
}

type TableColumnDefaultArgs struct {
	Constant   pulumi.StringPtrInput `pulumi:"constant"`
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	Sequence   pulumi.StringPtrInput `pulumi:"sequence"`
}

func (TableColumnDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnDefault)(nil)).Elem()
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultOutput() TableColumnDefaultOutput {
	return i.ToTableColumnDefaultOutputWithContext(context.Background())
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultOutputWithContext(ctx context.Context) TableColumnDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultOutput)
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return i.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultOutput).ToTableColumnDefaultPtrOutputWithContext(ctx)
}

// TableColumnDefaultPtrInput is an input type that accepts TableColumnDefaultArgs, TableColumnDefaultPtr and TableColumnDefaultPtrOutput values.
// You can construct a concrete instance of `TableColumnDefaultPtrInput` via:
//
//          TableColumnDefaultArgs{...}
//
//  or:
//
//          nil
type TableColumnDefaultPtrInput interface {
	pulumi.Input

	ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput
	ToTableColumnDefaultPtrOutputWithContext(context.Context) TableColumnDefaultPtrOutput
}

type tableColumnDefaultPtrType TableColumnDefaultArgs

func TableColumnDefaultPtr(v *TableColumnDefaultArgs) TableColumnDefaultPtrInput {
	return (*tableColumnDefaultPtrType)(v)
}

func (*tableColumnDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnDefault)(nil)).Elem()
}

func (i *tableColumnDefaultPtrType) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return i.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (i *tableColumnDefaultPtrType) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultPtrOutput)
}

type TableColumnDefaultOutput struct{ *pulumi.OutputState }

func (TableColumnDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnDefault)(nil)).Elem()
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultOutput() TableColumnDefaultOutput {
	return o
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultOutputWithContext(ctx context.Context) TableColumnDefaultOutput {
	return o
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return o.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableColumnDefault) *TableColumnDefault {
		return &v
	}).(TableColumnDefaultPtrOutput)
}

func (o TableColumnDefaultOutput) Constant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Constant }).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultOutput) Sequence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Sequence }).(pulumi.StringPtrOutput)
}

type TableColumnDefaultPtrOutput struct{ *pulumi.OutputState }

func (TableColumnDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnDefault)(nil)).Elem()
}

func (o TableColumnDefaultPtrOutput) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return o
}

func (o TableColumnDefaultPtrOutput) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return o
}

func (o TableColumnDefaultPtrOutput) Elem() TableColumnDefaultOutput {
	return o.ApplyT(func(v *TableColumnDefault) TableColumnDefault {
		if v != nil {
			return *v
		}
		var ret TableColumnDefault
		return ret
	}).(TableColumnDefaultOutput)
}

func (o TableColumnDefaultPtrOutput) Constant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultPtrOutput) Sequence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Sequence
	}).(pulumi.StringPtrOutput)
}

type TableColumnIdentity struct {
	StartNum *int `pulumi:"startNum"`
	StepNum  *int `pulumi:"stepNum"`
}

// TableColumnIdentityInput is an input type that accepts TableColumnIdentityArgs and TableColumnIdentityOutput values.
// You can construct a concrete instance of `TableColumnIdentityInput` via:
//
//          TableColumnIdentityArgs{...}
type TableColumnIdentityInput interface {
	pulumi.Input

	ToTableColumnIdentityOutput() TableColumnIdentityOutput
	ToTableColumnIdentityOutputWithContext(context.Context) TableColumnIdentityOutput
}

type TableColumnIdentityArgs struct {
	StartNum pulumi.IntPtrInput `pulumi:"startNum"`
	StepNum  pulumi.IntPtrInput `pulumi:"stepNum"`
}

func (TableColumnIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnIdentity)(nil)).Elem()
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityOutput() TableColumnIdentityOutput {
	return i.ToTableColumnIdentityOutputWithContext(context.Background())
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityOutputWithContext(ctx context.Context) TableColumnIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityOutput)
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return i.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityOutput).ToTableColumnIdentityPtrOutputWithContext(ctx)
}

// TableColumnIdentityPtrInput is an input type that accepts TableColumnIdentityArgs, TableColumnIdentityPtr and TableColumnIdentityPtrOutput values.
// You can construct a concrete instance of `TableColumnIdentityPtrInput` via:
//
//          TableColumnIdentityArgs{...}
//
//  or:
//
//          nil
type TableColumnIdentityPtrInput interface {
	pulumi.Input

	ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput
	ToTableColumnIdentityPtrOutputWithContext(context.Context) TableColumnIdentityPtrOutput
}

type tableColumnIdentityPtrType TableColumnIdentityArgs

func TableColumnIdentityPtr(v *TableColumnIdentityArgs) TableColumnIdentityPtrInput {
	return (*tableColumnIdentityPtrType)(v)
}

func (*tableColumnIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnIdentity)(nil)).Elem()
}

func (i *tableColumnIdentityPtrType) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return i.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (i *tableColumnIdentityPtrType) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityPtrOutput)
}

type TableColumnIdentityOutput struct{ *pulumi.OutputState }

func (TableColumnIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnIdentity)(nil)).Elem()
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityOutput() TableColumnIdentityOutput {
	return o
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityOutputWithContext(ctx context.Context) TableColumnIdentityOutput {
	return o
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return o.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableColumnIdentity) *TableColumnIdentity {
		return &v
	}).(TableColumnIdentityPtrOutput)
}

func (o TableColumnIdentityOutput) StartNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableColumnIdentity) *int { return v.StartNum }).(pulumi.IntPtrOutput)
}

func (o TableColumnIdentityOutput) StepNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableColumnIdentity) *int { return v.StepNum }).(pulumi.IntPtrOutput)
}

type TableColumnIdentityPtrOutput struct{ *pulumi.OutputState }

func (TableColumnIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnIdentity)(nil)).Elem()
}

func (o TableColumnIdentityPtrOutput) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return o
}

func (o TableColumnIdentityPtrOutput) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return o
}

func (o TableColumnIdentityPtrOutput) Elem() TableColumnIdentityOutput {
	return o.ApplyT(func(v *TableColumnIdentity) TableColumnIdentity {
		if v != nil {
			return *v
		}
		var ret TableColumnIdentity
		return ret
	}).(TableColumnIdentityOutput)
}

func (o TableColumnIdentityPtrOutput) StartNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableColumnIdentity) *int {
		if v == nil {
			return nil
		}
		return v.StartNum
	}).(pulumi.IntPtrOutput)
}

func (o TableColumnIdentityPtrOutput) StepNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableColumnIdentity) *int {
		if v == nil {
			return nil
		}
		return v.StepNum
	}).(pulumi.IntPtrOutput)
}

type TablePrimaryKey struct {
	// Columns to use in primary key
	Keys []string `pulumi:"keys"`
	// Name of constraint
	Name *string `pulumi:"name"`
}

// TablePrimaryKeyInput is an input type that accepts TablePrimaryKeyArgs and TablePrimaryKeyOutput values.
// You can construct a concrete instance of `TablePrimaryKeyInput` via:
//
//          TablePrimaryKeyArgs{...}
type TablePrimaryKeyInput interface {
	pulumi.Input

	ToTablePrimaryKeyOutput() TablePrimaryKeyOutput
	ToTablePrimaryKeyOutputWithContext(context.Context) TablePrimaryKeyOutput
}

type TablePrimaryKeyArgs struct {
	// Columns to use in primary key
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Name of constraint
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return i.ToTablePrimaryKeyOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput)
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput).ToTablePrimaryKeyPtrOutputWithContext(ctx)
}

// TablePrimaryKeyPtrInput is an input type that accepts TablePrimaryKeyArgs, TablePrimaryKeyPtr and TablePrimaryKeyPtrOutput values.
// You can construct a concrete instance of `TablePrimaryKeyPtrInput` via:
//
//          TablePrimaryKeyArgs{...}
//
//  or:
//
//          nil
type TablePrimaryKeyPtrInput interface {
	pulumi.Input

	ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput
	ToTablePrimaryKeyPtrOutputWithContext(context.Context) TablePrimaryKeyPtrOutput
}

type tablePrimaryKeyPtrType TablePrimaryKeyArgs

func TablePrimaryKeyPtr(v *TablePrimaryKeyArgs) TablePrimaryKeyPtrInput {
	return (*tablePrimaryKeyPtrType)(v)
}

func (*tablePrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyPtrOutput)
}

type TablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TablePrimaryKey) *TablePrimaryKey {
		return &v
	}).(TablePrimaryKeyPtrOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TablePrimaryKey) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TablePrimaryKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TablePrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) Elem() TablePrimaryKeyOutput {
	return o.ApplyT(func(v *TablePrimaryKey) TablePrimaryKey {
		if v != nil {
			return *v
		}
		var ret TablePrimaryKey
		return ret
	}).(TablePrimaryKeyOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TablePrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TablePrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type TableTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// TableTagInput is an input type that accepts TableTagArgs and TableTagOutput values.
// You can construct a concrete instance of `TableTagInput` via:
//
//          TableTagArgs{...}
type TableTagInput interface {
	pulumi.Input

	ToTableTagOutput() TableTagOutput
	ToTableTagOutputWithContext(context.Context) TableTagOutput
}

type TableTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (i TableTagArgs) ToTableTagOutput() TableTagOutput {
	return i.ToTableTagOutputWithContext(context.Background())
}

func (i TableTagArgs) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagOutput)
}

// TableTagArrayInput is an input type that accepts TableTagArray and TableTagArrayOutput values.
// You can construct a concrete instance of `TableTagArrayInput` via:
//
//          TableTagArray{ TableTagArgs{...} }
type TableTagArrayInput interface {
	pulumi.Input

	ToTableTagArrayOutput() TableTagArrayOutput
	ToTableTagArrayOutputWithContext(context.Context) TableTagArrayOutput
}

type TableTagArray []TableTagInput

func (TableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (i TableTagArray) ToTableTagArrayOutput() TableTagArrayOutput {
	return i.ToTableTagArrayOutputWithContext(context.Background())
}

func (i TableTagArray) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagArrayOutput)
}

type TableTagOutput struct{ *pulumi.OutputState }

func (TableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (o TableTagOutput) ToTableTagOutput() TableTagOutput {
	return o
}

func (o TableTagOutput) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o TableTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o TableTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o TableTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o TableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TableTag) string { return v.Value }).(pulumi.StringOutput)
}

type TableTagArrayOutput struct{ *pulumi.OutputState }

func (TableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (o TableTagArrayOutput) ToTableTagArrayOutput() TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) Index(i pulumi.IntInput) TableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableTag {
		return vs[0].([]TableTag)[vs[1].(int)]
	}).(TableTagOutput)
}

type UserTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//          UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

type UserTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//          UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o UserTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o UserTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o UserTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o UserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Value }).(pulumi.StringOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

type ViewTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// ViewTagInput is an input type that accepts ViewTagArgs and ViewTagOutput values.
// You can construct a concrete instance of `ViewTagInput` via:
//
//          ViewTagArgs{...}
type ViewTagInput interface {
	pulumi.Input

	ToViewTagOutput() ViewTagOutput
	ToViewTagOutputWithContext(context.Context) ViewTagOutput
}

type ViewTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ViewTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTag)(nil)).Elem()
}

func (i ViewTagArgs) ToViewTagOutput() ViewTagOutput {
	return i.ToViewTagOutputWithContext(context.Background())
}

func (i ViewTagArgs) ToViewTagOutputWithContext(ctx context.Context) ViewTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagOutput)
}

// ViewTagArrayInput is an input type that accepts ViewTagArray and ViewTagArrayOutput values.
// You can construct a concrete instance of `ViewTagArrayInput` via:
//
//          ViewTagArray{ ViewTagArgs{...} }
type ViewTagArrayInput interface {
	pulumi.Input

	ToViewTagArrayOutput() ViewTagArrayOutput
	ToViewTagArrayOutputWithContext(context.Context) ViewTagArrayOutput
}

type ViewTagArray []ViewTagInput

func (ViewTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewTag)(nil)).Elem()
}

func (i ViewTagArray) ToViewTagArrayOutput() ViewTagArrayOutput {
	return i.ToViewTagArrayOutputWithContext(context.Background())
}

func (i ViewTagArray) ToViewTagArrayOutputWithContext(ctx context.Context) ViewTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagArrayOutput)
}

type ViewTagOutput struct{ *pulumi.OutputState }

func (ViewTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTag)(nil)).Elem()
}

func (o ViewTagOutput) ToViewTagOutput() ViewTagOutput {
	return o
}

func (o ViewTagOutput) ToViewTagOutputWithContext(ctx context.Context) ViewTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o ViewTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o ViewTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ViewTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o ViewTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o ViewTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ViewTag) string { return v.Value }).(pulumi.StringOutput)
}

type ViewTagArrayOutput struct{ *pulumi.OutputState }

func (ViewTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewTag)(nil)).Elem()
}

func (o ViewTagArrayOutput) ToViewTagArrayOutput() ViewTagArrayOutput {
	return o
}

func (o ViewTagArrayOutput) ToViewTagArrayOutputWithContext(ctx context.Context) ViewTagArrayOutput {
	return o
}

func (o ViewTagArrayOutput) Index(i pulumi.IntInput) ViewTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ViewTag {
		return vs[0].([]ViewTag)[vs[1].(int)]
	}).(ViewTagOutput)
}

type WarehouseTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// WarehouseTagInput is an input type that accepts WarehouseTagArgs and WarehouseTagOutput values.
// You can construct a concrete instance of `WarehouseTagInput` via:
//
//          WarehouseTagArgs{...}
type WarehouseTagInput interface {
	pulumi.Input

	ToWarehouseTagOutput() WarehouseTagOutput
	ToWarehouseTagOutputWithContext(context.Context) WarehouseTagOutput
}

type WarehouseTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (WarehouseTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseTag)(nil)).Elem()
}

func (i WarehouseTagArgs) ToWarehouseTagOutput() WarehouseTagOutput {
	return i.ToWarehouseTagOutputWithContext(context.Background())
}

func (i WarehouseTagArgs) ToWarehouseTagOutputWithContext(ctx context.Context) WarehouseTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseTagOutput)
}

// WarehouseTagArrayInput is an input type that accepts WarehouseTagArray and WarehouseTagArrayOutput values.
// You can construct a concrete instance of `WarehouseTagArrayInput` via:
//
//          WarehouseTagArray{ WarehouseTagArgs{...} }
type WarehouseTagArrayInput interface {
	pulumi.Input

	ToWarehouseTagArrayOutput() WarehouseTagArrayOutput
	ToWarehouseTagArrayOutputWithContext(context.Context) WarehouseTagArrayOutput
}

type WarehouseTagArray []WarehouseTagInput

func (WarehouseTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WarehouseTag)(nil)).Elem()
}

func (i WarehouseTagArray) ToWarehouseTagArrayOutput() WarehouseTagArrayOutput {
	return i.ToWarehouseTagArrayOutputWithContext(context.Background())
}

func (i WarehouseTagArray) ToWarehouseTagArrayOutputWithContext(ctx context.Context) WarehouseTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseTagArrayOutput)
}

type WarehouseTagOutput struct{ *pulumi.OutputState }

func (WarehouseTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseTag)(nil)).Elem()
}

func (o WarehouseTagOutput) ToWarehouseTagOutput() WarehouseTagOutput {
	return o
}

func (o WarehouseTagOutput) ToWarehouseTagOutputWithContext(ctx context.Context) WarehouseTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o WarehouseTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o WarehouseTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o WarehouseTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o WarehouseTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseTag) string { return v.Value }).(pulumi.StringOutput)
}

type WarehouseTagArrayOutput struct{ *pulumi.OutputState }

func (WarehouseTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WarehouseTag)(nil)).Elem()
}

func (o WarehouseTagArrayOutput) ToWarehouseTagArrayOutput() WarehouseTagArrayOutput {
	return o
}

func (o WarehouseTagArrayOutput) ToWarehouseTagArrayOutputWithContext(ctx context.Context) WarehouseTagArrayOutput {
	return o
}

func (o WarehouseTagArrayOutput) Index(i pulumi.IntInput) WarehouseTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WarehouseTag {
		return vs[0].([]WarehouseTag)[vs[1].(int)]
	}).(WarehouseTagOutput)
}

type GetDatabasesDatabase struct {
	Comment       string `pulumi:"comment"`
	CreatedOn     string `pulumi:"createdOn"`
	IsCurrent     bool   `pulumi:"isCurrent"`
	IsDefault     bool   `pulumi:"isDefault"`
	Name          string `pulumi:"name"`
	Options       string `pulumi:"options"`
	Origin        string `pulumi:"origin"`
	Owner         string `pulumi:"owner"`
	RetentionTime int    `pulumi:"retentionTime"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//          GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	Comment       pulumi.StringInput `pulumi:"comment"`
	CreatedOn     pulumi.StringInput `pulumi:"createdOn"`
	IsCurrent     pulumi.BoolInput   `pulumi:"isCurrent"`
	IsDefault     pulumi.BoolInput   `pulumi:"isDefault"`
	Name          pulumi.StringInput `pulumi:"name"`
	Options       pulumi.StringInput `pulumi:"options"`
	Origin        pulumi.StringInput `pulumi:"origin"`
	Owner         pulumi.StringInput `pulumi:"owner"`
	RetentionTime pulumi.IntInput    `pulumi:"retentionTime"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//          GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) IsCurrent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.IsCurrent }).(pulumi.BoolOutput)
}

func (o GetDatabasesDatabaseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o GetDatabasesDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Options }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Origin }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) RetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) int { return v.RetentionTime }).(pulumi.IntOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetExternalFunctionsExternalFunction struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Language string `pulumi:"language"`
	Name     string `pulumi:"name"`
	// The schema from which to return the external functions from.
	Schema string `pulumi:"schema"`
}

// GetExternalFunctionsExternalFunctionInput is an input type that accepts GetExternalFunctionsExternalFunctionArgs and GetExternalFunctionsExternalFunctionOutput values.
// You can construct a concrete instance of `GetExternalFunctionsExternalFunctionInput` via:
//
//          GetExternalFunctionsExternalFunctionArgs{...}
type GetExternalFunctionsExternalFunctionInput interface {
	pulumi.Input

	ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput
	ToGetExternalFunctionsExternalFunctionOutputWithContext(context.Context) GetExternalFunctionsExternalFunctionOutput
}

type GetExternalFunctionsExternalFunctionArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Language pulumi.StringInput `pulumi:"language"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the external functions from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetExternalFunctionsExternalFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (i GetExternalFunctionsExternalFunctionArgs) ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput {
	return i.ToGetExternalFunctionsExternalFunctionOutputWithContext(context.Background())
}

func (i GetExternalFunctionsExternalFunctionArgs) ToGetExternalFunctionsExternalFunctionOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalFunctionsExternalFunctionOutput)
}

// GetExternalFunctionsExternalFunctionArrayInput is an input type that accepts GetExternalFunctionsExternalFunctionArray and GetExternalFunctionsExternalFunctionArrayOutput values.
// You can construct a concrete instance of `GetExternalFunctionsExternalFunctionArrayInput` via:
//
//          GetExternalFunctionsExternalFunctionArray{ GetExternalFunctionsExternalFunctionArgs{...} }
type GetExternalFunctionsExternalFunctionArrayInput interface {
	pulumi.Input

	ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput
	ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(context.Context) GetExternalFunctionsExternalFunctionArrayOutput
}

type GetExternalFunctionsExternalFunctionArray []GetExternalFunctionsExternalFunctionInput

func (GetExternalFunctionsExternalFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (i GetExternalFunctionsExternalFunctionArray) ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput {
	return i.ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(context.Background())
}

func (i GetExternalFunctionsExternalFunctionArray) ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalFunctionsExternalFunctionArrayOutput)
}

type GetExternalFunctionsExternalFunctionOutput struct{ *pulumi.OutputState }

func (GetExternalFunctionsExternalFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (o GetExternalFunctionsExternalFunctionOutput) ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionOutput) ToGetExternalFunctionsExternalFunctionOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetExternalFunctionsExternalFunctionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetExternalFunctionsExternalFunctionOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Language }).(pulumi.StringOutput)
}

func (o GetExternalFunctionsExternalFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the external functions from.
func (o GetExternalFunctionsExternalFunctionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Schema }).(pulumi.StringOutput)
}

type GetExternalFunctionsExternalFunctionArrayOutput struct{ *pulumi.OutputState }

func (GetExternalFunctionsExternalFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionArrayOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) Index(i pulumi.IntInput) GetExternalFunctionsExternalFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExternalFunctionsExternalFunction {
		return vs[0].([]GetExternalFunctionsExternalFunction)[vs[1].(int)]
	}).(GetExternalFunctionsExternalFunctionOutput)
}

type GetExternalTablesExternalTable struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the external tables from.
	Schema string `pulumi:"schema"`
}

// GetExternalTablesExternalTableInput is an input type that accepts GetExternalTablesExternalTableArgs and GetExternalTablesExternalTableOutput values.
// You can construct a concrete instance of `GetExternalTablesExternalTableInput` via:
//
//          GetExternalTablesExternalTableArgs{...}
type GetExternalTablesExternalTableInput interface {
	pulumi.Input

	ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput
	ToGetExternalTablesExternalTableOutputWithContext(context.Context) GetExternalTablesExternalTableOutput
}

type GetExternalTablesExternalTableArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the external tables from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetExternalTablesExternalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalTablesExternalTable)(nil)).Elem()
}

func (i GetExternalTablesExternalTableArgs) ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput {
	return i.ToGetExternalTablesExternalTableOutputWithContext(context.Background())
}

func (i GetExternalTablesExternalTableArgs) ToGetExternalTablesExternalTableOutputWithContext(ctx context.Context) GetExternalTablesExternalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalTablesExternalTableOutput)
}

// GetExternalTablesExternalTableArrayInput is an input type that accepts GetExternalTablesExternalTableArray and GetExternalTablesExternalTableArrayOutput values.
// You can construct a concrete instance of `GetExternalTablesExternalTableArrayInput` via:
//
//          GetExternalTablesExternalTableArray{ GetExternalTablesExternalTableArgs{...} }
type GetExternalTablesExternalTableArrayInput interface {
	pulumi.Input

	ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput
	ToGetExternalTablesExternalTableArrayOutputWithContext(context.Context) GetExternalTablesExternalTableArrayOutput
}

type GetExternalTablesExternalTableArray []GetExternalTablesExternalTableInput

func (GetExternalTablesExternalTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalTablesExternalTable)(nil)).Elem()
}

func (i GetExternalTablesExternalTableArray) ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput {
	return i.ToGetExternalTablesExternalTableArrayOutputWithContext(context.Background())
}

func (i GetExternalTablesExternalTableArray) ToGetExternalTablesExternalTableArrayOutputWithContext(ctx context.Context) GetExternalTablesExternalTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalTablesExternalTableArrayOutput)
}

type GetExternalTablesExternalTableOutput struct{ *pulumi.OutputState }

func (GetExternalTablesExternalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalTablesExternalTable)(nil)).Elem()
}

func (o GetExternalTablesExternalTableOutput) ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput {
	return o
}

func (o GetExternalTablesExternalTableOutput) ToGetExternalTablesExternalTableOutputWithContext(ctx context.Context) GetExternalTablesExternalTableOutput {
	return o
}

func (o GetExternalTablesExternalTableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetExternalTablesExternalTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetExternalTablesExternalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the external tables from.
func (o GetExternalTablesExternalTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetExternalTablesExternalTableArrayOutput struct{ *pulumi.OutputState }

func (GetExternalTablesExternalTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalTablesExternalTable)(nil)).Elem()
}

func (o GetExternalTablesExternalTableArrayOutput) ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput {
	return o
}

func (o GetExternalTablesExternalTableArrayOutput) ToGetExternalTablesExternalTableArrayOutputWithContext(ctx context.Context) GetExternalTablesExternalTableArrayOutput {
	return o
}

func (o GetExternalTablesExternalTableArrayOutput) Index(i pulumi.IntInput) GetExternalTablesExternalTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExternalTablesExternalTable {
		return vs[0].([]GetExternalTablesExternalTable)[vs[1].(int)]
	}).(GetExternalTablesExternalTableOutput)
}

type GetFileFormatsFileFormat struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	FormatType string `pulumi:"formatType"`
	Name       string `pulumi:"name"`
	// The schema from which to return the file formats from.
	Schema string `pulumi:"schema"`
}

// GetFileFormatsFileFormatInput is an input type that accepts GetFileFormatsFileFormatArgs and GetFileFormatsFileFormatOutput values.
// You can construct a concrete instance of `GetFileFormatsFileFormatInput` via:
//
//          GetFileFormatsFileFormatArgs{...}
type GetFileFormatsFileFormatInput interface {
	pulumi.Input

	ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput
	ToGetFileFormatsFileFormatOutputWithContext(context.Context) GetFileFormatsFileFormatOutput
}

type GetFileFormatsFileFormatArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	FormatType pulumi.StringInput `pulumi:"formatType"`
	Name       pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the file formats from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetFileFormatsFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileFormatsFileFormat)(nil)).Elem()
}

func (i GetFileFormatsFileFormatArgs) ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput {
	return i.ToGetFileFormatsFileFormatOutputWithContext(context.Background())
}

func (i GetFileFormatsFileFormatArgs) ToGetFileFormatsFileFormatOutputWithContext(ctx context.Context) GetFileFormatsFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFileFormatsFileFormatOutput)
}

// GetFileFormatsFileFormatArrayInput is an input type that accepts GetFileFormatsFileFormatArray and GetFileFormatsFileFormatArrayOutput values.
// You can construct a concrete instance of `GetFileFormatsFileFormatArrayInput` via:
//
//          GetFileFormatsFileFormatArray{ GetFileFormatsFileFormatArgs{...} }
type GetFileFormatsFileFormatArrayInput interface {
	pulumi.Input

	ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput
	ToGetFileFormatsFileFormatArrayOutputWithContext(context.Context) GetFileFormatsFileFormatArrayOutput
}

type GetFileFormatsFileFormatArray []GetFileFormatsFileFormatInput

func (GetFileFormatsFileFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFileFormatsFileFormat)(nil)).Elem()
}

func (i GetFileFormatsFileFormatArray) ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput {
	return i.ToGetFileFormatsFileFormatArrayOutputWithContext(context.Background())
}

func (i GetFileFormatsFileFormatArray) ToGetFileFormatsFileFormatArrayOutputWithContext(ctx context.Context) GetFileFormatsFileFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFileFormatsFileFormatArrayOutput)
}

type GetFileFormatsFileFormatOutput struct{ *pulumi.OutputState }

func (GetFileFormatsFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileFormatsFileFormat)(nil)).Elem()
}

func (o GetFileFormatsFileFormatOutput) ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput {
	return o
}

func (o GetFileFormatsFileFormatOutput) ToGetFileFormatsFileFormatOutputWithContext(ctx context.Context) GetFileFormatsFileFormatOutput {
	return o
}

func (o GetFileFormatsFileFormatOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetFileFormatsFileFormatOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetFileFormatsFileFormatOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.FormatType }).(pulumi.StringOutput)
}

func (o GetFileFormatsFileFormatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the file formats from.
func (o GetFileFormatsFileFormatOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Schema }).(pulumi.StringOutput)
}

type GetFileFormatsFileFormatArrayOutput struct{ *pulumi.OutputState }

func (GetFileFormatsFileFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFileFormatsFileFormat)(nil)).Elem()
}

func (o GetFileFormatsFileFormatArrayOutput) ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput {
	return o
}

func (o GetFileFormatsFileFormatArrayOutput) ToGetFileFormatsFileFormatArrayOutputWithContext(ctx context.Context) GetFileFormatsFileFormatArrayOutput {
	return o
}

func (o GetFileFormatsFileFormatArrayOutput) Index(i pulumi.IntInput) GetFileFormatsFileFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFileFormatsFileFormat {
		return vs[0].([]GetFileFormatsFileFormat)[vs[1].(int)]
	}).(GetFileFormatsFileFormatOutput)
}

type GetFunctionsFunction struct {
	ArgumentTypes []string `pulumi:"argumentTypes"`
	Comment       string   `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	Name       string `pulumi:"name"`
	ReturnType string `pulumi:"returnType"`
	// The schema from which to return the functions from.
	Schema string `pulumi:"schema"`
}

// GetFunctionsFunctionInput is an input type that accepts GetFunctionsFunctionArgs and GetFunctionsFunctionOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionInput` via:
//
//          GetFunctionsFunctionArgs{...}
type GetFunctionsFunctionInput interface {
	pulumi.Input

	ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput
	ToGetFunctionsFunctionOutputWithContext(context.Context) GetFunctionsFunctionOutput
}

type GetFunctionsFunctionArgs struct {
	ArgumentTypes pulumi.StringArrayInput `pulumi:"argumentTypes"`
	Comment       pulumi.StringInput      `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	Name       pulumi.StringInput `pulumi:"name"`
	ReturnType pulumi.StringInput `pulumi:"returnType"`
	// The schema from which to return the functions from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetFunctionsFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return i.ToGetFunctionsFunctionOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionOutput)
}

// GetFunctionsFunctionArrayInput is an input type that accepts GetFunctionsFunctionArray and GetFunctionsFunctionArrayOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionArrayInput` via:
//
//          GetFunctionsFunctionArray{ GetFunctionsFunctionArgs{...} }
type GetFunctionsFunctionArrayInput interface {
	pulumi.Input

	ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput
	ToGetFunctionsFunctionArrayOutputWithContext(context.Context) GetFunctionsFunctionArrayOutput
}

type GetFunctionsFunctionArray []GetFunctionsFunctionInput

func (GetFunctionsFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return i.ToGetFunctionsFunctionArrayOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionArrayOutput)
}

type GetFunctionsFunctionOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return o
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return o
}

func (o GetFunctionsFunctionOutput) ArgumentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFunctionsFunction) []string { return v.ArgumentTypes }).(pulumi.StringArrayOutput)
}

func (o GetFunctionsFunctionOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetFunctionsFunctionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetFunctionsFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFunctionsFunctionOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.ReturnType }).(pulumi.StringOutput)
}

// The schema from which to return the functions from.
func (o GetFunctionsFunctionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Schema }).(pulumi.StringOutput)
}

type GetFunctionsFunctionArrayOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) Index(i pulumi.IntInput) GetFunctionsFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFunctionsFunction {
		return vs[0].([]GetFunctionsFunction)[vs[1].(int)]
	}).(GetFunctionsFunctionOutput)
}

type GetMaskingPoliciesMaskingPolicy struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Kind     string `pulumi:"kind"`
	Name     string `pulumi:"name"`
	// The schema from which to return the maskingPolicies from.
	Schema string `pulumi:"schema"`
}

// GetMaskingPoliciesMaskingPolicyInput is an input type that accepts GetMaskingPoliciesMaskingPolicyArgs and GetMaskingPoliciesMaskingPolicyOutput values.
// You can construct a concrete instance of `GetMaskingPoliciesMaskingPolicyInput` via:
//
//          GetMaskingPoliciesMaskingPolicyArgs{...}
type GetMaskingPoliciesMaskingPolicyInput interface {
	pulumi.Input

	ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput
	ToGetMaskingPoliciesMaskingPolicyOutputWithContext(context.Context) GetMaskingPoliciesMaskingPolicyOutput
}

type GetMaskingPoliciesMaskingPolicyArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Kind     pulumi.StringInput `pulumi:"kind"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the maskingPolicies from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetMaskingPoliciesMaskingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (i GetMaskingPoliciesMaskingPolicyArgs) ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput {
	return i.ToGetMaskingPoliciesMaskingPolicyOutputWithContext(context.Background())
}

func (i GetMaskingPoliciesMaskingPolicyArgs) ToGetMaskingPoliciesMaskingPolicyOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaskingPoliciesMaskingPolicyOutput)
}

// GetMaskingPoliciesMaskingPolicyArrayInput is an input type that accepts GetMaskingPoliciesMaskingPolicyArray and GetMaskingPoliciesMaskingPolicyArrayOutput values.
// You can construct a concrete instance of `GetMaskingPoliciesMaskingPolicyArrayInput` via:
//
//          GetMaskingPoliciesMaskingPolicyArray{ GetMaskingPoliciesMaskingPolicyArgs{...} }
type GetMaskingPoliciesMaskingPolicyArrayInput interface {
	pulumi.Input

	ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput
	ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput
}

type GetMaskingPoliciesMaskingPolicyArray []GetMaskingPoliciesMaskingPolicyInput

func (GetMaskingPoliciesMaskingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (i GetMaskingPoliciesMaskingPolicyArray) ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput {
	return i.ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(context.Background())
}

func (i GetMaskingPoliciesMaskingPolicyArray) ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaskingPoliciesMaskingPolicyArrayOutput)
}

type GetMaskingPoliciesMaskingPolicyOutput struct{ *pulumi.OutputState }

func (GetMaskingPoliciesMaskingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (o GetMaskingPoliciesMaskingPolicyOutput) ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyOutput) ToGetMaskingPoliciesMaskingPolicyOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetMaskingPoliciesMaskingPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the maskingPolicies from.
func (o GetMaskingPoliciesMaskingPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Schema }).(pulumi.StringOutput)
}

type GetMaskingPoliciesMaskingPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetMaskingPoliciesMaskingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) Index(i pulumi.IntInput) GetMaskingPoliciesMaskingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaskingPoliciesMaskingPolicy {
		return vs[0].([]GetMaskingPoliciesMaskingPolicy)[vs[1].(int)]
	}).(GetMaskingPoliciesMaskingPolicyOutput)
}

type GetMaterializedViewsMaterializedView struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the views from.
	Schema string `pulumi:"schema"`
}

// GetMaterializedViewsMaterializedViewInput is an input type that accepts GetMaterializedViewsMaterializedViewArgs and GetMaterializedViewsMaterializedViewOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewInput` via:
//
//          GetMaterializedViewsMaterializedViewArgs{...}
type GetMaterializedViewsMaterializedViewInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput
	ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewOutput
}

type GetMaterializedViewsMaterializedViewArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the views from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetMaterializedViewsMaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return i.ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewOutput)
}

// GetMaterializedViewsMaterializedViewArrayInput is an input type that accepts GetMaterializedViewsMaterializedViewArray and GetMaterializedViewsMaterializedViewArrayOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewArrayInput` via:
//
//          GetMaterializedViewsMaterializedViewArray{ GetMaterializedViewsMaterializedViewArgs{...} }
type GetMaterializedViewsMaterializedViewArrayInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput
	ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewArrayOutput
}

type GetMaterializedViewsMaterializedViewArray []GetMaterializedViewsMaterializedViewInput

func (GetMaterializedViewsMaterializedViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return i.ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewArrayOutput)
}

type GetMaterializedViewsMaterializedViewOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetMaterializedViewsMaterializedViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the views from.
func (o GetMaterializedViewsMaterializedViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetMaterializedViewsMaterializedViewArrayOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) Index(i pulumi.IntInput) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaterializedViewsMaterializedView {
		return vs[0].([]GetMaterializedViewsMaterializedView)[vs[1].(int)]
	}).(GetMaterializedViewsMaterializedViewOutput)
}

type GetPipesPipe struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database    string `pulumi:"database"`
	Integration string `pulumi:"integration"`
	Name        string `pulumi:"name"`
	// The schema from which to return the pipes from.
	Schema string `pulumi:"schema"`
}

// GetPipesPipeInput is an input type that accepts GetPipesPipeArgs and GetPipesPipeOutput values.
// You can construct a concrete instance of `GetPipesPipeInput` via:
//
//          GetPipesPipeArgs{...}
type GetPipesPipeInput interface {
	pulumi.Input

	ToGetPipesPipeOutput() GetPipesPipeOutput
	ToGetPipesPipeOutputWithContext(context.Context) GetPipesPipeOutput
}

type GetPipesPipeArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database    pulumi.StringInput `pulumi:"database"`
	Integration pulumi.StringInput `pulumi:"integration"`
	Name        pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the pipes from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetPipesPipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipesPipe)(nil)).Elem()
}

func (i GetPipesPipeArgs) ToGetPipesPipeOutput() GetPipesPipeOutput {
	return i.ToGetPipesPipeOutputWithContext(context.Background())
}

func (i GetPipesPipeArgs) ToGetPipesPipeOutputWithContext(ctx context.Context) GetPipesPipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipesPipeOutput)
}

// GetPipesPipeArrayInput is an input type that accepts GetPipesPipeArray and GetPipesPipeArrayOutput values.
// You can construct a concrete instance of `GetPipesPipeArrayInput` via:
//
//          GetPipesPipeArray{ GetPipesPipeArgs{...} }
type GetPipesPipeArrayInput interface {
	pulumi.Input

	ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput
	ToGetPipesPipeArrayOutputWithContext(context.Context) GetPipesPipeArrayOutput
}

type GetPipesPipeArray []GetPipesPipeInput

func (GetPipesPipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipesPipe)(nil)).Elem()
}

func (i GetPipesPipeArray) ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput {
	return i.ToGetPipesPipeArrayOutputWithContext(context.Background())
}

func (i GetPipesPipeArray) ToGetPipesPipeArrayOutputWithContext(ctx context.Context) GetPipesPipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipesPipeArrayOutput)
}

type GetPipesPipeOutput struct{ *pulumi.OutputState }

func (GetPipesPipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipesPipe)(nil)).Elem()
}

func (o GetPipesPipeOutput) ToGetPipesPipeOutput() GetPipesPipeOutput {
	return o
}

func (o GetPipesPipeOutput) ToGetPipesPipeOutputWithContext(ctx context.Context) GetPipesPipeOutput {
	return o
}

func (o GetPipesPipeOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetPipesPipeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetPipesPipeOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Integration }).(pulumi.StringOutput)
}

func (o GetPipesPipeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the pipes from.
func (o GetPipesPipeOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Schema }).(pulumi.StringOutput)
}

type GetPipesPipeArrayOutput struct{ *pulumi.OutputState }

func (GetPipesPipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipesPipe)(nil)).Elem()
}

func (o GetPipesPipeArrayOutput) ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput {
	return o
}

func (o GetPipesPipeArrayOutput) ToGetPipesPipeArrayOutputWithContext(ctx context.Context) GetPipesPipeArrayOutput {
	return o
}

func (o GetPipesPipeArrayOutput) Index(i pulumi.IntInput) GetPipesPipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPipesPipe {
		return vs[0].([]GetPipesPipe)[vs[1].(int)]
	}).(GetPipesPipeOutput)
}

type GetProceduresProcedure struct {
	ArgumentTypes []string `pulumi:"argumentTypes"`
	Comment       string   `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	Name       string `pulumi:"name"`
	ReturnType string `pulumi:"returnType"`
	// The schema from which to return the procedures from.
	Schema string `pulumi:"schema"`
}

// GetProceduresProcedureInput is an input type that accepts GetProceduresProcedureArgs and GetProceduresProcedureOutput values.
// You can construct a concrete instance of `GetProceduresProcedureInput` via:
//
//          GetProceduresProcedureArgs{...}
type GetProceduresProcedureInput interface {
	pulumi.Input

	ToGetProceduresProcedureOutput() GetProceduresProcedureOutput
	ToGetProceduresProcedureOutputWithContext(context.Context) GetProceduresProcedureOutput
}

type GetProceduresProcedureArgs struct {
	ArgumentTypes pulumi.StringArrayInput `pulumi:"argumentTypes"`
	Comment       pulumi.StringInput      `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	Name       pulumi.StringInput `pulumi:"name"`
	ReturnType pulumi.StringInput `pulumi:"returnType"`
	// The schema from which to return the procedures from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetProceduresProcedureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProceduresProcedure)(nil)).Elem()
}

func (i GetProceduresProcedureArgs) ToGetProceduresProcedureOutput() GetProceduresProcedureOutput {
	return i.ToGetProceduresProcedureOutputWithContext(context.Background())
}

func (i GetProceduresProcedureArgs) ToGetProceduresProcedureOutputWithContext(ctx context.Context) GetProceduresProcedureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProceduresProcedureOutput)
}

// GetProceduresProcedureArrayInput is an input type that accepts GetProceduresProcedureArray and GetProceduresProcedureArrayOutput values.
// You can construct a concrete instance of `GetProceduresProcedureArrayInput` via:
//
//          GetProceduresProcedureArray{ GetProceduresProcedureArgs{...} }
type GetProceduresProcedureArrayInput interface {
	pulumi.Input

	ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput
	ToGetProceduresProcedureArrayOutputWithContext(context.Context) GetProceduresProcedureArrayOutput
}

type GetProceduresProcedureArray []GetProceduresProcedureInput

func (GetProceduresProcedureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProceduresProcedure)(nil)).Elem()
}

func (i GetProceduresProcedureArray) ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput {
	return i.ToGetProceduresProcedureArrayOutputWithContext(context.Background())
}

func (i GetProceduresProcedureArray) ToGetProceduresProcedureArrayOutputWithContext(ctx context.Context) GetProceduresProcedureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProceduresProcedureArrayOutput)
}

type GetProceduresProcedureOutput struct{ *pulumi.OutputState }

func (GetProceduresProcedureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProceduresProcedure)(nil)).Elem()
}

func (o GetProceduresProcedureOutput) ToGetProceduresProcedureOutput() GetProceduresProcedureOutput {
	return o
}

func (o GetProceduresProcedureOutput) ToGetProceduresProcedureOutputWithContext(ctx context.Context) GetProceduresProcedureOutput {
	return o
}

func (o GetProceduresProcedureOutput) ArgumentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProceduresProcedure) []string { return v.ArgumentTypes }).(pulumi.StringArrayOutput)
}

func (o GetProceduresProcedureOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetProceduresProcedureOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetProceduresProcedureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProceduresProcedureOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.ReturnType }).(pulumi.StringOutput)
}

// The schema from which to return the procedures from.
func (o GetProceduresProcedureOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Schema }).(pulumi.StringOutput)
}

type GetProceduresProcedureArrayOutput struct{ *pulumi.OutputState }

func (GetProceduresProcedureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProceduresProcedure)(nil)).Elem()
}

func (o GetProceduresProcedureArrayOutput) ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput {
	return o
}

func (o GetProceduresProcedureArrayOutput) ToGetProceduresProcedureArrayOutputWithContext(ctx context.Context) GetProceduresProcedureArrayOutput {
	return o
}

func (o GetProceduresProcedureArrayOutput) Index(i pulumi.IntInput) GetProceduresProcedureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProceduresProcedure {
		return vs[0].([]GetProceduresProcedure)[vs[1].(int)]
	}).(GetProceduresProcedureOutput)
}

type GetResourceMonitorsResourceMonitor struct {
	Comment     string `pulumi:"comment"`
	CreditQuota string `pulumi:"creditQuota"`
	Frequency   string `pulumi:"frequency"`
	Name        string `pulumi:"name"`
}

// GetResourceMonitorsResourceMonitorInput is an input type that accepts GetResourceMonitorsResourceMonitorArgs and GetResourceMonitorsResourceMonitorOutput values.
// You can construct a concrete instance of `GetResourceMonitorsResourceMonitorInput` via:
//
//          GetResourceMonitorsResourceMonitorArgs{...}
type GetResourceMonitorsResourceMonitorInput interface {
	pulumi.Input

	ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput
	ToGetResourceMonitorsResourceMonitorOutputWithContext(context.Context) GetResourceMonitorsResourceMonitorOutput
}

type GetResourceMonitorsResourceMonitorArgs struct {
	Comment     pulumi.StringInput `pulumi:"comment"`
	CreditQuota pulumi.StringInput `pulumi:"creditQuota"`
	Frequency   pulumi.StringInput `pulumi:"frequency"`
	Name        pulumi.StringInput `pulumi:"name"`
}

func (GetResourceMonitorsResourceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (i GetResourceMonitorsResourceMonitorArgs) ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput {
	return i.ToGetResourceMonitorsResourceMonitorOutputWithContext(context.Background())
}

func (i GetResourceMonitorsResourceMonitorArgs) ToGetResourceMonitorsResourceMonitorOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceMonitorsResourceMonitorOutput)
}

// GetResourceMonitorsResourceMonitorArrayInput is an input type that accepts GetResourceMonitorsResourceMonitorArray and GetResourceMonitorsResourceMonitorArrayOutput values.
// You can construct a concrete instance of `GetResourceMonitorsResourceMonitorArrayInput` via:
//
//          GetResourceMonitorsResourceMonitorArray{ GetResourceMonitorsResourceMonitorArgs{...} }
type GetResourceMonitorsResourceMonitorArrayInput interface {
	pulumi.Input

	ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput
	ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(context.Context) GetResourceMonitorsResourceMonitorArrayOutput
}

type GetResourceMonitorsResourceMonitorArray []GetResourceMonitorsResourceMonitorInput

func (GetResourceMonitorsResourceMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (i GetResourceMonitorsResourceMonitorArray) ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput {
	return i.ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(context.Background())
}

func (i GetResourceMonitorsResourceMonitorArray) ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceMonitorsResourceMonitorArrayOutput)
}

type GetResourceMonitorsResourceMonitorOutput struct{ *pulumi.OutputState }

func (GetResourceMonitorsResourceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (o GetResourceMonitorsResourceMonitorOutput) ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorOutput) ToGetResourceMonitorsResourceMonitorOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) CreditQuota() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.CreditQuota }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Frequency }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Name }).(pulumi.StringOutput)
}

type GetResourceMonitorsResourceMonitorArrayOutput struct{ *pulumi.OutputState }

func (GetResourceMonitorsResourceMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorArrayOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) Index(i pulumi.IntInput) GetResourceMonitorsResourceMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceMonitorsResourceMonitor {
		return vs[0].([]GetResourceMonitorsResourceMonitor)[vs[1].(int)]
	}).(GetResourceMonitorsResourceMonitorOutput)
}

type GetRowAccessPoliciesRowAccessPolicy struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the row access policyfrom.
	Schema string `pulumi:"schema"`
}

// GetRowAccessPoliciesRowAccessPolicyInput is an input type that accepts GetRowAccessPoliciesRowAccessPolicyArgs and GetRowAccessPoliciesRowAccessPolicyOutput values.
// You can construct a concrete instance of `GetRowAccessPoliciesRowAccessPolicyInput` via:
//
//          GetRowAccessPoliciesRowAccessPolicyArgs{...}
type GetRowAccessPoliciesRowAccessPolicyInput interface {
	pulumi.Input

	ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput
	ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(context.Context) GetRowAccessPoliciesRowAccessPolicyOutput
}

type GetRowAccessPoliciesRowAccessPolicyArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the row access policyfrom.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetRowAccessPoliciesRowAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (i GetRowAccessPoliciesRowAccessPolicyArgs) ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput {
	return i.ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(context.Background())
}

func (i GetRowAccessPoliciesRowAccessPolicyArgs) ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRowAccessPoliciesRowAccessPolicyOutput)
}

// GetRowAccessPoliciesRowAccessPolicyArrayInput is an input type that accepts GetRowAccessPoliciesRowAccessPolicyArray and GetRowAccessPoliciesRowAccessPolicyArrayOutput values.
// You can construct a concrete instance of `GetRowAccessPoliciesRowAccessPolicyArrayInput` via:
//
//          GetRowAccessPoliciesRowAccessPolicyArray{ GetRowAccessPoliciesRowAccessPolicyArgs{...} }
type GetRowAccessPoliciesRowAccessPolicyArrayInput interface {
	pulumi.Input

	ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput
	ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput
}

type GetRowAccessPoliciesRowAccessPolicyArray []GetRowAccessPoliciesRowAccessPolicyInput

func (GetRowAccessPoliciesRowAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (i GetRowAccessPoliciesRowAccessPolicyArray) ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return i.ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(context.Background())
}

func (i GetRowAccessPoliciesRowAccessPolicyArray) ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRowAccessPoliciesRowAccessPolicyArrayOutput)
}

type GetRowAccessPoliciesRowAccessPolicyOutput struct{ *pulumi.OutputState }

func (GetRowAccessPoliciesRowAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetRowAccessPoliciesRowAccessPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the row access policyfrom.
func (o GetRowAccessPoliciesRowAccessPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Schema }).(pulumi.StringOutput)
}

type GetRowAccessPoliciesRowAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRowAccessPoliciesRowAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) Index(i pulumi.IntInput) GetRowAccessPoliciesRowAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRowAccessPoliciesRowAccessPolicy {
		return vs[0].([]GetRowAccessPoliciesRowAccessPolicy)[vs[1].(int)]
	}).(GetRowAccessPoliciesRowAccessPolicyOutput)
}

type GetSchemasSchema struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//          GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//          GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetSchemasSchemaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetSchemasSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Name }).(pulumi.StringOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetSequencesSequence struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the sequences from.
	Schema string `pulumi:"schema"`
}

// GetSequencesSequenceInput is an input type that accepts GetSequencesSequenceArgs and GetSequencesSequenceOutput values.
// You can construct a concrete instance of `GetSequencesSequenceInput` via:
//
//          GetSequencesSequenceArgs{...}
type GetSequencesSequenceInput interface {
	pulumi.Input

	ToGetSequencesSequenceOutput() GetSequencesSequenceOutput
	ToGetSequencesSequenceOutputWithContext(context.Context) GetSequencesSequenceOutput
}

type GetSequencesSequenceArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the sequences from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetSequencesSequenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return i.ToGetSequencesSequenceOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceOutput)
}

// GetSequencesSequenceArrayInput is an input type that accepts GetSequencesSequenceArray and GetSequencesSequenceArrayOutput values.
// You can construct a concrete instance of `GetSequencesSequenceArrayInput` via:
//
//          GetSequencesSequenceArray{ GetSequencesSequenceArgs{...} }
type GetSequencesSequenceArrayInput interface {
	pulumi.Input

	ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput
	ToGetSequencesSequenceArrayOutputWithContext(context.Context) GetSequencesSequenceArrayOutput
}

type GetSequencesSequenceArray []GetSequencesSequenceInput

func (GetSequencesSequenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return i.ToGetSequencesSequenceArrayOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceArrayOutput)
}

type GetSequencesSequenceOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetSequencesSequenceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetSequencesSequenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the sequences from.
func (o GetSequencesSequenceOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Schema }).(pulumi.StringOutput)
}

type GetSequencesSequenceArrayOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) Index(i pulumi.IntInput) GetSequencesSequenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSequencesSequence {
		return vs[0].([]GetSequencesSequence)[vs[1].(int)]
	}).(GetSequencesSequenceOutput)
}

type GetStagesStage struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the stages from.
	Schema             string `pulumi:"schema"`
	StorageIntegration string `pulumi:"storageIntegration"`
}

// GetStagesStageInput is an input type that accepts GetStagesStageArgs and GetStagesStageOutput values.
// You can construct a concrete instance of `GetStagesStageInput` via:
//
//          GetStagesStageArgs{...}
type GetStagesStageInput interface {
	pulumi.Input

	ToGetStagesStageOutput() GetStagesStageOutput
	ToGetStagesStageOutputWithContext(context.Context) GetStagesStageOutput
}

type GetStagesStageArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the stages from.
	Schema             pulumi.StringInput `pulumi:"schema"`
	StorageIntegration pulumi.StringInput `pulumi:"storageIntegration"`
}

func (GetStagesStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStagesStage)(nil)).Elem()
}

func (i GetStagesStageArgs) ToGetStagesStageOutput() GetStagesStageOutput {
	return i.ToGetStagesStageOutputWithContext(context.Background())
}

func (i GetStagesStageArgs) ToGetStagesStageOutputWithContext(ctx context.Context) GetStagesStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStagesStageOutput)
}

// GetStagesStageArrayInput is an input type that accepts GetStagesStageArray and GetStagesStageArrayOutput values.
// You can construct a concrete instance of `GetStagesStageArrayInput` via:
//
//          GetStagesStageArray{ GetStagesStageArgs{...} }
type GetStagesStageArrayInput interface {
	pulumi.Input

	ToGetStagesStageArrayOutput() GetStagesStageArrayOutput
	ToGetStagesStageArrayOutputWithContext(context.Context) GetStagesStageArrayOutput
}

type GetStagesStageArray []GetStagesStageInput

func (GetStagesStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStagesStage)(nil)).Elem()
}

func (i GetStagesStageArray) ToGetStagesStageArrayOutput() GetStagesStageArrayOutput {
	return i.ToGetStagesStageArrayOutputWithContext(context.Background())
}

func (i GetStagesStageArray) ToGetStagesStageArrayOutputWithContext(ctx context.Context) GetStagesStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStagesStageArrayOutput)
}

type GetStagesStageOutput struct{ *pulumi.OutputState }

func (GetStagesStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStagesStage)(nil)).Elem()
}

func (o GetStagesStageOutput) ToGetStagesStageOutput() GetStagesStageOutput {
	return o
}

func (o GetStagesStageOutput) ToGetStagesStageOutputWithContext(ctx context.Context) GetStagesStageOutput {
	return o
}

func (o GetStagesStageOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetStagesStageOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetStagesStageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the stages from.
func (o GetStagesStageOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetStagesStageOutput) StorageIntegration() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.StorageIntegration }).(pulumi.StringOutput)
}

type GetStagesStageArrayOutput struct{ *pulumi.OutputState }

func (GetStagesStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStagesStage)(nil)).Elem()
}

func (o GetStagesStageArrayOutput) ToGetStagesStageArrayOutput() GetStagesStageArrayOutput {
	return o
}

func (o GetStagesStageArrayOutput) ToGetStagesStageArrayOutputWithContext(ctx context.Context) GetStagesStageArrayOutput {
	return o
}

func (o GetStagesStageArrayOutput) Index(i pulumi.IntInput) GetStagesStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStagesStage {
		return vs[0].([]GetStagesStage)[vs[1].(int)]
	}).(GetStagesStageOutput)
}

type GetStorageIntegrationsStorageIntegration struct {
	Comment string `pulumi:"comment"`
	Enabled bool   `pulumi:"enabled"`
	Name    string `pulumi:"name"`
	Type    string `pulumi:"type"`
}

// GetStorageIntegrationsStorageIntegrationInput is an input type that accepts GetStorageIntegrationsStorageIntegrationArgs and GetStorageIntegrationsStorageIntegrationOutput values.
// You can construct a concrete instance of `GetStorageIntegrationsStorageIntegrationInput` via:
//
//          GetStorageIntegrationsStorageIntegrationArgs{...}
type GetStorageIntegrationsStorageIntegrationInput interface {
	pulumi.Input

	ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput
	ToGetStorageIntegrationsStorageIntegrationOutputWithContext(context.Context) GetStorageIntegrationsStorageIntegrationOutput
}

type GetStorageIntegrationsStorageIntegrationArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	Name    pulumi.StringInput `pulumi:"name"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (GetStorageIntegrationsStorageIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (i GetStorageIntegrationsStorageIntegrationArgs) ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput {
	return i.ToGetStorageIntegrationsStorageIntegrationOutputWithContext(context.Background())
}

func (i GetStorageIntegrationsStorageIntegrationArgs) ToGetStorageIntegrationsStorageIntegrationOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorageIntegrationsStorageIntegrationOutput)
}

// GetStorageIntegrationsStorageIntegrationArrayInput is an input type that accepts GetStorageIntegrationsStorageIntegrationArray and GetStorageIntegrationsStorageIntegrationArrayOutput values.
// You can construct a concrete instance of `GetStorageIntegrationsStorageIntegrationArrayInput` via:
//
//          GetStorageIntegrationsStorageIntegrationArray{ GetStorageIntegrationsStorageIntegrationArgs{...} }
type GetStorageIntegrationsStorageIntegrationArrayInput interface {
	pulumi.Input

	ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput
	ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput
}

type GetStorageIntegrationsStorageIntegrationArray []GetStorageIntegrationsStorageIntegrationInput

func (GetStorageIntegrationsStorageIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (i GetStorageIntegrationsStorageIntegrationArray) ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput {
	return i.ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(context.Background())
}

func (i GetStorageIntegrationsStorageIntegrationArray) ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorageIntegrationsStorageIntegrationArrayOutput)
}

type GetStorageIntegrationsStorageIntegrationOutput struct{ *pulumi.OutputState }

func (GetStorageIntegrationsStorageIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (o GetStorageIntegrationsStorageIntegrationOutput) ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationOutput) ToGetStorageIntegrationsStorageIntegrationOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Type }).(pulumi.StringOutput)
}

type GetStorageIntegrationsStorageIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GetStorageIntegrationsStorageIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) Index(i pulumi.IntInput) GetStorageIntegrationsStorageIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStorageIntegrationsStorageIntegration {
		return vs[0].([]GetStorageIntegrationsStorageIntegration)[vs[1].(int)]
	}).(GetStorageIntegrationsStorageIntegrationOutput)
}

type GetStreamsStream struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the streams from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the streams from.
	Schema string `pulumi:"schema"`
	Table  string `pulumi:"table"`
}

// GetStreamsStreamInput is an input type that accepts GetStreamsStreamArgs and GetStreamsStreamOutput values.
// You can construct a concrete instance of `GetStreamsStreamInput` via:
//
//          GetStreamsStreamArgs{...}
type GetStreamsStreamInput interface {
	pulumi.Input

	ToGetStreamsStreamOutput() GetStreamsStreamOutput
	ToGetStreamsStreamOutputWithContext(context.Context) GetStreamsStreamOutput
}

type GetStreamsStreamArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the streams from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the streams from.
	Schema pulumi.StringInput `pulumi:"schema"`
	Table  pulumi.StringInput `pulumi:"table"`
}

func (GetStreamsStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsStream)(nil)).Elem()
}

func (i GetStreamsStreamArgs) ToGetStreamsStreamOutput() GetStreamsStreamOutput {
	return i.ToGetStreamsStreamOutputWithContext(context.Background())
}

func (i GetStreamsStreamArgs) ToGetStreamsStreamOutputWithContext(ctx context.Context) GetStreamsStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStreamsStreamOutput)
}

// GetStreamsStreamArrayInput is an input type that accepts GetStreamsStreamArray and GetStreamsStreamArrayOutput values.
// You can construct a concrete instance of `GetStreamsStreamArrayInput` via:
//
//          GetStreamsStreamArray{ GetStreamsStreamArgs{...} }
type GetStreamsStreamArrayInput interface {
	pulumi.Input

	ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput
	ToGetStreamsStreamArrayOutputWithContext(context.Context) GetStreamsStreamArrayOutput
}

type GetStreamsStreamArray []GetStreamsStreamInput

func (GetStreamsStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStreamsStream)(nil)).Elem()
}

func (i GetStreamsStreamArray) ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput {
	return i.ToGetStreamsStreamArrayOutputWithContext(context.Background())
}

func (i GetStreamsStreamArray) ToGetStreamsStreamArrayOutputWithContext(ctx context.Context) GetStreamsStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStreamsStreamArrayOutput)
}

type GetStreamsStreamOutput struct{ *pulumi.OutputState }

func (GetStreamsStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsStream)(nil)).Elem()
}

func (o GetStreamsStreamOutput) ToGetStreamsStreamOutput() GetStreamsStreamOutput {
	return o
}

func (o GetStreamsStreamOutput) ToGetStreamsStreamOutputWithContext(ctx context.Context) GetStreamsStreamOutput {
	return o
}

func (o GetStreamsStreamOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the streams from.
func (o GetStreamsStreamOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetStreamsStreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the streams from.
func (o GetStreamsStreamOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetStreamsStreamOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Table }).(pulumi.StringOutput)
}

type GetStreamsStreamArrayOutput struct{ *pulumi.OutputState }

func (GetStreamsStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStreamsStream)(nil)).Elem()
}

func (o GetStreamsStreamArrayOutput) ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput {
	return o
}

func (o GetStreamsStreamArrayOutput) ToGetStreamsStreamArrayOutputWithContext(ctx context.Context) GetStreamsStreamArrayOutput {
	return o
}

func (o GetStreamsStreamArrayOutput) Index(i pulumi.IntInput) GetStreamsStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStreamsStream {
		return vs[0].([]GetStreamsStream)[vs[1].(int)]
	}).(GetStreamsStreamOutput)
}

type GetTablesTable struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the tables from.
	Schema string `pulumi:"schema"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//          GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the tables from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//          GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetTablesTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the tables from.
func (o GetTablesTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

type GetTasksTask struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the tasks from.
	Schema    string `pulumi:"schema"`
	Warehouse string `pulumi:"warehouse"`
}

// GetTasksTaskInput is an input type that accepts GetTasksTaskArgs and GetTasksTaskOutput values.
// You can construct a concrete instance of `GetTasksTaskInput` via:
//
//          GetTasksTaskArgs{...}
type GetTasksTaskInput interface {
	pulumi.Input

	ToGetTasksTaskOutput() GetTasksTaskOutput
	ToGetTasksTaskOutputWithContext(context.Context) GetTasksTaskOutput
}

type GetTasksTaskArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the tasks from.
	Schema    pulumi.StringInput `pulumi:"schema"`
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (GetTasksTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksTask)(nil)).Elem()
}

func (i GetTasksTaskArgs) ToGetTasksTaskOutput() GetTasksTaskOutput {
	return i.ToGetTasksTaskOutputWithContext(context.Background())
}

func (i GetTasksTaskArgs) ToGetTasksTaskOutputWithContext(ctx context.Context) GetTasksTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTasksTaskOutput)
}

// GetTasksTaskArrayInput is an input type that accepts GetTasksTaskArray and GetTasksTaskArrayOutput values.
// You can construct a concrete instance of `GetTasksTaskArrayInput` via:
//
//          GetTasksTaskArray{ GetTasksTaskArgs{...} }
type GetTasksTaskArrayInput interface {
	pulumi.Input

	ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput
	ToGetTasksTaskArrayOutputWithContext(context.Context) GetTasksTaskArrayOutput
}

type GetTasksTaskArray []GetTasksTaskInput

func (GetTasksTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTasksTask)(nil)).Elem()
}

func (i GetTasksTaskArray) ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput {
	return i.ToGetTasksTaskArrayOutputWithContext(context.Background())
}

func (i GetTasksTaskArray) ToGetTasksTaskArrayOutputWithContext(ctx context.Context) GetTasksTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTasksTaskArrayOutput)
}

type GetTasksTaskOutput struct{ *pulumi.OutputState }

func (GetTasksTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksTask)(nil)).Elem()
}

func (o GetTasksTaskOutput) ToGetTasksTaskOutput() GetTasksTaskOutput {
	return o
}

func (o GetTasksTaskOutput) ToGetTasksTaskOutputWithContext(ctx context.Context) GetTasksTaskOutput {
	return o
}

func (o GetTasksTaskOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetTasksTaskOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetTasksTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the tasks from.
func (o GetTasksTaskOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetTasksTaskOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Warehouse }).(pulumi.StringOutput)
}

type GetTasksTaskArrayOutput struct{ *pulumi.OutputState }

func (GetTasksTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTasksTask)(nil)).Elem()
}

func (o GetTasksTaskArrayOutput) ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput {
	return o
}

func (o GetTasksTaskArrayOutput) ToGetTasksTaskArrayOutputWithContext(ctx context.Context) GetTasksTaskArrayOutput {
	return o
}

func (o GetTasksTaskArrayOutput) Index(i pulumi.IntInput) GetTasksTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTasksTask {
		return vs[0].([]GetTasksTask)[vs[1].(int)]
	}).(GetTasksTaskOutput)
}

type GetViewsView struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the views from.
	Schema string `pulumi:"schema"`
}

// GetViewsViewInput is an input type that accepts GetViewsViewArgs and GetViewsViewOutput values.
// You can construct a concrete instance of `GetViewsViewInput` via:
//
//          GetViewsViewArgs{...}
type GetViewsViewInput interface {
	pulumi.Input

	ToGetViewsViewOutput() GetViewsViewOutput
	ToGetViewsViewOutputWithContext(context.Context) GetViewsViewOutput
}

type GetViewsViewArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the views from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetViewsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArgs) ToGetViewsViewOutput() GetViewsViewOutput {
	return i.ToGetViewsViewOutputWithContext(context.Background())
}

func (i GetViewsViewArgs) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewOutput)
}

// GetViewsViewArrayInput is an input type that accepts GetViewsViewArray and GetViewsViewArrayOutput values.
// You can construct a concrete instance of `GetViewsViewArrayInput` via:
//
//          GetViewsViewArray{ GetViewsViewArgs{...} }
type GetViewsViewArrayInput interface {
	pulumi.Input

	ToGetViewsViewArrayOutput() GetViewsViewArrayOutput
	ToGetViewsViewArrayOutputWithContext(context.Context) GetViewsViewArrayOutput
}

type GetViewsViewArray []GetViewsViewInput

func (GetViewsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return i.ToGetViewsViewArrayOutputWithContext(context.Background())
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewArrayOutput)
}

type GetViewsViewOutput struct{ *pulumi.OutputState }

func (GetViewsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (o GetViewsViewOutput) ToGetViewsViewOutput() GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetViewsViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the views from.
func (o GetViewsViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetViewsViewArrayOutput struct{ *pulumi.OutputState }

func (GetViewsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) Index(i pulumi.IntInput) GetViewsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetViewsView {
		return vs[0].([]GetViewsView)[vs[1].(int)]
	}).(GetViewsViewOutput)
}

type GetWarehousesWarehouse struct {
	Comment       string `pulumi:"comment"`
	Name          string `pulumi:"name"`
	ScalingPolicy string `pulumi:"scalingPolicy"`
	Size          string `pulumi:"size"`
	State         string `pulumi:"state"`
	Type          string `pulumi:"type"`
}

// GetWarehousesWarehouseInput is an input type that accepts GetWarehousesWarehouseArgs and GetWarehousesWarehouseOutput values.
// You can construct a concrete instance of `GetWarehousesWarehouseInput` via:
//
//          GetWarehousesWarehouseArgs{...}
type GetWarehousesWarehouseInput interface {
	pulumi.Input

	ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput
	ToGetWarehousesWarehouseOutputWithContext(context.Context) GetWarehousesWarehouseOutput
}

type GetWarehousesWarehouseArgs struct {
	Comment       pulumi.StringInput `pulumi:"comment"`
	Name          pulumi.StringInput `pulumi:"name"`
	ScalingPolicy pulumi.StringInput `pulumi:"scalingPolicy"`
	Size          pulumi.StringInput `pulumi:"size"`
	State         pulumi.StringInput `pulumi:"state"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetWarehousesWarehouseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWarehousesWarehouse)(nil)).Elem()
}

func (i GetWarehousesWarehouseArgs) ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput {
	return i.ToGetWarehousesWarehouseOutputWithContext(context.Background())
}

func (i GetWarehousesWarehouseArgs) ToGetWarehousesWarehouseOutputWithContext(ctx context.Context) GetWarehousesWarehouseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWarehousesWarehouseOutput)
}

// GetWarehousesWarehouseArrayInput is an input type that accepts GetWarehousesWarehouseArray and GetWarehousesWarehouseArrayOutput values.
// You can construct a concrete instance of `GetWarehousesWarehouseArrayInput` via:
//
//          GetWarehousesWarehouseArray{ GetWarehousesWarehouseArgs{...} }
type GetWarehousesWarehouseArrayInput interface {
	pulumi.Input

	ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput
	ToGetWarehousesWarehouseArrayOutputWithContext(context.Context) GetWarehousesWarehouseArrayOutput
}

type GetWarehousesWarehouseArray []GetWarehousesWarehouseInput

func (GetWarehousesWarehouseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWarehousesWarehouse)(nil)).Elem()
}

func (i GetWarehousesWarehouseArray) ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput {
	return i.ToGetWarehousesWarehouseArrayOutputWithContext(context.Background())
}

func (i GetWarehousesWarehouseArray) ToGetWarehousesWarehouseArrayOutputWithContext(ctx context.Context) GetWarehousesWarehouseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWarehousesWarehouseArrayOutput)
}

type GetWarehousesWarehouseOutput struct{ *pulumi.OutputState }

func (GetWarehousesWarehouseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWarehousesWarehouse)(nil)).Elem()
}

func (o GetWarehousesWarehouseOutput) ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput {
	return o
}

func (o GetWarehousesWarehouseOutput) ToGetWarehousesWarehouseOutputWithContext(ctx context.Context) GetWarehousesWarehouseOutput {
	return o
}

func (o GetWarehousesWarehouseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) ScalingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.ScalingPolicy }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Size }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.State }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Type }).(pulumi.StringOutput)
}

type GetWarehousesWarehouseArrayOutput struct{ *pulumi.OutputState }

func (GetWarehousesWarehouseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWarehousesWarehouse)(nil)).Elem()
}

func (o GetWarehousesWarehouseArrayOutput) ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput {
	return o
}

func (o GetWarehousesWarehouseArrayOutput) ToGetWarehousesWarehouseArrayOutputWithContext(ctx context.Context) GetWarehousesWarehouseArrayOutput {
	return o
}

func (o GetWarehousesWarehouseArrayOutput) Index(i pulumi.IntInput) GetWarehousesWarehouseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWarehousesWarehouse {
		return vs[0].([]GetWarehousesWarehouse)[vs[1].(int)]
	}).(GetWarehousesWarehouseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTagInput)(nil)).Elem(), DatabaseTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTagArrayInput)(nil)).Elem(), DatabaseTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionArgInput)(nil)).Elem(), ExternalFunctionArgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionArgArrayInput)(nil)).Elem(), ExternalFunctionArgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionHeaderInput)(nil)).Elem(), ExternalFunctionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionHeaderArrayInput)(nil)).Elem(), ExternalFunctionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableColumnInput)(nil)).Elem(), ExternalTableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableColumnArrayInput)(nil)).Elem(), ExternalTableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableTagInput)(nil)).Elem(), ExternalTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableTagArrayInput)(nil)).Elem(), ExternalTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgumentInput)(nil)).Elem(), FunctionArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgumentArrayInput)(nil)).Elem(), FunctionArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionGrantArgumentInput)(nil)).Elem(), FunctionGrantArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionGrantArgumentArrayInput)(nil)).Elem(), FunctionGrantArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewTagInput)(nil)).Elem(), MaterializedViewTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewTagArrayInput)(nil)).Elem(), MaterializedViewTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureArgumentInput)(nil)).Elem(), ProcedureArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureArgumentArrayInput)(nil)).Elem(), ProcedureArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureGrantArgumentInput)(nil)).Elem(), ProcedureGrantArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureGrantArgumentArrayInput)(nil)).Elem(), ProcedureGrantArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagInput)(nil)).Elem(), RoleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagArrayInput)(nil)).Elem(), RoleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagInput)(nil)).Elem(), SchemaTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagArrayInput)(nil)).Elem(), SchemaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageTagInput)(nil)).Elem(), StageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageTagArrayInput)(nil)).Elem(), StageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnInput)(nil)).Elem(), TableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnArrayInput)(nil)).Elem(), TableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnDefaultInput)(nil)).Elem(), TableColumnDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnDefaultPtrInput)(nil)).Elem(), TableColumnDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnIdentityInput)(nil)).Elem(), TableColumnIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnIdentityPtrInput)(nil)).Elem(), TableColumnIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyInput)(nil)).Elem(), TablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyPtrInput)(nil)).Elem(), TablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagInput)(nil)).Elem(), TableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagArrayInput)(nil)).Elem(), TableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagInput)(nil)).Elem(), UserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagArrayInput)(nil)).Elem(), UserTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagInput)(nil)).Elem(), ViewTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagArrayInput)(nil)).Elem(), ViewTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehouseTagInput)(nil)).Elem(), WarehouseTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehouseTagArrayInput)(nil)).Elem(), WarehouseTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalFunctionsExternalFunctionInput)(nil)).Elem(), GetExternalFunctionsExternalFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalFunctionsExternalFunctionArrayInput)(nil)).Elem(), GetExternalFunctionsExternalFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalTablesExternalTableInput)(nil)).Elem(), GetExternalTablesExternalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalTablesExternalTableArrayInput)(nil)).Elem(), GetExternalTablesExternalTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFileFormatsFileFormatInput)(nil)).Elem(), GetFileFormatsFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFileFormatsFileFormatArrayInput)(nil)).Elem(), GetFileFormatsFileFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionInput)(nil)).Elem(), GetFunctionsFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionArrayInput)(nil)).Elem(), GetFunctionsFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaskingPoliciesMaskingPolicyInput)(nil)).Elem(), GetMaskingPoliciesMaskingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaskingPoliciesMaskingPolicyArrayInput)(nil)).Elem(), GetMaskingPoliciesMaskingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewArrayInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipesPipeInput)(nil)).Elem(), GetPipesPipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipesPipeArrayInput)(nil)).Elem(), GetPipesPipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProceduresProcedureInput)(nil)).Elem(), GetProceduresProcedureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProceduresProcedureArrayInput)(nil)).Elem(), GetProceduresProcedureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceMonitorsResourceMonitorInput)(nil)).Elem(), GetResourceMonitorsResourceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceMonitorsResourceMonitorArrayInput)(nil)).Elem(), GetResourceMonitorsResourceMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicyInput)(nil)).Elem(), GetRowAccessPoliciesRowAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicyArrayInput)(nil)).Elem(), GetRowAccessPoliciesRowAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaInput)(nil)).Elem(), GetSchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaArrayInput)(nil)).Elem(), GetSchemasSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceInput)(nil)).Elem(), GetSequencesSequenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceArrayInput)(nil)).Elem(), GetSequencesSequenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStagesStageInput)(nil)).Elem(), GetStagesStageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStagesStageArrayInput)(nil)).Elem(), GetStagesStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorageIntegrationsStorageIntegrationInput)(nil)).Elem(), GetStorageIntegrationsStorageIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorageIntegrationsStorageIntegrationArrayInput)(nil)).Elem(), GetStorageIntegrationsStorageIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStreamsStreamInput)(nil)).Elem(), GetStreamsStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStreamsStreamArrayInput)(nil)).Elem(), GetStreamsStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableInput)(nil)).Elem(), GetTablesTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableArrayInput)(nil)).Elem(), GetTablesTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTasksTaskInput)(nil)).Elem(), GetTasksTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTasksTaskArrayInput)(nil)).Elem(), GetTasksTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewInput)(nil)).Elem(), GetViewsViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewArrayInput)(nil)).Elem(), GetViewsViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWarehousesWarehouseInput)(nil)).Elem(), GetWarehousesWarehouseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWarehousesWarehouseArrayInput)(nil)).Elem(), GetWarehousesWarehouseArray{})
	pulumi.RegisterOutputType(DatabaseTagOutput{})
	pulumi.RegisterOutputType(DatabaseTagArrayOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgArrayOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableTagOutput{})
	pulumi.RegisterOutputType(ExternalTableTagArrayOutput{})
	pulumi.RegisterOutputType(FunctionArgumentOutput{})
	pulumi.RegisterOutputType(FunctionArgumentArrayOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(MaterializedViewTagOutput{})
	pulumi.RegisterOutputType(MaterializedViewTagArrayOutput{})
	pulumi.RegisterOutputType(ProcedureArgumentOutput{})
	pulumi.RegisterOutputType(ProcedureArgumentArrayOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(RoleTagOutput{})
	pulumi.RegisterOutputType(RoleTagArrayOutput{})
	pulumi.RegisterOutputType(SchemaTagOutput{})
	pulumi.RegisterOutputType(SchemaTagArrayOutput{})
	pulumi.RegisterOutputType(StageTagOutput{})
	pulumi.RegisterOutputType(StageTagArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
	pulumi.RegisterOutputType(TableColumnDefaultOutput{})
	pulumi.RegisterOutputType(TableColumnDefaultPtrOutput{})
	pulumi.RegisterOutputType(TableColumnIdentityOutput{})
	pulumi.RegisterOutputType(TableColumnIdentityPtrOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(TableTagOutput{})
	pulumi.RegisterOutputType(TableTagArrayOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
	pulumi.RegisterOutputType(ViewTagOutput{})
	pulumi.RegisterOutputType(ViewTagArrayOutput{})
	pulumi.RegisterOutputType(WarehouseTagOutput{})
	pulumi.RegisterOutputType(WarehouseTagArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetExternalFunctionsExternalFunctionOutput{})
	pulumi.RegisterOutputType(GetExternalFunctionsExternalFunctionArrayOutput{})
	pulumi.RegisterOutputType(GetExternalTablesExternalTableOutput{})
	pulumi.RegisterOutputType(GetExternalTablesExternalTableArrayOutput{})
	pulumi.RegisterOutputType(GetFileFormatsFileFormatOutput{})
	pulumi.RegisterOutputType(GetFileFormatsFileFormatArrayOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionArrayOutput{})
	pulumi.RegisterOutputType(GetMaskingPoliciesMaskingPolicyOutput{})
	pulumi.RegisterOutputType(GetMaskingPoliciesMaskingPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewArrayOutput{})
	pulumi.RegisterOutputType(GetPipesPipeOutput{})
	pulumi.RegisterOutputType(GetPipesPipeArrayOutput{})
	pulumi.RegisterOutputType(GetProceduresProcedureOutput{})
	pulumi.RegisterOutputType(GetProceduresProcedureArrayOutput{})
	pulumi.RegisterOutputType(GetResourceMonitorsResourceMonitorOutput{})
	pulumi.RegisterOutputType(GetResourceMonitorsResourceMonitorArrayOutput{})
	pulumi.RegisterOutputType(GetRowAccessPoliciesRowAccessPolicyOutput{})
	pulumi.RegisterOutputType(GetRowAccessPoliciesRowAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceArrayOutput{})
	pulumi.RegisterOutputType(GetStagesStageOutput{})
	pulumi.RegisterOutputType(GetStagesStageArrayOutput{})
	pulumi.RegisterOutputType(GetStorageIntegrationsStorageIntegrationOutput{})
	pulumi.RegisterOutputType(GetStorageIntegrationsStorageIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GetStreamsStreamOutput{})
	pulumi.RegisterOutputType(GetStreamsStreamArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetTasksTaskOutput{})
	pulumi.RegisterOutputType(GetTasksTaskArrayOutput{})
	pulumi.RegisterOutputType(GetViewsViewOutput{})
	pulumi.RegisterOutputType(GetViewsViewArrayOutput{})
	pulumi.RegisterOutputType(GetWarehousesWarehouseOutput{})
	pulumi.RegisterOutputType(GetWarehousesWarehouseArrayOutput{})
}
