// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AlertAlertSchedule struct {
	// Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
	Cron *AlertAlertScheduleCron `pulumi:"cron"`
	// Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
	Interval *int `pulumi:"interval"`
}

// AlertAlertScheduleInput is an input type that accepts AlertAlertScheduleArgs and AlertAlertScheduleOutput values.
// You can construct a concrete instance of `AlertAlertScheduleInput` via:
//
//	AlertAlertScheduleArgs{...}
type AlertAlertScheduleInput interface {
	pulumi.Input

	ToAlertAlertScheduleOutput() AlertAlertScheduleOutput
	ToAlertAlertScheduleOutputWithContext(context.Context) AlertAlertScheduleOutput
}

type AlertAlertScheduleArgs struct {
	// Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
	Cron AlertAlertScheduleCronPtrInput `pulumi:"cron"`
	// Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (AlertAlertScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertSchedule)(nil)).Elem()
}

func (i AlertAlertScheduleArgs) ToAlertAlertScheduleOutput() AlertAlertScheduleOutput {
	return i.ToAlertAlertScheduleOutputWithContext(context.Background())
}

func (i AlertAlertScheduleArgs) ToAlertAlertScheduleOutputWithContext(ctx context.Context) AlertAlertScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertScheduleOutput)
}

func (i AlertAlertScheduleArgs) ToAlertAlertSchedulePtrOutput() AlertAlertSchedulePtrOutput {
	return i.ToAlertAlertSchedulePtrOutputWithContext(context.Background())
}

func (i AlertAlertScheduleArgs) ToAlertAlertSchedulePtrOutputWithContext(ctx context.Context) AlertAlertSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertScheduleOutput).ToAlertAlertSchedulePtrOutputWithContext(ctx)
}

// AlertAlertSchedulePtrInput is an input type that accepts AlertAlertScheduleArgs, AlertAlertSchedulePtr and AlertAlertSchedulePtrOutput values.
// You can construct a concrete instance of `AlertAlertSchedulePtrInput` via:
//
//	        AlertAlertScheduleArgs{...}
//
//	or:
//
//	        nil
type AlertAlertSchedulePtrInput interface {
	pulumi.Input

	ToAlertAlertSchedulePtrOutput() AlertAlertSchedulePtrOutput
	ToAlertAlertSchedulePtrOutputWithContext(context.Context) AlertAlertSchedulePtrOutput
}

type alertAlertSchedulePtrType AlertAlertScheduleArgs

func AlertAlertSchedulePtr(v *AlertAlertScheduleArgs) AlertAlertSchedulePtrInput {
	return (*alertAlertSchedulePtrType)(v)
}

func (*alertAlertSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAlertSchedule)(nil)).Elem()
}

func (i *alertAlertSchedulePtrType) ToAlertAlertSchedulePtrOutput() AlertAlertSchedulePtrOutput {
	return i.ToAlertAlertSchedulePtrOutputWithContext(context.Background())
}

func (i *alertAlertSchedulePtrType) ToAlertAlertSchedulePtrOutputWithContext(ctx context.Context) AlertAlertSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertSchedulePtrOutput)
}

type AlertAlertScheduleOutput struct{ *pulumi.OutputState }

func (AlertAlertScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertSchedule)(nil)).Elem()
}

func (o AlertAlertScheduleOutput) ToAlertAlertScheduleOutput() AlertAlertScheduleOutput {
	return o
}

func (o AlertAlertScheduleOutput) ToAlertAlertScheduleOutputWithContext(ctx context.Context) AlertAlertScheduleOutput {
	return o
}

func (o AlertAlertScheduleOutput) ToAlertAlertSchedulePtrOutput() AlertAlertSchedulePtrOutput {
	return o.ToAlertAlertSchedulePtrOutputWithContext(context.Background())
}

func (o AlertAlertScheduleOutput) ToAlertAlertSchedulePtrOutputWithContext(ctx context.Context) AlertAlertSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertAlertSchedule) *AlertAlertSchedule {
		return &v
	}).(AlertAlertSchedulePtrOutput)
}

// Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
func (o AlertAlertScheduleOutput) Cron() AlertAlertScheduleCronPtrOutput {
	return o.ApplyT(func(v AlertAlertSchedule) *AlertAlertScheduleCron { return v.Cron }).(AlertAlertScheduleCronPtrOutput)
}

// Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
func (o AlertAlertScheduleOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertAlertSchedule) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type AlertAlertSchedulePtrOutput struct{ *pulumi.OutputState }

func (AlertAlertSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAlertSchedule)(nil)).Elem()
}

func (o AlertAlertSchedulePtrOutput) ToAlertAlertSchedulePtrOutput() AlertAlertSchedulePtrOutput {
	return o
}

func (o AlertAlertSchedulePtrOutput) ToAlertAlertSchedulePtrOutputWithContext(ctx context.Context) AlertAlertSchedulePtrOutput {
	return o
}

func (o AlertAlertSchedulePtrOutput) Elem() AlertAlertScheduleOutput {
	return o.ApplyT(func(v *AlertAlertSchedule) AlertAlertSchedule {
		if v != nil {
			return *v
		}
		var ret AlertAlertSchedule
		return ret
	}).(AlertAlertScheduleOutput)
}

// Specifies the cron expression for the alert. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
func (o AlertAlertSchedulePtrOutput) Cron() AlertAlertScheduleCronPtrOutput {
	return o.ApplyT(func(v *AlertAlertSchedule) *AlertAlertScheduleCron {
		if v == nil {
			return nil
		}
		return v.Cron
	}).(AlertAlertScheduleCronPtrOutput)
}

// Specifies the interval in minutes for the alert schedule. The interval must be greater than 0 and less than 1440 (24 hours).
func (o AlertAlertSchedulePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertAlertSchedule) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

type AlertAlertScheduleCron struct {
	Expression string `pulumi:"expression"`
	TimeZone   string `pulumi:"timeZone"`
}

// AlertAlertScheduleCronInput is an input type that accepts AlertAlertScheduleCronArgs and AlertAlertScheduleCronOutput values.
// You can construct a concrete instance of `AlertAlertScheduleCronInput` via:
//
//	AlertAlertScheduleCronArgs{...}
type AlertAlertScheduleCronInput interface {
	pulumi.Input

	ToAlertAlertScheduleCronOutput() AlertAlertScheduleCronOutput
	ToAlertAlertScheduleCronOutputWithContext(context.Context) AlertAlertScheduleCronOutput
}

type AlertAlertScheduleCronArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	TimeZone   pulumi.StringInput `pulumi:"timeZone"`
}

func (AlertAlertScheduleCronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertScheduleCron)(nil)).Elem()
}

func (i AlertAlertScheduleCronArgs) ToAlertAlertScheduleCronOutput() AlertAlertScheduleCronOutput {
	return i.ToAlertAlertScheduleCronOutputWithContext(context.Background())
}

func (i AlertAlertScheduleCronArgs) ToAlertAlertScheduleCronOutputWithContext(ctx context.Context) AlertAlertScheduleCronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertScheduleCronOutput)
}

func (i AlertAlertScheduleCronArgs) ToAlertAlertScheduleCronPtrOutput() AlertAlertScheduleCronPtrOutput {
	return i.ToAlertAlertScheduleCronPtrOutputWithContext(context.Background())
}

func (i AlertAlertScheduleCronArgs) ToAlertAlertScheduleCronPtrOutputWithContext(ctx context.Context) AlertAlertScheduleCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertScheduleCronOutput).ToAlertAlertScheduleCronPtrOutputWithContext(ctx)
}

// AlertAlertScheduleCronPtrInput is an input type that accepts AlertAlertScheduleCronArgs, AlertAlertScheduleCronPtr and AlertAlertScheduleCronPtrOutput values.
// You can construct a concrete instance of `AlertAlertScheduleCronPtrInput` via:
//
//	        AlertAlertScheduleCronArgs{...}
//
//	or:
//
//	        nil
type AlertAlertScheduleCronPtrInput interface {
	pulumi.Input

	ToAlertAlertScheduleCronPtrOutput() AlertAlertScheduleCronPtrOutput
	ToAlertAlertScheduleCronPtrOutputWithContext(context.Context) AlertAlertScheduleCronPtrOutput
}

type alertAlertScheduleCronPtrType AlertAlertScheduleCronArgs

func AlertAlertScheduleCronPtr(v *AlertAlertScheduleCronArgs) AlertAlertScheduleCronPtrInput {
	return (*alertAlertScheduleCronPtrType)(v)
}

func (*alertAlertScheduleCronPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAlertScheduleCron)(nil)).Elem()
}

func (i *alertAlertScheduleCronPtrType) ToAlertAlertScheduleCronPtrOutput() AlertAlertScheduleCronPtrOutput {
	return i.ToAlertAlertScheduleCronPtrOutputWithContext(context.Background())
}

func (i *alertAlertScheduleCronPtrType) ToAlertAlertScheduleCronPtrOutputWithContext(ctx context.Context) AlertAlertScheduleCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertAlertScheduleCronPtrOutput)
}

type AlertAlertScheduleCronOutput struct{ *pulumi.OutputState }

func (AlertAlertScheduleCronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertAlertScheduleCron)(nil)).Elem()
}

func (o AlertAlertScheduleCronOutput) ToAlertAlertScheduleCronOutput() AlertAlertScheduleCronOutput {
	return o
}

func (o AlertAlertScheduleCronOutput) ToAlertAlertScheduleCronOutputWithContext(ctx context.Context) AlertAlertScheduleCronOutput {
	return o
}

func (o AlertAlertScheduleCronOutput) ToAlertAlertScheduleCronPtrOutput() AlertAlertScheduleCronPtrOutput {
	return o.ToAlertAlertScheduleCronPtrOutputWithContext(context.Background())
}

func (o AlertAlertScheduleCronOutput) ToAlertAlertScheduleCronPtrOutputWithContext(ctx context.Context) AlertAlertScheduleCronPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertAlertScheduleCron) *AlertAlertScheduleCron {
		return &v
	}).(AlertAlertScheduleCronPtrOutput)
}

func (o AlertAlertScheduleCronOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertScheduleCron) string { return v.Expression }).(pulumi.StringOutput)
}

func (o AlertAlertScheduleCronOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v AlertAlertScheduleCron) string { return v.TimeZone }).(pulumi.StringOutput)
}

type AlertAlertScheduleCronPtrOutput struct{ *pulumi.OutputState }

func (AlertAlertScheduleCronPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertAlertScheduleCron)(nil)).Elem()
}

func (o AlertAlertScheduleCronPtrOutput) ToAlertAlertScheduleCronPtrOutput() AlertAlertScheduleCronPtrOutput {
	return o
}

func (o AlertAlertScheduleCronPtrOutput) ToAlertAlertScheduleCronPtrOutputWithContext(ctx context.Context) AlertAlertScheduleCronPtrOutput {
	return o
}

func (o AlertAlertScheduleCronPtrOutput) Elem() AlertAlertScheduleCronOutput {
	return o.ApplyT(func(v *AlertAlertScheduleCron) AlertAlertScheduleCron {
		if v != nil {
			return *v
		}
		var ret AlertAlertScheduleCron
		return ret
	}).(AlertAlertScheduleCronOutput)
}

func (o AlertAlertScheduleCronPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertAlertScheduleCron) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o AlertAlertScheduleCronPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertAlertScheduleCron) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type DatabaseReplicationConfiguration struct {
	Accounts           []string `pulumi:"accounts"`
	IgnoreEditionCheck *bool    `pulumi:"ignoreEditionCheck"`
}

// DatabaseReplicationConfigurationInput is an input type that accepts DatabaseReplicationConfigurationArgs and DatabaseReplicationConfigurationOutput values.
// You can construct a concrete instance of `DatabaseReplicationConfigurationInput` via:
//
//	DatabaseReplicationConfigurationArgs{...}
type DatabaseReplicationConfigurationInput interface {
	pulumi.Input

	ToDatabaseReplicationConfigurationOutput() DatabaseReplicationConfigurationOutput
	ToDatabaseReplicationConfigurationOutputWithContext(context.Context) DatabaseReplicationConfigurationOutput
}

type DatabaseReplicationConfigurationArgs struct {
	Accounts           pulumi.StringArrayInput `pulumi:"accounts"`
	IgnoreEditionCheck pulumi.BoolPtrInput     `pulumi:"ignoreEditionCheck"`
}

func (DatabaseReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicationConfiguration)(nil)).Elem()
}

func (i DatabaseReplicationConfigurationArgs) ToDatabaseReplicationConfigurationOutput() DatabaseReplicationConfigurationOutput {
	return i.ToDatabaseReplicationConfigurationOutputWithContext(context.Background())
}

func (i DatabaseReplicationConfigurationArgs) ToDatabaseReplicationConfigurationOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicationConfigurationOutput)
}

func (i DatabaseReplicationConfigurationArgs) ToDatabaseReplicationConfigurationPtrOutput() DatabaseReplicationConfigurationPtrOutput {
	return i.ToDatabaseReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i DatabaseReplicationConfigurationArgs) ToDatabaseReplicationConfigurationPtrOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicationConfigurationOutput).ToDatabaseReplicationConfigurationPtrOutputWithContext(ctx)
}

// DatabaseReplicationConfigurationPtrInput is an input type that accepts DatabaseReplicationConfigurationArgs, DatabaseReplicationConfigurationPtr and DatabaseReplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `DatabaseReplicationConfigurationPtrInput` via:
//
//	        DatabaseReplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type DatabaseReplicationConfigurationPtrInput interface {
	pulumi.Input

	ToDatabaseReplicationConfigurationPtrOutput() DatabaseReplicationConfigurationPtrOutput
	ToDatabaseReplicationConfigurationPtrOutputWithContext(context.Context) DatabaseReplicationConfigurationPtrOutput
}

type databaseReplicationConfigurationPtrType DatabaseReplicationConfigurationArgs

func DatabaseReplicationConfigurationPtr(v *DatabaseReplicationConfigurationArgs) DatabaseReplicationConfigurationPtrInput {
	return (*databaseReplicationConfigurationPtrType)(v)
}

func (*databaseReplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicationConfiguration)(nil)).Elem()
}

func (i *databaseReplicationConfigurationPtrType) ToDatabaseReplicationConfigurationPtrOutput() DatabaseReplicationConfigurationPtrOutput {
	return i.ToDatabaseReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *databaseReplicationConfigurationPtrType) ToDatabaseReplicationConfigurationPtrOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicationConfigurationPtrOutput)
}

type DatabaseReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (DatabaseReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicationConfiguration)(nil)).Elem()
}

func (o DatabaseReplicationConfigurationOutput) ToDatabaseReplicationConfigurationOutput() DatabaseReplicationConfigurationOutput {
	return o
}

func (o DatabaseReplicationConfigurationOutput) ToDatabaseReplicationConfigurationOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationOutput {
	return o
}

func (o DatabaseReplicationConfigurationOutput) ToDatabaseReplicationConfigurationPtrOutput() DatabaseReplicationConfigurationPtrOutput {
	return o.ToDatabaseReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicationConfigurationOutput) ToDatabaseReplicationConfigurationPtrOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseReplicationConfiguration) *DatabaseReplicationConfiguration {
		return &v
	}).(DatabaseReplicationConfigurationPtrOutput)
}

func (o DatabaseReplicationConfigurationOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseReplicationConfiguration) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

func (o DatabaseReplicationConfigurationOutput) IgnoreEditionCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseReplicationConfiguration) *bool { return v.IgnoreEditionCheck }).(pulumi.BoolPtrOutput)
}

type DatabaseReplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DatabaseReplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicationConfiguration)(nil)).Elem()
}

func (o DatabaseReplicationConfigurationPtrOutput) ToDatabaseReplicationConfigurationPtrOutput() DatabaseReplicationConfigurationPtrOutput {
	return o
}

func (o DatabaseReplicationConfigurationPtrOutput) ToDatabaseReplicationConfigurationPtrOutputWithContext(ctx context.Context) DatabaseReplicationConfigurationPtrOutput {
	return o
}

func (o DatabaseReplicationConfigurationPtrOutput) Elem() DatabaseReplicationConfigurationOutput {
	return o.ApplyT(func(v *DatabaseReplicationConfiguration) DatabaseReplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret DatabaseReplicationConfiguration
		return ret
	}).(DatabaseReplicationConfigurationOutput)
}

func (o DatabaseReplicationConfigurationPtrOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseReplicationConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Accounts
	}).(pulumi.StringArrayOutput)
}

func (o DatabaseReplicationConfigurationPtrOutput) IgnoreEditionCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicationConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreEditionCheck
	}).(pulumi.BoolPtrOutput)
}

type ExternalFunctionArg struct {
	// Argument name
	Name string `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type string `pulumi:"type"`
}

// ExternalFunctionArgInput is an input type that accepts ExternalFunctionArgArgs and ExternalFunctionArgOutput values.
// You can construct a concrete instance of `ExternalFunctionArgInput` via:
//
//	ExternalFunctionArgArgs{...}
type ExternalFunctionArgInput interface {
	pulumi.Input

	ToExternalFunctionArgOutput() ExternalFunctionArgOutput
	ToExternalFunctionArgOutputWithContext(context.Context) ExternalFunctionArgOutput
}

type ExternalFunctionArgArgs struct {
	// Argument name
	Name pulumi.StringInput `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalFunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return i.ToExternalFunctionArgOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgOutput)
}

// ExternalFunctionArgArrayInput is an input type that accepts ExternalFunctionArgArray and ExternalFunctionArgArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionArgArrayInput` via:
//
//	ExternalFunctionArgArray{ ExternalFunctionArgArgs{...} }
type ExternalFunctionArgArrayInput interface {
	pulumi.Input

	ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput
	ToExternalFunctionArgArrayOutputWithContext(context.Context) ExternalFunctionArgArrayOutput
}

type ExternalFunctionArgArray []ExternalFunctionArgInput

func (ExternalFunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return i.ToExternalFunctionArgArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgArrayOutput)
}

type ExternalFunctionArgOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return o
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return o
}

// Argument name
func (o ExternalFunctionArgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Name }).(pulumi.StringOutput)
}

// Argument type, e.g. VARCHAR
func (o ExternalFunctionArgOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalFunctionArgArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) Index(i pulumi.IntInput) ExternalFunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionArg {
		return vs[0].([]ExternalFunctionArg)[vs[1].(int)]
	}).(ExternalFunctionArgOutput)
}

type ExternalFunctionHeader struct {
	// Header name
	Name string `pulumi:"name"`
	// Header value
	Value string `pulumi:"value"`
}

// ExternalFunctionHeaderInput is an input type that accepts ExternalFunctionHeaderArgs and ExternalFunctionHeaderOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderInput` via:
//
//	ExternalFunctionHeaderArgs{...}
type ExternalFunctionHeaderInput interface {
	pulumi.Input

	ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput
	ToExternalFunctionHeaderOutputWithContext(context.Context) ExternalFunctionHeaderOutput
}

type ExternalFunctionHeaderArgs struct {
	// Header name
	Name pulumi.StringInput `pulumi:"name"`
	// Header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalFunctionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return i.ToExternalFunctionHeaderOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderOutput)
}

// ExternalFunctionHeaderArrayInput is an input type that accepts ExternalFunctionHeaderArray and ExternalFunctionHeaderArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderArrayInput` via:
//
//	ExternalFunctionHeaderArray{ ExternalFunctionHeaderArgs{...} }
type ExternalFunctionHeaderArrayInput interface {
	pulumi.Input

	ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput
	ToExternalFunctionHeaderArrayOutputWithContext(context.Context) ExternalFunctionHeaderArrayOutput
}

type ExternalFunctionHeaderArray []ExternalFunctionHeaderInput

func (ExternalFunctionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return i.ToExternalFunctionHeaderArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderArrayOutput)
}

type ExternalFunctionHeaderOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return o
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return o
}

// Header name
func (o ExternalFunctionHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Header value
func (o ExternalFunctionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalFunctionHeaderArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) Index(i pulumi.IntInput) ExternalFunctionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionHeader {
		return vs[0].([]ExternalFunctionHeader)[vs[1].(int)]
	}).(ExternalFunctionHeaderOutput)
}

type ExternalTableColumn struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As string `pulumi:"as"`
	// Column name
	Name string `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// ExternalTableColumnInput is an input type that accepts ExternalTableColumnArgs and ExternalTableColumnOutput values.
// You can construct a concrete instance of `ExternalTableColumnInput` via:
//
//	ExternalTableColumnArgs{...}
type ExternalTableColumnInput interface {
	pulumi.Input

	ToExternalTableColumnOutput() ExternalTableColumnOutput
	ToExternalTableColumnOutputWithContext(context.Context) ExternalTableColumnOutput
}

type ExternalTableColumnArgs struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As pulumi.StringInput `pulumi:"as"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalTableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return i.ToExternalTableColumnOutputWithContext(context.Background())
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnOutput)
}

// ExternalTableColumnArrayInput is an input type that accepts ExternalTableColumnArray and ExternalTableColumnArrayOutput values.
// You can construct a concrete instance of `ExternalTableColumnArrayInput` via:
//
//	ExternalTableColumnArray{ ExternalTableColumnArgs{...} }
type ExternalTableColumnArrayInput interface {
	pulumi.Input

	ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput
	ToExternalTableColumnArrayOutputWithContext(context.Context) ExternalTableColumnArrayOutput
}

type ExternalTableColumnArray []ExternalTableColumnInput

func (ExternalTableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return i.ToExternalTableColumnArrayOutputWithContext(context.Background())
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnArrayOutput)
}

type ExternalTableColumnOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return o
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return o
}

// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
func (o ExternalTableColumnOutput) As() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.As }).(pulumi.StringOutput)
}

// Column name
func (o ExternalTableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Column type, e.g. VARIANT
func (o ExternalTableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalTableColumnArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) Index(i pulumi.IntInput) ExternalTableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableColumn {
		return vs[0].([]ExternalTableColumn)[vs[1].(int)]
	}).(ExternalTableColumnOutput)
}

type ExternalTableTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// ExternalTableTagInput is an input type that accepts ExternalTableTagArgs and ExternalTableTagOutput values.
// You can construct a concrete instance of `ExternalTableTagInput` via:
//
//	ExternalTableTagArgs{...}
type ExternalTableTagInput interface {
	pulumi.Input

	ToExternalTableTagOutput() ExternalTableTagOutput
	ToExternalTableTagOutputWithContext(context.Context) ExternalTableTagOutput
}

type ExternalTableTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableTag)(nil)).Elem()
}

func (i ExternalTableTagArgs) ToExternalTableTagOutput() ExternalTableTagOutput {
	return i.ToExternalTableTagOutputWithContext(context.Background())
}

func (i ExternalTableTagArgs) ToExternalTableTagOutputWithContext(ctx context.Context) ExternalTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableTagOutput)
}

// ExternalTableTagArrayInput is an input type that accepts ExternalTableTagArray and ExternalTableTagArrayOutput values.
// You can construct a concrete instance of `ExternalTableTagArrayInput` via:
//
//	ExternalTableTagArray{ ExternalTableTagArgs{...} }
type ExternalTableTagArrayInput interface {
	pulumi.Input

	ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput
	ToExternalTableTagArrayOutputWithContext(context.Context) ExternalTableTagArrayOutput
}

type ExternalTableTagArray []ExternalTableTagInput

func (ExternalTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableTag)(nil)).Elem()
}

func (i ExternalTableTagArray) ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput {
	return i.ToExternalTableTagArrayOutputWithContext(context.Background())
}

func (i ExternalTableTagArray) ToExternalTableTagArrayOutputWithContext(ctx context.Context) ExternalTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableTagArrayOutput)
}

type ExternalTableTagOutput struct{ *pulumi.OutputState }

func (ExternalTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableTag)(nil)).Elem()
}

func (o ExternalTableTagOutput) ToExternalTableTagOutput() ExternalTableTagOutput {
	return o
}

func (o ExternalTableTagOutput) ToExternalTableTagOutputWithContext(ctx context.Context) ExternalTableTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o ExternalTableTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalTableTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o ExternalTableTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o ExternalTableTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalTableTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o ExternalTableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalTableTagArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableTag)(nil)).Elem()
}

func (o ExternalTableTagArrayOutput) ToExternalTableTagArrayOutput() ExternalTableTagArrayOutput {
	return o
}

func (o ExternalTableTagArrayOutput) ToExternalTableTagArrayOutputWithContext(ctx context.Context) ExternalTableTagArrayOutput {
	return o
}

func (o ExternalTableTagArrayOutput) Index(i pulumi.IntInput) ExternalTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableTag {
		return vs[0].([]ExternalTableTag)[vs[1].(int)]
	}).(ExternalTableTagOutput)
}

type FailoverGroupFromReplica struct {
	// Identifier for the primary failover group in the source account.
	Name string `pulumi:"name"`
	// Name of your Snowflake organization.
	OrganizationName string `pulumi:"organizationName"`
	// Source account from which you are enabling replication and failover of the specified objects.
	SourceAccountName string `pulumi:"sourceAccountName"`
}

// FailoverGroupFromReplicaInput is an input type that accepts FailoverGroupFromReplicaArgs and FailoverGroupFromReplicaOutput values.
// You can construct a concrete instance of `FailoverGroupFromReplicaInput` via:
//
//	FailoverGroupFromReplicaArgs{...}
type FailoverGroupFromReplicaInput interface {
	pulumi.Input

	ToFailoverGroupFromReplicaOutput() FailoverGroupFromReplicaOutput
	ToFailoverGroupFromReplicaOutputWithContext(context.Context) FailoverGroupFromReplicaOutput
}

type FailoverGroupFromReplicaArgs struct {
	// Identifier for the primary failover group in the source account.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of your Snowflake organization.
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// Source account from which you are enabling replication and failover of the specified objects.
	SourceAccountName pulumi.StringInput `pulumi:"sourceAccountName"`
}

func (FailoverGroupFromReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupFromReplica)(nil)).Elem()
}

func (i FailoverGroupFromReplicaArgs) ToFailoverGroupFromReplicaOutput() FailoverGroupFromReplicaOutput {
	return i.ToFailoverGroupFromReplicaOutputWithContext(context.Background())
}

func (i FailoverGroupFromReplicaArgs) ToFailoverGroupFromReplicaOutputWithContext(ctx context.Context) FailoverGroupFromReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupFromReplicaOutput)
}

func (i FailoverGroupFromReplicaArgs) ToFailoverGroupFromReplicaPtrOutput() FailoverGroupFromReplicaPtrOutput {
	return i.ToFailoverGroupFromReplicaPtrOutputWithContext(context.Background())
}

func (i FailoverGroupFromReplicaArgs) ToFailoverGroupFromReplicaPtrOutputWithContext(ctx context.Context) FailoverGroupFromReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupFromReplicaOutput).ToFailoverGroupFromReplicaPtrOutputWithContext(ctx)
}

// FailoverGroupFromReplicaPtrInput is an input type that accepts FailoverGroupFromReplicaArgs, FailoverGroupFromReplicaPtr and FailoverGroupFromReplicaPtrOutput values.
// You can construct a concrete instance of `FailoverGroupFromReplicaPtrInput` via:
//
//	        FailoverGroupFromReplicaArgs{...}
//
//	or:
//
//	        nil
type FailoverGroupFromReplicaPtrInput interface {
	pulumi.Input

	ToFailoverGroupFromReplicaPtrOutput() FailoverGroupFromReplicaPtrOutput
	ToFailoverGroupFromReplicaPtrOutputWithContext(context.Context) FailoverGroupFromReplicaPtrOutput
}

type failoverGroupFromReplicaPtrType FailoverGroupFromReplicaArgs

func FailoverGroupFromReplicaPtr(v *FailoverGroupFromReplicaArgs) FailoverGroupFromReplicaPtrInput {
	return (*failoverGroupFromReplicaPtrType)(v)
}

func (*failoverGroupFromReplicaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupFromReplica)(nil)).Elem()
}

func (i *failoverGroupFromReplicaPtrType) ToFailoverGroupFromReplicaPtrOutput() FailoverGroupFromReplicaPtrOutput {
	return i.ToFailoverGroupFromReplicaPtrOutputWithContext(context.Background())
}

func (i *failoverGroupFromReplicaPtrType) ToFailoverGroupFromReplicaPtrOutputWithContext(ctx context.Context) FailoverGroupFromReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupFromReplicaPtrOutput)
}

type FailoverGroupFromReplicaOutput struct{ *pulumi.OutputState }

func (FailoverGroupFromReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupFromReplica)(nil)).Elem()
}

func (o FailoverGroupFromReplicaOutput) ToFailoverGroupFromReplicaOutput() FailoverGroupFromReplicaOutput {
	return o
}

func (o FailoverGroupFromReplicaOutput) ToFailoverGroupFromReplicaOutputWithContext(ctx context.Context) FailoverGroupFromReplicaOutput {
	return o
}

func (o FailoverGroupFromReplicaOutput) ToFailoverGroupFromReplicaPtrOutput() FailoverGroupFromReplicaPtrOutput {
	return o.ToFailoverGroupFromReplicaPtrOutputWithContext(context.Background())
}

func (o FailoverGroupFromReplicaOutput) ToFailoverGroupFromReplicaPtrOutputWithContext(ctx context.Context) FailoverGroupFromReplicaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupFromReplica) *FailoverGroupFromReplica {
		return &v
	}).(FailoverGroupFromReplicaPtrOutput)
}

// Identifier for the primary failover group in the source account.
func (o FailoverGroupFromReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupFromReplica) string { return v.Name }).(pulumi.StringOutput)
}

// Name of your Snowflake organization.
func (o FailoverGroupFromReplicaOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupFromReplica) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// Source account from which you are enabling replication and failover of the specified objects.
func (o FailoverGroupFromReplicaOutput) SourceAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupFromReplica) string { return v.SourceAccountName }).(pulumi.StringOutput)
}

type FailoverGroupFromReplicaPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupFromReplicaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupFromReplica)(nil)).Elem()
}

func (o FailoverGroupFromReplicaPtrOutput) ToFailoverGroupFromReplicaPtrOutput() FailoverGroupFromReplicaPtrOutput {
	return o
}

func (o FailoverGroupFromReplicaPtrOutput) ToFailoverGroupFromReplicaPtrOutputWithContext(ctx context.Context) FailoverGroupFromReplicaPtrOutput {
	return o
}

func (o FailoverGroupFromReplicaPtrOutput) Elem() FailoverGroupFromReplicaOutput {
	return o.ApplyT(func(v *FailoverGroupFromReplica) FailoverGroupFromReplica {
		if v != nil {
			return *v
		}
		var ret FailoverGroupFromReplica
		return ret
	}).(FailoverGroupFromReplicaOutput)
}

// Identifier for the primary failover group in the source account.
func (o FailoverGroupFromReplicaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupFromReplica) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Name of your Snowflake organization.
func (o FailoverGroupFromReplicaPtrOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupFromReplica) *string {
		if v == nil {
			return nil
		}
		return &v.OrganizationName
	}).(pulumi.StringPtrOutput)
}

// Source account from which you are enabling replication and failover of the specified objects.
func (o FailoverGroupFromReplicaPtrOutput) SourceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupFromReplica) *string {
		if v == nil {
			return nil
		}
		return &v.SourceAccountName
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupReplicationSchedule struct {
	// Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
	Cron *FailoverGroupReplicationScheduleCron `pulumi:"cron"`
	// Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
	Interval *int `pulumi:"interval"`
}

// FailoverGroupReplicationScheduleInput is an input type that accepts FailoverGroupReplicationScheduleArgs and FailoverGroupReplicationScheduleOutput values.
// You can construct a concrete instance of `FailoverGroupReplicationScheduleInput` via:
//
//	FailoverGroupReplicationScheduleArgs{...}
type FailoverGroupReplicationScheduleInput interface {
	pulumi.Input

	ToFailoverGroupReplicationScheduleOutput() FailoverGroupReplicationScheduleOutput
	ToFailoverGroupReplicationScheduleOutputWithContext(context.Context) FailoverGroupReplicationScheduleOutput
}

type FailoverGroupReplicationScheduleArgs struct {
	// Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
	Cron FailoverGroupReplicationScheduleCronPtrInput `pulumi:"cron"`
	// Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (FailoverGroupReplicationScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReplicationSchedule)(nil)).Elem()
}

func (i FailoverGroupReplicationScheduleArgs) ToFailoverGroupReplicationScheduleOutput() FailoverGroupReplicationScheduleOutput {
	return i.ToFailoverGroupReplicationScheduleOutputWithContext(context.Background())
}

func (i FailoverGroupReplicationScheduleArgs) ToFailoverGroupReplicationScheduleOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationScheduleOutput)
}

func (i FailoverGroupReplicationScheduleArgs) ToFailoverGroupReplicationSchedulePtrOutput() FailoverGroupReplicationSchedulePtrOutput {
	return i.ToFailoverGroupReplicationSchedulePtrOutputWithContext(context.Background())
}

func (i FailoverGroupReplicationScheduleArgs) ToFailoverGroupReplicationSchedulePtrOutputWithContext(ctx context.Context) FailoverGroupReplicationSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationScheduleOutput).ToFailoverGroupReplicationSchedulePtrOutputWithContext(ctx)
}

// FailoverGroupReplicationSchedulePtrInput is an input type that accepts FailoverGroupReplicationScheduleArgs, FailoverGroupReplicationSchedulePtr and FailoverGroupReplicationSchedulePtrOutput values.
// You can construct a concrete instance of `FailoverGroupReplicationSchedulePtrInput` via:
//
//	        FailoverGroupReplicationScheduleArgs{...}
//
//	or:
//
//	        nil
type FailoverGroupReplicationSchedulePtrInput interface {
	pulumi.Input

	ToFailoverGroupReplicationSchedulePtrOutput() FailoverGroupReplicationSchedulePtrOutput
	ToFailoverGroupReplicationSchedulePtrOutputWithContext(context.Context) FailoverGroupReplicationSchedulePtrOutput
}

type failoverGroupReplicationSchedulePtrType FailoverGroupReplicationScheduleArgs

func FailoverGroupReplicationSchedulePtr(v *FailoverGroupReplicationScheduleArgs) FailoverGroupReplicationSchedulePtrInput {
	return (*failoverGroupReplicationSchedulePtrType)(v)
}

func (*failoverGroupReplicationSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReplicationSchedule)(nil)).Elem()
}

func (i *failoverGroupReplicationSchedulePtrType) ToFailoverGroupReplicationSchedulePtrOutput() FailoverGroupReplicationSchedulePtrOutput {
	return i.ToFailoverGroupReplicationSchedulePtrOutputWithContext(context.Background())
}

func (i *failoverGroupReplicationSchedulePtrType) ToFailoverGroupReplicationSchedulePtrOutputWithContext(ctx context.Context) FailoverGroupReplicationSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationSchedulePtrOutput)
}

type FailoverGroupReplicationScheduleOutput struct{ *pulumi.OutputState }

func (FailoverGroupReplicationScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReplicationSchedule)(nil)).Elem()
}

func (o FailoverGroupReplicationScheduleOutput) ToFailoverGroupReplicationScheduleOutput() FailoverGroupReplicationScheduleOutput {
	return o
}

func (o FailoverGroupReplicationScheduleOutput) ToFailoverGroupReplicationScheduleOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleOutput {
	return o
}

func (o FailoverGroupReplicationScheduleOutput) ToFailoverGroupReplicationSchedulePtrOutput() FailoverGroupReplicationSchedulePtrOutput {
	return o.ToFailoverGroupReplicationSchedulePtrOutputWithContext(context.Background())
}

func (o FailoverGroupReplicationScheduleOutput) ToFailoverGroupReplicationSchedulePtrOutputWithContext(ctx context.Context) FailoverGroupReplicationSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupReplicationSchedule) *FailoverGroupReplicationSchedule {
		return &v
	}).(FailoverGroupReplicationSchedulePtrOutput)
}

// Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
func (o FailoverGroupReplicationScheduleOutput) Cron() FailoverGroupReplicationScheduleCronPtrOutput {
	return o.ApplyT(func(v FailoverGroupReplicationSchedule) *FailoverGroupReplicationScheduleCron { return v.Cron }).(FailoverGroupReplicationScheduleCronPtrOutput)
}

// Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
func (o FailoverGroupReplicationScheduleOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverGroupReplicationSchedule) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type FailoverGroupReplicationSchedulePtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReplicationSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReplicationSchedule)(nil)).Elem()
}

func (o FailoverGroupReplicationSchedulePtrOutput) ToFailoverGroupReplicationSchedulePtrOutput() FailoverGroupReplicationSchedulePtrOutput {
	return o
}

func (o FailoverGroupReplicationSchedulePtrOutput) ToFailoverGroupReplicationSchedulePtrOutputWithContext(ctx context.Context) FailoverGroupReplicationSchedulePtrOutput {
	return o
}

func (o FailoverGroupReplicationSchedulePtrOutput) Elem() FailoverGroupReplicationScheduleOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationSchedule) FailoverGroupReplicationSchedule {
		if v != nil {
			return *v
		}
		var ret FailoverGroupReplicationSchedule
		return ret
	}).(FailoverGroupReplicationScheduleOutput)
}

// Specifies the cron expression for the replication schedule. The cron expression must be in the following format: "minute hour day-of-month month day-of-week". The following values are supported: minute: 0-59 hour: 0-23 day-of-month: 1-31 month: 1-12 day-of-week: 0-6 (0 is Sunday)
func (o FailoverGroupReplicationSchedulePtrOutput) Cron() FailoverGroupReplicationScheduleCronPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationSchedule) *FailoverGroupReplicationScheduleCron {
		if v == nil {
			return nil
		}
		return v.Cron
	}).(FailoverGroupReplicationScheduleCronPtrOutput)
}

// Specifies the interval in minutes for the replication schedule. The interval must be greater than 0 and less than 1440 (24 hours).
func (o FailoverGroupReplicationSchedulePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationSchedule) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

type FailoverGroupReplicationScheduleCron struct {
	Expression string `pulumi:"expression"`
	TimeZone   string `pulumi:"timeZone"`
}

// FailoverGroupReplicationScheduleCronInput is an input type that accepts FailoverGroupReplicationScheduleCronArgs and FailoverGroupReplicationScheduleCronOutput values.
// You can construct a concrete instance of `FailoverGroupReplicationScheduleCronInput` via:
//
//	FailoverGroupReplicationScheduleCronArgs{...}
type FailoverGroupReplicationScheduleCronInput interface {
	pulumi.Input

	ToFailoverGroupReplicationScheduleCronOutput() FailoverGroupReplicationScheduleCronOutput
	ToFailoverGroupReplicationScheduleCronOutputWithContext(context.Context) FailoverGroupReplicationScheduleCronOutput
}

type FailoverGroupReplicationScheduleCronArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	TimeZone   pulumi.StringInput `pulumi:"timeZone"`
}

func (FailoverGroupReplicationScheduleCronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReplicationScheduleCron)(nil)).Elem()
}

func (i FailoverGroupReplicationScheduleCronArgs) ToFailoverGroupReplicationScheduleCronOutput() FailoverGroupReplicationScheduleCronOutput {
	return i.ToFailoverGroupReplicationScheduleCronOutputWithContext(context.Background())
}

func (i FailoverGroupReplicationScheduleCronArgs) ToFailoverGroupReplicationScheduleCronOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationScheduleCronOutput)
}

func (i FailoverGroupReplicationScheduleCronArgs) ToFailoverGroupReplicationScheduleCronPtrOutput() FailoverGroupReplicationScheduleCronPtrOutput {
	return i.ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReplicationScheduleCronArgs) ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationScheduleCronOutput).ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(ctx)
}

// FailoverGroupReplicationScheduleCronPtrInput is an input type that accepts FailoverGroupReplicationScheduleCronArgs, FailoverGroupReplicationScheduleCronPtr and FailoverGroupReplicationScheduleCronPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReplicationScheduleCronPtrInput` via:
//
//	        FailoverGroupReplicationScheduleCronArgs{...}
//
//	or:
//
//	        nil
type FailoverGroupReplicationScheduleCronPtrInput interface {
	pulumi.Input

	ToFailoverGroupReplicationScheduleCronPtrOutput() FailoverGroupReplicationScheduleCronPtrOutput
	ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(context.Context) FailoverGroupReplicationScheduleCronPtrOutput
}

type failoverGroupReplicationScheduleCronPtrType FailoverGroupReplicationScheduleCronArgs

func FailoverGroupReplicationScheduleCronPtr(v *FailoverGroupReplicationScheduleCronArgs) FailoverGroupReplicationScheduleCronPtrInput {
	return (*failoverGroupReplicationScheduleCronPtrType)(v)
}

func (*failoverGroupReplicationScheduleCronPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReplicationScheduleCron)(nil)).Elem()
}

func (i *failoverGroupReplicationScheduleCronPtrType) ToFailoverGroupReplicationScheduleCronPtrOutput() FailoverGroupReplicationScheduleCronPtrOutput {
	return i.ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReplicationScheduleCronPtrType) ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReplicationScheduleCronPtrOutput)
}

type FailoverGroupReplicationScheduleCronOutput struct{ *pulumi.OutputState }

func (FailoverGroupReplicationScheduleCronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReplicationScheduleCron)(nil)).Elem()
}

func (o FailoverGroupReplicationScheduleCronOutput) ToFailoverGroupReplicationScheduleCronOutput() FailoverGroupReplicationScheduleCronOutput {
	return o
}

func (o FailoverGroupReplicationScheduleCronOutput) ToFailoverGroupReplicationScheduleCronOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronOutput {
	return o
}

func (o FailoverGroupReplicationScheduleCronOutput) ToFailoverGroupReplicationScheduleCronPtrOutput() FailoverGroupReplicationScheduleCronPtrOutput {
	return o.ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReplicationScheduleCronOutput) ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupReplicationScheduleCron) *FailoverGroupReplicationScheduleCron {
		return &v
	}).(FailoverGroupReplicationScheduleCronPtrOutput)
}

func (o FailoverGroupReplicationScheduleCronOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReplicationScheduleCron) string { return v.Expression }).(pulumi.StringOutput)
}

func (o FailoverGroupReplicationScheduleCronOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReplicationScheduleCron) string { return v.TimeZone }).(pulumi.StringOutput)
}

type FailoverGroupReplicationScheduleCronPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReplicationScheduleCronPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReplicationScheduleCron)(nil)).Elem()
}

func (o FailoverGroupReplicationScheduleCronPtrOutput) ToFailoverGroupReplicationScheduleCronPtrOutput() FailoverGroupReplicationScheduleCronPtrOutput {
	return o
}

func (o FailoverGroupReplicationScheduleCronPtrOutput) ToFailoverGroupReplicationScheduleCronPtrOutputWithContext(ctx context.Context) FailoverGroupReplicationScheduleCronPtrOutput {
	return o
}

func (o FailoverGroupReplicationScheduleCronPtrOutput) Elem() FailoverGroupReplicationScheduleCronOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationScheduleCron) FailoverGroupReplicationScheduleCron {
		if v != nil {
			return *v
		}
		var ret FailoverGroupReplicationScheduleCron
		return ret
	}).(FailoverGroupReplicationScheduleCronOutput)
}

func (o FailoverGroupReplicationScheduleCronPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationScheduleCron) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o FailoverGroupReplicationScheduleCronPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReplicationScheduleCron) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type FunctionArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// FunctionArgumentInput is an input type that accepts FunctionArgumentArgs and FunctionArgumentOutput values.
// You can construct a concrete instance of `FunctionArgumentInput` via:
//
//	FunctionArgumentArgs{...}
type FunctionArgumentInput interface {
	pulumi.Input

	ToFunctionArgumentOutput() FunctionArgumentOutput
	ToFunctionArgumentOutputWithContext(context.Context) FunctionArgumentOutput
}

type FunctionArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArgument)(nil)).Elem()
}

func (i FunctionArgumentArgs) ToFunctionArgumentOutput() FunctionArgumentOutput {
	return i.ToFunctionArgumentOutputWithContext(context.Background())
}

func (i FunctionArgumentArgs) ToFunctionArgumentOutputWithContext(ctx context.Context) FunctionArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgumentOutput)
}

// FunctionArgumentArrayInput is an input type that accepts FunctionArgumentArray and FunctionArgumentArrayOutput values.
// You can construct a concrete instance of `FunctionArgumentArrayInput` via:
//
//	FunctionArgumentArray{ FunctionArgumentArgs{...} }
type FunctionArgumentArrayInput interface {
	pulumi.Input

	ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput
	ToFunctionArgumentArrayOutputWithContext(context.Context) FunctionArgumentArrayOutput
}

type FunctionArgumentArray []FunctionArgumentInput

func (FunctionArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArgument)(nil)).Elem()
}

func (i FunctionArgumentArray) ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput {
	return i.ToFunctionArgumentArrayOutputWithContext(context.Background())
}

func (i FunctionArgumentArray) ToFunctionArgumentArrayOutputWithContext(ctx context.Context) FunctionArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgumentArrayOutput)
}

type FunctionArgumentOutput struct{ *pulumi.OutputState }

func (FunctionArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArgument)(nil)).Elem()
}

func (o FunctionArgumentOutput) ToFunctionArgumentOutput() FunctionArgumentOutput {
	return o
}

func (o FunctionArgumentOutput) ToFunctionArgumentOutputWithContext(ctx context.Context) FunctionArgumentOutput {
	return o
}

// The argument name
func (o FunctionArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o FunctionArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionArgument) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionArgumentArrayOutput struct{ *pulumi.OutputState }

func (FunctionArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArgument)(nil)).Elem()
}

func (o FunctionArgumentArrayOutput) ToFunctionArgumentArrayOutput() FunctionArgumentArrayOutput {
	return o
}

func (o FunctionArgumentArrayOutput) ToFunctionArgumentArrayOutputWithContext(ctx context.Context) FunctionArgumentArrayOutput {
	return o
}

func (o FunctionArgumentArrayOutput) Index(i pulumi.IntInput) FunctionArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionArgument {
		return vs[0].([]FunctionArgument)[vs[1].(int)]
	}).(FunctionArgumentOutput)
}

type GrantPrivilegesToRoleOnAccountObject struct {
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName string `pulumi:"objectName"`
	// The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
	ObjectType string `pulumi:"objectType"`
}

// GrantPrivilegesToRoleOnAccountObjectInput is an input type that accepts GrantPrivilegesToRoleOnAccountObjectArgs and GrantPrivilegesToRoleOnAccountObjectOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnAccountObjectInput` via:
//
//	GrantPrivilegesToRoleOnAccountObjectArgs{...}
type GrantPrivilegesToRoleOnAccountObjectInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnAccountObjectOutput() GrantPrivilegesToRoleOnAccountObjectOutput
	ToGrantPrivilegesToRoleOnAccountObjectOutputWithContext(context.Context) GrantPrivilegesToRoleOnAccountObjectOutput
}

type GrantPrivilegesToRoleOnAccountObjectArgs struct {
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
	ObjectType pulumi.StringInput `pulumi:"objectType"`
}

func (GrantPrivilegesToRoleOnAccountObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnAccountObject)(nil)).Elem()
}

func (i GrantPrivilegesToRoleOnAccountObjectArgs) ToGrantPrivilegesToRoleOnAccountObjectOutput() GrantPrivilegesToRoleOnAccountObjectOutput {
	return i.ToGrantPrivilegesToRoleOnAccountObjectOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnAccountObjectArgs) ToGrantPrivilegesToRoleOnAccountObjectOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnAccountObjectOutput)
}

func (i GrantPrivilegesToRoleOnAccountObjectArgs) ToGrantPrivilegesToRoleOnAccountObjectPtrOutput() GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return i.ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnAccountObjectArgs) ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnAccountObjectOutput).ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(ctx)
}

// GrantPrivilegesToRoleOnAccountObjectPtrInput is an input type that accepts GrantPrivilegesToRoleOnAccountObjectArgs, GrantPrivilegesToRoleOnAccountObjectPtr and GrantPrivilegesToRoleOnAccountObjectPtrOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnAccountObjectPtrInput` via:
//
//	        GrantPrivilegesToRoleOnAccountObjectArgs{...}
//
//	or:
//
//	        nil
type GrantPrivilegesToRoleOnAccountObjectPtrInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnAccountObjectPtrOutput() GrantPrivilegesToRoleOnAccountObjectPtrOutput
	ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(context.Context) GrantPrivilegesToRoleOnAccountObjectPtrOutput
}

type grantPrivilegesToRoleOnAccountObjectPtrType GrantPrivilegesToRoleOnAccountObjectArgs

func GrantPrivilegesToRoleOnAccountObjectPtr(v *GrantPrivilegesToRoleOnAccountObjectArgs) GrantPrivilegesToRoleOnAccountObjectPtrInput {
	return (*grantPrivilegesToRoleOnAccountObjectPtrType)(v)
}

func (*grantPrivilegesToRoleOnAccountObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnAccountObject)(nil)).Elem()
}

func (i *grantPrivilegesToRoleOnAccountObjectPtrType) ToGrantPrivilegesToRoleOnAccountObjectPtrOutput() GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return i.ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(context.Background())
}

func (i *grantPrivilegesToRoleOnAccountObjectPtrType) ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnAccountObjectPtrOutput)
}

type GrantPrivilegesToRoleOnAccountObjectOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnAccountObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnAccountObject)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnAccountObjectOutput) ToGrantPrivilegesToRoleOnAccountObjectOutput() GrantPrivilegesToRoleOnAccountObjectOutput {
	return o
}

func (o GrantPrivilegesToRoleOnAccountObjectOutput) ToGrantPrivilegesToRoleOnAccountObjectOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectOutput {
	return o
}

func (o GrantPrivilegesToRoleOnAccountObjectOutput) ToGrantPrivilegesToRoleOnAccountObjectPtrOutput() GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return o.ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(context.Background())
}

func (o GrantPrivilegesToRoleOnAccountObjectOutput) ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrantPrivilegesToRoleOnAccountObject) *GrantPrivilegesToRoleOnAccountObject {
		return &v
	}).(GrantPrivilegesToRoleOnAccountObjectPtrOutput)
}

// The fully qualified name of the object on which privileges will be granted.
func (o GrantPrivilegesToRoleOnAccountObjectOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnAccountObject) string { return v.ObjectName }).(pulumi.StringOutput)
}

// The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
func (o GrantPrivilegesToRoleOnAccountObjectOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnAccountObject) string { return v.ObjectType }).(pulumi.StringOutput)
}

type GrantPrivilegesToRoleOnAccountObjectPtrOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnAccountObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnAccountObject)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnAccountObjectPtrOutput) ToGrantPrivilegesToRoleOnAccountObjectPtrOutput() GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnAccountObjectPtrOutput) ToGrantPrivilegesToRoleOnAccountObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnAccountObjectPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnAccountObjectPtrOutput) Elem() GrantPrivilegesToRoleOnAccountObjectOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnAccountObject) GrantPrivilegesToRoleOnAccountObject {
		if v != nil {
			return *v
		}
		var ret GrantPrivilegesToRoleOnAccountObject
		return ret
	}).(GrantPrivilegesToRoleOnAccountObjectOutput)
}

// The fully qualified name of the object on which privileges will be granted.
func (o GrantPrivilegesToRoleOnAccountObjectPtrOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnAccountObject) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectName
	}).(pulumi.StringPtrOutput)
}

// The object type of the account object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
func (o GrantPrivilegesToRoleOnAccountObjectPtrOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnAccountObject) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectType
	}).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchema struct {
	// The fully qualified name of the database.
	AllSchemasInDatabase *string `pulumi:"allSchemasInDatabase"`
	// The fully qualified name of the database.
	FutureSchemasInDatabase *string `pulumi:"futureSchemasInDatabase"`
	// The fully qualified name of the schema.
	SchemaName *string `pulumi:"schemaName"`
}

// GrantPrivilegesToRoleOnSchemaInput is an input type that accepts GrantPrivilegesToRoleOnSchemaArgs and GrantPrivilegesToRoleOnSchemaOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaInput` via:
//
//	GrantPrivilegesToRoleOnSchemaArgs{...}
type GrantPrivilegesToRoleOnSchemaInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaOutput() GrantPrivilegesToRoleOnSchemaOutput
	ToGrantPrivilegesToRoleOnSchemaOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaOutput
}

type GrantPrivilegesToRoleOnSchemaArgs struct {
	// The fully qualified name of the database.
	AllSchemasInDatabase pulumi.StringPtrInput `pulumi:"allSchemasInDatabase"`
	// The fully qualified name of the database.
	FutureSchemasInDatabase pulumi.StringPtrInput `pulumi:"futureSchemasInDatabase"`
	// The fully qualified name of the schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (GrantPrivilegesToRoleOnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchema)(nil)).Elem()
}

func (i GrantPrivilegesToRoleOnSchemaArgs) ToGrantPrivilegesToRoleOnSchemaOutput() GrantPrivilegesToRoleOnSchemaOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaArgs) ToGrantPrivilegesToRoleOnSchemaOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaOutput)
}

func (i GrantPrivilegesToRoleOnSchemaArgs) ToGrantPrivilegesToRoleOnSchemaPtrOutput() GrantPrivilegesToRoleOnSchemaPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaArgs) ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaOutput).ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(ctx)
}

// GrantPrivilegesToRoleOnSchemaPtrInput is an input type that accepts GrantPrivilegesToRoleOnSchemaArgs, GrantPrivilegesToRoleOnSchemaPtr and GrantPrivilegesToRoleOnSchemaPtrOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaPtrInput` via:
//
//	        GrantPrivilegesToRoleOnSchemaArgs{...}
//
//	or:
//
//	        nil
type GrantPrivilegesToRoleOnSchemaPtrInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaPtrOutput() GrantPrivilegesToRoleOnSchemaPtrOutput
	ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaPtrOutput
}

type grantPrivilegesToRoleOnSchemaPtrType GrantPrivilegesToRoleOnSchemaArgs

func GrantPrivilegesToRoleOnSchemaPtr(v *GrantPrivilegesToRoleOnSchemaArgs) GrantPrivilegesToRoleOnSchemaPtrInput {
	return (*grantPrivilegesToRoleOnSchemaPtrType)(v)
}

func (*grantPrivilegesToRoleOnSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchema)(nil)).Elem()
}

func (i *grantPrivilegesToRoleOnSchemaPtrType) ToGrantPrivilegesToRoleOnSchemaPtrOutput() GrantPrivilegesToRoleOnSchemaPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(context.Background())
}

func (i *grantPrivilegesToRoleOnSchemaPtrType) ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchema)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaOutput) ToGrantPrivilegesToRoleOnSchemaOutput() GrantPrivilegesToRoleOnSchemaOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaOutput) ToGrantPrivilegesToRoleOnSchemaOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaOutput) ToGrantPrivilegesToRoleOnSchemaPtrOutput() GrantPrivilegesToRoleOnSchemaPtrOutput {
	return o.ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(context.Background())
}

func (o GrantPrivilegesToRoleOnSchemaOutput) ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrantPrivilegesToRoleOnSchema) *GrantPrivilegesToRoleOnSchema {
		return &v
	}).(GrantPrivilegesToRoleOnSchemaPtrOutput)
}

// The fully qualified name of the database.
func (o GrantPrivilegesToRoleOnSchemaOutput) AllSchemasInDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchema) *string { return v.AllSchemasInDatabase }).(pulumi.StringPtrOutput)
}

// The fully qualified name of the database.
func (o GrantPrivilegesToRoleOnSchemaOutput) FutureSchemasInDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchema) *string { return v.FutureSchemasInDatabase }).(pulumi.StringPtrOutput)
}

// The fully qualified name of the schema.
func (o GrantPrivilegesToRoleOnSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaPtrOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchema)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaPtrOutput) ToGrantPrivilegesToRoleOnSchemaPtrOutput() GrantPrivilegesToRoleOnSchemaPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaPtrOutput) ToGrantPrivilegesToRoleOnSchemaPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaPtrOutput) Elem() GrantPrivilegesToRoleOnSchemaOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchema) GrantPrivilegesToRoleOnSchema {
		if v != nil {
			return *v
		}
		var ret GrantPrivilegesToRoleOnSchema
		return ret
	}).(GrantPrivilegesToRoleOnSchemaOutput)
}

// The fully qualified name of the database.
func (o GrantPrivilegesToRoleOnSchemaPtrOutput) AllSchemasInDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchema) *string {
		if v == nil {
			return nil
		}
		return v.AllSchemasInDatabase
	}).(pulumi.StringPtrOutput)
}

// The fully qualified name of the database.
func (o GrantPrivilegesToRoleOnSchemaPtrOutput) FutureSchemasInDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchema) *string {
		if v == nil {
			return nil
		}
		return v.FutureSchemasInDatabase
	}).(pulumi.StringPtrOutput)
}

// The fully qualified name of the schema.
func (o GrantPrivilegesToRoleOnSchemaPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchema) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObject struct {
	// Configures the privilege to be granted on all objects in eihter a database or schema.
	All *GrantPrivilegesToRoleOnSchemaObjectAll `pulumi:"all"`
	// Configures the privilege to be granted on future objects in eihter a database or schema.
	Future *GrantPrivilegesToRoleOnSchemaObjectFuture `pulumi:"future"`
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName *string `pulumi:"objectName"`
	// The object type of the schema object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
	ObjectType *string `pulumi:"objectType"`
}

// GrantPrivilegesToRoleOnSchemaObjectInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectArgs and GrantPrivilegesToRoleOnSchemaObjectOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectInput` via:
//
//	GrantPrivilegesToRoleOnSchemaObjectArgs{...}
type GrantPrivilegesToRoleOnSchemaObjectInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectOutput() GrantPrivilegesToRoleOnSchemaObjectOutput
	ToGrantPrivilegesToRoleOnSchemaObjectOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectOutput
}

type GrantPrivilegesToRoleOnSchemaObjectArgs struct {
	// Configures the privilege to be granted on all objects in eihter a database or schema.
	All GrantPrivilegesToRoleOnSchemaObjectAllPtrInput `pulumi:"all"`
	// Configures the privilege to be granted on future objects in eihter a database or schema.
	Future GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput `pulumi:"future"`
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName pulumi.StringPtrInput `pulumi:"objectName"`
	// The object type of the schema object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
	ObjectType pulumi.StringPtrInput `pulumi:"objectType"`
}

func (GrantPrivilegesToRoleOnSchemaObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObject)(nil)).Elem()
}

func (i GrantPrivilegesToRoleOnSchemaObjectArgs) ToGrantPrivilegesToRoleOnSchemaObjectOutput() GrantPrivilegesToRoleOnSchemaObjectOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectArgs) ToGrantPrivilegesToRoleOnSchemaObjectOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectOutput)
}

func (i GrantPrivilegesToRoleOnSchemaObjectArgs) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutput() GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectArgs) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectOutput).ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(ctx)
}

// GrantPrivilegesToRoleOnSchemaObjectPtrInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectArgs, GrantPrivilegesToRoleOnSchemaObjectPtr and GrantPrivilegesToRoleOnSchemaObjectPtrOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectPtrInput` via:
//
//	        GrantPrivilegesToRoleOnSchemaObjectArgs{...}
//
//	or:
//
//	        nil
type GrantPrivilegesToRoleOnSchemaObjectPtrInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectPtrOutput() GrantPrivilegesToRoleOnSchemaObjectPtrOutput
	ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectPtrOutput
}

type grantPrivilegesToRoleOnSchemaObjectPtrType GrantPrivilegesToRoleOnSchemaObjectArgs

func GrantPrivilegesToRoleOnSchemaObjectPtr(v *GrantPrivilegesToRoleOnSchemaObjectArgs) GrantPrivilegesToRoleOnSchemaObjectPtrInput {
	return (*grantPrivilegesToRoleOnSchemaObjectPtrType)(v)
}

func (*grantPrivilegesToRoleOnSchemaObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObject)(nil)).Elem()
}

func (i *grantPrivilegesToRoleOnSchemaObjectPtrType) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutput() GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(context.Background())
}

func (i *grantPrivilegesToRoleOnSchemaObjectPtrType) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObject)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ToGrantPrivilegesToRoleOnSchemaObjectOutput() GrantPrivilegesToRoleOnSchemaObjectOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ToGrantPrivilegesToRoleOnSchemaObjectOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutput() GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return o.ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(context.Background())
}

func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrantPrivilegesToRoleOnSchemaObject) *GrantPrivilegesToRoleOnSchemaObject {
		return &v
	}).(GrantPrivilegesToRoleOnSchemaObjectPtrOutput)
}

// Configures the privilege to be granted on all objects in eihter a database or schema.
func (o GrantPrivilegesToRoleOnSchemaObjectOutput) All() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObject) *GrantPrivilegesToRoleOnSchemaObjectAll { return v.All }).(GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput)
}

// Configures the privilege to be granted on future objects in eihter a database or schema.
func (o GrantPrivilegesToRoleOnSchemaObjectOutput) Future() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObject) *GrantPrivilegesToRoleOnSchemaObjectFuture {
		return v.Future
	}).(GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput)
}

// The fully qualified name of the object on which privileges will be granted.
func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObject) *string { return v.ObjectName }).(pulumi.StringPtrOutput)
}

// The object type of the schema object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
func (o GrantPrivilegesToRoleOnSchemaObjectOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObject) *string { return v.ObjectType }).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectPtrOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObject)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutput() GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) Elem() GrantPrivilegesToRoleOnSchemaObjectOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObject) GrantPrivilegesToRoleOnSchemaObject {
		if v != nil {
			return *v
		}
		var ret GrantPrivilegesToRoleOnSchemaObject
		return ret
	}).(GrantPrivilegesToRoleOnSchemaObjectOutput)
}

// Configures the privilege to be granted on all objects in eihter a database or schema.
func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) All() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObject) *GrantPrivilegesToRoleOnSchemaObjectAll {
		if v == nil {
			return nil
		}
		return v.All
	}).(GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput)
}

// Configures the privilege to be granted on future objects in eihter a database or schema.
func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) Future() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObject) *GrantPrivilegesToRoleOnSchemaObjectFuture {
		if v == nil {
			return nil
		}
		return v.Future
	}).(GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput)
}

// The fully qualified name of the object on which privileges will be granted.
func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObject) *string {
		if v == nil {
			return nil
		}
		return v.ObjectName
	}).(pulumi.StringPtrOutput)
}

// The object type of the schema object on which privileges will be granted. Valid values are: USER | RESOURCE MONITOR | WAREHOUSE | DATABASE | INTEGRATION | FAILOVER GROUP | REPLICATION GROUP
func (o GrantPrivilegesToRoleOnSchemaObjectPtrOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObject) *string {
		if v == nil {
			return nil
		}
		return v.ObjectType
	}).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectAll struct {
	InDatabase       *string `pulumi:"inDatabase"`
	InSchema         *string `pulumi:"inSchema"`
	ObjectTypePlural string  `pulumi:"objectTypePlural"`
}

// GrantPrivilegesToRoleOnSchemaObjectAllInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectAllArgs and GrantPrivilegesToRoleOnSchemaObjectAllOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectAllInput` via:
//
//	GrantPrivilegesToRoleOnSchemaObjectAllArgs{...}
type GrantPrivilegesToRoleOnSchemaObjectAllInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectAllOutput() GrantPrivilegesToRoleOnSchemaObjectAllOutput
	ToGrantPrivilegesToRoleOnSchemaObjectAllOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectAllOutput
}

type GrantPrivilegesToRoleOnSchemaObjectAllArgs struct {
	InDatabase       pulumi.StringPtrInput `pulumi:"inDatabase"`
	InSchema         pulumi.StringPtrInput `pulumi:"inSchema"`
	ObjectTypePlural pulumi.StringInput    `pulumi:"objectTypePlural"`
}

func (GrantPrivilegesToRoleOnSchemaObjectAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectAll)(nil)).Elem()
}

func (i GrantPrivilegesToRoleOnSchemaObjectAllArgs) ToGrantPrivilegesToRoleOnSchemaObjectAllOutput() GrantPrivilegesToRoleOnSchemaObjectAllOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectAllOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectAllArgs) ToGrantPrivilegesToRoleOnSchemaObjectAllOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectAllOutput)
}

func (i GrantPrivilegesToRoleOnSchemaObjectAllArgs) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutput() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectAllArgs) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectAllOutput).ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(ctx)
}

// GrantPrivilegesToRoleOnSchemaObjectAllPtrInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectAllArgs, GrantPrivilegesToRoleOnSchemaObjectAllPtr and GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectAllPtrInput` via:
//
//	        GrantPrivilegesToRoleOnSchemaObjectAllArgs{...}
//
//	or:
//
//	        nil
type GrantPrivilegesToRoleOnSchemaObjectAllPtrInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutput() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput
	ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput
}

type grantPrivilegesToRoleOnSchemaObjectAllPtrType GrantPrivilegesToRoleOnSchemaObjectAllArgs

func GrantPrivilegesToRoleOnSchemaObjectAllPtr(v *GrantPrivilegesToRoleOnSchemaObjectAllArgs) GrantPrivilegesToRoleOnSchemaObjectAllPtrInput {
	return (*grantPrivilegesToRoleOnSchemaObjectAllPtrType)(v)
}

func (*grantPrivilegesToRoleOnSchemaObjectAllPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObjectAll)(nil)).Elem()
}

func (i *grantPrivilegesToRoleOnSchemaObjectAllPtrType) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutput() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(context.Background())
}

func (i *grantPrivilegesToRoleOnSchemaObjectAllPtrType) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectAllOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectAll)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllOutput() GrantPrivilegesToRoleOnSchemaObjectAllOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutput() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o.ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(context.Background())
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrantPrivilegesToRoleOnSchemaObjectAll) *GrantPrivilegesToRoleOnSchemaObjectAll {
		return &v
	}).(GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) InDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectAll) *string { return v.InDatabase }).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) InSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectAll) *string { return v.InSchema }).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllOutput) ObjectTypePlural() pulumi.StringOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectAll) string { return v.ObjectTypePlural }).(pulumi.StringOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObjectAll)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutput() GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectAllPtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) Elem() GrantPrivilegesToRoleOnSchemaObjectAllOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectAll) GrantPrivilegesToRoleOnSchemaObjectAll {
		if v != nil {
			return *v
		}
		var ret GrantPrivilegesToRoleOnSchemaObjectAll
		return ret
	}).(GrantPrivilegesToRoleOnSchemaObjectAllOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) InDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectAll) *string {
		if v == nil {
			return nil
		}
		return v.InDatabase
	}).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) InSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectAll) *string {
		if v == nil {
			return nil
		}
		return v.InSchema
	}).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput) ObjectTypePlural() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectAll) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectTypePlural
	}).(pulumi.StringPtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectFuture struct {
	InDatabase       *string `pulumi:"inDatabase"`
	InSchema         *string `pulumi:"inSchema"`
	ObjectTypePlural string  `pulumi:"objectTypePlural"`
}

// GrantPrivilegesToRoleOnSchemaObjectFutureInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectFutureArgs and GrantPrivilegesToRoleOnSchemaObjectFutureOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectFutureInput` via:
//
//	GrantPrivilegesToRoleOnSchemaObjectFutureArgs{...}
type GrantPrivilegesToRoleOnSchemaObjectFutureInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectFutureOutput() GrantPrivilegesToRoleOnSchemaObjectFutureOutput
	ToGrantPrivilegesToRoleOnSchemaObjectFutureOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectFutureOutput
}

type GrantPrivilegesToRoleOnSchemaObjectFutureArgs struct {
	InDatabase       pulumi.StringPtrInput `pulumi:"inDatabase"`
	InSchema         pulumi.StringPtrInput `pulumi:"inSchema"`
	ObjectTypePlural pulumi.StringInput    `pulumi:"objectTypePlural"`
}

func (GrantPrivilegesToRoleOnSchemaObjectFutureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectFuture)(nil)).Elem()
}

func (i GrantPrivilegesToRoleOnSchemaObjectFutureArgs) ToGrantPrivilegesToRoleOnSchemaObjectFutureOutput() GrantPrivilegesToRoleOnSchemaObjectFutureOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectFutureOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectFutureArgs) ToGrantPrivilegesToRoleOnSchemaObjectFutureOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFutureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectFutureOutput)
}

func (i GrantPrivilegesToRoleOnSchemaObjectFutureArgs) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(context.Background())
}

func (i GrantPrivilegesToRoleOnSchemaObjectFutureArgs) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectFutureOutput).ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(ctx)
}

// GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput is an input type that accepts GrantPrivilegesToRoleOnSchemaObjectFutureArgs, GrantPrivilegesToRoleOnSchemaObjectFuturePtr and GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput values.
// You can construct a concrete instance of `GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput` via:
//
//	        GrantPrivilegesToRoleOnSchemaObjectFutureArgs{...}
//
//	or:
//
//	        nil
type GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput interface {
	pulumi.Input

	ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput
	ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(context.Context) GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput
}

type grantPrivilegesToRoleOnSchemaObjectFuturePtrType GrantPrivilegesToRoleOnSchemaObjectFutureArgs

func GrantPrivilegesToRoleOnSchemaObjectFuturePtr(v *GrantPrivilegesToRoleOnSchemaObjectFutureArgs) GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput {
	return (*grantPrivilegesToRoleOnSchemaObjectFuturePtrType)(v)
}

func (*grantPrivilegesToRoleOnSchemaObjectFuturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObjectFuture)(nil)).Elem()
}

func (i *grantPrivilegesToRoleOnSchemaObjectFuturePtrType) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return i.ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(context.Background())
}

func (i *grantPrivilegesToRoleOnSchemaObjectFuturePtrType) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectFutureOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectFuture)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ToGrantPrivilegesToRoleOnSchemaObjectFutureOutput() GrantPrivilegesToRoleOnSchemaObjectFutureOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ToGrantPrivilegesToRoleOnSchemaObjectFutureOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFutureOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o.ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(context.Background())
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrantPrivilegesToRoleOnSchemaObjectFuture) *GrantPrivilegesToRoleOnSchemaObjectFuture {
		return &v
	}).(GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) InDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectFuture) *string { return v.InDatabase }).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) InSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectFuture) *string { return v.InSchema }).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFutureOutput) ObjectTypePlural() pulumi.StringOutput {
	return o.ApplyT(func(v GrantPrivilegesToRoleOnSchemaObjectFuture) string { return v.ObjectTypePlural }).(pulumi.StringOutput)
}

type GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput struct{ *pulumi.OutputState }

func (GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilegesToRoleOnSchemaObjectFuture)(nil)).Elem()
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput() GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) ToGrantPrivilegesToRoleOnSchemaObjectFuturePtrOutputWithContext(ctx context.Context) GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput {
	return o
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) Elem() GrantPrivilegesToRoleOnSchemaObjectFutureOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectFuture) GrantPrivilegesToRoleOnSchemaObjectFuture {
		if v != nil {
			return *v
		}
		var ret GrantPrivilegesToRoleOnSchemaObjectFuture
		return ret
	}).(GrantPrivilegesToRoleOnSchemaObjectFutureOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) InDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectFuture) *string {
		if v == nil {
			return nil
		}
		return v.InDatabase
	}).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) InSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectFuture) *string {
		if v == nil {
			return nil
		}
		return v.InSchema
	}).(pulumi.StringPtrOutput)
}

func (o GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput) ObjectTypePlural() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilegesToRoleOnSchemaObjectFuture) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectTypePlural
	}).(pulumi.StringPtrOutput)
}

type MaskingPolicySignature struct {
	Columns []MaskingPolicySignatureColumn `pulumi:"columns"`
}

// MaskingPolicySignatureInput is an input type that accepts MaskingPolicySignatureArgs and MaskingPolicySignatureOutput values.
// You can construct a concrete instance of `MaskingPolicySignatureInput` via:
//
//	MaskingPolicySignatureArgs{...}
type MaskingPolicySignatureInput interface {
	pulumi.Input

	ToMaskingPolicySignatureOutput() MaskingPolicySignatureOutput
	ToMaskingPolicySignatureOutputWithContext(context.Context) MaskingPolicySignatureOutput
}

type MaskingPolicySignatureArgs struct {
	Columns MaskingPolicySignatureColumnArrayInput `pulumi:"columns"`
}

func (MaskingPolicySignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaskingPolicySignature)(nil)).Elem()
}

func (i MaskingPolicySignatureArgs) ToMaskingPolicySignatureOutput() MaskingPolicySignatureOutput {
	return i.ToMaskingPolicySignatureOutputWithContext(context.Background())
}

func (i MaskingPolicySignatureArgs) ToMaskingPolicySignatureOutputWithContext(ctx context.Context) MaskingPolicySignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicySignatureOutput)
}

func (i MaskingPolicySignatureArgs) ToMaskingPolicySignaturePtrOutput() MaskingPolicySignaturePtrOutput {
	return i.ToMaskingPolicySignaturePtrOutputWithContext(context.Background())
}

func (i MaskingPolicySignatureArgs) ToMaskingPolicySignaturePtrOutputWithContext(ctx context.Context) MaskingPolicySignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicySignatureOutput).ToMaskingPolicySignaturePtrOutputWithContext(ctx)
}

// MaskingPolicySignaturePtrInput is an input type that accepts MaskingPolicySignatureArgs, MaskingPolicySignaturePtr and MaskingPolicySignaturePtrOutput values.
// You can construct a concrete instance of `MaskingPolicySignaturePtrInput` via:
//
//	        MaskingPolicySignatureArgs{...}
//
//	or:
//
//	        nil
type MaskingPolicySignaturePtrInput interface {
	pulumi.Input

	ToMaskingPolicySignaturePtrOutput() MaskingPolicySignaturePtrOutput
	ToMaskingPolicySignaturePtrOutputWithContext(context.Context) MaskingPolicySignaturePtrOutput
}

type maskingPolicySignaturePtrType MaskingPolicySignatureArgs

func MaskingPolicySignaturePtr(v *MaskingPolicySignatureArgs) MaskingPolicySignaturePtrInput {
	return (*maskingPolicySignaturePtrType)(v)
}

func (*maskingPolicySignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicySignature)(nil)).Elem()
}

func (i *maskingPolicySignaturePtrType) ToMaskingPolicySignaturePtrOutput() MaskingPolicySignaturePtrOutput {
	return i.ToMaskingPolicySignaturePtrOutputWithContext(context.Background())
}

func (i *maskingPolicySignaturePtrType) ToMaskingPolicySignaturePtrOutputWithContext(ctx context.Context) MaskingPolicySignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicySignaturePtrOutput)
}

type MaskingPolicySignatureOutput struct{ *pulumi.OutputState }

func (MaskingPolicySignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaskingPolicySignature)(nil)).Elem()
}

func (o MaskingPolicySignatureOutput) ToMaskingPolicySignatureOutput() MaskingPolicySignatureOutput {
	return o
}

func (o MaskingPolicySignatureOutput) ToMaskingPolicySignatureOutputWithContext(ctx context.Context) MaskingPolicySignatureOutput {
	return o
}

func (o MaskingPolicySignatureOutput) ToMaskingPolicySignaturePtrOutput() MaskingPolicySignaturePtrOutput {
	return o.ToMaskingPolicySignaturePtrOutputWithContext(context.Background())
}

func (o MaskingPolicySignatureOutput) ToMaskingPolicySignaturePtrOutputWithContext(ctx context.Context) MaskingPolicySignaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaskingPolicySignature) *MaskingPolicySignature {
		return &v
	}).(MaskingPolicySignaturePtrOutput)
}

func (o MaskingPolicySignatureOutput) Columns() MaskingPolicySignatureColumnArrayOutput {
	return o.ApplyT(func(v MaskingPolicySignature) []MaskingPolicySignatureColumn { return v.Columns }).(MaskingPolicySignatureColumnArrayOutput)
}

type MaskingPolicySignaturePtrOutput struct{ *pulumi.OutputState }

func (MaskingPolicySignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicySignature)(nil)).Elem()
}

func (o MaskingPolicySignaturePtrOutput) ToMaskingPolicySignaturePtrOutput() MaskingPolicySignaturePtrOutput {
	return o
}

func (o MaskingPolicySignaturePtrOutput) ToMaskingPolicySignaturePtrOutputWithContext(ctx context.Context) MaskingPolicySignaturePtrOutput {
	return o
}

func (o MaskingPolicySignaturePtrOutput) Elem() MaskingPolicySignatureOutput {
	return o.ApplyT(func(v *MaskingPolicySignature) MaskingPolicySignature {
		if v != nil {
			return *v
		}
		var ret MaskingPolicySignature
		return ret
	}).(MaskingPolicySignatureOutput)
}

func (o MaskingPolicySignaturePtrOutput) Columns() MaskingPolicySignatureColumnArrayOutput {
	return o.ApplyT(func(v *MaskingPolicySignature) []MaskingPolicySignatureColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(MaskingPolicySignatureColumnArrayOutput)
}

type MaskingPolicySignatureColumn struct {
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// MaskingPolicySignatureColumnInput is an input type that accepts MaskingPolicySignatureColumnArgs and MaskingPolicySignatureColumnOutput values.
// You can construct a concrete instance of `MaskingPolicySignatureColumnInput` via:
//
//	MaskingPolicySignatureColumnArgs{...}
type MaskingPolicySignatureColumnInput interface {
	pulumi.Input

	ToMaskingPolicySignatureColumnOutput() MaskingPolicySignatureColumnOutput
	ToMaskingPolicySignatureColumnOutputWithContext(context.Context) MaskingPolicySignatureColumnOutput
}

type MaskingPolicySignatureColumnArgs struct {
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (MaskingPolicySignatureColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaskingPolicySignatureColumn)(nil)).Elem()
}

func (i MaskingPolicySignatureColumnArgs) ToMaskingPolicySignatureColumnOutput() MaskingPolicySignatureColumnOutput {
	return i.ToMaskingPolicySignatureColumnOutputWithContext(context.Background())
}

func (i MaskingPolicySignatureColumnArgs) ToMaskingPolicySignatureColumnOutputWithContext(ctx context.Context) MaskingPolicySignatureColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicySignatureColumnOutput)
}

// MaskingPolicySignatureColumnArrayInput is an input type that accepts MaskingPolicySignatureColumnArray and MaskingPolicySignatureColumnArrayOutput values.
// You can construct a concrete instance of `MaskingPolicySignatureColumnArrayInput` via:
//
//	MaskingPolicySignatureColumnArray{ MaskingPolicySignatureColumnArgs{...} }
type MaskingPolicySignatureColumnArrayInput interface {
	pulumi.Input

	ToMaskingPolicySignatureColumnArrayOutput() MaskingPolicySignatureColumnArrayOutput
	ToMaskingPolicySignatureColumnArrayOutputWithContext(context.Context) MaskingPolicySignatureColumnArrayOutput
}

type MaskingPolicySignatureColumnArray []MaskingPolicySignatureColumnInput

func (MaskingPolicySignatureColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaskingPolicySignatureColumn)(nil)).Elem()
}

func (i MaskingPolicySignatureColumnArray) ToMaskingPolicySignatureColumnArrayOutput() MaskingPolicySignatureColumnArrayOutput {
	return i.ToMaskingPolicySignatureColumnArrayOutputWithContext(context.Background())
}

func (i MaskingPolicySignatureColumnArray) ToMaskingPolicySignatureColumnArrayOutputWithContext(ctx context.Context) MaskingPolicySignatureColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicySignatureColumnArrayOutput)
}

type MaskingPolicySignatureColumnOutput struct{ *pulumi.OutputState }

func (MaskingPolicySignatureColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaskingPolicySignatureColumn)(nil)).Elem()
}

func (o MaskingPolicySignatureColumnOutput) ToMaskingPolicySignatureColumnOutput() MaskingPolicySignatureColumnOutput {
	return o
}

func (o MaskingPolicySignatureColumnOutput) ToMaskingPolicySignatureColumnOutputWithContext(ctx context.Context) MaskingPolicySignatureColumnOutput {
	return o
}

// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
func (o MaskingPolicySignatureColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MaskingPolicySignatureColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o MaskingPolicySignatureColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MaskingPolicySignatureColumn) string { return v.Type }).(pulumi.StringOutput)
}

type MaskingPolicySignatureColumnArrayOutput struct{ *pulumi.OutputState }

func (MaskingPolicySignatureColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaskingPolicySignatureColumn)(nil)).Elem()
}

func (o MaskingPolicySignatureColumnArrayOutput) ToMaskingPolicySignatureColumnArrayOutput() MaskingPolicySignatureColumnArrayOutput {
	return o
}

func (o MaskingPolicySignatureColumnArrayOutput) ToMaskingPolicySignatureColumnArrayOutputWithContext(ctx context.Context) MaskingPolicySignatureColumnArrayOutput {
	return o
}

func (o MaskingPolicySignatureColumnArrayOutput) Index(i pulumi.IntInput) MaskingPolicySignatureColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaskingPolicySignatureColumn {
		return vs[0].([]MaskingPolicySignatureColumn)[vs[1].(int)]
	}).(MaskingPolicySignatureColumnOutput)
}

type MaterializedViewTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// MaterializedViewTagInput is an input type that accepts MaterializedViewTagArgs and MaterializedViewTagOutput values.
// You can construct a concrete instance of `MaterializedViewTagInput` via:
//
//	MaterializedViewTagArgs{...}
type MaterializedViewTagInput interface {
	pulumi.Input

	ToMaterializedViewTagOutput() MaterializedViewTagOutput
	ToMaterializedViewTagOutputWithContext(context.Context) MaterializedViewTagOutput
}

type MaterializedViewTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MaterializedViewTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewTag)(nil)).Elem()
}

func (i MaterializedViewTagArgs) ToMaterializedViewTagOutput() MaterializedViewTagOutput {
	return i.ToMaterializedViewTagOutputWithContext(context.Background())
}

func (i MaterializedViewTagArgs) ToMaterializedViewTagOutputWithContext(ctx context.Context) MaterializedViewTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewTagOutput)
}

// MaterializedViewTagArrayInput is an input type that accepts MaterializedViewTagArray and MaterializedViewTagArrayOutput values.
// You can construct a concrete instance of `MaterializedViewTagArrayInput` via:
//
//	MaterializedViewTagArray{ MaterializedViewTagArgs{...} }
type MaterializedViewTagArrayInput interface {
	pulumi.Input

	ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput
	ToMaterializedViewTagArrayOutputWithContext(context.Context) MaterializedViewTagArrayOutput
}

type MaterializedViewTagArray []MaterializedViewTagInput

func (MaterializedViewTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterializedViewTag)(nil)).Elem()
}

func (i MaterializedViewTagArray) ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput {
	return i.ToMaterializedViewTagArrayOutputWithContext(context.Background())
}

func (i MaterializedViewTagArray) ToMaterializedViewTagArrayOutputWithContext(ctx context.Context) MaterializedViewTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewTagArrayOutput)
}

type MaterializedViewTagOutput struct{ *pulumi.OutputState }

func (MaterializedViewTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewTag)(nil)).Elem()
}

func (o MaterializedViewTagOutput) ToMaterializedViewTagOutput() MaterializedViewTagOutput {
	return o
}

func (o MaterializedViewTagOutput) ToMaterializedViewTagOutputWithContext(ctx context.Context) MaterializedViewTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o MaterializedViewTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o MaterializedViewTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o MaterializedViewTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o MaterializedViewTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewTag) string { return v.Value }).(pulumi.StringOutput)
}

type MaterializedViewTagArrayOutput struct{ *pulumi.OutputState }

func (MaterializedViewTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterializedViewTag)(nil)).Elem()
}

func (o MaterializedViewTagArrayOutput) ToMaterializedViewTagArrayOutput() MaterializedViewTagArrayOutput {
	return o
}

func (o MaterializedViewTagArrayOutput) ToMaterializedViewTagArrayOutputWithContext(ctx context.Context) MaterializedViewTagArrayOutput {
	return o
}

func (o MaterializedViewTagArrayOutput) Index(i pulumi.IntInput) MaterializedViewTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaterializedViewTag {
		return vs[0].([]MaterializedViewTag)[vs[1].(int)]
	}).(MaterializedViewTagOutput)
}

type ObjectParameterObjectIdentifier struct {
	// Name of the database that the object was created in.
	Database *string `pulumi:"database"`
	// Name of the object to set the parameter for.
	Name string `pulumi:"name"`
	// Name of the schema that the object was created in.
	Schema *string `pulumi:"schema"`
}

// ObjectParameterObjectIdentifierInput is an input type that accepts ObjectParameterObjectIdentifierArgs and ObjectParameterObjectIdentifierOutput values.
// You can construct a concrete instance of `ObjectParameterObjectIdentifierInput` via:
//
//	ObjectParameterObjectIdentifierArgs{...}
type ObjectParameterObjectIdentifierInput interface {
	pulumi.Input

	ToObjectParameterObjectIdentifierOutput() ObjectParameterObjectIdentifierOutput
	ToObjectParameterObjectIdentifierOutputWithContext(context.Context) ObjectParameterObjectIdentifierOutput
}

type ObjectParameterObjectIdentifierArgs struct {
	// Name of the database that the object was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Name of the object to set the parameter for.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the object was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (ObjectParameterObjectIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectParameterObjectIdentifier)(nil)).Elem()
}

func (i ObjectParameterObjectIdentifierArgs) ToObjectParameterObjectIdentifierOutput() ObjectParameterObjectIdentifierOutput {
	return i.ToObjectParameterObjectIdentifierOutputWithContext(context.Background())
}

func (i ObjectParameterObjectIdentifierArgs) ToObjectParameterObjectIdentifierOutputWithContext(ctx context.Context) ObjectParameterObjectIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectParameterObjectIdentifierOutput)
}

// ObjectParameterObjectIdentifierArrayInput is an input type that accepts ObjectParameterObjectIdentifierArray and ObjectParameterObjectIdentifierArrayOutput values.
// You can construct a concrete instance of `ObjectParameterObjectIdentifierArrayInput` via:
//
//	ObjectParameterObjectIdentifierArray{ ObjectParameterObjectIdentifierArgs{...} }
type ObjectParameterObjectIdentifierArrayInput interface {
	pulumi.Input

	ToObjectParameterObjectIdentifierArrayOutput() ObjectParameterObjectIdentifierArrayOutput
	ToObjectParameterObjectIdentifierArrayOutputWithContext(context.Context) ObjectParameterObjectIdentifierArrayOutput
}

type ObjectParameterObjectIdentifierArray []ObjectParameterObjectIdentifierInput

func (ObjectParameterObjectIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectParameterObjectIdentifier)(nil)).Elem()
}

func (i ObjectParameterObjectIdentifierArray) ToObjectParameterObjectIdentifierArrayOutput() ObjectParameterObjectIdentifierArrayOutput {
	return i.ToObjectParameterObjectIdentifierArrayOutputWithContext(context.Background())
}

func (i ObjectParameterObjectIdentifierArray) ToObjectParameterObjectIdentifierArrayOutputWithContext(ctx context.Context) ObjectParameterObjectIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectParameterObjectIdentifierArrayOutput)
}

type ObjectParameterObjectIdentifierOutput struct{ *pulumi.OutputState }

func (ObjectParameterObjectIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectParameterObjectIdentifier)(nil)).Elem()
}

func (o ObjectParameterObjectIdentifierOutput) ToObjectParameterObjectIdentifierOutput() ObjectParameterObjectIdentifierOutput {
	return o
}

func (o ObjectParameterObjectIdentifierOutput) ToObjectParameterObjectIdentifierOutputWithContext(ctx context.Context) ObjectParameterObjectIdentifierOutput {
	return o
}

// Name of the database that the object was created in.
func (o ObjectParameterObjectIdentifierOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectParameterObjectIdentifier) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Name of the object to set the parameter for.
func (o ObjectParameterObjectIdentifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectParameterObjectIdentifier) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the object was created in.
func (o ObjectParameterObjectIdentifierOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectParameterObjectIdentifier) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type ObjectParameterObjectIdentifierArrayOutput struct{ *pulumi.OutputState }

func (ObjectParameterObjectIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectParameterObjectIdentifier)(nil)).Elem()
}

func (o ObjectParameterObjectIdentifierArrayOutput) ToObjectParameterObjectIdentifierArrayOutput() ObjectParameterObjectIdentifierArrayOutput {
	return o
}

func (o ObjectParameterObjectIdentifierArrayOutput) ToObjectParameterObjectIdentifierArrayOutputWithContext(ctx context.Context) ObjectParameterObjectIdentifierArrayOutput {
	return o
}

func (o ObjectParameterObjectIdentifierArrayOutput) Index(i pulumi.IntInput) ObjectParameterObjectIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectParameterObjectIdentifier {
		return vs[0].([]ObjectParameterObjectIdentifier)[vs[1].(int)]
	}).(ObjectParameterObjectIdentifierOutput)
}

type ProcedureArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// ProcedureArgumentInput is an input type that accepts ProcedureArgumentArgs and ProcedureArgumentOutput values.
// You can construct a concrete instance of `ProcedureArgumentInput` via:
//
//	ProcedureArgumentArgs{...}
type ProcedureArgumentInput interface {
	pulumi.Input

	ToProcedureArgumentOutput() ProcedureArgumentOutput
	ToProcedureArgumentOutputWithContext(context.Context) ProcedureArgumentOutput
}

type ProcedureArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProcedureArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureArgument)(nil)).Elem()
}

func (i ProcedureArgumentArgs) ToProcedureArgumentOutput() ProcedureArgumentOutput {
	return i.ToProcedureArgumentOutputWithContext(context.Background())
}

func (i ProcedureArgumentArgs) ToProcedureArgumentOutputWithContext(ctx context.Context) ProcedureArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureArgumentOutput)
}

// ProcedureArgumentArrayInput is an input type that accepts ProcedureArgumentArray and ProcedureArgumentArrayOutput values.
// You can construct a concrete instance of `ProcedureArgumentArrayInput` via:
//
//	ProcedureArgumentArray{ ProcedureArgumentArgs{...} }
type ProcedureArgumentArrayInput interface {
	pulumi.Input

	ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput
	ToProcedureArgumentArrayOutputWithContext(context.Context) ProcedureArgumentArrayOutput
}

type ProcedureArgumentArray []ProcedureArgumentInput

func (ProcedureArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureArgument)(nil)).Elem()
}

func (i ProcedureArgumentArray) ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput {
	return i.ToProcedureArgumentArrayOutputWithContext(context.Background())
}

func (i ProcedureArgumentArray) ToProcedureArgumentArrayOutputWithContext(ctx context.Context) ProcedureArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureArgumentArrayOutput)
}

type ProcedureArgumentOutput struct{ *pulumi.OutputState }

func (ProcedureArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureArgument)(nil)).Elem()
}

func (o ProcedureArgumentOutput) ToProcedureArgumentOutput() ProcedureArgumentOutput {
	return o
}

func (o ProcedureArgumentOutput) ToProcedureArgumentOutputWithContext(ctx context.Context) ProcedureArgumentOutput {
	return o
}

// The argument name
func (o ProcedureArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o ProcedureArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureArgument) string { return v.Type }).(pulumi.StringOutput)
}

type ProcedureArgumentArrayOutput struct{ *pulumi.OutputState }

func (ProcedureArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureArgument)(nil)).Elem()
}

func (o ProcedureArgumentArrayOutput) ToProcedureArgumentArrayOutput() ProcedureArgumentArrayOutput {
	return o
}

func (o ProcedureArgumentArrayOutput) ToProcedureArgumentArrayOutputWithContext(ctx context.Context) ProcedureArgumentArrayOutput {
	return o
}

func (o ProcedureArgumentArrayOutput) Index(i pulumi.IntInput) ProcedureArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcedureArgument {
		return vs[0].([]ProcedureArgument)[vs[1].(int)]
	}).(ProcedureArgumentOutput)
}

type RoleTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// RoleTagInput is an input type that accepts RoleTagArgs and RoleTagOutput values.
// You can construct a concrete instance of `RoleTagInput` via:
//
//	RoleTagArgs{...}
type RoleTagInput interface {
	pulumi.Input

	ToRoleTagOutput() RoleTagOutput
	ToRoleTagOutputWithContext(context.Context) RoleTagOutput
}

type RoleTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (i RoleTagArgs) ToRoleTagOutput() RoleTagOutput {
	return i.ToRoleTagOutputWithContext(context.Background())
}

func (i RoleTagArgs) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagOutput)
}

// RoleTagArrayInput is an input type that accepts RoleTagArray and RoleTagArrayOutput values.
// You can construct a concrete instance of `RoleTagArrayInput` via:
//
//	RoleTagArray{ RoleTagArgs{...} }
type RoleTagArrayInput interface {
	pulumi.Input

	ToRoleTagArrayOutput() RoleTagArrayOutput
	ToRoleTagArrayOutputWithContext(context.Context) RoleTagArrayOutput
}

type RoleTagArray []RoleTagInput

func (RoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (i RoleTagArray) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return i.ToRoleTagArrayOutputWithContext(context.Background())
}

func (i RoleTagArray) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagArrayOutput)
}

type RoleTagOutput struct{ *pulumi.OutputState }

func (RoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (o RoleTagOutput) ToRoleTagOutput() RoleTagOutput {
	return o
}

func (o RoleTagOutput) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o RoleTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o RoleTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o RoleTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o RoleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Value }).(pulumi.StringOutput)
}

type RoleTagArrayOutput struct{ *pulumi.OutputState }

func (RoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) Index(i pulumi.IntInput) RoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleTag {
		return vs[0].([]RoleTag)[vs[1].(int)]
	}).(RoleTagOutput)
}

type SchemaTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// SchemaTagInput is an input type that accepts SchemaTagArgs and SchemaTagOutput values.
// You can construct a concrete instance of `SchemaTagInput` via:
//
//	SchemaTagArgs{...}
type SchemaTagInput interface {
	pulumi.Input

	ToSchemaTagOutput() SchemaTagOutput
	ToSchemaTagOutputWithContext(context.Context) SchemaTagOutput
}

type SchemaTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SchemaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (i SchemaTagArgs) ToSchemaTagOutput() SchemaTagOutput {
	return i.ToSchemaTagOutputWithContext(context.Background())
}

func (i SchemaTagArgs) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagOutput)
}

// SchemaTagArrayInput is an input type that accepts SchemaTagArray and SchemaTagArrayOutput values.
// You can construct a concrete instance of `SchemaTagArrayInput` via:
//
//	SchemaTagArray{ SchemaTagArgs{...} }
type SchemaTagArrayInput interface {
	pulumi.Input

	ToSchemaTagArrayOutput() SchemaTagArrayOutput
	ToSchemaTagArrayOutputWithContext(context.Context) SchemaTagArrayOutput
}

type SchemaTagArray []SchemaTagInput

func (SchemaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (i SchemaTagArray) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return i.ToSchemaTagArrayOutputWithContext(context.Background())
}

func (i SchemaTagArray) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagArrayOutput)
}

type SchemaTagOutput struct{ *pulumi.OutputState }

func (SchemaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (o SchemaTagOutput) ToSchemaTagOutput() SchemaTagOutput {
	return o
}

func (o SchemaTagOutput) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o SchemaTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o SchemaTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o SchemaTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o SchemaTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Value }).(pulumi.StringOutput)
}

type SchemaTagArrayOutput struct{ *pulumi.OutputState }

func (SchemaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) Index(i pulumi.IntInput) SchemaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaTag {
		return vs[0].([]SchemaTag)[vs[1].(int)]
	}).(SchemaTagOutput)
}

type StageTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// StageTagInput is an input type that accepts StageTagArgs and StageTagOutput values.
// You can construct a concrete instance of `StageTagInput` via:
//
//	StageTagArgs{...}
type StageTagInput interface {
	pulumi.Input

	ToStageTagOutput() StageTagOutput
	ToStageTagOutputWithContext(context.Context) StageTagOutput
}

type StageTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageTag)(nil)).Elem()
}

func (i StageTagArgs) ToStageTagOutput() StageTagOutput {
	return i.ToStageTagOutputWithContext(context.Background())
}

func (i StageTagArgs) ToStageTagOutputWithContext(ctx context.Context) StageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageTagOutput)
}

// StageTagArrayInput is an input type that accepts StageTagArray and StageTagArrayOutput values.
// You can construct a concrete instance of `StageTagArrayInput` via:
//
//	StageTagArray{ StageTagArgs{...} }
type StageTagArrayInput interface {
	pulumi.Input

	ToStageTagArrayOutput() StageTagArrayOutput
	ToStageTagArrayOutputWithContext(context.Context) StageTagArrayOutput
}

type StageTagArray []StageTagInput

func (StageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageTag)(nil)).Elem()
}

func (i StageTagArray) ToStageTagArrayOutput() StageTagArrayOutput {
	return i.ToStageTagArrayOutputWithContext(context.Background())
}

func (i StageTagArray) ToStageTagArrayOutputWithContext(ctx context.Context) StageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageTagArrayOutput)
}

type StageTagOutput struct{ *pulumi.OutputState }

func (StageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageTag)(nil)).Elem()
}

func (o StageTagOutput) ToStageTagOutput() StageTagOutput {
	return o
}

func (o StageTagOutput) ToStageTagOutputWithContext(ctx context.Context) StageTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o StageTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o StageTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StageTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o StageTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o StageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StageTag) string { return v.Value }).(pulumi.StringOutput)
}

type StageTagArrayOutput struct{ *pulumi.OutputState }

func (StageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageTag)(nil)).Elem()
}

func (o StageTagArrayOutput) ToStageTagArrayOutput() StageTagArrayOutput {
	return o
}

func (o StageTagArrayOutput) ToStageTagArrayOutputWithContext(ctx context.Context) StageTagArrayOutput {
	return o
}

func (o StageTagArrayOutput) Index(i pulumi.IntInput) StageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageTag {
		return vs[0].([]StageTag)[vs[1].(int)]
	}).(StageTagOutput)
}

type TableColumn struct {
	// Column comment
	Comment *string `pulumi:"comment"`
	// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
	Default *TableColumnDefault `pulumi:"default"`
	// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
	Identity *TableColumnIdentity `pulumi:"identity"`
	// Masking policy to apply on column
	MaskingPolicy *string `pulumi:"maskingPolicy"`
	// Column name
	Name string `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable *bool `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//	TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// Column comment
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
	Default TableColumnDefaultPtrInput `pulumi:"default"`
	// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
	Identity TableColumnIdentityPtrInput `pulumi:"identity"`
	// Masking policy to apply on column
	MaskingPolicy pulumi.StringPtrInput `pulumi:"maskingPolicy"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//	TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// Column comment
func (o TableColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Defines the column default value; note due to limitations of Snowflake's ALTER TABLE ADD/MODIFY COLUMN updates to default will not be applied
func (o TableColumnOutput) Default() TableColumnDefaultPtrOutput {
	return o.ApplyT(func(v TableColumn) *TableColumnDefault { return v.Default }).(TableColumnDefaultPtrOutput)
}

// Defines the identity start/step values for a column. **Note** Identity/default are mutually exclusive.
func (o TableColumnOutput) Identity() TableColumnIdentityPtrOutput {
	return o.ApplyT(func(v TableColumn) *TableColumnIdentity { return v.Identity }).(TableColumnIdentityPtrOutput)
}

// Masking policy to apply on column
func (o TableColumnOutput) MaskingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumn) *string { return v.MaskingPolicy }).(pulumi.StringPtrOutput)
}

// Column name
func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
func (o TableColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// Column type, e.g. VARIANT
func (o TableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

type TableColumnDefault struct {
	Constant   *string `pulumi:"constant"`
	Expression *string `pulumi:"expression"`
	Sequence   *string `pulumi:"sequence"`
}

// TableColumnDefaultInput is an input type that accepts TableColumnDefaultArgs and TableColumnDefaultOutput values.
// You can construct a concrete instance of `TableColumnDefaultInput` via:
//
//	TableColumnDefaultArgs{...}
type TableColumnDefaultInput interface {
	pulumi.Input

	ToTableColumnDefaultOutput() TableColumnDefaultOutput
	ToTableColumnDefaultOutputWithContext(context.Context) TableColumnDefaultOutput
}

type TableColumnDefaultArgs struct {
	Constant   pulumi.StringPtrInput `pulumi:"constant"`
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	Sequence   pulumi.StringPtrInput `pulumi:"sequence"`
}

func (TableColumnDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnDefault)(nil)).Elem()
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultOutput() TableColumnDefaultOutput {
	return i.ToTableColumnDefaultOutputWithContext(context.Background())
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultOutputWithContext(ctx context.Context) TableColumnDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultOutput)
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return i.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (i TableColumnDefaultArgs) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultOutput).ToTableColumnDefaultPtrOutputWithContext(ctx)
}

// TableColumnDefaultPtrInput is an input type that accepts TableColumnDefaultArgs, TableColumnDefaultPtr and TableColumnDefaultPtrOutput values.
// You can construct a concrete instance of `TableColumnDefaultPtrInput` via:
//
//	        TableColumnDefaultArgs{...}
//
//	or:
//
//	        nil
type TableColumnDefaultPtrInput interface {
	pulumi.Input

	ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput
	ToTableColumnDefaultPtrOutputWithContext(context.Context) TableColumnDefaultPtrOutput
}

type tableColumnDefaultPtrType TableColumnDefaultArgs

func TableColumnDefaultPtr(v *TableColumnDefaultArgs) TableColumnDefaultPtrInput {
	return (*tableColumnDefaultPtrType)(v)
}

func (*tableColumnDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnDefault)(nil)).Elem()
}

func (i *tableColumnDefaultPtrType) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return i.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (i *tableColumnDefaultPtrType) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnDefaultPtrOutput)
}

type TableColumnDefaultOutput struct{ *pulumi.OutputState }

func (TableColumnDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnDefault)(nil)).Elem()
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultOutput() TableColumnDefaultOutput {
	return o
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultOutputWithContext(ctx context.Context) TableColumnDefaultOutput {
	return o
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return o.ToTableColumnDefaultPtrOutputWithContext(context.Background())
}

func (o TableColumnDefaultOutput) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableColumnDefault) *TableColumnDefault {
		return &v
	}).(TableColumnDefaultPtrOutput)
}

func (o TableColumnDefaultOutput) Constant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Constant }).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultOutput) Sequence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumnDefault) *string { return v.Sequence }).(pulumi.StringPtrOutput)
}

type TableColumnDefaultPtrOutput struct{ *pulumi.OutputState }

func (TableColumnDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnDefault)(nil)).Elem()
}

func (o TableColumnDefaultPtrOutput) ToTableColumnDefaultPtrOutput() TableColumnDefaultPtrOutput {
	return o
}

func (o TableColumnDefaultPtrOutput) ToTableColumnDefaultPtrOutputWithContext(ctx context.Context) TableColumnDefaultPtrOutput {
	return o
}

func (o TableColumnDefaultPtrOutput) Elem() TableColumnDefaultOutput {
	return o.ApplyT(func(v *TableColumnDefault) TableColumnDefault {
		if v != nil {
			return *v
		}
		var ret TableColumnDefault
		return ret
	}).(TableColumnDefaultOutput)
}

func (o TableColumnDefaultPtrOutput) Constant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TableColumnDefaultPtrOutput) Sequence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableColumnDefault) *string {
		if v == nil {
			return nil
		}
		return v.Sequence
	}).(pulumi.StringPtrOutput)
}

type TableColumnIdentity struct {
	StartNum *int `pulumi:"startNum"`
	StepNum  *int `pulumi:"stepNum"`
}

// TableColumnIdentityInput is an input type that accepts TableColumnIdentityArgs and TableColumnIdentityOutput values.
// You can construct a concrete instance of `TableColumnIdentityInput` via:
//
//	TableColumnIdentityArgs{...}
type TableColumnIdentityInput interface {
	pulumi.Input

	ToTableColumnIdentityOutput() TableColumnIdentityOutput
	ToTableColumnIdentityOutputWithContext(context.Context) TableColumnIdentityOutput
}

type TableColumnIdentityArgs struct {
	StartNum pulumi.IntPtrInput `pulumi:"startNum"`
	StepNum  pulumi.IntPtrInput `pulumi:"stepNum"`
}

func (TableColumnIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnIdentity)(nil)).Elem()
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityOutput() TableColumnIdentityOutput {
	return i.ToTableColumnIdentityOutputWithContext(context.Background())
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityOutputWithContext(ctx context.Context) TableColumnIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityOutput)
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return i.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (i TableColumnIdentityArgs) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityOutput).ToTableColumnIdentityPtrOutputWithContext(ctx)
}

// TableColumnIdentityPtrInput is an input type that accepts TableColumnIdentityArgs, TableColumnIdentityPtr and TableColumnIdentityPtrOutput values.
// You can construct a concrete instance of `TableColumnIdentityPtrInput` via:
//
//	        TableColumnIdentityArgs{...}
//
//	or:
//
//	        nil
type TableColumnIdentityPtrInput interface {
	pulumi.Input

	ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput
	ToTableColumnIdentityPtrOutputWithContext(context.Context) TableColumnIdentityPtrOutput
}

type tableColumnIdentityPtrType TableColumnIdentityArgs

func TableColumnIdentityPtr(v *TableColumnIdentityArgs) TableColumnIdentityPtrInput {
	return (*tableColumnIdentityPtrType)(v)
}

func (*tableColumnIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnIdentity)(nil)).Elem()
}

func (i *tableColumnIdentityPtrType) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return i.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (i *tableColumnIdentityPtrType) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnIdentityPtrOutput)
}

type TableColumnIdentityOutput struct{ *pulumi.OutputState }

func (TableColumnIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumnIdentity)(nil)).Elem()
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityOutput() TableColumnIdentityOutput {
	return o
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityOutputWithContext(ctx context.Context) TableColumnIdentityOutput {
	return o
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return o.ToTableColumnIdentityPtrOutputWithContext(context.Background())
}

func (o TableColumnIdentityOutput) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableColumnIdentity) *TableColumnIdentity {
		return &v
	}).(TableColumnIdentityPtrOutput)
}

func (o TableColumnIdentityOutput) StartNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableColumnIdentity) *int { return v.StartNum }).(pulumi.IntPtrOutput)
}

func (o TableColumnIdentityOutput) StepNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableColumnIdentity) *int { return v.StepNum }).(pulumi.IntPtrOutput)
}

type TableColumnIdentityPtrOutput struct{ *pulumi.OutputState }

func (TableColumnIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnIdentity)(nil)).Elem()
}

func (o TableColumnIdentityPtrOutput) ToTableColumnIdentityPtrOutput() TableColumnIdentityPtrOutput {
	return o
}

func (o TableColumnIdentityPtrOutput) ToTableColumnIdentityPtrOutputWithContext(ctx context.Context) TableColumnIdentityPtrOutput {
	return o
}

func (o TableColumnIdentityPtrOutput) Elem() TableColumnIdentityOutput {
	return o.ApplyT(func(v *TableColumnIdentity) TableColumnIdentity {
		if v != nil {
			return *v
		}
		var ret TableColumnIdentity
		return ret
	}).(TableColumnIdentityOutput)
}

func (o TableColumnIdentityPtrOutput) StartNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableColumnIdentity) *int {
		if v == nil {
			return nil
		}
		return v.StartNum
	}).(pulumi.IntPtrOutput)
}

func (o TableColumnIdentityPtrOutput) StepNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableColumnIdentity) *int {
		if v == nil {
			return nil
		}
		return v.StepNum
	}).(pulumi.IntPtrOutput)
}

type TableConstraintForeignKeyProperties struct {
	// The match type for the foreign key. Not applicable for primary/unique keys
	Match *string `pulumi:"match"`
	// Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
	OnDelete *string `pulumi:"onDelete"`
	// Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
	OnUpdate *string `pulumi:"onUpdate"`
	// The table and columns that the foreign key references. Not applicable for primary/unique keys
	References *TableConstraintForeignKeyPropertiesReferences `pulumi:"references"`
}

// TableConstraintForeignKeyPropertiesInput is an input type that accepts TableConstraintForeignKeyPropertiesArgs and TableConstraintForeignKeyPropertiesOutput values.
// You can construct a concrete instance of `TableConstraintForeignKeyPropertiesInput` via:
//
//	TableConstraintForeignKeyPropertiesArgs{...}
type TableConstraintForeignKeyPropertiesInput interface {
	pulumi.Input

	ToTableConstraintForeignKeyPropertiesOutput() TableConstraintForeignKeyPropertiesOutput
	ToTableConstraintForeignKeyPropertiesOutputWithContext(context.Context) TableConstraintForeignKeyPropertiesOutput
}

type TableConstraintForeignKeyPropertiesArgs struct {
	// The match type for the foreign key. Not applicable for primary/unique keys
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
	OnDelete pulumi.StringPtrInput `pulumi:"onDelete"`
	// Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
	OnUpdate pulumi.StringPtrInput `pulumi:"onUpdate"`
	// The table and columns that the foreign key references. Not applicable for primary/unique keys
	References TableConstraintForeignKeyPropertiesReferencesPtrInput `pulumi:"references"`
}

func (TableConstraintForeignKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintForeignKeyProperties)(nil)).Elem()
}

func (i TableConstraintForeignKeyPropertiesArgs) ToTableConstraintForeignKeyPropertiesOutput() TableConstraintForeignKeyPropertiesOutput {
	return i.ToTableConstraintForeignKeyPropertiesOutputWithContext(context.Background())
}

func (i TableConstraintForeignKeyPropertiesArgs) ToTableConstraintForeignKeyPropertiesOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesOutput)
}

func (i TableConstraintForeignKeyPropertiesArgs) ToTableConstraintForeignKeyPropertiesPtrOutput() TableConstraintForeignKeyPropertiesPtrOutput {
	return i.ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i TableConstraintForeignKeyPropertiesArgs) ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesOutput).ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(ctx)
}

// TableConstraintForeignKeyPropertiesPtrInput is an input type that accepts TableConstraintForeignKeyPropertiesArgs, TableConstraintForeignKeyPropertiesPtr and TableConstraintForeignKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `TableConstraintForeignKeyPropertiesPtrInput` via:
//
//	        TableConstraintForeignKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type TableConstraintForeignKeyPropertiesPtrInput interface {
	pulumi.Input

	ToTableConstraintForeignKeyPropertiesPtrOutput() TableConstraintForeignKeyPropertiesPtrOutput
	ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(context.Context) TableConstraintForeignKeyPropertiesPtrOutput
}

type tableConstraintForeignKeyPropertiesPtrType TableConstraintForeignKeyPropertiesArgs

func TableConstraintForeignKeyPropertiesPtr(v *TableConstraintForeignKeyPropertiesArgs) TableConstraintForeignKeyPropertiesPtrInput {
	return (*tableConstraintForeignKeyPropertiesPtrType)(v)
}

func (*tableConstraintForeignKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintForeignKeyProperties)(nil)).Elem()
}

func (i *tableConstraintForeignKeyPropertiesPtrType) ToTableConstraintForeignKeyPropertiesPtrOutput() TableConstraintForeignKeyPropertiesPtrOutput {
	return i.ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *tableConstraintForeignKeyPropertiesPtrType) ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesPtrOutput)
}

type TableConstraintForeignKeyPropertiesOutput struct{ *pulumi.OutputState }

func (TableConstraintForeignKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintForeignKeyProperties)(nil)).Elem()
}

func (o TableConstraintForeignKeyPropertiesOutput) ToTableConstraintForeignKeyPropertiesOutput() TableConstraintForeignKeyPropertiesOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesOutput) ToTableConstraintForeignKeyPropertiesOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesOutput) ToTableConstraintForeignKeyPropertiesPtrOutput() TableConstraintForeignKeyPropertiesPtrOutput {
	return o.ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o TableConstraintForeignKeyPropertiesOutput) ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintForeignKeyProperties) *TableConstraintForeignKeyProperties {
		return &v
	}).(TableConstraintForeignKeyPropertiesPtrOutput)
}

// The match type for the foreign key. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyProperties) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesOutput) OnDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyProperties) *string { return v.OnDelete }).(pulumi.StringPtrOutput)
}

// Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesOutput) OnUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyProperties) *string { return v.OnUpdate }).(pulumi.StringPtrOutput)
}

// The table and columns that the foreign key references. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesOutput) References() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyProperties) *TableConstraintForeignKeyPropertiesReferences {
		return v.References
	}).(TableConstraintForeignKeyPropertiesReferencesPtrOutput)
}

type TableConstraintForeignKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintForeignKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintForeignKeyProperties)(nil)).Elem()
}

func (o TableConstraintForeignKeyPropertiesPtrOutput) ToTableConstraintForeignKeyPropertiesPtrOutput() TableConstraintForeignKeyPropertiesPtrOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesPtrOutput) ToTableConstraintForeignKeyPropertiesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesPtrOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesPtrOutput) Elem() TableConstraintForeignKeyPropertiesOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyProperties) TableConstraintForeignKeyProperties {
		if v != nil {
			return *v
		}
		var ret TableConstraintForeignKeyProperties
		return ret
	}).(TableConstraintForeignKeyPropertiesOutput)
}

// The match type for the foreign key. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesPtrOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyProperties) *string {
		if v == nil {
			return nil
		}
		return v.Match
	}).(pulumi.StringPtrOutput)
}

// Specifies the action performed when the primary/unique key for the foreign key is deleted. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesPtrOutput) OnDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyProperties) *string {
		if v == nil {
			return nil
		}
		return v.OnDelete
	}).(pulumi.StringPtrOutput)
}

// Specifies the action performed when the primary/unique key for the foreign key is updated. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesPtrOutput) OnUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyProperties) *string {
		if v == nil {
			return nil
		}
		return v.OnUpdate
	}).(pulumi.StringPtrOutput)
}

// The table and columns that the foreign key references. Not applicable for primary/unique keys
func (o TableConstraintForeignKeyPropertiesPtrOutput) References() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyProperties) *TableConstraintForeignKeyPropertiesReferences {
		if v == nil {
			return nil
		}
		return v.References
	}).(TableConstraintForeignKeyPropertiesReferencesPtrOutput)
}

type TableConstraintForeignKeyPropertiesReferences struct {
	// Columns to use in constraint key
	Columns []string `pulumi:"columns"`
	// Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "\n\n"."\n\n"."\n\n" or "\n\n.\n\n.\n\n" or "\n\n|\n\n.\n\n" (snowflake*table.my*table.id)
	TableId string `pulumi:"tableId"`
}

// TableConstraintForeignKeyPropertiesReferencesInput is an input type that accepts TableConstraintForeignKeyPropertiesReferencesArgs and TableConstraintForeignKeyPropertiesReferencesOutput values.
// You can construct a concrete instance of `TableConstraintForeignKeyPropertiesReferencesInput` via:
//
//	TableConstraintForeignKeyPropertiesReferencesArgs{...}
type TableConstraintForeignKeyPropertiesReferencesInput interface {
	pulumi.Input

	ToTableConstraintForeignKeyPropertiesReferencesOutput() TableConstraintForeignKeyPropertiesReferencesOutput
	ToTableConstraintForeignKeyPropertiesReferencesOutputWithContext(context.Context) TableConstraintForeignKeyPropertiesReferencesOutput
}

type TableConstraintForeignKeyPropertiesReferencesArgs struct {
	// Columns to use in constraint key
	Columns pulumi.StringArrayInput `pulumi:"columns"`
	// Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "\n\n"."\n\n"."\n\n" or "\n\n.\n\n.\n\n" or "\n\n|\n\n.\n\n" (snowflake*table.my*table.id)
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (TableConstraintForeignKeyPropertiesReferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintForeignKeyPropertiesReferences)(nil)).Elem()
}

func (i TableConstraintForeignKeyPropertiesReferencesArgs) ToTableConstraintForeignKeyPropertiesReferencesOutput() TableConstraintForeignKeyPropertiesReferencesOutput {
	return i.ToTableConstraintForeignKeyPropertiesReferencesOutputWithContext(context.Background())
}

func (i TableConstraintForeignKeyPropertiesReferencesArgs) ToTableConstraintForeignKeyPropertiesReferencesOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesReferencesOutput)
}

func (i TableConstraintForeignKeyPropertiesReferencesArgs) ToTableConstraintForeignKeyPropertiesReferencesPtrOutput() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return i.ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(context.Background())
}

func (i TableConstraintForeignKeyPropertiesReferencesArgs) ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesReferencesOutput).ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(ctx)
}

// TableConstraintForeignKeyPropertiesReferencesPtrInput is an input type that accepts TableConstraintForeignKeyPropertiesReferencesArgs, TableConstraintForeignKeyPropertiesReferencesPtr and TableConstraintForeignKeyPropertiesReferencesPtrOutput values.
// You can construct a concrete instance of `TableConstraintForeignKeyPropertiesReferencesPtrInput` via:
//
//	        TableConstraintForeignKeyPropertiesReferencesArgs{...}
//
//	or:
//
//	        nil
type TableConstraintForeignKeyPropertiesReferencesPtrInput interface {
	pulumi.Input

	ToTableConstraintForeignKeyPropertiesReferencesPtrOutput() TableConstraintForeignKeyPropertiesReferencesPtrOutput
	ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(context.Context) TableConstraintForeignKeyPropertiesReferencesPtrOutput
}

type tableConstraintForeignKeyPropertiesReferencesPtrType TableConstraintForeignKeyPropertiesReferencesArgs

func TableConstraintForeignKeyPropertiesReferencesPtr(v *TableConstraintForeignKeyPropertiesReferencesArgs) TableConstraintForeignKeyPropertiesReferencesPtrInput {
	return (*tableConstraintForeignKeyPropertiesReferencesPtrType)(v)
}

func (*tableConstraintForeignKeyPropertiesReferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintForeignKeyPropertiesReferences)(nil)).Elem()
}

func (i *tableConstraintForeignKeyPropertiesReferencesPtrType) ToTableConstraintForeignKeyPropertiesReferencesPtrOutput() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return i.ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(context.Background())
}

func (i *tableConstraintForeignKeyPropertiesReferencesPtrType) ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintForeignKeyPropertiesReferencesPtrOutput)
}

type TableConstraintForeignKeyPropertiesReferencesOutput struct{ *pulumi.OutputState }

func (TableConstraintForeignKeyPropertiesReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintForeignKeyPropertiesReferences)(nil)).Elem()
}

func (o TableConstraintForeignKeyPropertiesReferencesOutput) ToTableConstraintForeignKeyPropertiesReferencesOutput() TableConstraintForeignKeyPropertiesReferencesOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesReferencesOutput) ToTableConstraintForeignKeyPropertiesReferencesOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesReferencesOutput) ToTableConstraintForeignKeyPropertiesReferencesPtrOutput() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o.ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(context.Background())
}

func (o TableConstraintForeignKeyPropertiesReferencesOutput) ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintForeignKeyPropertiesReferences) *TableConstraintForeignKeyPropertiesReferences {
		return &v
	}).(TableConstraintForeignKeyPropertiesReferencesPtrOutput)
}

// Columns to use in constraint key
func (o TableConstraintForeignKeyPropertiesReferencesOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyPropertiesReferences) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "\n\n"."\n\n"."\n\n" or "\n\n.\n\n.\n\n" or "\n\n|\n\n.\n\n" (snowflake*table.my*table.id)
func (o TableConstraintForeignKeyPropertiesReferencesOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintForeignKeyPropertiesReferences) string { return v.TableId }).(pulumi.StringOutput)
}

type TableConstraintForeignKeyPropertiesReferencesPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintForeignKeyPropertiesReferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintForeignKeyPropertiesReferences)(nil)).Elem()
}

func (o TableConstraintForeignKeyPropertiesReferencesPtrOutput) ToTableConstraintForeignKeyPropertiesReferencesPtrOutput() TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesReferencesPtrOutput) ToTableConstraintForeignKeyPropertiesReferencesPtrOutputWithContext(ctx context.Context) TableConstraintForeignKeyPropertiesReferencesPtrOutput {
	return o
}

func (o TableConstraintForeignKeyPropertiesReferencesPtrOutput) Elem() TableConstraintForeignKeyPropertiesReferencesOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyPropertiesReferences) TableConstraintForeignKeyPropertiesReferences {
		if v != nil {
			return *v
		}
		var ret TableConstraintForeignKeyPropertiesReferences
		return ret
	}).(TableConstraintForeignKeyPropertiesReferencesOutput)
}

// Columns to use in constraint key
func (o TableConstraintForeignKeyPropertiesReferencesPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyPropertiesReferences) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// Idenfifier for table to create constraint on. Must be of the form Note: format must follow: "\n\n"."\n\n"."\n\n" or "\n\n.\n\n.\n\n" or "\n\n|\n\n.\n\n" (snowflake*table.my*table.id)
func (o TableConstraintForeignKeyPropertiesReferencesPtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintForeignKeyPropertiesReferences) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type TablePrimaryKey struct {
	// Columns to use in primary key
	Keys []string `pulumi:"keys"`
	// Name of constraint
	Name *string `pulumi:"name"`
}

// TablePrimaryKeyInput is an input type that accepts TablePrimaryKeyArgs and TablePrimaryKeyOutput values.
// You can construct a concrete instance of `TablePrimaryKeyInput` via:
//
//	TablePrimaryKeyArgs{...}
type TablePrimaryKeyInput interface {
	pulumi.Input

	ToTablePrimaryKeyOutput() TablePrimaryKeyOutput
	ToTablePrimaryKeyOutputWithContext(context.Context) TablePrimaryKeyOutput
}

type TablePrimaryKeyArgs struct {
	// Columns to use in primary key
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Name of constraint
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return i.ToTablePrimaryKeyOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput)
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput).ToTablePrimaryKeyPtrOutputWithContext(ctx)
}

// TablePrimaryKeyPtrInput is an input type that accepts TablePrimaryKeyArgs, TablePrimaryKeyPtr and TablePrimaryKeyPtrOutput values.
// You can construct a concrete instance of `TablePrimaryKeyPtrInput` via:
//
//	        TablePrimaryKeyArgs{...}
//
//	or:
//
//	        nil
type TablePrimaryKeyPtrInput interface {
	pulumi.Input

	ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput
	ToTablePrimaryKeyPtrOutputWithContext(context.Context) TablePrimaryKeyPtrOutput
}

type tablePrimaryKeyPtrType TablePrimaryKeyArgs

func TablePrimaryKeyPtr(v *TablePrimaryKeyArgs) TablePrimaryKeyPtrInput {
	return (*tablePrimaryKeyPtrType)(v)
}

func (*tablePrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyPtrOutput)
}

type TablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TablePrimaryKey) *TablePrimaryKey {
		return &v
	}).(TablePrimaryKeyPtrOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TablePrimaryKey) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TablePrimaryKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TablePrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) Elem() TablePrimaryKeyOutput {
	return o.ApplyT(func(v *TablePrimaryKey) TablePrimaryKey {
		if v != nil {
			return *v
		}
		var ret TablePrimaryKey
		return ret
	}).(TablePrimaryKeyOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TablePrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TablePrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type TableTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// TableTagInput is an input type that accepts TableTagArgs and TableTagOutput values.
// You can construct a concrete instance of `TableTagInput` via:
//
//	TableTagArgs{...}
type TableTagInput interface {
	pulumi.Input

	ToTableTagOutput() TableTagOutput
	ToTableTagOutputWithContext(context.Context) TableTagOutput
}

type TableTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (i TableTagArgs) ToTableTagOutput() TableTagOutput {
	return i.ToTableTagOutputWithContext(context.Background())
}

func (i TableTagArgs) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagOutput)
}

// TableTagArrayInput is an input type that accepts TableTagArray and TableTagArrayOutput values.
// You can construct a concrete instance of `TableTagArrayInput` via:
//
//	TableTagArray{ TableTagArgs{...} }
type TableTagArrayInput interface {
	pulumi.Input

	ToTableTagArrayOutput() TableTagArrayOutput
	ToTableTagArrayOutputWithContext(context.Context) TableTagArrayOutput
}

type TableTagArray []TableTagInput

func (TableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (i TableTagArray) ToTableTagArrayOutput() TableTagArrayOutput {
	return i.ToTableTagArrayOutputWithContext(context.Background())
}

func (i TableTagArray) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagArrayOutput)
}

type TableTagOutput struct{ *pulumi.OutputState }

func (TableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (o TableTagOutput) ToTableTagOutput() TableTagOutput {
	return o
}

func (o TableTagOutput) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o TableTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o TableTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o TableTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o TableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TableTag) string { return v.Value }).(pulumi.StringOutput)
}

type TableTagArrayOutput struct{ *pulumi.OutputState }

func (TableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (o TableTagArrayOutput) ToTableTagArrayOutput() TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) Index(i pulumi.IntInput) TableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableTag {
		return vs[0].([]TableTag)[vs[1].(int)]
	}).(TableTagOutput)
}

type TagAssociationObjectIdentifier struct {
	// Name of the database that the object was created in.
	Database *string `pulumi:"database"`
	// Name of the object to associate the tag with.
	Name string `pulumi:"name"`
	// Name of the schema that the object was created in.
	Schema *string `pulumi:"schema"`
}

// TagAssociationObjectIdentifierInput is an input type that accepts TagAssociationObjectIdentifierArgs and TagAssociationObjectIdentifierOutput values.
// You can construct a concrete instance of `TagAssociationObjectIdentifierInput` via:
//
//	TagAssociationObjectIdentifierArgs{...}
type TagAssociationObjectIdentifierInput interface {
	pulumi.Input

	ToTagAssociationObjectIdentifierOutput() TagAssociationObjectIdentifierOutput
	ToTagAssociationObjectIdentifierOutputWithContext(context.Context) TagAssociationObjectIdentifierOutput
}

type TagAssociationObjectIdentifierArgs struct {
	// Name of the database that the object was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Name of the object to associate the tag with.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the object was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (TagAssociationObjectIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagAssociationObjectIdentifier)(nil)).Elem()
}

func (i TagAssociationObjectIdentifierArgs) ToTagAssociationObjectIdentifierOutput() TagAssociationObjectIdentifierOutput {
	return i.ToTagAssociationObjectIdentifierOutputWithContext(context.Background())
}

func (i TagAssociationObjectIdentifierArgs) ToTagAssociationObjectIdentifierOutputWithContext(ctx context.Context) TagAssociationObjectIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationObjectIdentifierOutput)
}

// TagAssociationObjectIdentifierArrayInput is an input type that accepts TagAssociationObjectIdentifierArray and TagAssociationObjectIdentifierArrayOutput values.
// You can construct a concrete instance of `TagAssociationObjectIdentifierArrayInput` via:
//
//	TagAssociationObjectIdentifierArray{ TagAssociationObjectIdentifierArgs{...} }
type TagAssociationObjectIdentifierArrayInput interface {
	pulumi.Input

	ToTagAssociationObjectIdentifierArrayOutput() TagAssociationObjectIdentifierArrayOutput
	ToTagAssociationObjectIdentifierArrayOutputWithContext(context.Context) TagAssociationObjectIdentifierArrayOutput
}

type TagAssociationObjectIdentifierArray []TagAssociationObjectIdentifierInput

func (TagAssociationObjectIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagAssociationObjectIdentifier)(nil)).Elem()
}

func (i TagAssociationObjectIdentifierArray) ToTagAssociationObjectIdentifierArrayOutput() TagAssociationObjectIdentifierArrayOutput {
	return i.ToTagAssociationObjectIdentifierArrayOutputWithContext(context.Background())
}

func (i TagAssociationObjectIdentifierArray) ToTagAssociationObjectIdentifierArrayOutputWithContext(ctx context.Context) TagAssociationObjectIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationObjectIdentifierArrayOutput)
}

type TagAssociationObjectIdentifierOutput struct{ *pulumi.OutputState }

func (TagAssociationObjectIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagAssociationObjectIdentifier)(nil)).Elem()
}

func (o TagAssociationObjectIdentifierOutput) ToTagAssociationObjectIdentifierOutput() TagAssociationObjectIdentifierOutput {
	return o
}

func (o TagAssociationObjectIdentifierOutput) ToTagAssociationObjectIdentifierOutputWithContext(ctx context.Context) TagAssociationObjectIdentifierOutput {
	return o
}

// Name of the database that the object was created in.
func (o TagAssociationObjectIdentifierOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagAssociationObjectIdentifier) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Name of the object to associate the tag with.
func (o TagAssociationObjectIdentifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TagAssociationObjectIdentifier) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the object was created in.
func (o TagAssociationObjectIdentifierOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagAssociationObjectIdentifier) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type TagAssociationObjectIdentifierArrayOutput struct{ *pulumi.OutputState }

func (TagAssociationObjectIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagAssociationObjectIdentifier)(nil)).Elem()
}

func (o TagAssociationObjectIdentifierArrayOutput) ToTagAssociationObjectIdentifierArrayOutput() TagAssociationObjectIdentifierArrayOutput {
	return o
}

func (o TagAssociationObjectIdentifierArrayOutput) ToTagAssociationObjectIdentifierArrayOutputWithContext(ctx context.Context) TagAssociationObjectIdentifierArrayOutput {
	return o
}

func (o TagAssociationObjectIdentifierArrayOutput) Index(i pulumi.IntInput) TagAssociationObjectIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagAssociationObjectIdentifier {
		return vs[0].([]TagAssociationObjectIdentifier)[vs[1].(int)]
	}).(TagAssociationObjectIdentifierOutput)
}

type UserTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//	UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

type UserTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//	UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o UserTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o UserTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o UserTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o UserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Value }).(pulumi.StringOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

type ViewTag struct {
	// Name of the database that the tag was created in.
	Database *string `pulumi:"database"`
	// Tag name, e.g. department.
	Name string `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema *string `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value string `pulumi:"value"`
}

// ViewTagInput is an input type that accepts ViewTagArgs and ViewTagOutput values.
// You can construct a concrete instance of `ViewTagInput` via:
//
//	ViewTagArgs{...}
type ViewTagInput interface {
	pulumi.Input

	ToViewTagOutput() ViewTagOutput
	ToViewTagOutputWithContext(context.Context) ViewTagOutput
}

type ViewTagArgs struct {
	// Name of the database that the tag was created in.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tag name, e.g. department.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the schema that the tag was created in.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// Tag value, e.g. marketing_info.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ViewTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTag)(nil)).Elem()
}

func (i ViewTagArgs) ToViewTagOutput() ViewTagOutput {
	return i.ToViewTagOutputWithContext(context.Background())
}

func (i ViewTagArgs) ToViewTagOutputWithContext(ctx context.Context) ViewTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagOutput)
}

// ViewTagArrayInput is an input type that accepts ViewTagArray and ViewTagArrayOutput values.
// You can construct a concrete instance of `ViewTagArrayInput` via:
//
//	ViewTagArray{ ViewTagArgs{...} }
type ViewTagArrayInput interface {
	pulumi.Input

	ToViewTagArrayOutput() ViewTagArrayOutput
	ToViewTagArrayOutputWithContext(context.Context) ViewTagArrayOutput
}

type ViewTagArray []ViewTagInput

func (ViewTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewTag)(nil)).Elem()
}

func (i ViewTagArray) ToViewTagArrayOutput() ViewTagArrayOutput {
	return i.ToViewTagArrayOutputWithContext(context.Background())
}

func (i ViewTagArray) ToViewTagArrayOutputWithContext(ctx context.Context) ViewTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagArrayOutput)
}

type ViewTagOutput struct{ *pulumi.OutputState }

func (ViewTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTag)(nil)).Elem()
}

func (o ViewTagOutput) ToViewTagOutput() ViewTagOutput {
	return o
}

func (o ViewTagOutput) ToViewTagOutputWithContext(ctx context.Context) ViewTagOutput {
	return o
}

// Name of the database that the tag was created in.
func (o ViewTagOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewTag) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tag name, e.g. department.
func (o ViewTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ViewTag) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the schema that the tag was created in.
func (o ViewTagOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewTag) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// Tag value, e.g. marketing_info.
func (o ViewTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ViewTag) string { return v.Value }).(pulumi.StringOutput)
}

type ViewTagArrayOutput struct{ *pulumi.OutputState }

func (ViewTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewTag)(nil)).Elem()
}

func (o ViewTagArrayOutput) ToViewTagArrayOutput() ViewTagArrayOutput {
	return o
}

func (o ViewTagArrayOutput) ToViewTagArrayOutputWithContext(ctx context.Context) ViewTagArrayOutput {
	return o
}

func (o ViewTagArrayOutput) Index(i pulumi.IntInput) ViewTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ViewTag {
		return vs[0].([]ViewTag)[vs[1].(int)]
	}).(ViewTagOutput)
}

type GetAccountsAccount struct {
	AccountLocator                       string `pulumi:"accountLocator"`
	AccountLocatorUrl                    string `pulumi:"accountLocatorUrl"`
	AccountName                          string `pulumi:"accountName"`
	AccountUrl                           string `pulumi:"accountUrl"`
	Comment                              string `pulumi:"comment"`
	ConsumptionBillingEntityName         string `pulumi:"consumptionBillingEntityName"`
	CreatedOn                            string `pulumi:"createdOn"`
	Edition                              string `pulumi:"edition"`
	IsOrgAdmin                           bool   `pulumi:"isOrgAdmin"`
	ManagedAccounts                      int    `pulumi:"managedAccounts"`
	MarketplaceConsumerBillingEntityName string `pulumi:"marketplaceConsumerBillingEntityName"`
	MarketplaceProviderBillingEntityName string `pulumi:"marketplaceProviderBillingEntityName"`
	OldAccountUrl                        string `pulumi:"oldAccountUrl"`
	OrganizationName                     string `pulumi:"organizationName"`
	RegionGroup                          string `pulumi:"regionGroup"`
	SnowflakeRegion                      string `pulumi:"snowflakeRegion"`
}

// GetAccountsAccountInput is an input type that accepts GetAccountsAccountArgs and GetAccountsAccountOutput values.
// You can construct a concrete instance of `GetAccountsAccountInput` via:
//
//	GetAccountsAccountArgs{...}
type GetAccountsAccountInput interface {
	pulumi.Input

	ToGetAccountsAccountOutput() GetAccountsAccountOutput
	ToGetAccountsAccountOutputWithContext(context.Context) GetAccountsAccountOutput
}

type GetAccountsAccountArgs struct {
	AccountLocator                       pulumi.StringInput `pulumi:"accountLocator"`
	AccountLocatorUrl                    pulumi.StringInput `pulumi:"accountLocatorUrl"`
	AccountName                          pulumi.StringInput `pulumi:"accountName"`
	AccountUrl                           pulumi.StringInput `pulumi:"accountUrl"`
	Comment                              pulumi.StringInput `pulumi:"comment"`
	ConsumptionBillingEntityName         pulumi.StringInput `pulumi:"consumptionBillingEntityName"`
	CreatedOn                            pulumi.StringInput `pulumi:"createdOn"`
	Edition                              pulumi.StringInput `pulumi:"edition"`
	IsOrgAdmin                           pulumi.BoolInput   `pulumi:"isOrgAdmin"`
	ManagedAccounts                      pulumi.IntInput    `pulumi:"managedAccounts"`
	MarketplaceConsumerBillingEntityName pulumi.StringInput `pulumi:"marketplaceConsumerBillingEntityName"`
	MarketplaceProviderBillingEntityName pulumi.StringInput `pulumi:"marketplaceProviderBillingEntityName"`
	OldAccountUrl                        pulumi.StringInput `pulumi:"oldAccountUrl"`
	OrganizationName                     pulumi.StringInput `pulumi:"organizationName"`
	RegionGroup                          pulumi.StringInput `pulumi:"regionGroup"`
	SnowflakeRegion                      pulumi.StringInput `pulumi:"snowflakeRegion"`
}

func (GetAccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccount)(nil)).Elem()
}

func (i GetAccountsAccountArgs) ToGetAccountsAccountOutput() GetAccountsAccountOutput {
	return i.ToGetAccountsAccountOutputWithContext(context.Background())
}

func (i GetAccountsAccountArgs) ToGetAccountsAccountOutputWithContext(ctx context.Context) GetAccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountOutput)
}

// GetAccountsAccountArrayInput is an input type that accepts GetAccountsAccountArray and GetAccountsAccountArrayOutput values.
// You can construct a concrete instance of `GetAccountsAccountArrayInput` via:
//
//	GetAccountsAccountArray{ GetAccountsAccountArgs{...} }
type GetAccountsAccountArrayInput interface {
	pulumi.Input

	ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput
	ToGetAccountsAccountArrayOutputWithContext(context.Context) GetAccountsAccountArrayOutput
}

type GetAccountsAccountArray []GetAccountsAccountInput

func (GetAccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccount)(nil)).Elem()
}

func (i GetAccountsAccountArray) ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput {
	return i.ToGetAccountsAccountArrayOutputWithContext(context.Background())
}

func (i GetAccountsAccountArray) ToGetAccountsAccountArrayOutputWithContext(ctx context.Context) GetAccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountArrayOutput)
}

type GetAccountsAccountOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccount)(nil)).Elem()
}

func (o GetAccountsAccountOutput) ToGetAccountsAccountOutput() GetAccountsAccountOutput {
	return o
}

func (o GetAccountsAccountOutput) ToGetAccountsAccountOutputWithContext(ctx context.Context) GetAccountsAccountOutput {
	return o
}

func (o GetAccountsAccountOutput) AccountLocator() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountLocator }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) AccountLocatorUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountLocatorUrl }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) AccountUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountUrl }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) ConsumptionBillingEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.ConsumptionBillingEntityName }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.Edition }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) IsOrgAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccountsAccount) bool { return v.IsOrgAdmin }).(pulumi.BoolOutput)
}

func (o GetAccountsAccountOutput) ManagedAccounts() pulumi.IntOutput {
	return o.ApplyT(func(v GetAccountsAccount) int { return v.ManagedAccounts }).(pulumi.IntOutput)
}

func (o GetAccountsAccountOutput) MarketplaceConsumerBillingEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.MarketplaceConsumerBillingEntityName }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) MarketplaceProviderBillingEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.MarketplaceProviderBillingEntityName }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) OldAccountUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.OldAccountUrl }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.OrganizationName }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) RegionGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.RegionGroup }).(pulumi.StringOutput)
}

func (o GetAccountsAccountOutput) SnowflakeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.SnowflakeRegion }).(pulumi.StringOutput)
}

type GetAccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccount)(nil)).Elem()
}

func (o GetAccountsAccountArrayOutput) ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput {
	return o
}

func (o GetAccountsAccountArrayOutput) ToGetAccountsAccountArrayOutputWithContext(ctx context.Context) GetAccountsAccountArrayOutput {
	return o
}

func (o GetAccountsAccountArrayOutput) Index(i pulumi.IntInput) GetAccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountsAccount {
		return vs[0].([]GetAccountsAccount)[vs[1].(int)]
	}).(GetAccountsAccountOutput)
}

type GetAlertsAlert struct {
	Action       string `pulumi:"action"`
	Comment      string `pulumi:"comment"`
	Condition    string `pulumi:"condition"`
	DatabaseName string `pulumi:"databaseName"`
	Name         string `pulumi:"name"`
	Owner        string `pulumi:"owner"`
	SchemaName   string `pulumi:"schemaName"`
}

// GetAlertsAlertInput is an input type that accepts GetAlertsAlertArgs and GetAlertsAlertOutput values.
// You can construct a concrete instance of `GetAlertsAlertInput` via:
//
//	GetAlertsAlertArgs{...}
type GetAlertsAlertInput interface {
	pulumi.Input

	ToGetAlertsAlertOutput() GetAlertsAlertOutput
	ToGetAlertsAlertOutputWithContext(context.Context) GetAlertsAlertOutput
}

type GetAlertsAlertArgs struct {
	Action       pulumi.StringInput `pulumi:"action"`
	Comment      pulumi.StringInput `pulumi:"comment"`
	Condition    pulumi.StringInput `pulumi:"condition"`
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	Name         pulumi.StringInput `pulumi:"name"`
	Owner        pulumi.StringInput `pulumi:"owner"`
	SchemaName   pulumi.StringInput `pulumi:"schemaName"`
}

func (GetAlertsAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertsAlert)(nil)).Elem()
}

func (i GetAlertsAlertArgs) ToGetAlertsAlertOutput() GetAlertsAlertOutput {
	return i.ToGetAlertsAlertOutputWithContext(context.Background())
}

func (i GetAlertsAlertArgs) ToGetAlertsAlertOutputWithContext(ctx context.Context) GetAlertsAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertsAlertOutput)
}

// GetAlertsAlertArrayInput is an input type that accepts GetAlertsAlertArray and GetAlertsAlertArrayOutput values.
// You can construct a concrete instance of `GetAlertsAlertArrayInput` via:
//
//	GetAlertsAlertArray{ GetAlertsAlertArgs{...} }
type GetAlertsAlertArrayInput interface {
	pulumi.Input

	ToGetAlertsAlertArrayOutput() GetAlertsAlertArrayOutput
	ToGetAlertsAlertArrayOutputWithContext(context.Context) GetAlertsAlertArrayOutput
}

type GetAlertsAlertArray []GetAlertsAlertInput

func (GetAlertsAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertsAlert)(nil)).Elem()
}

func (i GetAlertsAlertArray) ToGetAlertsAlertArrayOutput() GetAlertsAlertArrayOutput {
	return i.ToGetAlertsAlertArrayOutputWithContext(context.Background())
}

func (i GetAlertsAlertArray) ToGetAlertsAlertArrayOutputWithContext(ctx context.Context) GetAlertsAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertsAlertArrayOutput)
}

type GetAlertsAlertOutput struct{ *pulumi.OutputState }

func (GetAlertsAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertsAlert)(nil)).Elem()
}

func (o GetAlertsAlertOutput) ToGetAlertsAlertOutput() GetAlertsAlertOutput {
	return o
}

func (o GetAlertsAlertOutput) ToGetAlertsAlertOutputWithContext(ctx context.Context) GetAlertsAlertOutput {
	return o
}

func (o GetAlertsAlertOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.Condition }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetAlertsAlertOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsAlert) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetAlertsAlertArrayOutput struct{ *pulumi.OutputState }

func (GetAlertsAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertsAlert)(nil)).Elem()
}

func (o GetAlertsAlertArrayOutput) ToGetAlertsAlertArrayOutput() GetAlertsAlertArrayOutput {
	return o
}

func (o GetAlertsAlertArrayOutput) ToGetAlertsAlertArrayOutputWithContext(ctx context.Context) GetAlertsAlertArrayOutput {
	return o
}

func (o GetAlertsAlertArrayOutput) Index(i pulumi.IntInput) GetAlertsAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAlertsAlert {
		return vs[0].([]GetAlertsAlert)[vs[1].(int)]
	}).(GetAlertsAlertOutput)
}

type GetDatabaseRolesDatabaseRole struct {
	Comment string `pulumi:"comment"`
	Name    string `pulumi:"name"`
	Owner   string `pulumi:"owner"`
}

// GetDatabaseRolesDatabaseRoleInput is an input type that accepts GetDatabaseRolesDatabaseRoleArgs and GetDatabaseRolesDatabaseRoleOutput values.
// You can construct a concrete instance of `GetDatabaseRolesDatabaseRoleInput` via:
//
//	GetDatabaseRolesDatabaseRoleArgs{...}
type GetDatabaseRolesDatabaseRoleInput interface {
	pulumi.Input

	ToGetDatabaseRolesDatabaseRoleOutput() GetDatabaseRolesDatabaseRoleOutput
	ToGetDatabaseRolesDatabaseRoleOutputWithContext(context.Context) GetDatabaseRolesDatabaseRoleOutput
}

type GetDatabaseRolesDatabaseRoleArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	Name    pulumi.StringInput `pulumi:"name"`
	Owner   pulumi.StringInput `pulumi:"owner"`
}

func (GetDatabaseRolesDatabaseRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRolesDatabaseRole)(nil)).Elem()
}

func (i GetDatabaseRolesDatabaseRoleArgs) ToGetDatabaseRolesDatabaseRoleOutput() GetDatabaseRolesDatabaseRoleOutput {
	return i.ToGetDatabaseRolesDatabaseRoleOutputWithContext(context.Background())
}

func (i GetDatabaseRolesDatabaseRoleArgs) ToGetDatabaseRolesDatabaseRoleOutputWithContext(ctx context.Context) GetDatabaseRolesDatabaseRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRolesDatabaseRoleOutput)
}

// GetDatabaseRolesDatabaseRoleArrayInput is an input type that accepts GetDatabaseRolesDatabaseRoleArray and GetDatabaseRolesDatabaseRoleArrayOutput values.
// You can construct a concrete instance of `GetDatabaseRolesDatabaseRoleArrayInput` via:
//
//	GetDatabaseRolesDatabaseRoleArray{ GetDatabaseRolesDatabaseRoleArgs{...} }
type GetDatabaseRolesDatabaseRoleArrayInput interface {
	pulumi.Input

	ToGetDatabaseRolesDatabaseRoleArrayOutput() GetDatabaseRolesDatabaseRoleArrayOutput
	ToGetDatabaseRolesDatabaseRoleArrayOutputWithContext(context.Context) GetDatabaseRolesDatabaseRoleArrayOutput
}

type GetDatabaseRolesDatabaseRoleArray []GetDatabaseRolesDatabaseRoleInput

func (GetDatabaseRolesDatabaseRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRolesDatabaseRole)(nil)).Elem()
}

func (i GetDatabaseRolesDatabaseRoleArray) ToGetDatabaseRolesDatabaseRoleArrayOutput() GetDatabaseRolesDatabaseRoleArrayOutput {
	return i.ToGetDatabaseRolesDatabaseRoleArrayOutputWithContext(context.Background())
}

func (i GetDatabaseRolesDatabaseRoleArray) ToGetDatabaseRolesDatabaseRoleArrayOutputWithContext(ctx context.Context) GetDatabaseRolesDatabaseRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRolesDatabaseRoleArrayOutput)
}

type GetDatabaseRolesDatabaseRoleOutput struct{ *pulumi.OutputState }

func (GetDatabaseRolesDatabaseRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRolesDatabaseRole)(nil)).Elem()
}

func (o GetDatabaseRolesDatabaseRoleOutput) ToGetDatabaseRolesDatabaseRoleOutput() GetDatabaseRolesDatabaseRoleOutput {
	return o
}

func (o GetDatabaseRolesDatabaseRoleOutput) ToGetDatabaseRolesDatabaseRoleOutputWithContext(ctx context.Context) GetDatabaseRolesDatabaseRoleOutput {
	return o
}

func (o GetDatabaseRolesDatabaseRoleOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesDatabaseRole) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetDatabaseRolesDatabaseRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesDatabaseRole) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDatabaseRolesDatabaseRoleOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesDatabaseRole) string { return v.Owner }).(pulumi.StringOutput)
}

type GetDatabaseRolesDatabaseRoleArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseRolesDatabaseRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRolesDatabaseRole)(nil)).Elem()
}

func (o GetDatabaseRolesDatabaseRoleArrayOutput) ToGetDatabaseRolesDatabaseRoleArrayOutput() GetDatabaseRolesDatabaseRoleArrayOutput {
	return o
}

func (o GetDatabaseRolesDatabaseRoleArrayOutput) ToGetDatabaseRolesDatabaseRoleArrayOutputWithContext(ctx context.Context) GetDatabaseRolesDatabaseRoleArrayOutput {
	return o
}

func (o GetDatabaseRolesDatabaseRoleArrayOutput) Index(i pulumi.IntInput) GetDatabaseRolesDatabaseRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseRolesDatabaseRole {
		return vs[0].([]GetDatabaseRolesDatabaseRole)[vs[1].(int)]
	}).(GetDatabaseRolesDatabaseRoleOutput)
}

type GetDatabasesDatabase struct {
	Comment                   string                                         `pulumi:"comment"`
	CreatedOn                 string                                         `pulumi:"createdOn"`
	IsCurrent                 bool                                           `pulumi:"isCurrent"`
	IsDefault                 bool                                           `pulumi:"isDefault"`
	Name                      string                                         `pulumi:"name"`
	Options                   string                                         `pulumi:"options"`
	Origin                    string                                         `pulumi:"origin"`
	Owner                     string                                         `pulumi:"owner"`
	ReplicationConfigurations []GetDatabasesDatabaseReplicationConfiguration `pulumi:"replicationConfigurations"`
	RetentionTime             int                                            `pulumi:"retentionTime"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//	GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	Comment                   pulumi.StringInput                                     `pulumi:"comment"`
	CreatedOn                 pulumi.StringInput                                     `pulumi:"createdOn"`
	IsCurrent                 pulumi.BoolInput                                       `pulumi:"isCurrent"`
	IsDefault                 pulumi.BoolInput                                       `pulumi:"isDefault"`
	Name                      pulumi.StringInput                                     `pulumi:"name"`
	Options                   pulumi.StringInput                                     `pulumi:"options"`
	Origin                    pulumi.StringInput                                     `pulumi:"origin"`
	Owner                     pulumi.StringInput                                     `pulumi:"owner"`
	ReplicationConfigurations GetDatabasesDatabaseReplicationConfigurationArrayInput `pulumi:"replicationConfigurations"`
	RetentionTime             pulumi.IntInput                                        `pulumi:"retentionTime"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//	GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) IsCurrent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.IsCurrent }).(pulumi.BoolOutput)
}

func (o GetDatabasesDatabaseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o GetDatabasesDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Options }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Origin }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetDatabasesDatabaseOutput) ReplicationConfigurations() GetDatabasesDatabaseReplicationConfigurationArrayOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) []GetDatabasesDatabaseReplicationConfiguration {
		return v.ReplicationConfigurations
	}).(GetDatabasesDatabaseReplicationConfigurationArrayOutput)
}

func (o GetDatabasesDatabaseOutput) RetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) int { return v.RetentionTime }).(pulumi.IntOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetDatabasesDatabaseReplicationConfiguration struct {
	Accounts           []string `pulumi:"accounts"`
	IgnoreEditionCheck bool     `pulumi:"ignoreEditionCheck"`
}

// GetDatabasesDatabaseReplicationConfigurationInput is an input type that accepts GetDatabasesDatabaseReplicationConfigurationArgs and GetDatabasesDatabaseReplicationConfigurationOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseReplicationConfigurationInput` via:
//
//	GetDatabasesDatabaseReplicationConfigurationArgs{...}
type GetDatabasesDatabaseReplicationConfigurationInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseReplicationConfigurationOutput() GetDatabasesDatabaseReplicationConfigurationOutput
	ToGetDatabasesDatabaseReplicationConfigurationOutputWithContext(context.Context) GetDatabasesDatabaseReplicationConfigurationOutput
}

type GetDatabasesDatabaseReplicationConfigurationArgs struct {
	Accounts           pulumi.StringArrayInput `pulumi:"accounts"`
	IgnoreEditionCheck pulumi.BoolInput        `pulumi:"ignoreEditionCheck"`
}

func (GetDatabasesDatabaseReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseReplicationConfiguration)(nil)).Elem()
}

func (i GetDatabasesDatabaseReplicationConfigurationArgs) ToGetDatabasesDatabaseReplicationConfigurationOutput() GetDatabasesDatabaseReplicationConfigurationOutput {
	return i.ToGetDatabasesDatabaseReplicationConfigurationOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseReplicationConfigurationArgs) ToGetDatabasesDatabaseReplicationConfigurationOutputWithContext(ctx context.Context) GetDatabasesDatabaseReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseReplicationConfigurationOutput)
}

// GetDatabasesDatabaseReplicationConfigurationArrayInput is an input type that accepts GetDatabasesDatabaseReplicationConfigurationArray and GetDatabasesDatabaseReplicationConfigurationArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseReplicationConfigurationArrayInput` via:
//
//	GetDatabasesDatabaseReplicationConfigurationArray{ GetDatabasesDatabaseReplicationConfigurationArgs{...} }
type GetDatabasesDatabaseReplicationConfigurationArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseReplicationConfigurationArrayOutput() GetDatabasesDatabaseReplicationConfigurationArrayOutput
	ToGetDatabasesDatabaseReplicationConfigurationArrayOutputWithContext(context.Context) GetDatabasesDatabaseReplicationConfigurationArrayOutput
}

type GetDatabasesDatabaseReplicationConfigurationArray []GetDatabasesDatabaseReplicationConfigurationInput

func (GetDatabasesDatabaseReplicationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabaseReplicationConfiguration)(nil)).Elem()
}

func (i GetDatabasesDatabaseReplicationConfigurationArray) ToGetDatabasesDatabaseReplicationConfigurationArrayOutput() GetDatabasesDatabaseReplicationConfigurationArrayOutput {
	return i.ToGetDatabasesDatabaseReplicationConfigurationArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseReplicationConfigurationArray) ToGetDatabasesDatabaseReplicationConfigurationArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseReplicationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseReplicationConfigurationArrayOutput)
}

type GetDatabasesDatabaseReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseReplicationConfiguration)(nil)).Elem()
}

func (o GetDatabasesDatabaseReplicationConfigurationOutput) ToGetDatabasesDatabaseReplicationConfigurationOutput() GetDatabasesDatabaseReplicationConfigurationOutput {
	return o
}

func (o GetDatabasesDatabaseReplicationConfigurationOutput) ToGetDatabasesDatabaseReplicationConfigurationOutputWithContext(ctx context.Context) GetDatabasesDatabaseReplicationConfigurationOutput {
	return o
}

func (o GetDatabasesDatabaseReplicationConfigurationOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseReplicationConfiguration) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

func (o GetDatabasesDatabaseReplicationConfigurationOutput) IgnoreEditionCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseReplicationConfiguration) bool { return v.IgnoreEditionCheck }).(pulumi.BoolOutput)
}

type GetDatabasesDatabaseReplicationConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseReplicationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabaseReplicationConfiguration)(nil)).Elem()
}

func (o GetDatabasesDatabaseReplicationConfigurationArrayOutput) ToGetDatabasesDatabaseReplicationConfigurationArrayOutput() GetDatabasesDatabaseReplicationConfigurationArrayOutput {
	return o
}

func (o GetDatabasesDatabaseReplicationConfigurationArrayOutput) ToGetDatabasesDatabaseReplicationConfigurationArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseReplicationConfigurationArrayOutput {
	return o
}

func (o GetDatabasesDatabaseReplicationConfigurationArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseReplicationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabaseReplicationConfiguration {
		return vs[0].([]GetDatabasesDatabaseReplicationConfiguration)[vs[1].(int)]
	}).(GetDatabasesDatabaseReplicationConfigurationOutput)
}

type GetExternalFunctionsExternalFunction struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Language string `pulumi:"language"`
	Name     string `pulumi:"name"`
	// The schema from which to return the external functions from.
	Schema string `pulumi:"schema"`
}

// GetExternalFunctionsExternalFunctionInput is an input type that accepts GetExternalFunctionsExternalFunctionArgs and GetExternalFunctionsExternalFunctionOutput values.
// You can construct a concrete instance of `GetExternalFunctionsExternalFunctionInput` via:
//
//	GetExternalFunctionsExternalFunctionArgs{...}
type GetExternalFunctionsExternalFunctionInput interface {
	pulumi.Input

	ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput
	ToGetExternalFunctionsExternalFunctionOutputWithContext(context.Context) GetExternalFunctionsExternalFunctionOutput
}

type GetExternalFunctionsExternalFunctionArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Language pulumi.StringInput `pulumi:"language"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the external functions from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetExternalFunctionsExternalFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (i GetExternalFunctionsExternalFunctionArgs) ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput {
	return i.ToGetExternalFunctionsExternalFunctionOutputWithContext(context.Background())
}

func (i GetExternalFunctionsExternalFunctionArgs) ToGetExternalFunctionsExternalFunctionOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalFunctionsExternalFunctionOutput)
}

// GetExternalFunctionsExternalFunctionArrayInput is an input type that accepts GetExternalFunctionsExternalFunctionArray and GetExternalFunctionsExternalFunctionArrayOutput values.
// You can construct a concrete instance of `GetExternalFunctionsExternalFunctionArrayInput` via:
//
//	GetExternalFunctionsExternalFunctionArray{ GetExternalFunctionsExternalFunctionArgs{...} }
type GetExternalFunctionsExternalFunctionArrayInput interface {
	pulumi.Input

	ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput
	ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(context.Context) GetExternalFunctionsExternalFunctionArrayOutput
}

type GetExternalFunctionsExternalFunctionArray []GetExternalFunctionsExternalFunctionInput

func (GetExternalFunctionsExternalFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (i GetExternalFunctionsExternalFunctionArray) ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput {
	return i.ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(context.Background())
}

func (i GetExternalFunctionsExternalFunctionArray) ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalFunctionsExternalFunctionArrayOutput)
}

type GetExternalFunctionsExternalFunctionOutput struct{ *pulumi.OutputState }

func (GetExternalFunctionsExternalFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (o GetExternalFunctionsExternalFunctionOutput) ToGetExternalFunctionsExternalFunctionOutput() GetExternalFunctionsExternalFunctionOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionOutput) ToGetExternalFunctionsExternalFunctionOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetExternalFunctionsExternalFunctionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetExternalFunctionsExternalFunctionOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Language }).(pulumi.StringOutput)
}

func (o GetExternalFunctionsExternalFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the external functions from.
func (o GetExternalFunctionsExternalFunctionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalFunctionsExternalFunction) string { return v.Schema }).(pulumi.StringOutput)
}

type GetExternalFunctionsExternalFunctionArrayOutput struct{ *pulumi.OutputState }

func (GetExternalFunctionsExternalFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalFunctionsExternalFunction)(nil)).Elem()
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) ToGetExternalFunctionsExternalFunctionArrayOutput() GetExternalFunctionsExternalFunctionArrayOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) ToGetExternalFunctionsExternalFunctionArrayOutputWithContext(ctx context.Context) GetExternalFunctionsExternalFunctionArrayOutput {
	return o
}

func (o GetExternalFunctionsExternalFunctionArrayOutput) Index(i pulumi.IntInput) GetExternalFunctionsExternalFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExternalFunctionsExternalFunction {
		return vs[0].([]GetExternalFunctionsExternalFunction)[vs[1].(int)]
	}).(GetExternalFunctionsExternalFunctionOutput)
}

type GetExternalTablesExternalTable struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the external tables from.
	Schema string `pulumi:"schema"`
}

// GetExternalTablesExternalTableInput is an input type that accepts GetExternalTablesExternalTableArgs and GetExternalTablesExternalTableOutput values.
// You can construct a concrete instance of `GetExternalTablesExternalTableInput` via:
//
//	GetExternalTablesExternalTableArgs{...}
type GetExternalTablesExternalTableInput interface {
	pulumi.Input

	ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput
	ToGetExternalTablesExternalTableOutputWithContext(context.Context) GetExternalTablesExternalTableOutput
}

type GetExternalTablesExternalTableArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the external tables from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetExternalTablesExternalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalTablesExternalTable)(nil)).Elem()
}

func (i GetExternalTablesExternalTableArgs) ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput {
	return i.ToGetExternalTablesExternalTableOutputWithContext(context.Background())
}

func (i GetExternalTablesExternalTableArgs) ToGetExternalTablesExternalTableOutputWithContext(ctx context.Context) GetExternalTablesExternalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalTablesExternalTableOutput)
}

// GetExternalTablesExternalTableArrayInput is an input type that accepts GetExternalTablesExternalTableArray and GetExternalTablesExternalTableArrayOutput values.
// You can construct a concrete instance of `GetExternalTablesExternalTableArrayInput` via:
//
//	GetExternalTablesExternalTableArray{ GetExternalTablesExternalTableArgs{...} }
type GetExternalTablesExternalTableArrayInput interface {
	pulumi.Input

	ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput
	ToGetExternalTablesExternalTableArrayOutputWithContext(context.Context) GetExternalTablesExternalTableArrayOutput
}

type GetExternalTablesExternalTableArray []GetExternalTablesExternalTableInput

func (GetExternalTablesExternalTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalTablesExternalTable)(nil)).Elem()
}

func (i GetExternalTablesExternalTableArray) ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput {
	return i.ToGetExternalTablesExternalTableArrayOutputWithContext(context.Background())
}

func (i GetExternalTablesExternalTableArray) ToGetExternalTablesExternalTableArrayOutputWithContext(ctx context.Context) GetExternalTablesExternalTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalTablesExternalTableArrayOutput)
}

type GetExternalTablesExternalTableOutput struct{ *pulumi.OutputState }

func (GetExternalTablesExternalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalTablesExternalTable)(nil)).Elem()
}

func (o GetExternalTablesExternalTableOutput) ToGetExternalTablesExternalTableOutput() GetExternalTablesExternalTableOutput {
	return o
}

func (o GetExternalTablesExternalTableOutput) ToGetExternalTablesExternalTableOutputWithContext(ctx context.Context) GetExternalTablesExternalTableOutput {
	return o
}

func (o GetExternalTablesExternalTableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetExternalTablesExternalTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetExternalTablesExternalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the external tables from.
func (o GetExternalTablesExternalTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalTablesExternalTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetExternalTablesExternalTableArrayOutput struct{ *pulumi.OutputState }

func (GetExternalTablesExternalTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalTablesExternalTable)(nil)).Elem()
}

func (o GetExternalTablesExternalTableArrayOutput) ToGetExternalTablesExternalTableArrayOutput() GetExternalTablesExternalTableArrayOutput {
	return o
}

func (o GetExternalTablesExternalTableArrayOutput) ToGetExternalTablesExternalTableArrayOutputWithContext(ctx context.Context) GetExternalTablesExternalTableArrayOutput {
	return o
}

func (o GetExternalTablesExternalTableArrayOutput) Index(i pulumi.IntInput) GetExternalTablesExternalTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExternalTablesExternalTable {
		return vs[0].([]GetExternalTablesExternalTable)[vs[1].(int)]
	}).(GetExternalTablesExternalTableOutput)
}

type GetFailoverGroupsFailoverGroup struct {
	AccountLocator          string        `pulumi:"accountLocator"`
	AccountName             string        `pulumi:"accountName"`
	AllowedAccounts         []interface{} `pulumi:"allowedAccounts"`
	AllowedIntegrationTypes []interface{} `pulumi:"allowedIntegrationTypes"`
	Comment                 string        `pulumi:"comment"`
	CreatedOn               string        `pulumi:"createdOn"`
	IsPrimary               bool          `pulumi:"isPrimary"`
	NextScheduledRefresh    string        `pulumi:"nextScheduledRefresh"`
	ObjectTypes             []interface{} `pulumi:"objectTypes"`
	OrganizationName        string        `pulumi:"organizationName"`
	Owner                   string        `pulumi:"owner"`
	Primary                 string        `pulumi:"primary"`
	RegionGroup             string        `pulumi:"regionGroup"`
	ReplicationSchedule     string        `pulumi:"replicationSchedule"`
	SecondaryState          string        `pulumi:"secondaryState"`
	SnowflakeRegion         string        `pulumi:"snowflakeRegion"`
	Type                    string        `pulumi:"type"`
}

// GetFailoverGroupsFailoverGroupInput is an input type that accepts GetFailoverGroupsFailoverGroupArgs and GetFailoverGroupsFailoverGroupOutput values.
// You can construct a concrete instance of `GetFailoverGroupsFailoverGroupInput` via:
//
//	GetFailoverGroupsFailoverGroupArgs{...}
type GetFailoverGroupsFailoverGroupInput interface {
	pulumi.Input

	ToGetFailoverGroupsFailoverGroupOutput() GetFailoverGroupsFailoverGroupOutput
	ToGetFailoverGroupsFailoverGroupOutputWithContext(context.Context) GetFailoverGroupsFailoverGroupOutput
}

type GetFailoverGroupsFailoverGroupArgs struct {
	AccountLocator          pulumi.StringInput `pulumi:"accountLocator"`
	AccountName             pulumi.StringInput `pulumi:"accountName"`
	AllowedAccounts         pulumi.ArrayInput  `pulumi:"allowedAccounts"`
	AllowedIntegrationTypes pulumi.ArrayInput  `pulumi:"allowedIntegrationTypes"`
	Comment                 pulumi.StringInput `pulumi:"comment"`
	CreatedOn               pulumi.StringInput `pulumi:"createdOn"`
	IsPrimary               pulumi.BoolInput   `pulumi:"isPrimary"`
	NextScheduledRefresh    pulumi.StringInput `pulumi:"nextScheduledRefresh"`
	ObjectTypes             pulumi.ArrayInput  `pulumi:"objectTypes"`
	OrganizationName        pulumi.StringInput `pulumi:"organizationName"`
	Owner                   pulumi.StringInput `pulumi:"owner"`
	Primary                 pulumi.StringInput `pulumi:"primary"`
	RegionGroup             pulumi.StringInput `pulumi:"regionGroup"`
	ReplicationSchedule     pulumi.StringInput `pulumi:"replicationSchedule"`
	SecondaryState          pulumi.StringInput `pulumi:"secondaryState"`
	SnowflakeRegion         pulumi.StringInput `pulumi:"snowflakeRegion"`
	Type                    pulumi.StringInput `pulumi:"type"`
}

func (GetFailoverGroupsFailoverGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFailoverGroupsFailoverGroup)(nil)).Elem()
}

func (i GetFailoverGroupsFailoverGroupArgs) ToGetFailoverGroupsFailoverGroupOutput() GetFailoverGroupsFailoverGroupOutput {
	return i.ToGetFailoverGroupsFailoverGroupOutputWithContext(context.Background())
}

func (i GetFailoverGroupsFailoverGroupArgs) ToGetFailoverGroupsFailoverGroupOutputWithContext(ctx context.Context) GetFailoverGroupsFailoverGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFailoverGroupsFailoverGroupOutput)
}

// GetFailoverGroupsFailoverGroupArrayInput is an input type that accepts GetFailoverGroupsFailoverGroupArray and GetFailoverGroupsFailoverGroupArrayOutput values.
// You can construct a concrete instance of `GetFailoverGroupsFailoverGroupArrayInput` via:
//
//	GetFailoverGroupsFailoverGroupArray{ GetFailoverGroupsFailoverGroupArgs{...} }
type GetFailoverGroupsFailoverGroupArrayInput interface {
	pulumi.Input

	ToGetFailoverGroupsFailoverGroupArrayOutput() GetFailoverGroupsFailoverGroupArrayOutput
	ToGetFailoverGroupsFailoverGroupArrayOutputWithContext(context.Context) GetFailoverGroupsFailoverGroupArrayOutput
}

type GetFailoverGroupsFailoverGroupArray []GetFailoverGroupsFailoverGroupInput

func (GetFailoverGroupsFailoverGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFailoverGroupsFailoverGroup)(nil)).Elem()
}

func (i GetFailoverGroupsFailoverGroupArray) ToGetFailoverGroupsFailoverGroupArrayOutput() GetFailoverGroupsFailoverGroupArrayOutput {
	return i.ToGetFailoverGroupsFailoverGroupArrayOutputWithContext(context.Background())
}

func (i GetFailoverGroupsFailoverGroupArray) ToGetFailoverGroupsFailoverGroupArrayOutputWithContext(ctx context.Context) GetFailoverGroupsFailoverGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFailoverGroupsFailoverGroupArrayOutput)
}

type GetFailoverGroupsFailoverGroupOutput struct{ *pulumi.OutputState }

func (GetFailoverGroupsFailoverGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFailoverGroupsFailoverGroup)(nil)).Elem()
}

func (o GetFailoverGroupsFailoverGroupOutput) ToGetFailoverGroupsFailoverGroupOutput() GetFailoverGroupsFailoverGroupOutput {
	return o
}

func (o GetFailoverGroupsFailoverGroupOutput) ToGetFailoverGroupsFailoverGroupOutputWithContext(ctx context.Context) GetFailoverGroupsFailoverGroupOutput {
	return o
}

func (o GetFailoverGroupsFailoverGroupOutput) AccountLocator() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.AccountLocator }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.AccountName }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) AllowedAccounts() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) []interface{} { return v.AllowedAccounts }).(pulumi.ArrayOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) AllowedIntegrationTypes() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) []interface{} { return v.AllowedIntegrationTypes }).(pulumi.ArrayOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) NextScheduledRefresh() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.NextScheduledRefresh }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) ObjectTypes() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) []interface{} { return v.ObjectTypes }).(pulumi.ArrayOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.OrganizationName }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) Primary() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.Primary }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) RegionGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.RegionGroup }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) ReplicationSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.ReplicationSchedule }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) SecondaryState() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.SecondaryState }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) SnowflakeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.SnowflakeRegion }).(pulumi.StringOutput)
}

func (o GetFailoverGroupsFailoverGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFailoverGroupsFailoverGroup) string { return v.Type }).(pulumi.StringOutput)
}

type GetFailoverGroupsFailoverGroupArrayOutput struct{ *pulumi.OutputState }

func (GetFailoverGroupsFailoverGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFailoverGroupsFailoverGroup)(nil)).Elem()
}

func (o GetFailoverGroupsFailoverGroupArrayOutput) ToGetFailoverGroupsFailoverGroupArrayOutput() GetFailoverGroupsFailoverGroupArrayOutput {
	return o
}

func (o GetFailoverGroupsFailoverGroupArrayOutput) ToGetFailoverGroupsFailoverGroupArrayOutputWithContext(ctx context.Context) GetFailoverGroupsFailoverGroupArrayOutput {
	return o
}

func (o GetFailoverGroupsFailoverGroupArrayOutput) Index(i pulumi.IntInput) GetFailoverGroupsFailoverGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFailoverGroupsFailoverGroup {
		return vs[0].([]GetFailoverGroupsFailoverGroup)[vs[1].(int)]
	}).(GetFailoverGroupsFailoverGroupOutput)
}

type GetFileFormatsFileFormat struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	FormatType string `pulumi:"formatType"`
	Name       string `pulumi:"name"`
	// The schema from which to return the file formats from.
	Schema string `pulumi:"schema"`
}

// GetFileFormatsFileFormatInput is an input type that accepts GetFileFormatsFileFormatArgs and GetFileFormatsFileFormatOutput values.
// You can construct a concrete instance of `GetFileFormatsFileFormatInput` via:
//
//	GetFileFormatsFileFormatArgs{...}
type GetFileFormatsFileFormatInput interface {
	pulumi.Input

	ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput
	ToGetFileFormatsFileFormatOutputWithContext(context.Context) GetFileFormatsFileFormatOutput
}

type GetFileFormatsFileFormatArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	FormatType pulumi.StringInput `pulumi:"formatType"`
	Name       pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the file formats from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetFileFormatsFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileFormatsFileFormat)(nil)).Elem()
}

func (i GetFileFormatsFileFormatArgs) ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput {
	return i.ToGetFileFormatsFileFormatOutputWithContext(context.Background())
}

func (i GetFileFormatsFileFormatArgs) ToGetFileFormatsFileFormatOutputWithContext(ctx context.Context) GetFileFormatsFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFileFormatsFileFormatOutput)
}

// GetFileFormatsFileFormatArrayInput is an input type that accepts GetFileFormatsFileFormatArray and GetFileFormatsFileFormatArrayOutput values.
// You can construct a concrete instance of `GetFileFormatsFileFormatArrayInput` via:
//
//	GetFileFormatsFileFormatArray{ GetFileFormatsFileFormatArgs{...} }
type GetFileFormatsFileFormatArrayInput interface {
	pulumi.Input

	ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput
	ToGetFileFormatsFileFormatArrayOutputWithContext(context.Context) GetFileFormatsFileFormatArrayOutput
}

type GetFileFormatsFileFormatArray []GetFileFormatsFileFormatInput

func (GetFileFormatsFileFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFileFormatsFileFormat)(nil)).Elem()
}

func (i GetFileFormatsFileFormatArray) ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput {
	return i.ToGetFileFormatsFileFormatArrayOutputWithContext(context.Background())
}

func (i GetFileFormatsFileFormatArray) ToGetFileFormatsFileFormatArrayOutputWithContext(ctx context.Context) GetFileFormatsFileFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFileFormatsFileFormatArrayOutput)
}

type GetFileFormatsFileFormatOutput struct{ *pulumi.OutputState }

func (GetFileFormatsFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileFormatsFileFormat)(nil)).Elem()
}

func (o GetFileFormatsFileFormatOutput) ToGetFileFormatsFileFormatOutput() GetFileFormatsFileFormatOutput {
	return o
}

func (o GetFileFormatsFileFormatOutput) ToGetFileFormatsFileFormatOutputWithContext(ctx context.Context) GetFileFormatsFileFormatOutput {
	return o
}

func (o GetFileFormatsFileFormatOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetFileFormatsFileFormatOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetFileFormatsFileFormatOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.FormatType }).(pulumi.StringOutput)
}

func (o GetFileFormatsFileFormatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the file formats from.
func (o GetFileFormatsFileFormatOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileFormatsFileFormat) string { return v.Schema }).(pulumi.StringOutput)
}

type GetFileFormatsFileFormatArrayOutput struct{ *pulumi.OutputState }

func (GetFileFormatsFileFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFileFormatsFileFormat)(nil)).Elem()
}

func (o GetFileFormatsFileFormatArrayOutput) ToGetFileFormatsFileFormatArrayOutput() GetFileFormatsFileFormatArrayOutput {
	return o
}

func (o GetFileFormatsFileFormatArrayOutput) ToGetFileFormatsFileFormatArrayOutputWithContext(ctx context.Context) GetFileFormatsFileFormatArrayOutput {
	return o
}

func (o GetFileFormatsFileFormatArrayOutput) Index(i pulumi.IntInput) GetFileFormatsFileFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFileFormatsFileFormat {
		return vs[0].([]GetFileFormatsFileFormat)[vs[1].(int)]
	}).(GetFileFormatsFileFormatOutput)
}

type GetFunctionsFunction struct {
	ArgumentTypes []string `pulumi:"argumentTypes"`
	Comment       string   `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	Name       string `pulumi:"name"`
	ReturnType string `pulumi:"returnType"`
	// The schema from which to return the functions from.
	Schema string `pulumi:"schema"`
}

// GetFunctionsFunctionInput is an input type that accepts GetFunctionsFunctionArgs and GetFunctionsFunctionOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionInput` via:
//
//	GetFunctionsFunctionArgs{...}
type GetFunctionsFunctionInput interface {
	pulumi.Input

	ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput
	ToGetFunctionsFunctionOutputWithContext(context.Context) GetFunctionsFunctionOutput
}

type GetFunctionsFunctionArgs struct {
	ArgumentTypes pulumi.StringArrayInput `pulumi:"argumentTypes"`
	Comment       pulumi.StringInput      `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	Name       pulumi.StringInput `pulumi:"name"`
	ReturnType pulumi.StringInput `pulumi:"returnType"`
	// The schema from which to return the functions from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetFunctionsFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return i.ToGetFunctionsFunctionOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionOutput)
}

// GetFunctionsFunctionArrayInput is an input type that accepts GetFunctionsFunctionArray and GetFunctionsFunctionArrayOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionArrayInput` via:
//
//	GetFunctionsFunctionArray{ GetFunctionsFunctionArgs{...} }
type GetFunctionsFunctionArrayInput interface {
	pulumi.Input

	ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput
	ToGetFunctionsFunctionArrayOutputWithContext(context.Context) GetFunctionsFunctionArrayOutput
}

type GetFunctionsFunctionArray []GetFunctionsFunctionInput

func (GetFunctionsFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return i.ToGetFunctionsFunctionArrayOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionArrayOutput)
}

type GetFunctionsFunctionOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return o
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return o
}

func (o GetFunctionsFunctionOutput) ArgumentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFunctionsFunction) []string { return v.ArgumentTypes }).(pulumi.StringArrayOutput)
}

func (o GetFunctionsFunctionOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetFunctionsFunctionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetFunctionsFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFunctionsFunctionOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.ReturnType }).(pulumi.StringOutput)
}

// The schema from which to return the functions from.
func (o GetFunctionsFunctionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Schema }).(pulumi.StringOutput)
}

type GetFunctionsFunctionArrayOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) Index(i pulumi.IntInput) GetFunctionsFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFunctionsFunction {
		return vs[0].([]GetFunctionsFunction)[vs[1].(int)]
	}).(GetFunctionsFunctionOutput)
}

type GetGrantsFutureGrantsIn struct {
	// Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
	Database *string `pulumi:"database"`
	// Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role.
	Schema *GetGrantsFutureGrantsInSchema `pulumi:"schema"`
}

// GetGrantsFutureGrantsInInput is an input type that accepts GetGrantsFutureGrantsInArgs and GetGrantsFutureGrantsInOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsInInput` via:
//
//	GetGrantsFutureGrantsInArgs{...}
type GetGrantsFutureGrantsInInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsInOutput() GetGrantsFutureGrantsInOutput
	ToGetGrantsFutureGrantsInOutputWithContext(context.Context) GetGrantsFutureGrantsInOutput
}

type GetGrantsFutureGrantsInArgs struct {
	// Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role.
	Schema GetGrantsFutureGrantsInSchemaPtrInput `pulumi:"schema"`
}

func (GetGrantsFutureGrantsInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsIn)(nil)).Elem()
}

func (i GetGrantsFutureGrantsInArgs) ToGetGrantsFutureGrantsInOutput() GetGrantsFutureGrantsInOutput {
	return i.ToGetGrantsFutureGrantsInOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsInArgs) ToGetGrantsFutureGrantsInOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInOutput)
}

func (i GetGrantsFutureGrantsInArgs) ToGetGrantsFutureGrantsInPtrOutput() GetGrantsFutureGrantsInPtrOutput {
	return i.ToGetGrantsFutureGrantsInPtrOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsInArgs) ToGetGrantsFutureGrantsInPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInOutput).ToGetGrantsFutureGrantsInPtrOutputWithContext(ctx)
}

// GetGrantsFutureGrantsInPtrInput is an input type that accepts GetGrantsFutureGrantsInArgs, GetGrantsFutureGrantsInPtr and GetGrantsFutureGrantsInPtrOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsInPtrInput` via:
//
//	        GetGrantsFutureGrantsInArgs{...}
//
//	or:
//
//	        nil
type GetGrantsFutureGrantsInPtrInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsInPtrOutput() GetGrantsFutureGrantsInPtrOutput
	ToGetGrantsFutureGrantsInPtrOutputWithContext(context.Context) GetGrantsFutureGrantsInPtrOutput
}

type getGrantsFutureGrantsInPtrType GetGrantsFutureGrantsInArgs

func GetGrantsFutureGrantsInPtr(v *GetGrantsFutureGrantsInArgs) GetGrantsFutureGrantsInPtrInput {
	return (*getGrantsFutureGrantsInPtrType)(v)
}

func (*getGrantsFutureGrantsInPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsIn)(nil)).Elem()
}

func (i *getGrantsFutureGrantsInPtrType) ToGetGrantsFutureGrantsInPtrOutput() GetGrantsFutureGrantsInPtrOutput {
	return i.ToGetGrantsFutureGrantsInPtrOutputWithContext(context.Background())
}

func (i *getGrantsFutureGrantsInPtrType) ToGetGrantsFutureGrantsInPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInPtrOutput)
}

type GetGrantsFutureGrantsInOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsIn)(nil)).Elem()
}

func (o GetGrantsFutureGrantsInOutput) ToGetGrantsFutureGrantsInOutput() GetGrantsFutureGrantsInOutput {
	return o
}

func (o GetGrantsFutureGrantsInOutput) ToGetGrantsFutureGrantsInOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInOutput {
	return o
}

func (o GetGrantsFutureGrantsInOutput) ToGetGrantsFutureGrantsInPtrOutput() GetGrantsFutureGrantsInPtrOutput {
	return o.ToGetGrantsFutureGrantsInPtrOutputWithContext(context.Background())
}

func (o GetGrantsFutureGrantsInOutput) ToGetGrantsFutureGrantsInPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsFutureGrantsIn) *GetGrantsFutureGrantsIn {
		return &v
	}).(GetGrantsFutureGrantsInPtrOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
func (o GetGrantsFutureGrantsInOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsFutureGrantsIn) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role.
func (o GetGrantsFutureGrantsInOutput) Schema() GetGrantsFutureGrantsInSchemaPtrOutput {
	return o.ApplyT(func(v GetGrantsFutureGrantsIn) *GetGrantsFutureGrantsInSchema { return v.Schema }).(GetGrantsFutureGrantsInSchemaPtrOutput)
}

type GetGrantsFutureGrantsInPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsInPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsIn)(nil)).Elem()
}

func (o GetGrantsFutureGrantsInPtrOutput) ToGetGrantsFutureGrantsInPtrOutput() GetGrantsFutureGrantsInPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsInPtrOutput) ToGetGrantsFutureGrantsInPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsInPtrOutput) Elem() GetGrantsFutureGrantsInOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsIn) GetGrantsFutureGrantsIn {
		if v != nil {
			return *v
		}
		var ret GetGrantsFutureGrantsIn
		return ret
	}).(GetGrantsFutureGrantsInOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in the database granted to a role.
func (o GetGrantsFutureGrantsInPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsIn) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in the schema granted to a role.
func (o GetGrantsFutureGrantsInPtrOutput) Schema() GetGrantsFutureGrantsInSchemaPtrOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsIn) *GetGrantsFutureGrantsInSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(GetGrantsFutureGrantsInSchemaPtrOutput)
}

type GetGrantsFutureGrantsInSchema struct {
	DatabaseName *string `pulumi:"databaseName"`
	SchemaName   string  `pulumi:"schemaName"`
}

// GetGrantsFutureGrantsInSchemaInput is an input type that accepts GetGrantsFutureGrantsInSchemaArgs and GetGrantsFutureGrantsInSchemaOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsInSchemaInput` via:
//
//	GetGrantsFutureGrantsInSchemaArgs{...}
type GetGrantsFutureGrantsInSchemaInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsInSchemaOutput() GetGrantsFutureGrantsInSchemaOutput
	ToGetGrantsFutureGrantsInSchemaOutputWithContext(context.Context) GetGrantsFutureGrantsInSchemaOutput
}

type GetGrantsFutureGrantsInSchemaArgs struct {
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	SchemaName   pulumi.StringInput    `pulumi:"schemaName"`
}

func (GetGrantsFutureGrantsInSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsInSchema)(nil)).Elem()
}

func (i GetGrantsFutureGrantsInSchemaArgs) ToGetGrantsFutureGrantsInSchemaOutput() GetGrantsFutureGrantsInSchemaOutput {
	return i.ToGetGrantsFutureGrantsInSchemaOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsInSchemaArgs) ToGetGrantsFutureGrantsInSchemaOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInSchemaOutput)
}

func (i GetGrantsFutureGrantsInSchemaArgs) ToGetGrantsFutureGrantsInSchemaPtrOutput() GetGrantsFutureGrantsInSchemaPtrOutput {
	return i.ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsInSchemaArgs) ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInSchemaOutput).ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(ctx)
}

// GetGrantsFutureGrantsInSchemaPtrInput is an input type that accepts GetGrantsFutureGrantsInSchemaArgs, GetGrantsFutureGrantsInSchemaPtr and GetGrantsFutureGrantsInSchemaPtrOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsInSchemaPtrInput` via:
//
//	        GetGrantsFutureGrantsInSchemaArgs{...}
//
//	or:
//
//	        nil
type GetGrantsFutureGrantsInSchemaPtrInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsInSchemaPtrOutput() GetGrantsFutureGrantsInSchemaPtrOutput
	ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(context.Context) GetGrantsFutureGrantsInSchemaPtrOutput
}

type getGrantsFutureGrantsInSchemaPtrType GetGrantsFutureGrantsInSchemaArgs

func GetGrantsFutureGrantsInSchemaPtr(v *GetGrantsFutureGrantsInSchemaArgs) GetGrantsFutureGrantsInSchemaPtrInput {
	return (*getGrantsFutureGrantsInSchemaPtrType)(v)
}

func (*getGrantsFutureGrantsInSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsInSchema)(nil)).Elem()
}

func (i *getGrantsFutureGrantsInSchemaPtrType) ToGetGrantsFutureGrantsInSchemaPtrOutput() GetGrantsFutureGrantsInSchemaPtrOutput {
	return i.ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(context.Background())
}

func (i *getGrantsFutureGrantsInSchemaPtrType) ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsInSchemaPtrOutput)
}

type GetGrantsFutureGrantsInSchemaOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsInSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsInSchema)(nil)).Elem()
}

func (o GetGrantsFutureGrantsInSchemaOutput) ToGetGrantsFutureGrantsInSchemaOutput() GetGrantsFutureGrantsInSchemaOutput {
	return o
}

func (o GetGrantsFutureGrantsInSchemaOutput) ToGetGrantsFutureGrantsInSchemaOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaOutput {
	return o
}

func (o GetGrantsFutureGrantsInSchemaOutput) ToGetGrantsFutureGrantsInSchemaPtrOutput() GetGrantsFutureGrantsInSchemaPtrOutput {
	return o.ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(context.Background())
}

func (o GetGrantsFutureGrantsInSchemaOutput) ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsFutureGrantsInSchema) *GetGrantsFutureGrantsInSchema {
		return &v
	}).(GetGrantsFutureGrantsInSchemaPtrOutput)
}

func (o GetGrantsFutureGrantsInSchemaOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsFutureGrantsInSchema) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o GetGrantsFutureGrantsInSchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsFutureGrantsInSchema) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetGrantsFutureGrantsInSchemaPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsInSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsInSchema)(nil)).Elem()
}

func (o GetGrantsFutureGrantsInSchemaPtrOutput) ToGetGrantsFutureGrantsInSchemaPtrOutput() GetGrantsFutureGrantsInSchemaPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsInSchemaPtrOutput) ToGetGrantsFutureGrantsInSchemaPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsInSchemaPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsInSchemaPtrOutput) Elem() GetGrantsFutureGrantsInSchemaOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsInSchema) GetGrantsFutureGrantsInSchema {
		if v != nil {
			return *v
		}
		var ret GetGrantsFutureGrantsInSchema
		return ret
	}).(GetGrantsFutureGrantsInSchemaOutput)
}

func (o GetGrantsFutureGrantsInSchemaPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsInSchema) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

func (o GetGrantsFutureGrantsInSchemaPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsInSchema) *string {
		if v == nil {
			return nil
		}
		return &v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type GetGrantsFutureGrantsTo struct {
	// Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the role.
	Role string `pulumi:"role"`
}

// GetGrantsFutureGrantsToInput is an input type that accepts GetGrantsFutureGrantsToArgs and GetGrantsFutureGrantsToOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsToInput` via:
//
//	GetGrantsFutureGrantsToArgs{...}
type GetGrantsFutureGrantsToInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsToOutput() GetGrantsFutureGrantsToOutput
	ToGetGrantsFutureGrantsToOutputWithContext(context.Context) GetGrantsFutureGrantsToOutput
}

type GetGrantsFutureGrantsToArgs struct {
	// Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the role.
	Role pulumi.StringInput `pulumi:"role"`
}

func (GetGrantsFutureGrantsToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsTo)(nil)).Elem()
}

func (i GetGrantsFutureGrantsToArgs) ToGetGrantsFutureGrantsToOutput() GetGrantsFutureGrantsToOutput {
	return i.ToGetGrantsFutureGrantsToOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsToArgs) ToGetGrantsFutureGrantsToOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsToOutput)
}

func (i GetGrantsFutureGrantsToArgs) ToGetGrantsFutureGrantsToPtrOutput() GetGrantsFutureGrantsToPtrOutput {
	return i.ToGetGrantsFutureGrantsToPtrOutputWithContext(context.Background())
}

func (i GetGrantsFutureGrantsToArgs) ToGetGrantsFutureGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsToOutput).ToGetGrantsFutureGrantsToPtrOutputWithContext(ctx)
}

// GetGrantsFutureGrantsToPtrInput is an input type that accepts GetGrantsFutureGrantsToArgs, GetGrantsFutureGrantsToPtr and GetGrantsFutureGrantsToPtrOutput values.
// You can construct a concrete instance of `GetGrantsFutureGrantsToPtrInput` via:
//
//	        GetGrantsFutureGrantsToArgs{...}
//
//	or:
//
//	        nil
type GetGrantsFutureGrantsToPtrInput interface {
	pulumi.Input

	ToGetGrantsFutureGrantsToPtrOutput() GetGrantsFutureGrantsToPtrOutput
	ToGetGrantsFutureGrantsToPtrOutputWithContext(context.Context) GetGrantsFutureGrantsToPtrOutput
}

type getGrantsFutureGrantsToPtrType GetGrantsFutureGrantsToArgs

func GetGrantsFutureGrantsToPtr(v *GetGrantsFutureGrantsToArgs) GetGrantsFutureGrantsToPtrInput {
	return (*getGrantsFutureGrantsToPtrType)(v)
}

func (*getGrantsFutureGrantsToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsTo)(nil)).Elem()
}

func (i *getGrantsFutureGrantsToPtrType) ToGetGrantsFutureGrantsToPtrOutput() GetGrantsFutureGrantsToPtrOutput {
	return i.ToGetGrantsFutureGrantsToPtrOutputWithContext(context.Background())
}

func (i *getGrantsFutureGrantsToPtrType) ToGetGrantsFutureGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsFutureGrantsToPtrOutput)
}

type GetGrantsFutureGrantsToOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsFutureGrantsTo)(nil)).Elem()
}

func (o GetGrantsFutureGrantsToOutput) ToGetGrantsFutureGrantsToOutput() GetGrantsFutureGrantsToOutput {
	return o
}

func (o GetGrantsFutureGrantsToOutput) ToGetGrantsFutureGrantsToOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToOutput {
	return o
}

func (o GetGrantsFutureGrantsToOutput) ToGetGrantsFutureGrantsToPtrOutput() GetGrantsFutureGrantsToPtrOutput {
	return o.ToGetGrantsFutureGrantsToPtrOutputWithContext(context.Background())
}

func (o GetGrantsFutureGrantsToOutput) ToGetGrantsFutureGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsFutureGrantsTo) *GetGrantsFutureGrantsTo {
		return &v
	}).(GetGrantsFutureGrantsToPtrOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the role.
func (o GetGrantsFutureGrantsToOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsFutureGrantsTo) string { return v.Role }).(pulumi.StringOutput)
}

type GetGrantsFutureGrantsToPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsFutureGrantsToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsFutureGrantsTo)(nil)).Elem()
}

func (o GetGrantsFutureGrantsToPtrOutput) ToGetGrantsFutureGrantsToPtrOutput() GetGrantsFutureGrantsToPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsToPtrOutput) ToGetGrantsFutureGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsFutureGrantsToPtrOutput {
	return o
}

func (o GetGrantsFutureGrantsToPtrOutput) Elem() GetGrantsFutureGrantsToOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsTo) GetGrantsFutureGrantsTo {
		if v != nil {
			return *v
		}
		var ret GetGrantsFutureGrantsTo
		return ret
	}).(GetGrantsFutureGrantsToOutput)
}

// Lists all privileges on new (i.e. future) objects of a specified type in a database or schema granted to the role.
func (o GetGrantsFutureGrantsToPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsFutureGrantsTo) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

type GetGrantsGrant struct {
	CreatedOn   string `pulumi:"createdOn"`
	GrantOption bool   `pulumi:"grantOption"`
	GrantedBy   string `pulumi:"grantedBy"`
	GrantedOn   string `pulumi:"grantedOn"`
	GrantedTo   string `pulumi:"grantedTo"`
	GranteeName string `pulumi:"granteeName"`
	Name        string `pulumi:"name"`
	Privilege   string `pulumi:"privilege"`
}

// GetGrantsGrantInput is an input type that accepts GetGrantsGrantArgs and GetGrantsGrantOutput values.
// You can construct a concrete instance of `GetGrantsGrantInput` via:
//
//	GetGrantsGrantArgs{...}
type GetGrantsGrantInput interface {
	pulumi.Input

	ToGetGrantsGrantOutput() GetGrantsGrantOutput
	ToGetGrantsGrantOutputWithContext(context.Context) GetGrantsGrantOutput
}

type GetGrantsGrantArgs struct {
	CreatedOn   pulumi.StringInput `pulumi:"createdOn"`
	GrantOption pulumi.BoolInput   `pulumi:"grantOption"`
	GrantedBy   pulumi.StringInput `pulumi:"grantedBy"`
	GrantedOn   pulumi.StringInput `pulumi:"grantedOn"`
	GrantedTo   pulumi.StringInput `pulumi:"grantedTo"`
	GranteeName pulumi.StringInput `pulumi:"granteeName"`
	Name        pulumi.StringInput `pulumi:"name"`
	Privilege   pulumi.StringInput `pulumi:"privilege"`
}

func (GetGrantsGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrant)(nil)).Elem()
}

func (i GetGrantsGrantArgs) ToGetGrantsGrantOutput() GetGrantsGrantOutput {
	return i.ToGetGrantsGrantOutputWithContext(context.Background())
}

func (i GetGrantsGrantArgs) ToGetGrantsGrantOutputWithContext(ctx context.Context) GetGrantsGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantOutput)
}

// GetGrantsGrantArrayInput is an input type that accepts GetGrantsGrantArray and GetGrantsGrantArrayOutput values.
// You can construct a concrete instance of `GetGrantsGrantArrayInput` via:
//
//	GetGrantsGrantArray{ GetGrantsGrantArgs{...} }
type GetGrantsGrantArrayInput interface {
	pulumi.Input

	ToGetGrantsGrantArrayOutput() GetGrantsGrantArrayOutput
	ToGetGrantsGrantArrayOutputWithContext(context.Context) GetGrantsGrantArrayOutput
}

type GetGrantsGrantArray []GetGrantsGrantInput

func (GetGrantsGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGrantsGrant)(nil)).Elem()
}

func (i GetGrantsGrantArray) ToGetGrantsGrantArrayOutput() GetGrantsGrantArrayOutput {
	return i.ToGetGrantsGrantArrayOutputWithContext(context.Background())
}

func (i GetGrantsGrantArray) ToGetGrantsGrantArrayOutputWithContext(ctx context.Context) GetGrantsGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantArrayOutput)
}

type GetGrantsGrantOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrant)(nil)).Elem()
}

func (o GetGrantsGrantOutput) ToGetGrantsGrantOutput() GetGrantsGrantOutput {
	return o
}

func (o GetGrantsGrantOutput) ToGetGrantsGrantOutputWithContext(ctx context.Context) GetGrantsGrantOutput {
	return o
}

func (o GetGrantsGrantOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) GrantOption() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGrantsGrant) bool { return v.GrantOption }).(pulumi.BoolOutput)
}

func (o GetGrantsGrantOutput) GrantedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.GrantedBy }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) GrantedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.GrantedOn }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) GrantedTo() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.GrantedTo }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) GranteeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.GranteeName }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGrantsGrantOutput) Privilege() pulumi.StringOutput {
	return o.ApplyT(func(v GetGrantsGrant) string { return v.Privilege }).(pulumi.StringOutput)
}

type GetGrantsGrantArrayOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGrantsGrant)(nil)).Elem()
}

func (o GetGrantsGrantArrayOutput) ToGetGrantsGrantArrayOutput() GetGrantsGrantArrayOutput {
	return o
}

func (o GetGrantsGrantArrayOutput) ToGetGrantsGrantArrayOutputWithContext(ctx context.Context) GetGrantsGrantArrayOutput {
	return o
}

func (o GetGrantsGrantArrayOutput) Index(i pulumi.IntInput) GetGrantsGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGrantsGrant {
		return vs[0].([]GetGrantsGrant)[vs[1].(int)]
	}).(GetGrantsGrantOutput)
}

type GetGrantsGrantsOf struct {
	// Lists all users and roles to which the role has been granted
	Role *string `pulumi:"role"`
	// Lists all the accounts for the share and indicates the accounts that are using the share.
	Share *string `pulumi:"share"`
}

// GetGrantsGrantsOfInput is an input type that accepts GetGrantsGrantsOfArgs and GetGrantsGrantsOfOutput values.
// You can construct a concrete instance of `GetGrantsGrantsOfInput` via:
//
//	GetGrantsGrantsOfArgs{...}
type GetGrantsGrantsOfInput interface {
	pulumi.Input

	ToGetGrantsGrantsOfOutput() GetGrantsGrantsOfOutput
	ToGetGrantsGrantsOfOutputWithContext(context.Context) GetGrantsGrantsOfOutput
}

type GetGrantsGrantsOfArgs struct {
	// Lists all users and roles to which the role has been granted
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Lists all the accounts for the share and indicates the accounts that are using the share.
	Share pulumi.StringPtrInput `pulumi:"share"`
}

func (GetGrantsGrantsOfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsOf)(nil)).Elem()
}

func (i GetGrantsGrantsOfArgs) ToGetGrantsGrantsOfOutput() GetGrantsGrantsOfOutput {
	return i.ToGetGrantsGrantsOfOutputWithContext(context.Background())
}

func (i GetGrantsGrantsOfArgs) ToGetGrantsGrantsOfOutputWithContext(ctx context.Context) GetGrantsGrantsOfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOfOutput)
}

func (i GetGrantsGrantsOfArgs) ToGetGrantsGrantsOfPtrOutput() GetGrantsGrantsOfPtrOutput {
	return i.ToGetGrantsGrantsOfPtrOutputWithContext(context.Background())
}

func (i GetGrantsGrantsOfArgs) ToGetGrantsGrantsOfPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOfOutput).ToGetGrantsGrantsOfPtrOutputWithContext(ctx)
}

// GetGrantsGrantsOfPtrInput is an input type that accepts GetGrantsGrantsOfArgs, GetGrantsGrantsOfPtr and GetGrantsGrantsOfPtrOutput values.
// You can construct a concrete instance of `GetGrantsGrantsOfPtrInput` via:
//
//	        GetGrantsGrantsOfArgs{...}
//
//	or:
//
//	        nil
type GetGrantsGrantsOfPtrInput interface {
	pulumi.Input

	ToGetGrantsGrantsOfPtrOutput() GetGrantsGrantsOfPtrOutput
	ToGetGrantsGrantsOfPtrOutputWithContext(context.Context) GetGrantsGrantsOfPtrOutput
}

type getGrantsGrantsOfPtrType GetGrantsGrantsOfArgs

func GetGrantsGrantsOfPtr(v *GetGrantsGrantsOfArgs) GetGrantsGrantsOfPtrInput {
	return (*getGrantsGrantsOfPtrType)(v)
}

func (*getGrantsGrantsOfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsOf)(nil)).Elem()
}

func (i *getGrantsGrantsOfPtrType) ToGetGrantsGrantsOfPtrOutput() GetGrantsGrantsOfPtrOutput {
	return i.ToGetGrantsGrantsOfPtrOutputWithContext(context.Background())
}

func (i *getGrantsGrantsOfPtrType) ToGetGrantsGrantsOfPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOfPtrOutput)
}

type GetGrantsGrantsOfOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsOfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsOf)(nil)).Elem()
}

func (o GetGrantsGrantsOfOutput) ToGetGrantsGrantsOfOutput() GetGrantsGrantsOfOutput {
	return o
}

func (o GetGrantsGrantsOfOutput) ToGetGrantsGrantsOfOutputWithContext(ctx context.Context) GetGrantsGrantsOfOutput {
	return o
}

func (o GetGrantsGrantsOfOutput) ToGetGrantsGrantsOfPtrOutput() GetGrantsGrantsOfPtrOutput {
	return o.ToGetGrantsGrantsOfPtrOutputWithContext(context.Background())
}

func (o GetGrantsGrantsOfOutput) ToGetGrantsGrantsOfPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsGrantsOf) *GetGrantsGrantsOf {
		return &v
	}).(GetGrantsGrantsOfPtrOutput)
}

// Lists all users and roles to which the role has been granted
func (o GetGrantsGrantsOfOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsOf) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Lists all the accounts for the share and indicates the accounts that are using the share.
func (o GetGrantsGrantsOfOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsOf) *string { return v.Share }).(pulumi.StringPtrOutput)
}

type GetGrantsGrantsOfPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsOfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsOf)(nil)).Elem()
}

func (o GetGrantsGrantsOfPtrOutput) ToGetGrantsGrantsOfPtrOutput() GetGrantsGrantsOfPtrOutput {
	return o
}

func (o GetGrantsGrantsOfPtrOutput) ToGetGrantsGrantsOfPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOfPtrOutput {
	return o
}

func (o GetGrantsGrantsOfPtrOutput) Elem() GetGrantsGrantsOfOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOf) GetGrantsGrantsOf {
		if v != nil {
			return *v
		}
		var ret GetGrantsGrantsOf
		return ret
	}).(GetGrantsGrantsOfOutput)
}

// Lists all users and roles to which the role has been granted
func (o GetGrantsGrantsOfPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOf) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Lists all the accounts for the share and indicates the accounts that are using the share.
func (o GetGrantsGrantsOfPtrOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOf) *string {
		if v == nil {
			return nil
		}
		return v.Share
	}).(pulumi.StringPtrOutput)
}

type GetGrantsGrantsOn struct {
	// Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
	Account *bool `pulumi:"account"`
	// Name of object to list privileges on
	ObjectName *string `pulumi:"objectName"`
	// Type of object to list privileges on.
	ObjectType *string `pulumi:"objectType"`
}

// GetGrantsGrantsOnInput is an input type that accepts GetGrantsGrantsOnArgs and GetGrantsGrantsOnOutput values.
// You can construct a concrete instance of `GetGrantsGrantsOnInput` via:
//
//	GetGrantsGrantsOnArgs{...}
type GetGrantsGrantsOnInput interface {
	pulumi.Input

	ToGetGrantsGrantsOnOutput() GetGrantsGrantsOnOutput
	ToGetGrantsGrantsOnOutputWithContext(context.Context) GetGrantsGrantsOnOutput
}

type GetGrantsGrantsOnArgs struct {
	// Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
	Account pulumi.BoolPtrInput `pulumi:"account"`
	// Name of object to list privileges on
	ObjectName pulumi.StringPtrInput `pulumi:"objectName"`
	// Type of object to list privileges on.
	ObjectType pulumi.StringPtrInput `pulumi:"objectType"`
}

func (GetGrantsGrantsOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsOn)(nil)).Elem()
}

func (i GetGrantsGrantsOnArgs) ToGetGrantsGrantsOnOutput() GetGrantsGrantsOnOutput {
	return i.ToGetGrantsGrantsOnOutputWithContext(context.Background())
}

func (i GetGrantsGrantsOnArgs) ToGetGrantsGrantsOnOutputWithContext(ctx context.Context) GetGrantsGrantsOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOnOutput)
}

func (i GetGrantsGrantsOnArgs) ToGetGrantsGrantsOnPtrOutput() GetGrantsGrantsOnPtrOutput {
	return i.ToGetGrantsGrantsOnPtrOutputWithContext(context.Background())
}

func (i GetGrantsGrantsOnArgs) ToGetGrantsGrantsOnPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOnOutput).ToGetGrantsGrantsOnPtrOutputWithContext(ctx)
}

// GetGrantsGrantsOnPtrInput is an input type that accepts GetGrantsGrantsOnArgs, GetGrantsGrantsOnPtr and GetGrantsGrantsOnPtrOutput values.
// You can construct a concrete instance of `GetGrantsGrantsOnPtrInput` via:
//
//	        GetGrantsGrantsOnArgs{...}
//
//	or:
//
//	        nil
type GetGrantsGrantsOnPtrInput interface {
	pulumi.Input

	ToGetGrantsGrantsOnPtrOutput() GetGrantsGrantsOnPtrOutput
	ToGetGrantsGrantsOnPtrOutputWithContext(context.Context) GetGrantsGrantsOnPtrOutput
}

type getGrantsGrantsOnPtrType GetGrantsGrantsOnArgs

func GetGrantsGrantsOnPtr(v *GetGrantsGrantsOnArgs) GetGrantsGrantsOnPtrInput {
	return (*getGrantsGrantsOnPtrType)(v)
}

func (*getGrantsGrantsOnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsOn)(nil)).Elem()
}

func (i *getGrantsGrantsOnPtrType) ToGetGrantsGrantsOnPtrOutput() GetGrantsGrantsOnPtrOutput {
	return i.ToGetGrantsGrantsOnPtrOutputWithContext(context.Background())
}

func (i *getGrantsGrantsOnPtrType) ToGetGrantsGrantsOnPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsOnPtrOutput)
}

type GetGrantsGrantsOnOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsOn)(nil)).Elem()
}

func (o GetGrantsGrantsOnOutput) ToGetGrantsGrantsOnOutput() GetGrantsGrantsOnOutput {
	return o
}

func (o GetGrantsGrantsOnOutput) ToGetGrantsGrantsOnOutputWithContext(ctx context.Context) GetGrantsGrantsOnOutput {
	return o
}

func (o GetGrantsGrantsOnOutput) ToGetGrantsGrantsOnPtrOutput() GetGrantsGrantsOnPtrOutput {
	return o.ToGetGrantsGrantsOnPtrOutputWithContext(context.Background())
}

func (o GetGrantsGrantsOnOutput) ToGetGrantsGrantsOnPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsGrantsOn) *GetGrantsGrantsOn {
		return &v
	}).(GetGrantsGrantsOnPtrOutput)
}

// Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
func (o GetGrantsGrantsOnOutput) Account() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsOn) *bool { return v.Account }).(pulumi.BoolPtrOutput)
}

// Name of object to list privileges on
func (o GetGrantsGrantsOnOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsOn) *string { return v.ObjectName }).(pulumi.StringPtrOutput)
}

// Type of object to list privileges on.
func (o GetGrantsGrantsOnOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsOn) *string { return v.ObjectType }).(pulumi.StringPtrOutput)
}

type GetGrantsGrantsOnPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsOnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsOn)(nil)).Elem()
}

func (o GetGrantsGrantsOnPtrOutput) ToGetGrantsGrantsOnPtrOutput() GetGrantsGrantsOnPtrOutput {
	return o
}

func (o GetGrantsGrantsOnPtrOutput) ToGetGrantsGrantsOnPtrOutputWithContext(ctx context.Context) GetGrantsGrantsOnPtrOutput {
	return o
}

func (o GetGrantsGrantsOnPtrOutput) Elem() GetGrantsGrantsOnOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOn) GetGrantsGrantsOn {
		if v != nil {
			return *v
		}
		var ret GetGrantsGrantsOn
		return ret
	}).(GetGrantsGrantsOnOutput)
}

// Object hierarchy to list privileges on. The only valid value is: ACCOUNT. Setting this attribute lists all the account-level (i.e. global) privileges that have been granted to roles.
func (o GetGrantsGrantsOnPtrOutput) Account() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOn) *bool {
		if v == nil {
			return nil
		}
		return v.Account
	}).(pulumi.BoolPtrOutput)
}

// Name of object to list privileges on
func (o GetGrantsGrantsOnPtrOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOn) *string {
		if v == nil {
			return nil
		}
		return v.ObjectName
	}).(pulumi.StringPtrOutput)
}

// Type of object to list privileges on.
func (o GetGrantsGrantsOnPtrOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsOn) *string {
		if v == nil {
			return nil
		}
		return v.ObjectType
	}).(pulumi.StringPtrOutput)
}

type GetGrantsGrantsTo struct {
	// Lists all privileges and roles granted to the role
	Role *string `pulumi:"role"`
	// Lists all the privileges granted to the share
	Share *string `pulumi:"share"`
	// Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed
	User *string `pulumi:"user"`
}

// GetGrantsGrantsToInput is an input type that accepts GetGrantsGrantsToArgs and GetGrantsGrantsToOutput values.
// You can construct a concrete instance of `GetGrantsGrantsToInput` via:
//
//	GetGrantsGrantsToArgs{...}
type GetGrantsGrantsToInput interface {
	pulumi.Input

	ToGetGrantsGrantsToOutput() GetGrantsGrantsToOutput
	ToGetGrantsGrantsToOutputWithContext(context.Context) GetGrantsGrantsToOutput
}

type GetGrantsGrantsToArgs struct {
	// Lists all privileges and roles granted to the role
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Lists all the privileges granted to the share
	Share pulumi.StringPtrInput `pulumi:"share"`
	// Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (GetGrantsGrantsToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsTo)(nil)).Elem()
}

func (i GetGrantsGrantsToArgs) ToGetGrantsGrantsToOutput() GetGrantsGrantsToOutput {
	return i.ToGetGrantsGrantsToOutputWithContext(context.Background())
}

func (i GetGrantsGrantsToArgs) ToGetGrantsGrantsToOutputWithContext(ctx context.Context) GetGrantsGrantsToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsToOutput)
}

func (i GetGrantsGrantsToArgs) ToGetGrantsGrantsToPtrOutput() GetGrantsGrantsToPtrOutput {
	return i.ToGetGrantsGrantsToPtrOutputWithContext(context.Background())
}

func (i GetGrantsGrantsToArgs) ToGetGrantsGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsGrantsToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsToOutput).ToGetGrantsGrantsToPtrOutputWithContext(ctx)
}

// GetGrantsGrantsToPtrInput is an input type that accepts GetGrantsGrantsToArgs, GetGrantsGrantsToPtr and GetGrantsGrantsToPtrOutput values.
// You can construct a concrete instance of `GetGrantsGrantsToPtrInput` via:
//
//	        GetGrantsGrantsToArgs{...}
//
//	or:
//
//	        nil
type GetGrantsGrantsToPtrInput interface {
	pulumi.Input

	ToGetGrantsGrantsToPtrOutput() GetGrantsGrantsToPtrOutput
	ToGetGrantsGrantsToPtrOutputWithContext(context.Context) GetGrantsGrantsToPtrOutput
}

type getGrantsGrantsToPtrType GetGrantsGrantsToArgs

func GetGrantsGrantsToPtr(v *GetGrantsGrantsToArgs) GetGrantsGrantsToPtrInput {
	return (*getGrantsGrantsToPtrType)(v)
}

func (*getGrantsGrantsToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsTo)(nil)).Elem()
}

func (i *getGrantsGrantsToPtrType) ToGetGrantsGrantsToPtrOutput() GetGrantsGrantsToPtrOutput {
	return i.ToGetGrantsGrantsToPtrOutputWithContext(context.Background())
}

func (i *getGrantsGrantsToPtrType) ToGetGrantsGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsGrantsToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGrantsGrantsToPtrOutput)
}

type GetGrantsGrantsToOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGrantsGrantsTo)(nil)).Elem()
}

func (o GetGrantsGrantsToOutput) ToGetGrantsGrantsToOutput() GetGrantsGrantsToOutput {
	return o
}

func (o GetGrantsGrantsToOutput) ToGetGrantsGrantsToOutputWithContext(ctx context.Context) GetGrantsGrantsToOutput {
	return o
}

func (o GetGrantsGrantsToOutput) ToGetGrantsGrantsToPtrOutput() GetGrantsGrantsToPtrOutput {
	return o.ToGetGrantsGrantsToPtrOutputWithContext(context.Background())
}

func (o GetGrantsGrantsToOutput) ToGetGrantsGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsGrantsToPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetGrantsGrantsTo) *GetGrantsGrantsTo {
		return &v
	}).(GetGrantsGrantsToPtrOutput)
}

// Lists all privileges and roles granted to the role
func (o GetGrantsGrantsToOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsTo) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Lists all the privileges granted to the share
func (o GetGrantsGrantsToOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsTo) *string { return v.Share }).(pulumi.StringPtrOutput)
}

// Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed
func (o GetGrantsGrantsToOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGrantsGrantsTo) *string { return v.User }).(pulumi.StringPtrOutput)
}

type GetGrantsGrantsToPtrOutput struct{ *pulumi.OutputState }

func (GetGrantsGrantsToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetGrantsGrantsTo)(nil)).Elem()
}

func (o GetGrantsGrantsToPtrOutput) ToGetGrantsGrantsToPtrOutput() GetGrantsGrantsToPtrOutput {
	return o
}

func (o GetGrantsGrantsToPtrOutput) ToGetGrantsGrantsToPtrOutputWithContext(ctx context.Context) GetGrantsGrantsToPtrOutput {
	return o
}

func (o GetGrantsGrantsToPtrOutput) Elem() GetGrantsGrantsToOutput {
	return o.ApplyT(func(v *GetGrantsGrantsTo) GetGrantsGrantsTo {
		if v != nil {
			return *v
		}
		var ret GetGrantsGrantsTo
		return ret
	}).(GetGrantsGrantsToOutput)
}

// Lists all privileges and roles granted to the role
func (o GetGrantsGrantsToPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsTo) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Lists all the privileges granted to the share
func (o GetGrantsGrantsToPtrOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsTo) *string {
		if v == nil {
			return nil
		}
		return v.Share
	}).(pulumi.StringPtrOutput)
}

// Lists all the roles granted to the user. Note that the PUBLIC role, which is automatically available to every user, is not listed
func (o GetGrantsGrantsToPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetGrantsGrantsTo) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type GetMaskingPoliciesMaskingPolicy struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Kind     string `pulumi:"kind"`
	Name     string `pulumi:"name"`
	// The schema from which to return the maskingPolicies from.
	Schema string `pulumi:"schema"`
}

// GetMaskingPoliciesMaskingPolicyInput is an input type that accepts GetMaskingPoliciesMaskingPolicyArgs and GetMaskingPoliciesMaskingPolicyOutput values.
// You can construct a concrete instance of `GetMaskingPoliciesMaskingPolicyInput` via:
//
//	GetMaskingPoliciesMaskingPolicyArgs{...}
type GetMaskingPoliciesMaskingPolicyInput interface {
	pulumi.Input

	ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput
	ToGetMaskingPoliciesMaskingPolicyOutputWithContext(context.Context) GetMaskingPoliciesMaskingPolicyOutput
}

type GetMaskingPoliciesMaskingPolicyArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Kind     pulumi.StringInput `pulumi:"kind"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the maskingPolicies from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetMaskingPoliciesMaskingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (i GetMaskingPoliciesMaskingPolicyArgs) ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput {
	return i.ToGetMaskingPoliciesMaskingPolicyOutputWithContext(context.Background())
}

func (i GetMaskingPoliciesMaskingPolicyArgs) ToGetMaskingPoliciesMaskingPolicyOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaskingPoliciesMaskingPolicyOutput)
}

// GetMaskingPoliciesMaskingPolicyArrayInput is an input type that accepts GetMaskingPoliciesMaskingPolicyArray and GetMaskingPoliciesMaskingPolicyArrayOutput values.
// You can construct a concrete instance of `GetMaskingPoliciesMaskingPolicyArrayInput` via:
//
//	GetMaskingPoliciesMaskingPolicyArray{ GetMaskingPoliciesMaskingPolicyArgs{...} }
type GetMaskingPoliciesMaskingPolicyArrayInput interface {
	pulumi.Input

	ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput
	ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput
}

type GetMaskingPoliciesMaskingPolicyArray []GetMaskingPoliciesMaskingPolicyInput

func (GetMaskingPoliciesMaskingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (i GetMaskingPoliciesMaskingPolicyArray) ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput {
	return i.ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(context.Background())
}

func (i GetMaskingPoliciesMaskingPolicyArray) ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaskingPoliciesMaskingPolicyArrayOutput)
}

type GetMaskingPoliciesMaskingPolicyOutput struct{ *pulumi.OutputState }

func (GetMaskingPoliciesMaskingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (o GetMaskingPoliciesMaskingPolicyOutput) ToGetMaskingPoliciesMaskingPolicyOutput() GetMaskingPoliciesMaskingPolicyOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyOutput) ToGetMaskingPoliciesMaskingPolicyOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetMaskingPoliciesMaskingPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetMaskingPoliciesMaskingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the maskingPolicies from.
func (o GetMaskingPoliciesMaskingPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaskingPoliciesMaskingPolicy) string { return v.Schema }).(pulumi.StringOutput)
}

type GetMaskingPoliciesMaskingPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetMaskingPoliciesMaskingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaskingPoliciesMaskingPolicy)(nil)).Elem()
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) ToGetMaskingPoliciesMaskingPolicyArrayOutput() GetMaskingPoliciesMaskingPolicyArrayOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) ToGetMaskingPoliciesMaskingPolicyArrayOutputWithContext(ctx context.Context) GetMaskingPoliciesMaskingPolicyArrayOutput {
	return o
}

func (o GetMaskingPoliciesMaskingPolicyArrayOutput) Index(i pulumi.IntInput) GetMaskingPoliciesMaskingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaskingPoliciesMaskingPolicy {
		return vs[0].([]GetMaskingPoliciesMaskingPolicy)[vs[1].(int)]
	}).(GetMaskingPoliciesMaskingPolicyOutput)
}

type GetMaterializedViewsMaterializedView struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the views from.
	Schema string `pulumi:"schema"`
}

// GetMaterializedViewsMaterializedViewInput is an input type that accepts GetMaterializedViewsMaterializedViewArgs and GetMaterializedViewsMaterializedViewOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewInput` via:
//
//	GetMaterializedViewsMaterializedViewArgs{...}
type GetMaterializedViewsMaterializedViewInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput
	ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewOutput
}

type GetMaterializedViewsMaterializedViewArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the views from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetMaterializedViewsMaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return i.ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewOutput)
}

// GetMaterializedViewsMaterializedViewArrayInput is an input type that accepts GetMaterializedViewsMaterializedViewArray and GetMaterializedViewsMaterializedViewArrayOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewArrayInput` via:
//
//	GetMaterializedViewsMaterializedViewArray{ GetMaterializedViewsMaterializedViewArgs{...} }
type GetMaterializedViewsMaterializedViewArrayInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput
	ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewArrayOutput
}

type GetMaterializedViewsMaterializedViewArray []GetMaterializedViewsMaterializedViewInput

func (GetMaterializedViewsMaterializedViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return i.ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewArrayOutput)
}

type GetMaterializedViewsMaterializedViewOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetMaterializedViewsMaterializedViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the views from.
func (o GetMaterializedViewsMaterializedViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetMaterializedViewsMaterializedViewArrayOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) Index(i pulumi.IntInput) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaterializedViewsMaterializedView {
		return vs[0].([]GetMaterializedViewsMaterializedView)[vs[1].(int)]
	}).(GetMaterializedViewsMaterializedViewOutput)
}

type GetParametersParameter struct {
	Default     string `pulumi:"default"`
	Description string `pulumi:"description"`
	Key         string `pulumi:"key"`
	Level       string `pulumi:"level"`
	Type        string `pulumi:"type"`
	Value       string `pulumi:"value"`
}

// GetParametersParameterInput is an input type that accepts GetParametersParameterArgs and GetParametersParameterOutput values.
// You can construct a concrete instance of `GetParametersParameterInput` via:
//
//	GetParametersParameterArgs{...}
type GetParametersParameterInput interface {
	pulumi.Input

	ToGetParametersParameterOutput() GetParametersParameterOutput
	ToGetParametersParameterOutputWithContext(context.Context) GetParametersParameterOutput
}

type GetParametersParameterArgs struct {
	Default     pulumi.StringInput `pulumi:"default"`
	Description pulumi.StringInput `pulumi:"description"`
	Key         pulumi.StringInput `pulumi:"key"`
	Level       pulumi.StringInput `pulumi:"level"`
	Type        pulumi.StringInput `pulumi:"type"`
	Value       pulumi.StringInput `pulumi:"value"`
}

func (GetParametersParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParametersParameter)(nil)).Elem()
}

func (i GetParametersParameterArgs) ToGetParametersParameterOutput() GetParametersParameterOutput {
	return i.ToGetParametersParameterOutputWithContext(context.Background())
}

func (i GetParametersParameterArgs) ToGetParametersParameterOutputWithContext(ctx context.Context) GetParametersParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParametersParameterOutput)
}

// GetParametersParameterArrayInput is an input type that accepts GetParametersParameterArray and GetParametersParameterArrayOutput values.
// You can construct a concrete instance of `GetParametersParameterArrayInput` via:
//
//	GetParametersParameterArray{ GetParametersParameterArgs{...} }
type GetParametersParameterArrayInput interface {
	pulumi.Input

	ToGetParametersParameterArrayOutput() GetParametersParameterArrayOutput
	ToGetParametersParameterArrayOutputWithContext(context.Context) GetParametersParameterArrayOutput
}

type GetParametersParameterArray []GetParametersParameterInput

func (GetParametersParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParametersParameter)(nil)).Elem()
}

func (i GetParametersParameterArray) ToGetParametersParameterArrayOutput() GetParametersParameterArrayOutput {
	return i.ToGetParametersParameterArrayOutputWithContext(context.Background())
}

func (i GetParametersParameterArray) ToGetParametersParameterArrayOutputWithContext(ctx context.Context) GetParametersParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParametersParameterArrayOutput)
}

type GetParametersParameterOutput struct{ *pulumi.OutputState }

func (GetParametersParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParametersParameter)(nil)).Elem()
}

func (o GetParametersParameterOutput) ToGetParametersParameterOutput() GetParametersParameterOutput {
	return o
}

func (o GetParametersParameterOutput) ToGetParametersParameterOutputWithContext(ctx context.Context) GetParametersParameterOutput {
	return o
}

func (o GetParametersParameterOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Default }).(pulumi.StringOutput)
}

func (o GetParametersParameterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetParametersParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetParametersParameterOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Level }).(pulumi.StringOutput)
}

func (o GetParametersParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetParametersParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersParameter) string { return v.Value }).(pulumi.StringOutput)
}

type GetParametersParameterArrayOutput struct{ *pulumi.OutputState }

func (GetParametersParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParametersParameter)(nil)).Elem()
}

func (o GetParametersParameterArrayOutput) ToGetParametersParameterArrayOutput() GetParametersParameterArrayOutput {
	return o
}

func (o GetParametersParameterArrayOutput) ToGetParametersParameterArrayOutputWithContext(ctx context.Context) GetParametersParameterArrayOutput {
	return o
}

func (o GetParametersParameterArrayOutput) Index(i pulumi.IntInput) GetParametersParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetParametersParameter {
		return vs[0].([]GetParametersParameter)[vs[1].(int)]
	}).(GetParametersParameterOutput)
}

type GetPipesPipe struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database    string `pulumi:"database"`
	Integration string `pulumi:"integration"`
	Name        string `pulumi:"name"`
	// The schema from which to return the pipes from.
	Schema string `pulumi:"schema"`
}

// GetPipesPipeInput is an input type that accepts GetPipesPipeArgs and GetPipesPipeOutput values.
// You can construct a concrete instance of `GetPipesPipeInput` via:
//
//	GetPipesPipeArgs{...}
type GetPipesPipeInput interface {
	pulumi.Input

	ToGetPipesPipeOutput() GetPipesPipeOutput
	ToGetPipesPipeOutputWithContext(context.Context) GetPipesPipeOutput
}

type GetPipesPipeArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database    pulumi.StringInput `pulumi:"database"`
	Integration pulumi.StringInput `pulumi:"integration"`
	Name        pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the pipes from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetPipesPipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipesPipe)(nil)).Elem()
}

func (i GetPipesPipeArgs) ToGetPipesPipeOutput() GetPipesPipeOutput {
	return i.ToGetPipesPipeOutputWithContext(context.Background())
}

func (i GetPipesPipeArgs) ToGetPipesPipeOutputWithContext(ctx context.Context) GetPipesPipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipesPipeOutput)
}

// GetPipesPipeArrayInput is an input type that accepts GetPipesPipeArray and GetPipesPipeArrayOutput values.
// You can construct a concrete instance of `GetPipesPipeArrayInput` via:
//
//	GetPipesPipeArray{ GetPipesPipeArgs{...} }
type GetPipesPipeArrayInput interface {
	pulumi.Input

	ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput
	ToGetPipesPipeArrayOutputWithContext(context.Context) GetPipesPipeArrayOutput
}

type GetPipesPipeArray []GetPipesPipeInput

func (GetPipesPipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipesPipe)(nil)).Elem()
}

func (i GetPipesPipeArray) ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput {
	return i.ToGetPipesPipeArrayOutputWithContext(context.Background())
}

func (i GetPipesPipeArray) ToGetPipesPipeArrayOutputWithContext(ctx context.Context) GetPipesPipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPipesPipeArrayOutput)
}

type GetPipesPipeOutput struct{ *pulumi.OutputState }

func (GetPipesPipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipesPipe)(nil)).Elem()
}

func (o GetPipesPipeOutput) ToGetPipesPipeOutput() GetPipesPipeOutput {
	return o
}

func (o GetPipesPipeOutput) ToGetPipesPipeOutputWithContext(ctx context.Context) GetPipesPipeOutput {
	return o
}

func (o GetPipesPipeOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetPipesPipeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetPipesPipeOutput) Integration() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Integration }).(pulumi.StringOutput)
}

func (o GetPipesPipeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the pipes from.
func (o GetPipesPipeOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipesPipe) string { return v.Schema }).(pulumi.StringOutput)
}

type GetPipesPipeArrayOutput struct{ *pulumi.OutputState }

func (GetPipesPipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPipesPipe)(nil)).Elem()
}

func (o GetPipesPipeArrayOutput) ToGetPipesPipeArrayOutput() GetPipesPipeArrayOutput {
	return o
}

func (o GetPipesPipeArrayOutput) ToGetPipesPipeArrayOutputWithContext(ctx context.Context) GetPipesPipeArrayOutput {
	return o
}

func (o GetPipesPipeArrayOutput) Index(i pulumi.IntInput) GetPipesPipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPipesPipe {
		return vs[0].([]GetPipesPipe)[vs[1].(int)]
	}).(GetPipesPipeOutput)
}

type GetProceduresProcedure struct {
	ArgumentTypes []string `pulumi:"argumentTypes"`
	Comment       string   `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   string `pulumi:"database"`
	Name       string `pulumi:"name"`
	ReturnType string `pulumi:"returnType"`
	// The schema from which to return the procedures from.
	Schema string `pulumi:"schema"`
}

// GetProceduresProcedureInput is an input type that accepts GetProceduresProcedureArgs and GetProceduresProcedureOutput values.
// You can construct a concrete instance of `GetProceduresProcedureInput` via:
//
//	GetProceduresProcedureArgs{...}
type GetProceduresProcedureInput interface {
	pulumi.Input

	ToGetProceduresProcedureOutput() GetProceduresProcedureOutput
	ToGetProceduresProcedureOutputWithContext(context.Context) GetProceduresProcedureOutput
}

type GetProceduresProcedureArgs struct {
	ArgumentTypes pulumi.StringArrayInput `pulumi:"argumentTypes"`
	Comment       pulumi.StringInput      `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database   pulumi.StringInput `pulumi:"database"`
	Name       pulumi.StringInput `pulumi:"name"`
	ReturnType pulumi.StringInput `pulumi:"returnType"`
	// The schema from which to return the procedures from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetProceduresProcedureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProceduresProcedure)(nil)).Elem()
}

func (i GetProceduresProcedureArgs) ToGetProceduresProcedureOutput() GetProceduresProcedureOutput {
	return i.ToGetProceduresProcedureOutputWithContext(context.Background())
}

func (i GetProceduresProcedureArgs) ToGetProceduresProcedureOutputWithContext(ctx context.Context) GetProceduresProcedureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProceduresProcedureOutput)
}

// GetProceduresProcedureArrayInput is an input type that accepts GetProceduresProcedureArray and GetProceduresProcedureArrayOutput values.
// You can construct a concrete instance of `GetProceduresProcedureArrayInput` via:
//
//	GetProceduresProcedureArray{ GetProceduresProcedureArgs{...} }
type GetProceduresProcedureArrayInput interface {
	pulumi.Input

	ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput
	ToGetProceduresProcedureArrayOutputWithContext(context.Context) GetProceduresProcedureArrayOutput
}

type GetProceduresProcedureArray []GetProceduresProcedureInput

func (GetProceduresProcedureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProceduresProcedure)(nil)).Elem()
}

func (i GetProceduresProcedureArray) ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput {
	return i.ToGetProceduresProcedureArrayOutputWithContext(context.Background())
}

func (i GetProceduresProcedureArray) ToGetProceduresProcedureArrayOutputWithContext(ctx context.Context) GetProceduresProcedureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProceduresProcedureArrayOutput)
}

type GetProceduresProcedureOutput struct{ *pulumi.OutputState }

func (GetProceduresProcedureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProceduresProcedure)(nil)).Elem()
}

func (o GetProceduresProcedureOutput) ToGetProceduresProcedureOutput() GetProceduresProcedureOutput {
	return o
}

func (o GetProceduresProcedureOutput) ToGetProceduresProcedureOutputWithContext(ctx context.Context) GetProceduresProcedureOutput {
	return o
}

func (o GetProceduresProcedureOutput) ArgumentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProceduresProcedure) []string { return v.ArgumentTypes }).(pulumi.StringArrayOutput)
}

func (o GetProceduresProcedureOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetProceduresProcedureOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetProceduresProcedureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProceduresProcedureOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.ReturnType }).(pulumi.StringOutput)
}

// The schema from which to return the procedures from.
func (o GetProceduresProcedureOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetProceduresProcedure) string { return v.Schema }).(pulumi.StringOutput)
}

type GetProceduresProcedureArrayOutput struct{ *pulumi.OutputState }

func (GetProceduresProcedureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProceduresProcedure)(nil)).Elem()
}

func (o GetProceduresProcedureArrayOutput) ToGetProceduresProcedureArrayOutput() GetProceduresProcedureArrayOutput {
	return o
}

func (o GetProceduresProcedureArrayOutput) ToGetProceduresProcedureArrayOutputWithContext(ctx context.Context) GetProceduresProcedureArrayOutput {
	return o
}

func (o GetProceduresProcedureArrayOutput) Index(i pulumi.IntInput) GetProceduresProcedureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProceduresProcedure {
		return vs[0].([]GetProceduresProcedure)[vs[1].(int)]
	}).(GetProceduresProcedureOutput)
}

type GetResourceMonitorsResourceMonitor struct {
	Comment     string `pulumi:"comment"`
	CreditQuota string `pulumi:"creditQuota"`
	Frequency   string `pulumi:"frequency"`
	Name        string `pulumi:"name"`
}

// GetResourceMonitorsResourceMonitorInput is an input type that accepts GetResourceMonitorsResourceMonitorArgs and GetResourceMonitorsResourceMonitorOutput values.
// You can construct a concrete instance of `GetResourceMonitorsResourceMonitorInput` via:
//
//	GetResourceMonitorsResourceMonitorArgs{...}
type GetResourceMonitorsResourceMonitorInput interface {
	pulumi.Input

	ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput
	ToGetResourceMonitorsResourceMonitorOutputWithContext(context.Context) GetResourceMonitorsResourceMonitorOutput
}

type GetResourceMonitorsResourceMonitorArgs struct {
	Comment     pulumi.StringInput `pulumi:"comment"`
	CreditQuota pulumi.StringInput `pulumi:"creditQuota"`
	Frequency   pulumi.StringInput `pulumi:"frequency"`
	Name        pulumi.StringInput `pulumi:"name"`
}

func (GetResourceMonitorsResourceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (i GetResourceMonitorsResourceMonitorArgs) ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput {
	return i.ToGetResourceMonitorsResourceMonitorOutputWithContext(context.Background())
}

func (i GetResourceMonitorsResourceMonitorArgs) ToGetResourceMonitorsResourceMonitorOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceMonitorsResourceMonitorOutput)
}

// GetResourceMonitorsResourceMonitorArrayInput is an input type that accepts GetResourceMonitorsResourceMonitorArray and GetResourceMonitorsResourceMonitorArrayOutput values.
// You can construct a concrete instance of `GetResourceMonitorsResourceMonitorArrayInput` via:
//
//	GetResourceMonitorsResourceMonitorArray{ GetResourceMonitorsResourceMonitorArgs{...} }
type GetResourceMonitorsResourceMonitorArrayInput interface {
	pulumi.Input

	ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput
	ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(context.Context) GetResourceMonitorsResourceMonitorArrayOutput
}

type GetResourceMonitorsResourceMonitorArray []GetResourceMonitorsResourceMonitorInput

func (GetResourceMonitorsResourceMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (i GetResourceMonitorsResourceMonitorArray) ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput {
	return i.ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(context.Background())
}

func (i GetResourceMonitorsResourceMonitorArray) ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceMonitorsResourceMonitorArrayOutput)
}

type GetResourceMonitorsResourceMonitorOutput struct{ *pulumi.OutputState }

func (GetResourceMonitorsResourceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (o GetResourceMonitorsResourceMonitorOutput) ToGetResourceMonitorsResourceMonitorOutput() GetResourceMonitorsResourceMonitorOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorOutput) ToGetResourceMonitorsResourceMonitorOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) CreditQuota() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.CreditQuota }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Frequency }).(pulumi.StringOutput)
}

func (o GetResourceMonitorsResourceMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceMonitorsResourceMonitor) string { return v.Name }).(pulumi.StringOutput)
}

type GetResourceMonitorsResourceMonitorArrayOutput struct{ *pulumi.OutputState }

func (GetResourceMonitorsResourceMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceMonitorsResourceMonitor)(nil)).Elem()
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) ToGetResourceMonitorsResourceMonitorArrayOutput() GetResourceMonitorsResourceMonitorArrayOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) ToGetResourceMonitorsResourceMonitorArrayOutputWithContext(ctx context.Context) GetResourceMonitorsResourceMonitorArrayOutput {
	return o
}

func (o GetResourceMonitorsResourceMonitorArrayOutput) Index(i pulumi.IntInput) GetResourceMonitorsResourceMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceMonitorsResourceMonitor {
		return vs[0].([]GetResourceMonitorsResourceMonitor)[vs[1].(int)]
	}).(GetResourceMonitorsResourceMonitorOutput)
}

type GetRolesRole struct {
	Comment string `pulumi:"comment"`
	Name    string `pulumi:"name"`
	Owner   string `pulumi:"owner"`
}

// GetRolesRoleInput is an input type that accepts GetRolesRoleArgs and GetRolesRoleOutput values.
// You can construct a concrete instance of `GetRolesRoleInput` via:
//
//	GetRolesRoleArgs{...}
type GetRolesRoleInput interface {
	pulumi.Input

	ToGetRolesRoleOutput() GetRolesRoleOutput
	ToGetRolesRoleOutputWithContext(context.Context) GetRolesRoleOutput
}

type GetRolesRoleArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	Name    pulumi.StringInput `pulumi:"name"`
	Owner   pulumi.StringInput `pulumi:"owner"`
}

func (GetRolesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolesRole)(nil)).Elem()
}

func (i GetRolesRoleArgs) ToGetRolesRoleOutput() GetRolesRoleOutput {
	return i.ToGetRolesRoleOutputWithContext(context.Background())
}

func (i GetRolesRoleArgs) ToGetRolesRoleOutputWithContext(ctx context.Context) GetRolesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolesRoleOutput)
}

// GetRolesRoleArrayInput is an input type that accepts GetRolesRoleArray and GetRolesRoleArrayOutput values.
// You can construct a concrete instance of `GetRolesRoleArrayInput` via:
//
//	GetRolesRoleArray{ GetRolesRoleArgs{...} }
type GetRolesRoleArrayInput interface {
	pulumi.Input

	ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput
	ToGetRolesRoleArrayOutputWithContext(context.Context) GetRolesRoleArrayOutput
}

type GetRolesRoleArray []GetRolesRoleInput

func (GetRolesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolesRole)(nil)).Elem()
}

func (i GetRolesRoleArray) ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput {
	return i.ToGetRolesRoleArrayOutputWithContext(context.Background())
}

func (i GetRolesRoleArray) ToGetRolesRoleArrayOutputWithContext(ctx context.Context) GetRolesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolesRoleArrayOutput)
}

type GetRolesRoleOutput struct{ *pulumi.OutputState }

func (GetRolesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolesRole)(nil)).Elem()
}

func (o GetRolesRoleOutput) ToGetRolesRoleOutput() GetRolesRoleOutput {
	return o
}

func (o GetRolesRoleOutput) ToGetRolesRoleOutputWithContext(ctx context.Context) GetRolesRoleOutput {
	return o
}

func (o GetRolesRoleOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolesRole) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetRolesRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolesRole) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRolesRoleOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolesRole) string { return v.Owner }).(pulumi.StringOutput)
}

type GetRolesRoleArrayOutput struct{ *pulumi.OutputState }

func (GetRolesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolesRole)(nil)).Elem()
}

func (o GetRolesRoleArrayOutput) ToGetRolesRoleArrayOutput() GetRolesRoleArrayOutput {
	return o
}

func (o GetRolesRoleArrayOutput) ToGetRolesRoleArrayOutputWithContext(ctx context.Context) GetRolesRoleArrayOutput {
	return o
}

func (o GetRolesRoleArrayOutput) Index(i pulumi.IntInput) GetRolesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolesRole {
		return vs[0].([]GetRolesRole)[vs[1].(int)]
	}).(GetRolesRoleOutput)
}

type GetRowAccessPoliciesRowAccessPolicy struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the row access policyfrom.
	Schema string `pulumi:"schema"`
}

// GetRowAccessPoliciesRowAccessPolicyInput is an input type that accepts GetRowAccessPoliciesRowAccessPolicyArgs and GetRowAccessPoliciesRowAccessPolicyOutput values.
// You can construct a concrete instance of `GetRowAccessPoliciesRowAccessPolicyInput` via:
//
//	GetRowAccessPoliciesRowAccessPolicyArgs{...}
type GetRowAccessPoliciesRowAccessPolicyInput interface {
	pulumi.Input

	ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput
	ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(context.Context) GetRowAccessPoliciesRowAccessPolicyOutput
}

type GetRowAccessPoliciesRowAccessPolicyArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the row access policyfrom.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetRowAccessPoliciesRowAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (i GetRowAccessPoliciesRowAccessPolicyArgs) ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput {
	return i.ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(context.Background())
}

func (i GetRowAccessPoliciesRowAccessPolicyArgs) ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRowAccessPoliciesRowAccessPolicyOutput)
}

// GetRowAccessPoliciesRowAccessPolicyArrayInput is an input type that accepts GetRowAccessPoliciesRowAccessPolicyArray and GetRowAccessPoliciesRowAccessPolicyArrayOutput values.
// You can construct a concrete instance of `GetRowAccessPoliciesRowAccessPolicyArrayInput` via:
//
//	GetRowAccessPoliciesRowAccessPolicyArray{ GetRowAccessPoliciesRowAccessPolicyArgs{...} }
type GetRowAccessPoliciesRowAccessPolicyArrayInput interface {
	pulumi.Input

	ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput
	ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput
}

type GetRowAccessPoliciesRowAccessPolicyArray []GetRowAccessPoliciesRowAccessPolicyInput

func (GetRowAccessPoliciesRowAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (i GetRowAccessPoliciesRowAccessPolicyArray) ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return i.ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(context.Background())
}

func (i GetRowAccessPoliciesRowAccessPolicyArray) ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRowAccessPoliciesRowAccessPolicyArrayOutput)
}

type GetRowAccessPoliciesRowAccessPolicyOutput struct{ *pulumi.OutputState }

func (GetRowAccessPoliciesRowAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) ToGetRowAccessPoliciesRowAccessPolicyOutput() GetRowAccessPoliciesRowAccessPolicyOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) ToGetRowAccessPoliciesRowAccessPolicyOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetRowAccessPoliciesRowAccessPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetRowAccessPoliciesRowAccessPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the row access policyfrom.
func (o GetRowAccessPoliciesRowAccessPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetRowAccessPoliciesRowAccessPolicy) string { return v.Schema }).(pulumi.StringOutput)
}

type GetRowAccessPoliciesRowAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRowAccessPoliciesRowAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRowAccessPoliciesRowAccessPolicy)(nil)).Elem()
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) ToGetRowAccessPoliciesRowAccessPolicyArrayOutput() GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) ToGetRowAccessPoliciesRowAccessPolicyArrayOutputWithContext(ctx context.Context) GetRowAccessPoliciesRowAccessPolicyArrayOutput {
	return o
}

func (o GetRowAccessPoliciesRowAccessPolicyArrayOutput) Index(i pulumi.IntInput) GetRowAccessPoliciesRowAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRowAccessPoliciesRowAccessPolicy {
		return vs[0].([]GetRowAccessPoliciesRowAccessPolicy)[vs[1].(int)]
	}).(GetRowAccessPoliciesRowAccessPolicyOutput)
}

type GetSchemasSchema struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//	GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//	GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetSchemasSchemaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetSchemasSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Name }).(pulumi.StringOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetSequencesSequence struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the sequences from.
	Schema string `pulumi:"schema"`
}

// GetSequencesSequenceInput is an input type that accepts GetSequencesSequenceArgs and GetSequencesSequenceOutput values.
// You can construct a concrete instance of `GetSequencesSequenceInput` via:
//
//	GetSequencesSequenceArgs{...}
type GetSequencesSequenceInput interface {
	pulumi.Input

	ToGetSequencesSequenceOutput() GetSequencesSequenceOutput
	ToGetSequencesSequenceOutputWithContext(context.Context) GetSequencesSequenceOutput
}

type GetSequencesSequenceArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the sequences from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetSequencesSequenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return i.ToGetSequencesSequenceOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceOutput)
}

// GetSequencesSequenceArrayInput is an input type that accepts GetSequencesSequenceArray and GetSequencesSequenceArrayOutput values.
// You can construct a concrete instance of `GetSequencesSequenceArrayInput` via:
//
//	GetSequencesSequenceArray{ GetSequencesSequenceArgs{...} }
type GetSequencesSequenceArrayInput interface {
	pulumi.Input

	ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput
	ToGetSequencesSequenceArrayOutputWithContext(context.Context) GetSequencesSequenceArrayOutput
}

type GetSequencesSequenceArray []GetSequencesSequenceInput

func (GetSequencesSequenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return i.ToGetSequencesSequenceArrayOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceArrayOutput)
}

type GetSequencesSequenceOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetSequencesSequenceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetSequencesSequenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the sequences from.
func (o GetSequencesSequenceOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.Schema }).(pulumi.StringOutput)
}

type GetSequencesSequenceArrayOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) Index(i pulumi.IntInput) GetSequencesSequenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSequencesSequence {
		return vs[0].([]GetSequencesSequence)[vs[1].(int)]
	}).(GetSequencesSequenceOutput)
}

type GetSharesShare struct {
	Comment string        `pulumi:"comment"`
	Kind    string        `pulumi:"kind"`
	Name    string        `pulumi:"name"`
	Owner   string        `pulumi:"owner"`
	Tos     []interface{} `pulumi:"tos"`
}

// GetSharesShareInput is an input type that accepts GetSharesShareArgs and GetSharesShareOutput values.
// You can construct a concrete instance of `GetSharesShareInput` via:
//
//	GetSharesShareArgs{...}
type GetSharesShareInput interface {
	pulumi.Input

	ToGetSharesShareOutput() GetSharesShareOutput
	ToGetSharesShareOutputWithContext(context.Context) GetSharesShareOutput
}

type GetSharesShareArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	Kind    pulumi.StringInput `pulumi:"kind"`
	Name    pulumi.StringInput `pulumi:"name"`
	Owner   pulumi.StringInput `pulumi:"owner"`
	Tos     pulumi.ArrayInput  `pulumi:"tos"`
}

func (GetSharesShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharesShare)(nil)).Elem()
}

func (i GetSharesShareArgs) ToGetSharesShareOutput() GetSharesShareOutput {
	return i.ToGetSharesShareOutputWithContext(context.Background())
}

func (i GetSharesShareArgs) ToGetSharesShareOutputWithContext(ctx context.Context) GetSharesShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharesShareOutput)
}

// GetSharesShareArrayInput is an input type that accepts GetSharesShareArray and GetSharesShareArrayOutput values.
// You can construct a concrete instance of `GetSharesShareArrayInput` via:
//
//	GetSharesShareArray{ GetSharesShareArgs{...} }
type GetSharesShareArrayInput interface {
	pulumi.Input

	ToGetSharesShareArrayOutput() GetSharesShareArrayOutput
	ToGetSharesShareArrayOutputWithContext(context.Context) GetSharesShareArrayOutput
}

type GetSharesShareArray []GetSharesShareInput

func (GetSharesShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharesShare)(nil)).Elem()
}

func (i GetSharesShareArray) ToGetSharesShareArrayOutput() GetSharesShareArrayOutput {
	return i.ToGetSharesShareArrayOutputWithContext(context.Background())
}

func (i GetSharesShareArray) ToGetSharesShareArrayOutputWithContext(ctx context.Context) GetSharesShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharesShareArrayOutput)
}

type GetSharesShareOutput struct{ *pulumi.OutputState }

func (GetSharesShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharesShare)(nil)).Elem()
}

func (o GetSharesShareOutput) ToGetSharesShareOutput() GetSharesShareOutput {
	return o
}

func (o GetSharesShareOutput) ToGetSharesShareOutputWithContext(ctx context.Context) GetSharesShareOutput {
	return o
}

func (o GetSharesShareOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharesShare) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetSharesShareOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharesShare) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetSharesShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharesShare) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSharesShareOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharesShare) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetSharesShareOutput) Tos() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetSharesShare) []interface{} { return v.Tos }).(pulumi.ArrayOutput)
}

type GetSharesShareArrayOutput struct{ *pulumi.OutputState }

func (GetSharesShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharesShare)(nil)).Elem()
}

func (o GetSharesShareArrayOutput) ToGetSharesShareArrayOutput() GetSharesShareArrayOutput {
	return o
}

func (o GetSharesShareArrayOutput) ToGetSharesShareArrayOutputWithContext(ctx context.Context) GetSharesShareArrayOutput {
	return o
}

func (o GetSharesShareArrayOutput) Index(i pulumi.IntInput) GetSharesShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharesShare {
		return vs[0].([]GetSharesShare)[vs[1].(int)]
	}).(GetSharesShareOutput)
}

type GetStagesStage struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the stages from.
	Schema             string `pulumi:"schema"`
	StorageIntegration string `pulumi:"storageIntegration"`
}

// GetStagesStageInput is an input type that accepts GetStagesStageArgs and GetStagesStageOutput values.
// You can construct a concrete instance of `GetStagesStageInput` via:
//
//	GetStagesStageArgs{...}
type GetStagesStageInput interface {
	pulumi.Input

	ToGetStagesStageOutput() GetStagesStageOutput
	ToGetStagesStageOutputWithContext(context.Context) GetStagesStageOutput
}

type GetStagesStageArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the stages from.
	Schema             pulumi.StringInput `pulumi:"schema"`
	StorageIntegration pulumi.StringInput `pulumi:"storageIntegration"`
}

func (GetStagesStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStagesStage)(nil)).Elem()
}

func (i GetStagesStageArgs) ToGetStagesStageOutput() GetStagesStageOutput {
	return i.ToGetStagesStageOutputWithContext(context.Background())
}

func (i GetStagesStageArgs) ToGetStagesStageOutputWithContext(ctx context.Context) GetStagesStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStagesStageOutput)
}

// GetStagesStageArrayInput is an input type that accepts GetStagesStageArray and GetStagesStageArrayOutput values.
// You can construct a concrete instance of `GetStagesStageArrayInput` via:
//
//	GetStagesStageArray{ GetStagesStageArgs{...} }
type GetStagesStageArrayInput interface {
	pulumi.Input

	ToGetStagesStageArrayOutput() GetStagesStageArrayOutput
	ToGetStagesStageArrayOutputWithContext(context.Context) GetStagesStageArrayOutput
}

type GetStagesStageArray []GetStagesStageInput

func (GetStagesStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStagesStage)(nil)).Elem()
}

func (i GetStagesStageArray) ToGetStagesStageArrayOutput() GetStagesStageArrayOutput {
	return i.ToGetStagesStageArrayOutputWithContext(context.Background())
}

func (i GetStagesStageArray) ToGetStagesStageArrayOutputWithContext(ctx context.Context) GetStagesStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStagesStageArrayOutput)
}

type GetStagesStageOutput struct{ *pulumi.OutputState }

func (GetStagesStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStagesStage)(nil)).Elem()
}

func (o GetStagesStageOutput) ToGetStagesStageOutput() GetStagesStageOutput {
	return o
}

func (o GetStagesStageOutput) ToGetStagesStageOutputWithContext(ctx context.Context) GetStagesStageOutput {
	return o
}

func (o GetStagesStageOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetStagesStageOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetStagesStageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the stages from.
func (o GetStagesStageOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetStagesStageOutput) StorageIntegration() pulumi.StringOutput {
	return o.ApplyT(func(v GetStagesStage) string { return v.StorageIntegration }).(pulumi.StringOutput)
}

type GetStagesStageArrayOutput struct{ *pulumi.OutputState }

func (GetStagesStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStagesStage)(nil)).Elem()
}

func (o GetStagesStageArrayOutput) ToGetStagesStageArrayOutput() GetStagesStageArrayOutput {
	return o
}

func (o GetStagesStageArrayOutput) ToGetStagesStageArrayOutputWithContext(ctx context.Context) GetStagesStageArrayOutput {
	return o
}

func (o GetStagesStageArrayOutput) Index(i pulumi.IntInput) GetStagesStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStagesStage {
		return vs[0].([]GetStagesStage)[vs[1].(int)]
	}).(GetStagesStageOutput)
}

type GetStorageIntegrationsStorageIntegration struct {
	Comment string `pulumi:"comment"`
	Enabled bool   `pulumi:"enabled"`
	Name    string `pulumi:"name"`
	Type    string `pulumi:"type"`
}

// GetStorageIntegrationsStorageIntegrationInput is an input type that accepts GetStorageIntegrationsStorageIntegrationArgs and GetStorageIntegrationsStorageIntegrationOutput values.
// You can construct a concrete instance of `GetStorageIntegrationsStorageIntegrationInput` via:
//
//	GetStorageIntegrationsStorageIntegrationArgs{...}
type GetStorageIntegrationsStorageIntegrationInput interface {
	pulumi.Input

	ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput
	ToGetStorageIntegrationsStorageIntegrationOutputWithContext(context.Context) GetStorageIntegrationsStorageIntegrationOutput
}

type GetStorageIntegrationsStorageIntegrationArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	Name    pulumi.StringInput `pulumi:"name"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (GetStorageIntegrationsStorageIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (i GetStorageIntegrationsStorageIntegrationArgs) ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput {
	return i.ToGetStorageIntegrationsStorageIntegrationOutputWithContext(context.Background())
}

func (i GetStorageIntegrationsStorageIntegrationArgs) ToGetStorageIntegrationsStorageIntegrationOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorageIntegrationsStorageIntegrationOutput)
}

// GetStorageIntegrationsStorageIntegrationArrayInput is an input type that accepts GetStorageIntegrationsStorageIntegrationArray and GetStorageIntegrationsStorageIntegrationArrayOutput values.
// You can construct a concrete instance of `GetStorageIntegrationsStorageIntegrationArrayInput` via:
//
//	GetStorageIntegrationsStorageIntegrationArray{ GetStorageIntegrationsStorageIntegrationArgs{...} }
type GetStorageIntegrationsStorageIntegrationArrayInput interface {
	pulumi.Input

	ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput
	ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput
}

type GetStorageIntegrationsStorageIntegrationArray []GetStorageIntegrationsStorageIntegrationInput

func (GetStorageIntegrationsStorageIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (i GetStorageIntegrationsStorageIntegrationArray) ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput {
	return i.ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(context.Background())
}

func (i GetStorageIntegrationsStorageIntegrationArray) ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorageIntegrationsStorageIntegrationArrayOutput)
}

type GetStorageIntegrationsStorageIntegrationOutput struct{ *pulumi.OutputState }

func (GetStorageIntegrationsStorageIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (o GetStorageIntegrationsStorageIntegrationOutput) ToGetStorageIntegrationsStorageIntegrationOutput() GetStorageIntegrationsStorageIntegrationOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationOutput) ToGetStorageIntegrationsStorageIntegrationOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStorageIntegrationsStorageIntegrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageIntegrationsStorageIntegration) string { return v.Type }).(pulumi.StringOutput)
}

type GetStorageIntegrationsStorageIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GetStorageIntegrationsStorageIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStorageIntegrationsStorageIntegration)(nil)).Elem()
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) ToGetStorageIntegrationsStorageIntegrationArrayOutput() GetStorageIntegrationsStorageIntegrationArrayOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) ToGetStorageIntegrationsStorageIntegrationArrayOutputWithContext(ctx context.Context) GetStorageIntegrationsStorageIntegrationArrayOutput {
	return o
}

func (o GetStorageIntegrationsStorageIntegrationArrayOutput) Index(i pulumi.IntInput) GetStorageIntegrationsStorageIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStorageIntegrationsStorageIntegration {
		return vs[0].([]GetStorageIntegrationsStorageIntegration)[vs[1].(int)]
	}).(GetStorageIntegrationsStorageIntegrationOutput)
}

type GetStreamsStream struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the streams from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the streams from.
	Schema string `pulumi:"schema"`
	Table  string `pulumi:"table"`
}

// GetStreamsStreamInput is an input type that accepts GetStreamsStreamArgs and GetStreamsStreamOutput values.
// You can construct a concrete instance of `GetStreamsStreamInput` via:
//
//	GetStreamsStreamArgs{...}
type GetStreamsStreamInput interface {
	pulumi.Input

	ToGetStreamsStreamOutput() GetStreamsStreamOutput
	ToGetStreamsStreamOutputWithContext(context.Context) GetStreamsStreamOutput
}

type GetStreamsStreamArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the streams from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the streams from.
	Schema pulumi.StringInput `pulumi:"schema"`
	Table  pulumi.StringInput `pulumi:"table"`
}

func (GetStreamsStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsStream)(nil)).Elem()
}

func (i GetStreamsStreamArgs) ToGetStreamsStreamOutput() GetStreamsStreamOutput {
	return i.ToGetStreamsStreamOutputWithContext(context.Background())
}

func (i GetStreamsStreamArgs) ToGetStreamsStreamOutputWithContext(ctx context.Context) GetStreamsStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStreamsStreamOutput)
}

// GetStreamsStreamArrayInput is an input type that accepts GetStreamsStreamArray and GetStreamsStreamArrayOutput values.
// You can construct a concrete instance of `GetStreamsStreamArrayInput` via:
//
//	GetStreamsStreamArray{ GetStreamsStreamArgs{...} }
type GetStreamsStreamArrayInput interface {
	pulumi.Input

	ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput
	ToGetStreamsStreamArrayOutputWithContext(context.Context) GetStreamsStreamArrayOutput
}

type GetStreamsStreamArray []GetStreamsStreamInput

func (GetStreamsStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStreamsStream)(nil)).Elem()
}

func (i GetStreamsStreamArray) ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput {
	return i.ToGetStreamsStreamArrayOutputWithContext(context.Background())
}

func (i GetStreamsStreamArray) ToGetStreamsStreamArrayOutputWithContext(ctx context.Context) GetStreamsStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStreamsStreamArrayOutput)
}

type GetStreamsStreamOutput struct{ *pulumi.OutputState }

func (GetStreamsStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsStream)(nil)).Elem()
}

func (o GetStreamsStreamOutput) ToGetStreamsStreamOutput() GetStreamsStreamOutput {
	return o
}

func (o GetStreamsStreamOutput) ToGetStreamsStreamOutputWithContext(ctx context.Context) GetStreamsStreamOutput {
	return o
}

func (o GetStreamsStreamOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the streams from.
func (o GetStreamsStreamOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetStreamsStreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the streams from.
func (o GetStreamsStreamOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetStreamsStreamOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamsStream) string { return v.Table }).(pulumi.StringOutput)
}

type GetStreamsStreamArrayOutput struct{ *pulumi.OutputState }

func (GetStreamsStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStreamsStream)(nil)).Elem()
}

func (o GetStreamsStreamArrayOutput) ToGetStreamsStreamArrayOutput() GetStreamsStreamArrayOutput {
	return o
}

func (o GetStreamsStreamArrayOutput) ToGetStreamsStreamArrayOutputWithContext(ctx context.Context) GetStreamsStreamArrayOutput {
	return o
}

func (o GetStreamsStreamArrayOutput) Index(i pulumi.IntInput) GetStreamsStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStreamsStream {
		return vs[0].([]GetStreamsStream)[vs[1].(int)]
	}).(GetStreamsStreamOutput)
}

type GetTablesTable struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the tables from.
	Schema string `pulumi:"schema"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//	GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the tables from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//	GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetTablesTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the tables from.
func (o GetTablesTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

type GetTasksTask struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the tasks from.
	Schema    string `pulumi:"schema"`
	Warehouse string `pulumi:"warehouse"`
}

// GetTasksTaskInput is an input type that accepts GetTasksTaskArgs and GetTasksTaskOutput values.
// You can construct a concrete instance of `GetTasksTaskInput` via:
//
//	GetTasksTaskArgs{...}
type GetTasksTaskInput interface {
	pulumi.Input

	ToGetTasksTaskOutput() GetTasksTaskOutput
	ToGetTasksTaskOutputWithContext(context.Context) GetTasksTaskOutput
}

type GetTasksTaskArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the tasks from.
	Schema    pulumi.StringInput `pulumi:"schema"`
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (GetTasksTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksTask)(nil)).Elem()
}

func (i GetTasksTaskArgs) ToGetTasksTaskOutput() GetTasksTaskOutput {
	return i.ToGetTasksTaskOutputWithContext(context.Background())
}

func (i GetTasksTaskArgs) ToGetTasksTaskOutputWithContext(ctx context.Context) GetTasksTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTasksTaskOutput)
}

// GetTasksTaskArrayInput is an input type that accepts GetTasksTaskArray and GetTasksTaskArrayOutput values.
// You can construct a concrete instance of `GetTasksTaskArrayInput` via:
//
//	GetTasksTaskArray{ GetTasksTaskArgs{...} }
type GetTasksTaskArrayInput interface {
	pulumi.Input

	ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput
	ToGetTasksTaskArrayOutputWithContext(context.Context) GetTasksTaskArrayOutput
}

type GetTasksTaskArray []GetTasksTaskInput

func (GetTasksTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTasksTask)(nil)).Elem()
}

func (i GetTasksTaskArray) ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput {
	return i.ToGetTasksTaskArrayOutputWithContext(context.Background())
}

func (i GetTasksTaskArray) ToGetTasksTaskArrayOutputWithContext(ctx context.Context) GetTasksTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTasksTaskArrayOutput)
}

type GetTasksTaskOutput struct{ *pulumi.OutputState }

func (GetTasksTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTasksTask)(nil)).Elem()
}

func (o GetTasksTaskOutput) ToGetTasksTaskOutput() GetTasksTaskOutput {
	return o
}

func (o GetTasksTaskOutput) ToGetTasksTaskOutputWithContext(ctx context.Context) GetTasksTaskOutput {
	return o
}

func (o GetTasksTaskOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetTasksTaskOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetTasksTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the tasks from.
func (o GetTasksTaskOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Schema }).(pulumi.StringOutput)
}

func (o GetTasksTaskOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GetTasksTask) string { return v.Warehouse }).(pulumi.StringOutput)
}

type GetTasksTaskArrayOutput struct{ *pulumi.OutputState }

func (GetTasksTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTasksTask)(nil)).Elem()
}

func (o GetTasksTaskArrayOutput) ToGetTasksTaskArrayOutput() GetTasksTaskArrayOutput {
	return o
}

func (o GetTasksTaskArrayOutput) ToGetTasksTaskArrayOutputWithContext(ctx context.Context) GetTasksTaskArrayOutput {
	return o
}

func (o GetTasksTaskArrayOutput) Index(i pulumi.IntInput) GetTasksTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTasksTask {
		return vs[0].([]GetTasksTask)[vs[1].(int)]
	}).(GetTasksTaskOutput)
}

type GetUsersUser struct {
	Comment               string   `pulumi:"comment"`
	DefaultNamespace      string   `pulumi:"defaultNamespace"`
	DefaultRole           string   `pulumi:"defaultRole"`
	DefaultSecondaryRoles []string `pulumi:"defaultSecondaryRoles"`
	DefaultWarehouse      string   `pulumi:"defaultWarehouse"`
	Disabled              bool     `pulumi:"disabled"`
	DisplayName           string   `pulumi:"displayName"`
	Email                 string   `pulumi:"email"`
	FirstName             string   `pulumi:"firstName"`
	HasRsaPublicKey       bool     `pulumi:"hasRsaPublicKey"`
	LastName              string   `pulumi:"lastName"`
	LoginName             string   `pulumi:"loginName"`
	Name                  string   `pulumi:"name"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	Comment               pulumi.StringInput      `pulumi:"comment"`
	DefaultNamespace      pulumi.StringInput      `pulumi:"defaultNamespace"`
	DefaultRole           pulumi.StringInput      `pulumi:"defaultRole"`
	DefaultSecondaryRoles pulumi.StringArrayInput `pulumi:"defaultSecondaryRoles"`
	DefaultWarehouse      pulumi.StringInput      `pulumi:"defaultWarehouse"`
	Disabled              pulumi.BoolInput        `pulumi:"disabled"`
	DisplayName           pulumi.StringInput      `pulumi:"displayName"`
	Email                 pulumi.StringInput      `pulumi:"email"`
	FirstName             pulumi.StringInput      `pulumi:"firstName"`
	HasRsaPublicKey       pulumi.BoolInput        `pulumi:"hasRsaPublicKey"`
	LastName              pulumi.StringInput      `pulumi:"lastName"`
	LoginName             pulumi.StringInput      `pulumi:"loginName"`
	Name                  pulumi.StringInput      `pulumi:"name"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) DefaultNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DefaultNamespace }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) DefaultRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DefaultRole }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) DefaultSecondaryRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.DefaultSecondaryRoles }).(pulumi.StringArrayOutput)
}

func (o GetUsersUserOutput) DefaultWarehouse() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DefaultWarehouse }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.Disabled }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.FirstName }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) HasRsaPublicKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.HasRsaPublicKey }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastName }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LoginName }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

type GetViewsView struct {
	Comment string `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	// The schema from which to return the views from.
	Schema string `pulumi:"schema"`
}

// GetViewsViewInput is an input type that accepts GetViewsViewArgs and GetViewsViewOutput values.
// You can construct a concrete instance of `GetViewsViewInput` via:
//
//	GetViewsViewArgs{...}
type GetViewsViewInput interface {
	pulumi.Input

	ToGetViewsViewOutput() GetViewsViewOutput
	ToGetViewsViewOutputWithContext(context.Context) GetViewsViewOutput
}

type GetViewsViewArgs struct {
	Comment pulumi.StringInput `pulumi:"comment"`
	// The database from which to return the schemas from.
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	// The schema from which to return the views from.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (GetViewsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArgs) ToGetViewsViewOutput() GetViewsViewOutput {
	return i.ToGetViewsViewOutputWithContext(context.Background())
}

func (i GetViewsViewArgs) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewOutput)
}

// GetViewsViewArrayInput is an input type that accepts GetViewsViewArray and GetViewsViewArrayOutput values.
// You can construct a concrete instance of `GetViewsViewArrayInput` via:
//
//	GetViewsViewArray{ GetViewsViewArgs{...} }
type GetViewsViewArrayInput interface {
	pulumi.Input

	ToGetViewsViewArrayOutput() GetViewsViewArrayOutput
	ToGetViewsViewArrayOutputWithContext(context.Context) GetViewsViewArrayOutput
}

type GetViewsViewArray []GetViewsViewInput

func (GetViewsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return i.ToGetViewsViewArrayOutputWithContext(context.Background())
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewArrayOutput)
}

type GetViewsViewOutput struct{ *pulumi.OutputState }

func (GetViewsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (o GetViewsViewOutput) ToGetViewsViewOutput() GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Comment }).(pulumi.StringOutput)
}

// The database from which to return the schemas from.
func (o GetViewsViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Name }).(pulumi.StringOutput)
}

// The schema from which to return the views from.
func (o GetViewsViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetViewsViewArrayOutput struct{ *pulumi.OutputState }

func (GetViewsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) Index(i pulumi.IntInput) GetViewsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetViewsView {
		return vs[0].([]GetViewsView)[vs[1].(int)]
	}).(GetViewsViewOutput)
}

type GetWarehousesWarehouse struct {
	Comment       string `pulumi:"comment"`
	Name          string `pulumi:"name"`
	ScalingPolicy string `pulumi:"scalingPolicy"`
	Size          string `pulumi:"size"`
	State         string `pulumi:"state"`
	Type          string `pulumi:"type"`
}

// GetWarehousesWarehouseInput is an input type that accepts GetWarehousesWarehouseArgs and GetWarehousesWarehouseOutput values.
// You can construct a concrete instance of `GetWarehousesWarehouseInput` via:
//
//	GetWarehousesWarehouseArgs{...}
type GetWarehousesWarehouseInput interface {
	pulumi.Input

	ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput
	ToGetWarehousesWarehouseOutputWithContext(context.Context) GetWarehousesWarehouseOutput
}

type GetWarehousesWarehouseArgs struct {
	Comment       pulumi.StringInput `pulumi:"comment"`
	Name          pulumi.StringInput `pulumi:"name"`
	ScalingPolicy pulumi.StringInput `pulumi:"scalingPolicy"`
	Size          pulumi.StringInput `pulumi:"size"`
	State         pulumi.StringInput `pulumi:"state"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetWarehousesWarehouseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWarehousesWarehouse)(nil)).Elem()
}

func (i GetWarehousesWarehouseArgs) ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput {
	return i.ToGetWarehousesWarehouseOutputWithContext(context.Background())
}

func (i GetWarehousesWarehouseArgs) ToGetWarehousesWarehouseOutputWithContext(ctx context.Context) GetWarehousesWarehouseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWarehousesWarehouseOutput)
}

// GetWarehousesWarehouseArrayInput is an input type that accepts GetWarehousesWarehouseArray and GetWarehousesWarehouseArrayOutput values.
// You can construct a concrete instance of `GetWarehousesWarehouseArrayInput` via:
//
//	GetWarehousesWarehouseArray{ GetWarehousesWarehouseArgs{...} }
type GetWarehousesWarehouseArrayInput interface {
	pulumi.Input

	ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput
	ToGetWarehousesWarehouseArrayOutputWithContext(context.Context) GetWarehousesWarehouseArrayOutput
}

type GetWarehousesWarehouseArray []GetWarehousesWarehouseInput

func (GetWarehousesWarehouseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWarehousesWarehouse)(nil)).Elem()
}

func (i GetWarehousesWarehouseArray) ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput {
	return i.ToGetWarehousesWarehouseArrayOutputWithContext(context.Background())
}

func (i GetWarehousesWarehouseArray) ToGetWarehousesWarehouseArrayOutputWithContext(ctx context.Context) GetWarehousesWarehouseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWarehousesWarehouseArrayOutput)
}

type GetWarehousesWarehouseOutput struct{ *pulumi.OutputState }

func (GetWarehousesWarehouseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWarehousesWarehouse)(nil)).Elem()
}

func (o GetWarehousesWarehouseOutput) ToGetWarehousesWarehouseOutput() GetWarehousesWarehouseOutput {
	return o
}

func (o GetWarehousesWarehouseOutput) ToGetWarehousesWarehouseOutputWithContext(ctx context.Context) GetWarehousesWarehouseOutput {
	return o
}

func (o GetWarehousesWarehouseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) ScalingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.ScalingPolicy }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Size }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.State }).(pulumi.StringOutput)
}

func (o GetWarehousesWarehouseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWarehousesWarehouse) string { return v.Type }).(pulumi.StringOutput)
}

type GetWarehousesWarehouseArrayOutput struct{ *pulumi.OutputState }

func (GetWarehousesWarehouseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWarehousesWarehouse)(nil)).Elem()
}

func (o GetWarehousesWarehouseArrayOutput) ToGetWarehousesWarehouseArrayOutput() GetWarehousesWarehouseArrayOutput {
	return o
}

func (o GetWarehousesWarehouseArrayOutput) ToGetWarehousesWarehouseArrayOutputWithContext(ctx context.Context) GetWarehousesWarehouseArrayOutput {
	return o
}

func (o GetWarehousesWarehouseArrayOutput) Index(i pulumi.IntInput) GetWarehousesWarehouseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWarehousesWarehouse {
		return vs[0].([]GetWarehousesWarehouse)[vs[1].(int)]
	}).(GetWarehousesWarehouseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertScheduleInput)(nil)).Elem(), AlertAlertScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertSchedulePtrInput)(nil)).Elem(), AlertAlertScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertScheduleCronInput)(nil)).Elem(), AlertAlertScheduleCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertAlertScheduleCronPtrInput)(nil)).Elem(), AlertAlertScheduleCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicationConfigurationInput)(nil)).Elem(), DatabaseReplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicationConfigurationPtrInput)(nil)).Elem(), DatabaseReplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionArgInput)(nil)).Elem(), ExternalFunctionArgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionArgArrayInput)(nil)).Elem(), ExternalFunctionArgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionHeaderInput)(nil)).Elem(), ExternalFunctionHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalFunctionHeaderArrayInput)(nil)).Elem(), ExternalFunctionHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableColumnInput)(nil)).Elem(), ExternalTableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableColumnArrayInput)(nil)).Elem(), ExternalTableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableTagInput)(nil)).Elem(), ExternalTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalTableTagArrayInput)(nil)).Elem(), ExternalTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupFromReplicaInput)(nil)).Elem(), FailoverGroupFromReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupFromReplicaPtrInput)(nil)).Elem(), FailoverGroupFromReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReplicationScheduleInput)(nil)).Elem(), FailoverGroupReplicationScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReplicationSchedulePtrInput)(nil)).Elem(), FailoverGroupReplicationScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReplicationScheduleCronInput)(nil)).Elem(), FailoverGroupReplicationScheduleCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReplicationScheduleCronPtrInput)(nil)).Elem(), FailoverGroupReplicationScheduleCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgumentInput)(nil)).Elem(), FunctionArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgumentArrayInput)(nil)).Elem(), FunctionArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnAccountObjectInput)(nil)).Elem(), GrantPrivilegesToRoleOnAccountObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnAccountObjectPtrInput)(nil)).Elem(), GrantPrivilegesToRoleOnAccountObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaPtrInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectPtrInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectAllInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectAllPtrInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectFutureInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectFutureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegesToRoleOnSchemaObjectFuturePtrInput)(nil)).Elem(), GrantPrivilegesToRoleOnSchemaObjectFutureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicySignatureInput)(nil)).Elem(), MaskingPolicySignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicySignaturePtrInput)(nil)).Elem(), MaskingPolicySignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicySignatureColumnInput)(nil)).Elem(), MaskingPolicySignatureColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicySignatureColumnArrayInput)(nil)).Elem(), MaskingPolicySignatureColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewTagInput)(nil)).Elem(), MaterializedViewTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewTagArrayInput)(nil)).Elem(), MaterializedViewTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectParameterObjectIdentifierInput)(nil)).Elem(), ObjectParameterObjectIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectParameterObjectIdentifierArrayInput)(nil)).Elem(), ObjectParameterObjectIdentifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureArgumentInput)(nil)).Elem(), ProcedureArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureArgumentArrayInput)(nil)).Elem(), ProcedureArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagInput)(nil)).Elem(), RoleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagArrayInput)(nil)).Elem(), RoleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagInput)(nil)).Elem(), SchemaTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagArrayInput)(nil)).Elem(), SchemaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageTagInput)(nil)).Elem(), StageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageTagArrayInput)(nil)).Elem(), StageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnInput)(nil)).Elem(), TableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnArrayInput)(nil)).Elem(), TableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnDefaultInput)(nil)).Elem(), TableColumnDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnDefaultPtrInput)(nil)).Elem(), TableColumnDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnIdentityInput)(nil)).Elem(), TableColumnIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnIdentityPtrInput)(nil)).Elem(), TableColumnIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintForeignKeyPropertiesInput)(nil)).Elem(), TableConstraintForeignKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintForeignKeyPropertiesPtrInput)(nil)).Elem(), TableConstraintForeignKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintForeignKeyPropertiesReferencesInput)(nil)).Elem(), TableConstraintForeignKeyPropertiesReferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintForeignKeyPropertiesReferencesPtrInput)(nil)).Elem(), TableConstraintForeignKeyPropertiesReferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyInput)(nil)).Elem(), TablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyPtrInput)(nil)).Elem(), TablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagInput)(nil)).Elem(), TableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagArrayInput)(nil)).Elem(), TableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationObjectIdentifierInput)(nil)).Elem(), TagAssociationObjectIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationObjectIdentifierArrayInput)(nil)).Elem(), TagAssociationObjectIdentifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagInput)(nil)).Elem(), UserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagArrayInput)(nil)).Elem(), UserTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagInput)(nil)).Elem(), ViewTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagArrayInput)(nil)).Elem(), ViewTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountInput)(nil)).Elem(), GetAccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountArrayInput)(nil)).Elem(), GetAccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertsAlertInput)(nil)).Elem(), GetAlertsAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertsAlertArrayInput)(nil)).Elem(), GetAlertsAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRolesDatabaseRoleInput)(nil)).Elem(), GetDatabaseRolesDatabaseRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRolesDatabaseRoleArrayInput)(nil)).Elem(), GetDatabaseRolesDatabaseRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseReplicationConfigurationInput)(nil)).Elem(), GetDatabasesDatabaseReplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseReplicationConfigurationArrayInput)(nil)).Elem(), GetDatabasesDatabaseReplicationConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalFunctionsExternalFunctionInput)(nil)).Elem(), GetExternalFunctionsExternalFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalFunctionsExternalFunctionArrayInput)(nil)).Elem(), GetExternalFunctionsExternalFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalTablesExternalTableInput)(nil)).Elem(), GetExternalTablesExternalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalTablesExternalTableArrayInput)(nil)).Elem(), GetExternalTablesExternalTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFailoverGroupsFailoverGroupInput)(nil)).Elem(), GetFailoverGroupsFailoverGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFailoverGroupsFailoverGroupArrayInput)(nil)).Elem(), GetFailoverGroupsFailoverGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFileFormatsFileFormatInput)(nil)).Elem(), GetFileFormatsFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFileFormatsFileFormatArrayInput)(nil)).Elem(), GetFileFormatsFileFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionInput)(nil)).Elem(), GetFunctionsFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionArrayInput)(nil)).Elem(), GetFunctionsFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsInInput)(nil)).Elem(), GetGrantsFutureGrantsInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsInPtrInput)(nil)).Elem(), GetGrantsFutureGrantsInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsInSchemaInput)(nil)).Elem(), GetGrantsFutureGrantsInSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsInSchemaPtrInput)(nil)).Elem(), GetGrantsFutureGrantsInSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsToInput)(nil)).Elem(), GetGrantsFutureGrantsToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsFutureGrantsToPtrInput)(nil)).Elem(), GetGrantsFutureGrantsToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantInput)(nil)).Elem(), GetGrantsGrantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantArrayInput)(nil)).Elem(), GetGrantsGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsOfInput)(nil)).Elem(), GetGrantsGrantsOfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsOfPtrInput)(nil)).Elem(), GetGrantsGrantsOfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsOnInput)(nil)).Elem(), GetGrantsGrantsOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsOnPtrInput)(nil)).Elem(), GetGrantsGrantsOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsToInput)(nil)).Elem(), GetGrantsGrantsToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGrantsGrantsToPtrInput)(nil)).Elem(), GetGrantsGrantsToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaskingPoliciesMaskingPolicyInput)(nil)).Elem(), GetMaskingPoliciesMaskingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaskingPoliciesMaskingPolicyArrayInput)(nil)).Elem(), GetMaskingPoliciesMaskingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMaterializedViewsMaterializedViewArrayInput)(nil)).Elem(), GetMaterializedViewsMaterializedViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParametersParameterInput)(nil)).Elem(), GetParametersParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParametersParameterArrayInput)(nil)).Elem(), GetParametersParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipesPipeInput)(nil)).Elem(), GetPipesPipeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPipesPipeArrayInput)(nil)).Elem(), GetPipesPipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProceduresProcedureInput)(nil)).Elem(), GetProceduresProcedureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProceduresProcedureArrayInput)(nil)).Elem(), GetProceduresProcedureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceMonitorsResourceMonitorInput)(nil)).Elem(), GetResourceMonitorsResourceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceMonitorsResourceMonitorArrayInput)(nil)).Elem(), GetResourceMonitorsResourceMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolesRoleInput)(nil)).Elem(), GetRolesRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolesRoleArrayInput)(nil)).Elem(), GetRolesRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicyInput)(nil)).Elem(), GetRowAccessPoliciesRowAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRowAccessPoliciesRowAccessPolicyArrayInput)(nil)).Elem(), GetRowAccessPoliciesRowAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaInput)(nil)).Elem(), GetSchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaArrayInput)(nil)).Elem(), GetSchemasSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceInput)(nil)).Elem(), GetSequencesSequenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceArrayInput)(nil)).Elem(), GetSequencesSequenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharesShareInput)(nil)).Elem(), GetSharesShareArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharesShareArrayInput)(nil)).Elem(), GetSharesShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStagesStageInput)(nil)).Elem(), GetStagesStageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStagesStageArrayInput)(nil)).Elem(), GetStagesStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorageIntegrationsStorageIntegrationInput)(nil)).Elem(), GetStorageIntegrationsStorageIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorageIntegrationsStorageIntegrationArrayInput)(nil)).Elem(), GetStorageIntegrationsStorageIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStreamsStreamInput)(nil)).Elem(), GetStreamsStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStreamsStreamArrayInput)(nil)).Elem(), GetStreamsStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableInput)(nil)).Elem(), GetTablesTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableArrayInput)(nil)).Elem(), GetTablesTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTasksTaskInput)(nil)).Elem(), GetTasksTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTasksTaskArrayInput)(nil)).Elem(), GetTasksTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewInput)(nil)).Elem(), GetViewsViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetViewsViewArrayInput)(nil)).Elem(), GetViewsViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWarehousesWarehouseInput)(nil)).Elem(), GetWarehousesWarehouseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWarehousesWarehouseArrayInput)(nil)).Elem(), GetWarehousesWarehouseArray{})
	pulumi.RegisterOutputType(AlertAlertScheduleOutput{})
	pulumi.RegisterOutputType(AlertAlertSchedulePtrOutput{})
	pulumi.RegisterOutputType(AlertAlertScheduleCronOutput{})
	pulumi.RegisterOutputType(AlertAlertScheduleCronPtrOutput{})
	pulumi.RegisterOutputType(DatabaseReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(DatabaseReplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgArrayOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableTagOutput{})
	pulumi.RegisterOutputType(ExternalTableTagArrayOutput{})
	pulumi.RegisterOutputType(FailoverGroupFromReplicaOutput{})
	pulumi.RegisterOutputType(FailoverGroupFromReplicaPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReplicationScheduleOutput{})
	pulumi.RegisterOutputType(FailoverGroupReplicationSchedulePtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReplicationScheduleCronOutput{})
	pulumi.RegisterOutputType(FailoverGroupReplicationScheduleCronPtrOutput{})
	pulumi.RegisterOutputType(FunctionArgumentOutput{})
	pulumi.RegisterOutputType(FunctionArgumentArrayOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnAccountObjectOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnAccountObjectPtrOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaPtrOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectPtrOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectAllOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectAllPtrOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectFutureOutput{})
	pulumi.RegisterOutputType(GrantPrivilegesToRoleOnSchemaObjectFuturePtrOutput{})
	pulumi.RegisterOutputType(MaskingPolicySignatureOutput{})
	pulumi.RegisterOutputType(MaskingPolicySignaturePtrOutput{})
	pulumi.RegisterOutputType(MaskingPolicySignatureColumnOutput{})
	pulumi.RegisterOutputType(MaskingPolicySignatureColumnArrayOutput{})
	pulumi.RegisterOutputType(MaterializedViewTagOutput{})
	pulumi.RegisterOutputType(MaterializedViewTagArrayOutput{})
	pulumi.RegisterOutputType(ObjectParameterObjectIdentifierOutput{})
	pulumi.RegisterOutputType(ObjectParameterObjectIdentifierArrayOutput{})
	pulumi.RegisterOutputType(ProcedureArgumentOutput{})
	pulumi.RegisterOutputType(ProcedureArgumentArrayOutput{})
	pulumi.RegisterOutputType(RoleTagOutput{})
	pulumi.RegisterOutputType(RoleTagArrayOutput{})
	pulumi.RegisterOutputType(SchemaTagOutput{})
	pulumi.RegisterOutputType(SchemaTagArrayOutput{})
	pulumi.RegisterOutputType(StageTagOutput{})
	pulumi.RegisterOutputType(StageTagArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
	pulumi.RegisterOutputType(TableColumnDefaultOutput{})
	pulumi.RegisterOutputType(TableColumnDefaultPtrOutput{})
	pulumi.RegisterOutputType(TableColumnIdentityOutput{})
	pulumi.RegisterOutputType(TableColumnIdentityPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintForeignKeyPropertiesOutput{})
	pulumi.RegisterOutputType(TableConstraintForeignKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintForeignKeyPropertiesReferencesOutput{})
	pulumi.RegisterOutputType(TableConstraintForeignKeyPropertiesReferencesPtrOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(TableTagOutput{})
	pulumi.RegisterOutputType(TableTagArrayOutput{})
	pulumi.RegisterOutputType(TagAssociationObjectIdentifierOutput{})
	pulumi.RegisterOutputType(TagAssociationObjectIdentifierArrayOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
	pulumi.RegisterOutputType(ViewTagOutput{})
	pulumi.RegisterOutputType(ViewTagArrayOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(GetAlertsAlertOutput{})
	pulumi.RegisterOutputType(GetAlertsAlertArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseRolesDatabaseRoleOutput{})
	pulumi.RegisterOutputType(GetDatabaseRolesDatabaseRoleArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseReplicationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetExternalFunctionsExternalFunctionOutput{})
	pulumi.RegisterOutputType(GetExternalFunctionsExternalFunctionArrayOutput{})
	pulumi.RegisterOutputType(GetExternalTablesExternalTableOutput{})
	pulumi.RegisterOutputType(GetExternalTablesExternalTableArrayOutput{})
	pulumi.RegisterOutputType(GetFailoverGroupsFailoverGroupOutput{})
	pulumi.RegisterOutputType(GetFailoverGroupsFailoverGroupArrayOutput{})
	pulumi.RegisterOutputType(GetFileFormatsFileFormatOutput{})
	pulumi.RegisterOutputType(GetFileFormatsFileFormatArrayOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionArrayOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsInOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsInPtrOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsInSchemaOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsInSchemaPtrOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsToOutput{})
	pulumi.RegisterOutputType(GetGrantsFutureGrantsToPtrOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantArrayOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsOfOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsOfPtrOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsOnOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsOnPtrOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsToOutput{})
	pulumi.RegisterOutputType(GetGrantsGrantsToPtrOutput{})
	pulumi.RegisterOutputType(GetMaskingPoliciesMaskingPolicyOutput{})
	pulumi.RegisterOutputType(GetMaskingPoliciesMaskingPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewArrayOutput{})
	pulumi.RegisterOutputType(GetParametersParameterOutput{})
	pulumi.RegisterOutputType(GetParametersParameterArrayOutput{})
	pulumi.RegisterOutputType(GetPipesPipeOutput{})
	pulumi.RegisterOutputType(GetPipesPipeArrayOutput{})
	pulumi.RegisterOutputType(GetProceduresProcedureOutput{})
	pulumi.RegisterOutputType(GetProceduresProcedureArrayOutput{})
	pulumi.RegisterOutputType(GetResourceMonitorsResourceMonitorOutput{})
	pulumi.RegisterOutputType(GetResourceMonitorsResourceMonitorArrayOutput{})
	pulumi.RegisterOutputType(GetRolesRoleOutput{})
	pulumi.RegisterOutputType(GetRolesRoleArrayOutput{})
	pulumi.RegisterOutputType(GetRowAccessPoliciesRowAccessPolicyOutput{})
	pulumi.RegisterOutputType(GetRowAccessPoliciesRowAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceArrayOutput{})
	pulumi.RegisterOutputType(GetSharesShareOutput{})
	pulumi.RegisterOutputType(GetSharesShareArrayOutput{})
	pulumi.RegisterOutputType(GetStagesStageOutput{})
	pulumi.RegisterOutputType(GetStagesStageArrayOutput{})
	pulumi.RegisterOutputType(GetStorageIntegrationsStorageIntegrationOutput{})
	pulumi.RegisterOutputType(GetStorageIntegrationsStorageIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GetStreamsStreamOutput{})
	pulumi.RegisterOutputType(GetStreamsStreamArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetTasksTaskOutput{})
	pulumi.RegisterOutputType(GetTasksTaskArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetViewsViewOutput{})
	pulumi.RegisterOutputType(GetViewsViewArrayOutput{})
	pulumi.RegisterOutputType(GetWarehousesWarehouseOutput{})
	pulumi.RegisterOutputType(GetWarehousesWarehouseArrayOutput{})
}
