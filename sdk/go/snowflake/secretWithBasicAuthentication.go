// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication example '"<database_name>"."<schema_name>"."<secret_name>"'
// ```
type SecretWithBasicAuthentication struct {
	pulumi.CustomResourceState

	// Specifies a comment for the secret.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs SecretWithBasicAuthenticationDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name     pulumi.StringOutput `pulumi:"name"`
	Password pulumi.StringOutput `pulumi:"password"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType pulumi.StringOutput `pulumi:"secretType"`
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs SecretWithBasicAuthenticationShowOutputArrayOutput `pulumi:"showOutputs"`
	// Specifies the username value to store in the secret.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSecretWithBasicAuthentication registers a new resource with the given unique name, arguments, and options.
func NewSecretWithBasicAuthentication(ctx *pulumi.Context,
	name string, args *SecretWithBasicAuthenticationArgs, opts ...pulumi.ResourceOption) (*SecretWithBasicAuthentication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	if args.Username != nil {
		args.Username = pulumi.ToSecret(args.Username).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"username",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretWithBasicAuthentication
	err := ctx.RegisterResource("snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretWithBasicAuthentication gets an existing SecretWithBasicAuthentication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretWithBasicAuthentication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretWithBasicAuthenticationState, opts ...pulumi.ResourceOption) (*SecretWithBasicAuthentication, error) {
	var resource SecretWithBasicAuthentication
	err := ctx.ReadResource("snowflake:index/secretWithBasicAuthentication:SecretWithBasicAuthentication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretWithBasicAuthentication resources.
type secretWithBasicAuthenticationState struct {
	// Specifies a comment for the secret.
	Comment *string `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs []SecretWithBasicAuthenticationDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name     *string `pulumi:"name"`
	Password *string `pulumi:"password"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema *string `pulumi:"schema"`
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType *string `pulumi:"secretType"`
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs []SecretWithBasicAuthenticationShowOutput `pulumi:"showOutputs"`
	// Specifies the username value to store in the secret.
	Username *string `pulumi:"username"`
}

type SecretWithBasicAuthenticationState struct {
	// Specifies a comment for the secret.
	Comment pulumi.StringPtrInput
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutputs SecretWithBasicAuthenticationDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name     pulumi.StringPtrInput
	Password pulumi.StringPtrInput
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringPtrInput
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType pulumi.StringPtrInput
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutputs SecretWithBasicAuthenticationShowOutputArrayInput
	// Specifies the username value to store in the secret.
	Username pulumi.StringPtrInput
}

func (SecretWithBasicAuthenticationState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretWithBasicAuthenticationState)(nil)).Elem()
}

type secretWithBasicAuthenticationArgs struct {
	// Specifies a comment for the secret.
	Comment *string `pulumi:"comment"`
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database string `pulumi:"database"`
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name     *string `pulumi:"name"`
	Password string  `pulumi:"password"`
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema string `pulumi:"schema"`
	// Specifies the username value to store in the secret.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SecretWithBasicAuthentication resource.
type SecretWithBasicAuthenticationArgs struct {
	// Specifies a comment for the secret.
	Comment pulumi.StringPtrInput
	// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringInput
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name     pulumi.StringPtrInput
	Password pulumi.StringInput
	// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringInput
	// Specifies the username value to store in the secret.
	Username pulumi.StringInput
}

func (SecretWithBasicAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretWithBasicAuthenticationArgs)(nil)).Elem()
}

type SecretWithBasicAuthenticationInput interface {
	pulumi.Input

	ToSecretWithBasicAuthenticationOutput() SecretWithBasicAuthenticationOutput
	ToSecretWithBasicAuthenticationOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationOutput
}

func (*SecretWithBasicAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretWithBasicAuthentication)(nil)).Elem()
}

func (i *SecretWithBasicAuthentication) ToSecretWithBasicAuthenticationOutput() SecretWithBasicAuthenticationOutput {
	return i.ToSecretWithBasicAuthenticationOutputWithContext(context.Background())
}

func (i *SecretWithBasicAuthentication) ToSecretWithBasicAuthenticationOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithBasicAuthenticationOutput)
}

// SecretWithBasicAuthenticationArrayInput is an input type that accepts SecretWithBasicAuthenticationArray and SecretWithBasicAuthenticationArrayOutput values.
// You can construct a concrete instance of `SecretWithBasicAuthenticationArrayInput` via:
//
//	SecretWithBasicAuthenticationArray{ SecretWithBasicAuthenticationArgs{...} }
type SecretWithBasicAuthenticationArrayInput interface {
	pulumi.Input

	ToSecretWithBasicAuthenticationArrayOutput() SecretWithBasicAuthenticationArrayOutput
	ToSecretWithBasicAuthenticationArrayOutputWithContext(context.Context) SecretWithBasicAuthenticationArrayOutput
}

type SecretWithBasicAuthenticationArray []SecretWithBasicAuthenticationInput

func (SecretWithBasicAuthenticationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretWithBasicAuthentication)(nil)).Elem()
}

func (i SecretWithBasicAuthenticationArray) ToSecretWithBasicAuthenticationArrayOutput() SecretWithBasicAuthenticationArrayOutput {
	return i.ToSecretWithBasicAuthenticationArrayOutputWithContext(context.Background())
}

func (i SecretWithBasicAuthenticationArray) ToSecretWithBasicAuthenticationArrayOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithBasicAuthenticationArrayOutput)
}

// SecretWithBasicAuthenticationMapInput is an input type that accepts SecretWithBasicAuthenticationMap and SecretWithBasicAuthenticationMapOutput values.
// You can construct a concrete instance of `SecretWithBasicAuthenticationMapInput` via:
//
//	SecretWithBasicAuthenticationMap{ "key": SecretWithBasicAuthenticationArgs{...} }
type SecretWithBasicAuthenticationMapInput interface {
	pulumi.Input

	ToSecretWithBasicAuthenticationMapOutput() SecretWithBasicAuthenticationMapOutput
	ToSecretWithBasicAuthenticationMapOutputWithContext(context.Context) SecretWithBasicAuthenticationMapOutput
}

type SecretWithBasicAuthenticationMap map[string]SecretWithBasicAuthenticationInput

func (SecretWithBasicAuthenticationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretWithBasicAuthentication)(nil)).Elem()
}

func (i SecretWithBasicAuthenticationMap) ToSecretWithBasicAuthenticationMapOutput() SecretWithBasicAuthenticationMapOutput {
	return i.ToSecretWithBasicAuthenticationMapOutputWithContext(context.Background())
}

func (i SecretWithBasicAuthenticationMap) ToSecretWithBasicAuthenticationMapOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretWithBasicAuthenticationMapOutput)
}

type SecretWithBasicAuthenticationOutput struct{ *pulumi.OutputState }

func (SecretWithBasicAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretWithBasicAuthentication)(nil)).Elem()
}

func (o SecretWithBasicAuthenticationOutput) ToSecretWithBasicAuthenticationOutput() SecretWithBasicAuthenticationOutput {
	return o
}

func (o SecretWithBasicAuthenticationOutput) ToSecretWithBasicAuthenticationOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationOutput {
	return o
}

// Specifies a comment for the secret.
func (o SecretWithBasicAuthenticationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o SecretWithBasicAuthenticationOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE SECRET` for the given secret.
func (o SecretWithBasicAuthenticationOutput) DescribeOutputs() SecretWithBasicAuthenticationDescribeOutputArrayOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) SecretWithBasicAuthenticationDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(SecretWithBasicAuthenticationDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o SecretWithBasicAuthenticationOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o SecretWithBasicAuthenticationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SecretWithBasicAuthenticationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o SecretWithBasicAuthenticationOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
func (o SecretWithBasicAuthenticationOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.SecretType }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW SECRETS` for the given secret.
func (o SecretWithBasicAuthenticationOutput) ShowOutputs() SecretWithBasicAuthenticationShowOutputArrayOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) SecretWithBasicAuthenticationShowOutputArrayOutput {
		return v.ShowOutputs
	}).(SecretWithBasicAuthenticationShowOutputArrayOutput)
}

// Specifies the username value to store in the secret.
func (o SecretWithBasicAuthenticationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretWithBasicAuthentication) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type SecretWithBasicAuthenticationArrayOutput struct{ *pulumi.OutputState }

func (SecretWithBasicAuthenticationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretWithBasicAuthentication)(nil)).Elem()
}

func (o SecretWithBasicAuthenticationArrayOutput) ToSecretWithBasicAuthenticationArrayOutput() SecretWithBasicAuthenticationArrayOutput {
	return o
}

func (o SecretWithBasicAuthenticationArrayOutput) ToSecretWithBasicAuthenticationArrayOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationArrayOutput {
	return o
}

func (o SecretWithBasicAuthenticationArrayOutput) Index(i pulumi.IntInput) SecretWithBasicAuthenticationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretWithBasicAuthentication {
		return vs[0].([]*SecretWithBasicAuthentication)[vs[1].(int)]
	}).(SecretWithBasicAuthenticationOutput)
}

type SecretWithBasicAuthenticationMapOutput struct{ *pulumi.OutputState }

func (SecretWithBasicAuthenticationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretWithBasicAuthentication)(nil)).Elem()
}

func (o SecretWithBasicAuthenticationMapOutput) ToSecretWithBasicAuthenticationMapOutput() SecretWithBasicAuthenticationMapOutput {
	return o
}

func (o SecretWithBasicAuthenticationMapOutput) ToSecretWithBasicAuthenticationMapOutputWithContext(ctx context.Context) SecretWithBasicAuthenticationMapOutput {
	return o
}

func (o SecretWithBasicAuthenticationMapOutput) MapIndex(k pulumi.StringInput) SecretWithBasicAuthenticationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretWithBasicAuthentication {
		return vs[0].(map[string]*SecretWithBasicAuthentication)[vs[1].(string)]
	}).(SecretWithBasicAuthenticationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithBasicAuthenticationInput)(nil)).Elem(), &SecretWithBasicAuthentication{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithBasicAuthenticationArrayInput)(nil)).Elem(), SecretWithBasicAuthenticationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretWithBasicAuthenticationMapInput)(nil)).Elem(), SecretWithBasicAuthenticationMap{})
	pulumi.RegisterOutputType(SecretWithBasicAuthenticationOutput{})
	pulumi.RegisterOutputType(SecretWithBasicAuthenticationArrayOutput{})
	pulumi.RegisterOutputType(SecretWithBasicAuthenticationMapOutput{})
}
