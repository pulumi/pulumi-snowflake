// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			database, err := snowflake.NewDatabase(ctx, "database", nil)
//			if err != nil {
//				return err
//			}
//			schema, err := snowflake.NewSchema(ctx, "schema", &snowflake.SchemaArgs{
//				Database: database.Name,
//			})
//			if err != nil {
//				return err
//			}
//			tag, err := snowflake.NewTag(ctx, "tag", &snowflake.TagArgs{
//				Database: database.Name,
//				Schema:   schema.Name,
//				AllowedValues: pulumi.StringArray{
//					pulumi.String("finance"),
//					pulumi.String("engineering"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = snowflake.NewTagAssociation(ctx, "dbAssociation", &snowflake.TagAssociationArgs{
//				ObjectIdentifiers: snowflake.TagAssociationObjectIdentifierArray{
//					&snowflake.TagAssociationObjectIdentifierArgs{
//						Name: database.Name,
//					},
//				},
//				ObjectType: pulumi.String("DATABASE"),
//				TagId:      tag.ID(),
//				TagValue:   pulumi.String("finance"),
//			})
//			if err != nil {
//				return err
//			}
//			test, err := snowflake.NewTable(ctx, "test", &snowflake.TableArgs{
//				Database: pulumi.Any(snowflake_database.Test.Name),
//				Schema:   pulumi.Any(snowflake_schema.Test.Name),
//				Comment:  pulumi.String("Terraform example table"),
//				Columns: snowflake.TableColumnArray{
//					&snowflake.TableColumnArgs{
//						Name: pulumi.String("column1"),
//						Type: pulumi.String("VARIANT"),
//					},
//					&snowflake.TableColumnArgs{
//						Name: pulumi.String("column2"),
//						Type: pulumi.String("VARCHAR(16)"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = snowflake.NewTagAssociation(ctx, "tableAssociation", &snowflake.TagAssociationArgs{
//				ObjectIdentifiers: snowflake.TagAssociationObjectIdentifierArray{
//					&snowflake.TagAssociationObjectIdentifierArgs{
//						Name:     test.Name,
//						Database: pulumi.Any(snowflake_database.Test.Name),
//						Schema:   pulumi.Any(snowflake_schema.Test.Name),
//					},
//				},
//				ObjectType: pulumi.String("TABLE"),
//				TagId:      pulumi.Any(snowflake_tag.Test.Id),
//				TagValue:   pulumi.String("engineering"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// format is dbName.schemaName.tagName or dbName.schemaName.tagName
//
// ```sh
//
//	$ pulumi import snowflake:index/tagAssociation:TagAssociation example 'dbName.schemaName.tagName'
//
// ```
type TagAssociation struct {
	pulumi.CustomResourceState

	// Specifies the object identifier for the tag association.
	ObjectIdentifiers TagAssociationObjectIdentifierArrayOutput `pulumi:"objectIdentifiers"`
	// Specifies the object identifier for the tag association.
	//
	// Deprecated: Use `object_identifier` instead
	ObjectName pulumi.StringPtrOutput `pulumi:"objectName"`
	// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
	// If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrOutput `pulumi:"skipValidation"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringOutput `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringOutput `pulumi:"tagValue"`
}

// NewTagAssociation registers a new resource with the given unique name, arguments, and options.
func NewTagAssociation(ctx *pulumi.Context,
	name string, args *TagAssociationArgs, opts ...pulumi.ResourceOption) (*TagAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectIdentifiers == nil {
		return nil, errors.New("invalid value for required argument 'ObjectIdentifiers'")
	}
	if args.ObjectType == nil {
		return nil, errors.New("invalid value for required argument 'ObjectType'")
	}
	if args.TagId == nil {
		return nil, errors.New("invalid value for required argument 'TagId'")
	}
	if args.TagValue == nil {
		return nil, errors.New("invalid value for required argument 'TagValue'")
	}
	var resource TagAssociation
	err := ctx.RegisterResource("snowflake:index/tagAssociation:TagAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagAssociation gets an existing TagAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagAssociationState, opts ...pulumi.ResourceOption) (*TagAssociation, error) {
	var resource TagAssociation
	err := ctx.ReadResource("snowflake:index/tagAssociation:TagAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagAssociation resources.
type tagAssociationState struct {
	// Specifies the object identifier for the tag association.
	ObjectIdentifiers []TagAssociationObjectIdentifier `pulumi:"objectIdentifiers"`
	// Specifies the object identifier for the tag association.
	//
	// Deprecated: Use `object_identifier` instead
	ObjectName *string `pulumi:"objectName"`
	// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
	ObjectType *string `pulumi:"objectType"`
	// If true, skips validation of the tag association.
	SkipValidation *bool `pulumi:"skipValidation"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId *string `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue *string `pulumi:"tagValue"`
}

type TagAssociationState struct {
	// Specifies the object identifier for the tag association.
	ObjectIdentifiers TagAssociationObjectIdentifierArrayInput
	// Specifies the object identifier for the tag association.
	//
	// Deprecated: Use `object_identifier` instead
	ObjectName pulumi.StringPtrInput
	// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
	ObjectType pulumi.StringPtrInput
	// If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrInput
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringPtrInput
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringPtrInput
}

func (TagAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagAssociationState)(nil)).Elem()
}

type tagAssociationArgs struct {
	// Specifies the object identifier for the tag association.
	ObjectIdentifiers []TagAssociationObjectIdentifier `pulumi:"objectIdentifiers"`
	// Specifies the object identifier for the tag association.
	//
	// Deprecated: Use `object_identifier` instead
	ObjectName *string `pulumi:"objectName"`
	// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
	ObjectType string `pulumi:"objectType"`
	// If true, skips validation of the tag association.
	SkipValidation *bool `pulumi:"skipValidation"`
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId string `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue string `pulumi:"tagValue"`
}

// The set of arguments for constructing a TagAssociation resource.
type TagAssociationArgs struct {
	// Specifies the object identifier for the tag association.
	ObjectIdentifiers TagAssociationObjectIdentifierArrayInput
	// Specifies the object identifier for the tag association.
	//
	// Deprecated: Use `object_identifier` instead
	ObjectName pulumi.StringPtrInput
	// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
	ObjectType pulumi.StringInput
	// If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrInput
	// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
	TagId pulumi.StringInput
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringInput
}

func (TagAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagAssociationArgs)(nil)).Elem()
}

type TagAssociationInput interface {
	pulumi.Input

	ToTagAssociationOutput() TagAssociationOutput
	ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput
}

func (*TagAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TagAssociation)(nil)).Elem()
}

func (i *TagAssociation) ToTagAssociationOutput() TagAssociationOutput {
	return i.ToTagAssociationOutputWithContext(context.Background())
}

func (i *TagAssociation) ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationOutput)
}

// TagAssociationArrayInput is an input type that accepts TagAssociationArray and TagAssociationArrayOutput values.
// You can construct a concrete instance of `TagAssociationArrayInput` via:
//
//	TagAssociationArray{ TagAssociationArgs{...} }
type TagAssociationArrayInput interface {
	pulumi.Input

	ToTagAssociationArrayOutput() TagAssociationArrayOutput
	ToTagAssociationArrayOutputWithContext(context.Context) TagAssociationArrayOutput
}

type TagAssociationArray []TagAssociationInput

func (TagAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagAssociation)(nil)).Elem()
}

func (i TagAssociationArray) ToTagAssociationArrayOutput() TagAssociationArrayOutput {
	return i.ToTagAssociationArrayOutputWithContext(context.Background())
}

func (i TagAssociationArray) ToTagAssociationArrayOutputWithContext(ctx context.Context) TagAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationArrayOutput)
}

// TagAssociationMapInput is an input type that accepts TagAssociationMap and TagAssociationMapOutput values.
// You can construct a concrete instance of `TagAssociationMapInput` via:
//
//	TagAssociationMap{ "key": TagAssociationArgs{...} }
type TagAssociationMapInput interface {
	pulumi.Input

	ToTagAssociationMapOutput() TagAssociationMapOutput
	ToTagAssociationMapOutputWithContext(context.Context) TagAssociationMapOutput
}

type TagAssociationMap map[string]TagAssociationInput

func (TagAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagAssociation)(nil)).Elem()
}

func (i TagAssociationMap) ToTagAssociationMapOutput() TagAssociationMapOutput {
	return i.ToTagAssociationMapOutputWithContext(context.Background())
}

func (i TagAssociationMap) ToTagAssociationMapOutputWithContext(ctx context.Context) TagAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationMapOutput)
}

type TagAssociationOutput struct{ *pulumi.OutputState }

func (TagAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagAssociation)(nil)).Elem()
}

func (o TagAssociationOutput) ToTagAssociationOutput() TagAssociationOutput {
	return o
}

func (o TagAssociationOutput) ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput {
	return o
}

// Specifies the object identifier for the tag association.
func (o TagAssociationOutput) ObjectIdentifiers() TagAssociationObjectIdentifierArrayOutput {
	return o.ApplyT(func(v *TagAssociation) TagAssociationObjectIdentifierArrayOutput { return v.ObjectIdentifiers }).(TagAssociationObjectIdentifierArrayOutput)
}

// Specifies the object identifier for the tag association.
//
// Deprecated: Use `object_identifier` instead
func (o TagAssociationOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringPtrOutput { return v.ObjectName }).(pulumi.StringPtrOutput)
}

// Specifies the type of object to add a tag to. ex: 'ACCOUNT', 'COLUMN', 'DATABASE', etc. For more information: https://docs.snowflake.com/en/user-guide/object-tagging.html#supported-objects
func (o TagAssociationOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.ObjectType }).(pulumi.StringOutput)
}

// If true, skips validation of the tag association.
func (o TagAssociationOutput) SkipValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.BoolPtrOutput { return v.SkipValidation }).(pulumi.BoolPtrOutput)
}

// Specifies the identifier for the tag. Note: format must follow: "databaseName"."schemaName"."tagName" or "databaseName.schemaName.tagName" or "databaseName|schemaName.tagName" (snowflake_tag.tag.id)
func (o TagAssociationOutput) TagId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.TagId }).(pulumi.StringOutput)
}

// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
func (o TagAssociationOutput) TagValue() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.TagValue }).(pulumi.StringOutput)
}

type TagAssociationArrayOutput struct{ *pulumi.OutputState }

func (TagAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagAssociation)(nil)).Elem()
}

func (o TagAssociationArrayOutput) ToTagAssociationArrayOutput() TagAssociationArrayOutput {
	return o
}

func (o TagAssociationArrayOutput) ToTagAssociationArrayOutputWithContext(ctx context.Context) TagAssociationArrayOutput {
	return o
}

func (o TagAssociationArrayOutput) Index(i pulumi.IntInput) TagAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagAssociation {
		return vs[0].([]*TagAssociation)[vs[1].(int)]
	}).(TagAssociationOutput)
}

type TagAssociationMapOutput struct{ *pulumi.OutputState }

func (TagAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagAssociation)(nil)).Elem()
}

func (o TagAssociationMapOutput) ToTagAssociationMapOutput() TagAssociationMapOutput {
	return o
}

func (o TagAssociationMapOutput) ToTagAssociationMapOutputWithContext(ctx context.Context) TagAssociationMapOutput {
	return o
}

func (o TagAssociationMapOutput) MapIndex(k pulumi.StringInput) TagAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagAssociation {
		return vs[0].(map[string]*TagAssociation)[vs[1].(string)]
	}).(TagAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationInput)(nil)).Elem(), &TagAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationArrayInput)(nil)).Elem(), TagAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationMapInput)(nil)).Elem(), TagAssociationMap{})
	pulumi.RegisterOutputType(TagAssociationOutput{})
	pulumi.RegisterOutputType(TagAssociationArrayOutput{})
	pulumi.RegisterOutputType(TagAssociationMapOutput{})
}
