// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ~> **Note** Due to technical limitations of Terraform SDK, `object_identifiers` are not set during import state. Please run `terraform refresh` after importing to get this field populated.
//
// ```sh
// $ pulumi import snowflake:index/tagAssociation:TagAssociation example '"TAG_DATABASE"."TAG_SCHEMA"."TAG_NAME"|TAG_VALUE|OBJECT_TYPE'
// ```
type TagAssociation struct {
	pulumi.CustomResourceState

	// Specifies the object identifiers for the tag association.
	ObjectIdentifiers pulumi.StringArrayOutput `pulumi:"objectIdentifiers"`
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrOutput `pulumi:"skipValidation"`
	// Specifies the identifier for the tag.
	TagId pulumi.StringOutput `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringOutput `pulumi:"tagValue"`
}

// NewTagAssociation registers a new resource with the given unique name, arguments, and options.
func NewTagAssociation(ctx *pulumi.Context,
	name string, args *TagAssociationArgs, opts ...pulumi.ResourceOption) (*TagAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectIdentifiers == nil {
		return nil, errors.New("invalid value for required argument 'ObjectIdentifiers'")
	}
	if args.ObjectType == nil {
		return nil, errors.New("invalid value for required argument 'ObjectType'")
	}
	if args.TagId == nil {
		return nil, errors.New("invalid value for required argument 'TagId'")
	}
	if args.TagValue == nil {
		return nil, errors.New("invalid value for required argument 'TagValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagAssociation
	err := ctx.RegisterResource("snowflake:index/tagAssociation:TagAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagAssociation gets an existing TagAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagAssociationState, opts ...pulumi.ResourceOption) (*TagAssociation, error) {
	var resource TagAssociation
	err := ctx.ReadResource("snowflake:index/tagAssociation:TagAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagAssociation resources.
type tagAssociationState struct {
	// Specifies the object identifiers for the tag association.
	ObjectIdentifiers []string `pulumi:"objectIdentifiers"`
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType *string `pulumi:"objectType"`
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation *bool `pulumi:"skipValidation"`
	// Specifies the identifier for the tag.
	TagId *string `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue *string `pulumi:"tagValue"`
}

type TagAssociationState struct {
	// Specifies the object identifiers for the tag association.
	ObjectIdentifiers pulumi.StringArrayInput
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType pulumi.StringPtrInput
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrInput
	// Specifies the identifier for the tag.
	TagId pulumi.StringPtrInput
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringPtrInput
}

func (TagAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagAssociationState)(nil)).Elem()
}

type tagAssociationArgs struct {
	// Specifies the object identifiers for the tag association.
	ObjectIdentifiers []string `pulumi:"objectIdentifiers"`
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType string `pulumi:"objectType"`
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation *bool `pulumi:"skipValidation"`
	// Specifies the identifier for the tag.
	TagId string `pulumi:"tagId"`
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue string `pulumi:"tagValue"`
}

// The set of arguments for constructing a TagAssociation resource.
type TagAssociationArgs struct {
	// Specifies the object identifiers for the tag association.
	ObjectIdentifiers pulumi.StringArrayInput
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType pulumi.StringInput
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation pulumi.BoolPtrInput
	// Specifies the identifier for the tag.
	TagId pulumi.StringInput
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue pulumi.StringInput
}

func (TagAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagAssociationArgs)(nil)).Elem()
}

type TagAssociationInput interface {
	pulumi.Input

	ToTagAssociationOutput() TagAssociationOutput
	ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput
}

func (*TagAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TagAssociation)(nil)).Elem()
}

func (i *TagAssociation) ToTagAssociationOutput() TagAssociationOutput {
	return i.ToTagAssociationOutputWithContext(context.Background())
}

func (i *TagAssociation) ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationOutput)
}

// TagAssociationArrayInput is an input type that accepts TagAssociationArray and TagAssociationArrayOutput values.
// You can construct a concrete instance of `TagAssociationArrayInput` via:
//
//	TagAssociationArray{ TagAssociationArgs{...} }
type TagAssociationArrayInput interface {
	pulumi.Input

	ToTagAssociationArrayOutput() TagAssociationArrayOutput
	ToTagAssociationArrayOutputWithContext(context.Context) TagAssociationArrayOutput
}

type TagAssociationArray []TagAssociationInput

func (TagAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagAssociation)(nil)).Elem()
}

func (i TagAssociationArray) ToTagAssociationArrayOutput() TagAssociationArrayOutput {
	return i.ToTagAssociationArrayOutputWithContext(context.Background())
}

func (i TagAssociationArray) ToTagAssociationArrayOutputWithContext(ctx context.Context) TagAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationArrayOutput)
}

// TagAssociationMapInput is an input type that accepts TagAssociationMap and TagAssociationMapOutput values.
// You can construct a concrete instance of `TagAssociationMapInput` via:
//
//	TagAssociationMap{ "key": TagAssociationArgs{...} }
type TagAssociationMapInput interface {
	pulumi.Input

	ToTagAssociationMapOutput() TagAssociationMapOutput
	ToTagAssociationMapOutputWithContext(context.Context) TagAssociationMapOutput
}

type TagAssociationMap map[string]TagAssociationInput

func (TagAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagAssociation)(nil)).Elem()
}

func (i TagAssociationMap) ToTagAssociationMapOutput() TagAssociationMapOutput {
	return i.ToTagAssociationMapOutputWithContext(context.Background())
}

func (i TagAssociationMap) ToTagAssociationMapOutputWithContext(ctx context.Context) TagAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagAssociationMapOutput)
}

type TagAssociationOutput struct{ *pulumi.OutputState }

func (TagAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagAssociation)(nil)).Elem()
}

func (o TagAssociationOutput) ToTagAssociationOutput() TagAssociationOutput {
	return o
}

func (o TagAssociationOutput) ToTagAssociationOutputWithContext(ctx context.Context) TagAssociationOutput {
	return o
}

// Specifies the object identifiers for the tag association.
func (o TagAssociationOutput) ObjectIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringArrayOutput { return v.ObjectIdentifiers }).(pulumi.StringArrayOutput)
}

// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
func (o TagAssociationOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.ObjectType }).(pulumi.StringOutput)
}

// (Default: `true`) If true, skips validation of the tag association.
func (o TagAssociationOutput) SkipValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.BoolPtrOutput { return v.SkipValidation }).(pulumi.BoolPtrOutput)
}

// Specifies the identifier for the tag.
func (o TagAssociationOutput) TagId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.TagId }).(pulumi.StringOutput)
}

// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
func (o TagAssociationOutput) TagValue() pulumi.StringOutput {
	return o.ApplyT(func(v *TagAssociation) pulumi.StringOutput { return v.TagValue }).(pulumi.StringOutput)
}

type TagAssociationArrayOutput struct{ *pulumi.OutputState }

func (TagAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagAssociation)(nil)).Elem()
}

func (o TagAssociationArrayOutput) ToTagAssociationArrayOutput() TagAssociationArrayOutput {
	return o
}

func (o TagAssociationArrayOutput) ToTagAssociationArrayOutputWithContext(ctx context.Context) TagAssociationArrayOutput {
	return o
}

func (o TagAssociationArrayOutput) Index(i pulumi.IntInput) TagAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagAssociation {
		return vs[0].([]*TagAssociation)[vs[1].(int)]
	}).(TagAssociationOutput)
}

type TagAssociationMapOutput struct{ *pulumi.OutputState }

func (TagAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagAssociation)(nil)).Elem()
}

func (o TagAssociationMapOutput) ToTagAssociationMapOutput() TagAssociationMapOutput {
	return o
}

func (o TagAssociationMapOutput) ToTagAssociationMapOutputWithContext(ctx context.Context) TagAssociationMapOutput {
	return o
}

func (o TagAssociationMapOutput) MapIndex(k pulumi.StringInput) TagAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagAssociation {
		return vs[0].(map[string]*TagAssociation)[vs[1].(string)]
	}).(TagAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationInput)(nil)).Elem(), &TagAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationArrayInput)(nil)).Elem(), TagAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagAssociationMapInput)(nil)).Elem(), TagAssociationMap{})
	pulumi.RegisterOutputType(TagAssociationOutput{})
	pulumi.RegisterOutputType(TagAssociationArrayOutput{})
	pulumi.RegisterOutputType(TagAssociationMapOutput{})
}
