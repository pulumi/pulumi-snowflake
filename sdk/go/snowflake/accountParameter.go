// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := snowflake.NewAccountParameter(ctx, "accountParameter", &snowflake.AccountParameterArgs{
//				Key:   pulumi.String("ALLOW_ID_TOKEN"),
//				Value: pulumi.String("true"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = snowflake.NewAccountParameter(ctx, "p2", &snowflake.AccountParameterArgs{
//				Key:   pulumi.String("CLIENT_ENCRYPTION_KEY_SIZE"),
//				Value: pulumi.String("256"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import snowflake:index/accountParameter:AccountParameter p <parameter_name>
//
// ```
type AccountParameter struct {
	pulumi.CustomResourceState

	// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
	Key pulumi.StringOutput `pulumi:"key"`
	// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAccountParameter registers a new resource with the given unique name, arguments, and options.
func NewAccountParameter(ctx *pulumi.Context,
	name string, args *AccountParameterArgs, opts ...pulumi.ResourceOption) (*AccountParameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource AccountParameter
	err := ctx.RegisterResource("snowflake:index/accountParameter:AccountParameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountParameter gets an existing AccountParameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountParameterState, opts ...pulumi.ResourceOption) (*AccountParameter, error) {
	var resource AccountParameter
	err := ctx.ReadResource("snowflake:index/accountParameter:AccountParameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountParameter resources.
type accountParameterState struct {
	// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
	Key *string `pulumi:"key"`
	// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
	Value *string `pulumi:"value"`
}

type AccountParameterState struct {
	// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
	Key pulumi.StringPtrInput
	// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
	Value pulumi.StringPtrInput
}

func (AccountParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountParameterState)(nil)).Elem()
}

type accountParameterArgs struct {
	// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
	Key string `pulumi:"key"`
	// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a AccountParameter resource.
type AccountParameterArgs struct {
	// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
	Key pulumi.StringInput
	// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
	Value pulumi.StringInput
}

func (AccountParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountParameterArgs)(nil)).Elem()
}

type AccountParameterInput interface {
	pulumi.Input

	ToAccountParameterOutput() AccountParameterOutput
	ToAccountParameterOutputWithContext(ctx context.Context) AccountParameterOutput
}

func (*AccountParameter) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountParameter)(nil)).Elem()
}

func (i *AccountParameter) ToAccountParameterOutput() AccountParameterOutput {
	return i.ToAccountParameterOutputWithContext(context.Background())
}

func (i *AccountParameter) ToAccountParameterOutputWithContext(ctx context.Context) AccountParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountParameterOutput)
}

// AccountParameterArrayInput is an input type that accepts AccountParameterArray and AccountParameterArrayOutput values.
// You can construct a concrete instance of `AccountParameterArrayInput` via:
//
//	AccountParameterArray{ AccountParameterArgs{...} }
type AccountParameterArrayInput interface {
	pulumi.Input

	ToAccountParameterArrayOutput() AccountParameterArrayOutput
	ToAccountParameterArrayOutputWithContext(context.Context) AccountParameterArrayOutput
}

type AccountParameterArray []AccountParameterInput

func (AccountParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountParameter)(nil)).Elem()
}

func (i AccountParameterArray) ToAccountParameterArrayOutput() AccountParameterArrayOutput {
	return i.ToAccountParameterArrayOutputWithContext(context.Background())
}

func (i AccountParameterArray) ToAccountParameterArrayOutputWithContext(ctx context.Context) AccountParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountParameterArrayOutput)
}

// AccountParameterMapInput is an input type that accepts AccountParameterMap and AccountParameterMapOutput values.
// You can construct a concrete instance of `AccountParameterMapInput` via:
//
//	AccountParameterMap{ "key": AccountParameterArgs{...} }
type AccountParameterMapInput interface {
	pulumi.Input

	ToAccountParameterMapOutput() AccountParameterMapOutput
	ToAccountParameterMapOutputWithContext(context.Context) AccountParameterMapOutput
}

type AccountParameterMap map[string]AccountParameterInput

func (AccountParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountParameter)(nil)).Elem()
}

func (i AccountParameterMap) ToAccountParameterMapOutput() AccountParameterMapOutput {
	return i.ToAccountParameterMapOutputWithContext(context.Background())
}

func (i AccountParameterMap) ToAccountParameterMapOutputWithContext(ctx context.Context) AccountParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountParameterMapOutput)
}

type AccountParameterOutput struct{ *pulumi.OutputState }

func (AccountParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountParameter)(nil)).Elem()
}

func (o AccountParameterOutput) ToAccountParameterOutput() AccountParameterOutput {
	return o
}

func (o AccountParameterOutput) ToAccountParameterOutputWithContext(ctx context.Context) AccountParameterOutput {
	return o
}

// Name of account parameter. Valid values are those in [account parameters](https://docs.snowflake.com/en/sql-reference/parameters.html#account-parameters).
func (o AccountParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountParameter) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Value of account parameter, as a string. Constraints are the same as those for the parameters in Snowflake documentation.
func (o AccountParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountParameter) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AccountParameterArrayOutput struct{ *pulumi.OutputState }

func (AccountParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountParameter)(nil)).Elem()
}

func (o AccountParameterArrayOutput) ToAccountParameterArrayOutput() AccountParameterArrayOutput {
	return o
}

func (o AccountParameterArrayOutput) ToAccountParameterArrayOutputWithContext(ctx context.Context) AccountParameterArrayOutput {
	return o
}

func (o AccountParameterArrayOutput) Index(i pulumi.IntInput) AccountParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountParameter {
		return vs[0].([]*AccountParameter)[vs[1].(int)]
	}).(AccountParameterOutput)
}

type AccountParameterMapOutput struct{ *pulumi.OutputState }

func (AccountParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountParameter)(nil)).Elem()
}

func (o AccountParameterMapOutput) ToAccountParameterMapOutput() AccountParameterMapOutput {
	return o
}

func (o AccountParameterMapOutput) ToAccountParameterMapOutputWithContext(ctx context.Context) AccountParameterMapOutput {
	return o
}

func (o AccountParameterMapOutput) MapIndex(k pulumi.StringInput) AccountParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountParameter {
		return vs[0].(map[string]*AccountParameter)[vs[1].(string)]
	}).(AccountParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountParameterInput)(nil)).Elem(), &AccountParameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountParameterArrayInput)(nil)).Elem(), AccountParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountParameterMapInput)(nil)).Elem(), AccountParameterMap{})
	pulumi.RegisterOutputType(AccountParameterOutput{})
	pulumi.RegisterOutputType(AccountParameterArrayOutput{})
	pulumi.RegisterOutputType(AccountParameterMapOutput{})
}
