// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := snowflake.NewViewGrant(ctx, "grant", &snowflake.ViewGrantArgs{
// 			DatabaseName: pulumi.String("db"),
// 			OnFuture:     pulumi.Bool(false),
// 			Privilege:    pulumi.String("select"),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("role1"),
// 				pulumi.String("role2"),
// 			},
// 			SchemaName: pulumi.String("schema"),
// 			Shares: pulumi.StringArray{
// 				pulumi.String("share1"),
// 				pulumi.String("share2"),
// 			},
// 			ViewName:        pulumi.String("view"),
// 			WithGrantOption: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// # format is database name | schema name | view name | privilege | true/false for with_grant_option
//
// ```sh
//  $ pulumi import snowflake:index/viewGrant:ViewGrant example 'dbName|schemaName|viewName|USAGE|false'
// ```
type ViewGrant struct {
	pulumi.CustomResourceState

	// The name of the database containing the current or future views on which to grant privileges.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.
	OnFuture pulumi.BoolPtrOutput `pulumi:"onFuture"`
	// The privilege to grant on the current or future view.
	Privilege pulumi.StringPtrOutput `pulumi:"privilege"`
	// Grants privilege to these roles.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The name of the schema containing the current or future views on which to grant privileges.
	SchemaName pulumi.StringPtrOutput `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is unset).
	Shares pulumi.StringArrayOutput `pulumi:"shares"`
	// The name of the view on which to grant privileges immediately (only valid if onFuture is unset).
	ViewName pulumi.StringPtrOutput `pulumi:"viewName"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrOutput `pulumi:"withGrantOption"`
}

// NewViewGrant registers a new resource with the given unique name, arguments, and options.
func NewViewGrant(ctx *pulumi.Context,
	name string, args *ViewGrantArgs, opts ...pulumi.ResourceOption) (*ViewGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	var resource ViewGrant
	err := ctx.RegisterResource("snowflake:index/viewGrant:ViewGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetViewGrant gets an existing ViewGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetViewGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewGrantState, opts ...pulumi.ResourceOption) (*ViewGrant, error) {
	var resource ViewGrant
	err := ctx.ReadResource("snowflake:index/viewGrant:ViewGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ViewGrant resources.
type viewGrantState struct {
	// The name of the database containing the current or future views on which to grant privileges.
	DatabaseName *string `pulumi:"databaseName"`
	// When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.
	OnFuture *bool `pulumi:"onFuture"`
	// The privilege to grant on the current or future view.
	Privilege *string `pulumi:"privilege"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// The name of the schema containing the current or future views on which to grant privileges.
	SchemaName *string `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is unset).
	Shares []string `pulumi:"shares"`
	// The name of the view on which to grant privileges immediately (only valid if onFuture is unset).
	ViewName *string `pulumi:"viewName"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

type ViewGrantState struct {
	// The name of the database containing the current or future views on which to grant privileges.
	DatabaseName pulumi.StringPtrInput
	// When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.
	OnFuture pulumi.BoolPtrInput
	// The privilege to grant on the current or future view.
	Privilege pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// The name of the schema containing the current or future views on which to grant privileges.
	SchemaName pulumi.StringPtrInput
	// Grants privilege to these shares (only valid if onFuture is unset).
	Shares pulumi.StringArrayInput
	// The name of the view on which to grant privileges immediately (only valid if onFuture is unset).
	ViewName pulumi.StringPtrInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (ViewGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewGrantState)(nil)).Elem()
}

type viewGrantArgs struct {
	// The name of the database containing the current or future views on which to grant privileges.
	DatabaseName string `pulumi:"databaseName"`
	// When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.
	OnFuture *bool `pulumi:"onFuture"`
	// The privilege to grant on the current or future view.
	Privilege *string `pulumi:"privilege"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// The name of the schema containing the current or future views on which to grant privileges.
	SchemaName *string `pulumi:"schemaName"`
	// Grants privilege to these shares (only valid if onFuture is unset).
	Shares []string `pulumi:"shares"`
	// The name of the view on which to grant privileges immediately (only valid if onFuture is unset).
	ViewName *string `pulumi:"viewName"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

// The set of arguments for constructing a ViewGrant resource.
type ViewGrantArgs struct {
	// The name of the database containing the current or future views on which to grant privileges.
	DatabaseName pulumi.StringInput
	// When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.
	OnFuture pulumi.BoolPtrInput
	// The privilege to grant on the current or future view.
	Privilege pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// The name of the schema containing the current or future views on which to grant privileges.
	SchemaName pulumi.StringPtrInput
	// Grants privilege to these shares (only valid if onFuture is unset).
	Shares pulumi.StringArrayInput
	// The name of the view on which to grant privileges immediately (only valid if onFuture is unset).
	ViewName pulumi.StringPtrInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (ViewGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewGrantArgs)(nil)).Elem()
}

type ViewGrantInput interface {
	pulumi.Input

	ToViewGrantOutput() ViewGrantOutput
	ToViewGrantOutputWithContext(ctx context.Context) ViewGrantOutput
}

func (*ViewGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewGrant)(nil)).Elem()
}

func (i *ViewGrant) ToViewGrantOutput() ViewGrantOutput {
	return i.ToViewGrantOutputWithContext(context.Background())
}

func (i *ViewGrant) ToViewGrantOutputWithContext(ctx context.Context) ViewGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewGrantOutput)
}

// ViewGrantArrayInput is an input type that accepts ViewGrantArray and ViewGrantArrayOutput values.
// You can construct a concrete instance of `ViewGrantArrayInput` via:
//
//          ViewGrantArray{ ViewGrantArgs{...} }
type ViewGrantArrayInput interface {
	pulumi.Input

	ToViewGrantArrayOutput() ViewGrantArrayOutput
	ToViewGrantArrayOutputWithContext(context.Context) ViewGrantArrayOutput
}

type ViewGrantArray []ViewGrantInput

func (ViewGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ViewGrant)(nil)).Elem()
}

func (i ViewGrantArray) ToViewGrantArrayOutput() ViewGrantArrayOutput {
	return i.ToViewGrantArrayOutputWithContext(context.Background())
}

func (i ViewGrantArray) ToViewGrantArrayOutputWithContext(ctx context.Context) ViewGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewGrantArrayOutput)
}

// ViewGrantMapInput is an input type that accepts ViewGrantMap and ViewGrantMapOutput values.
// You can construct a concrete instance of `ViewGrantMapInput` via:
//
//          ViewGrantMap{ "key": ViewGrantArgs{...} }
type ViewGrantMapInput interface {
	pulumi.Input

	ToViewGrantMapOutput() ViewGrantMapOutput
	ToViewGrantMapOutputWithContext(context.Context) ViewGrantMapOutput
}

type ViewGrantMap map[string]ViewGrantInput

func (ViewGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ViewGrant)(nil)).Elem()
}

func (i ViewGrantMap) ToViewGrantMapOutput() ViewGrantMapOutput {
	return i.ToViewGrantMapOutputWithContext(context.Background())
}

func (i ViewGrantMap) ToViewGrantMapOutputWithContext(ctx context.Context) ViewGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewGrantMapOutput)
}

type ViewGrantOutput struct{ *pulumi.OutputState }

func (ViewGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewGrant)(nil)).Elem()
}

func (o ViewGrantOutput) ToViewGrantOutput() ViewGrantOutput {
	return o
}

func (o ViewGrantOutput) ToViewGrantOutputWithContext(ctx context.Context) ViewGrantOutput {
	return o
}

type ViewGrantArrayOutput struct{ *pulumi.OutputState }

func (ViewGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ViewGrant)(nil)).Elem()
}

func (o ViewGrantArrayOutput) ToViewGrantArrayOutput() ViewGrantArrayOutput {
	return o
}

func (o ViewGrantArrayOutput) ToViewGrantArrayOutputWithContext(ctx context.Context) ViewGrantArrayOutput {
	return o
}

func (o ViewGrantArrayOutput) Index(i pulumi.IntInput) ViewGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ViewGrant {
		return vs[0].([]*ViewGrant)[vs[1].(int)]
	}).(ViewGrantOutput)
}

type ViewGrantMapOutput struct{ *pulumi.OutputState }

func (ViewGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ViewGrant)(nil)).Elem()
}

func (o ViewGrantMapOutput) ToViewGrantMapOutput() ViewGrantMapOutput {
	return o
}

func (o ViewGrantMapOutput) ToViewGrantMapOutputWithContext(ctx context.Context) ViewGrantMapOutput {
	return o
}

func (o ViewGrantMapOutput) MapIndex(k pulumi.StringInput) ViewGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ViewGrant {
		return vs[0].(map[string]*ViewGrant)[vs[1].(string)]
	}).(ViewGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewGrantInput)(nil)).Elem(), &ViewGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewGrantArrayInput)(nil)).Elem(), ViewGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewGrantMapInput)(nil)).Elem(), ViewGrantMap{})
	pulumi.RegisterOutputType(ViewGrantOutput{})
	pulumi.RegisterOutputType(ViewGrantArrayOutput{})
	pulumi.RegisterOutputType(ViewGrantMapOutput{})
}
