// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Applies a masking policy to a table column.
//
// Only one masking policy may be applied per table column, hence only one `TableColumnMaskingPolicyApplication` resources may be present per table column.
// Using two or more `TableColumnMaskingPolicyApplication` resources for the same table column will result in the last one overriding any previously applied masking policies and unresolvable diffs in pulumi preview.
//
// When using this resource to manage a table column's masking policy make sure to ignore changes to the column's masking policy in the table definition, otherwise the two resources would conflict. See example below.
type TableColumnMaskingPolicyApplication struct {
	pulumi.CustomResourceState

	// The column to apply the masking policy to.
	Column pulumi.StringOutput `pulumi:"column"`
	// Fully qualified name (`database.schema.policyname`) of the policy to apply.
	MaskingPolicy pulumi.StringOutput `pulumi:"maskingPolicy"`
	// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewTableColumnMaskingPolicyApplication registers a new resource with the given unique name, arguments, and options.
func NewTableColumnMaskingPolicyApplication(ctx *pulumi.Context,
	name string, args *TableColumnMaskingPolicyApplicationArgs, opts ...pulumi.ResourceOption) (*TableColumnMaskingPolicyApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Column == nil {
		return nil, errors.New("invalid value for required argument 'Column'")
	}
	if args.MaskingPolicy == nil {
		return nil, errors.New("invalid value for required argument 'MaskingPolicy'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	var resource TableColumnMaskingPolicyApplication
	err := ctx.RegisterResource("snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableColumnMaskingPolicyApplication gets an existing TableColumnMaskingPolicyApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableColumnMaskingPolicyApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableColumnMaskingPolicyApplicationState, opts ...pulumi.ResourceOption) (*TableColumnMaskingPolicyApplication, error) {
	var resource TableColumnMaskingPolicyApplication
	err := ctx.ReadResource("snowflake:index/tableColumnMaskingPolicyApplication:TableColumnMaskingPolicyApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableColumnMaskingPolicyApplication resources.
type tableColumnMaskingPolicyApplicationState struct {
	// The column to apply the masking policy to.
	Column *string `pulumi:"column"`
	// Fully qualified name (`database.schema.policyname`) of the policy to apply.
	MaskingPolicy *string `pulumi:"maskingPolicy"`
	// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
	Table *string `pulumi:"table"`
}

type TableColumnMaskingPolicyApplicationState struct {
	// The column to apply the masking policy to.
	Column pulumi.StringPtrInput
	// Fully qualified name (`database.schema.policyname`) of the policy to apply.
	MaskingPolicy pulumi.StringPtrInput
	// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
	Table pulumi.StringPtrInput
}

func (TableColumnMaskingPolicyApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableColumnMaskingPolicyApplicationState)(nil)).Elem()
}

type tableColumnMaskingPolicyApplicationArgs struct {
	// The column to apply the masking policy to.
	Column string `pulumi:"column"`
	// Fully qualified name (`database.schema.policyname`) of the policy to apply.
	MaskingPolicy string `pulumi:"maskingPolicy"`
	// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a TableColumnMaskingPolicyApplication resource.
type TableColumnMaskingPolicyApplicationArgs struct {
	// The column to apply the masking policy to.
	Column pulumi.StringInput
	// Fully qualified name (`database.schema.policyname`) of the policy to apply.
	MaskingPolicy pulumi.StringInput
	// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
	Table pulumi.StringInput
}

func (TableColumnMaskingPolicyApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableColumnMaskingPolicyApplicationArgs)(nil)).Elem()
}

type TableColumnMaskingPolicyApplicationInput interface {
	pulumi.Input

	ToTableColumnMaskingPolicyApplicationOutput() TableColumnMaskingPolicyApplicationOutput
	ToTableColumnMaskingPolicyApplicationOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationOutput
}

func (*TableColumnMaskingPolicyApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (i *TableColumnMaskingPolicyApplication) ToTableColumnMaskingPolicyApplicationOutput() TableColumnMaskingPolicyApplicationOutput {
	return i.ToTableColumnMaskingPolicyApplicationOutputWithContext(context.Background())
}

func (i *TableColumnMaskingPolicyApplication) ToTableColumnMaskingPolicyApplicationOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnMaskingPolicyApplicationOutput)
}

// TableColumnMaskingPolicyApplicationArrayInput is an input type that accepts TableColumnMaskingPolicyApplicationArray and TableColumnMaskingPolicyApplicationArrayOutput values.
// You can construct a concrete instance of `TableColumnMaskingPolicyApplicationArrayInput` via:
//
//	TableColumnMaskingPolicyApplicationArray{ TableColumnMaskingPolicyApplicationArgs{...} }
type TableColumnMaskingPolicyApplicationArrayInput interface {
	pulumi.Input

	ToTableColumnMaskingPolicyApplicationArrayOutput() TableColumnMaskingPolicyApplicationArrayOutput
	ToTableColumnMaskingPolicyApplicationArrayOutputWithContext(context.Context) TableColumnMaskingPolicyApplicationArrayOutput
}

type TableColumnMaskingPolicyApplicationArray []TableColumnMaskingPolicyApplicationInput

func (TableColumnMaskingPolicyApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (i TableColumnMaskingPolicyApplicationArray) ToTableColumnMaskingPolicyApplicationArrayOutput() TableColumnMaskingPolicyApplicationArrayOutput {
	return i.ToTableColumnMaskingPolicyApplicationArrayOutputWithContext(context.Background())
}

func (i TableColumnMaskingPolicyApplicationArray) ToTableColumnMaskingPolicyApplicationArrayOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnMaskingPolicyApplicationArrayOutput)
}

// TableColumnMaskingPolicyApplicationMapInput is an input type that accepts TableColumnMaskingPolicyApplicationMap and TableColumnMaskingPolicyApplicationMapOutput values.
// You can construct a concrete instance of `TableColumnMaskingPolicyApplicationMapInput` via:
//
//	TableColumnMaskingPolicyApplicationMap{ "key": TableColumnMaskingPolicyApplicationArgs{...} }
type TableColumnMaskingPolicyApplicationMapInput interface {
	pulumi.Input

	ToTableColumnMaskingPolicyApplicationMapOutput() TableColumnMaskingPolicyApplicationMapOutput
	ToTableColumnMaskingPolicyApplicationMapOutputWithContext(context.Context) TableColumnMaskingPolicyApplicationMapOutput
}

type TableColumnMaskingPolicyApplicationMap map[string]TableColumnMaskingPolicyApplicationInput

func (TableColumnMaskingPolicyApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (i TableColumnMaskingPolicyApplicationMap) ToTableColumnMaskingPolicyApplicationMapOutput() TableColumnMaskingPolicyApplicationMapOutput {
	return i.ToTableColumnMaskingPolicyApplicationMapOutputWithContext(context.Background())
}

func (i TableColumnMaskingPolicyApplicationMap) ToTableColumnMaskingPolicyApplicationMapOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnMaskingPolicyApplicationMapOutput)
}

type TableColumnMaskingPolicyApplicationOutput struct{ *pulumi.OutputState }

func (TableColumnMaskingPolicyApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (o TableColumnMaskingPolicyApplicationOutput) ToTableColumnMaskingPolicyApplicationOutput() TableColumnMaskingPolicyApplicationOutput {
	return o
}

func (o TableColumnMaskingPolicyApplicationOutput) ToTableColumnMaskingPolicyApplicationOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationOutput {
	return o
}

// The column to apply the masking policy to.
func (o TableColumnMaskingPolicyApplicationOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v *TableColumnMaskingPolicyApplication) pulumi.StringOutput { return v.Column }).(pulumi.StringOutput)
}

// Fully qualified name (`database.schema.policyname`) of the policy to apply.
func (o TableColumnMaskingPolicyApplicationOutput) MaskingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *TableColumnMaskingPolicyApplication) pulumi.StringOutput { return v.MaskingPolicy }).(pulumi.StringOutput)
}

// The fully qualified name (`database.schema.table`) of the table to apply the masking policy to.
func (o TableColumnMaskingPolicyApplicationOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *TableColumnMaskingPolicyApplication) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type TableColumnMaskingPolicyApplicationArrayOutput struct{ *pulumi.OutputState }

func (TableColumnMaskingPolicyApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (o TableColumnMaskingPolicyApplicationArrayOutput) ToTableColumnMaskingPolicyApplicationArrayOutput() TableColumnMaskingPolicyApplicationArrayOutput {
	return o
}

func (o TableColumnMaskingPolicyApplicationArrayOutput) ToTableColumnMaskingPolicyApplicationArrayOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationArrayOutput {
	return o
}

func (o TableColumnMaskingPolicyApplicationArrayOutput) Index(i pulumi.IntInput) TableColumnMaskingPolicyApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableColumnMaskingPolicyApplication {
		return vs[0].([]*TableColumnMaskingPolicyApplication)[vs[1].(int)]
	}).(TableColumnMaskingPolicyApplicationOutput)
}

type TableColumnMaskingPolicyApplicationMapOutput struct{ *pulumi.OutputState }

func (TableColumnMaskingPolicyApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableColumnMaskingPolicyApplication)(nil)).Elem()
}

func (o TableColumnMaskingPolicyApplicationMapOutput) ToTableColumnMaskingPolicyApplicationMapOutput() TableColumnMaskingPolicyApplicationMapOutput {
	return o
}

func (o TableColumnMaskingPolicyApplicationMapOutput) ToTableColumnMaskingPolicyApplicationMapOutputWithContext(ctx context.Context) TableColumnMaskingPolicyApplicationMapOutput {
	return o
}

func (o TableColumnMaskingPolicyApplicationMapOutput) MapIndex(k pulumi.StringInput) TableColumnMaskingPolicyApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableColumnMaskingPolicyApplication {
		return vs[0].(map[string]*TableColumnMaskingPolicyApplication)[vs[1].(string)]
	}).(TableColumnMaskingPolicyApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnMaskingPolicyApplicationInput)(nil)).Elem(), &TableColumnMaskingPolicyApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnMaskingPolicyApplicationArrayInput)(nil)).Elem(), TableColumnMaskingPolicyApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnMaskingPolicyApplicationMapInput)(nil)).Elem(), TableColumnMaskingPolicyApplicationMap{})
	pulumi.RegisterOutputType(TableColumnMaskingPolicyApplicationOutput{})
	pulumi.RegisterOutputType(TableColumnMaskingPolicyApplicationArrayOutput{})
	pulumi.RegisterOutputType(TableColumnMaskingPolicyApplicationMapOutput{})
}
