// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := snowflake.NewFileFormat(ctx, "exampleFileFormat", &snowflake.FileFormatArgs{
//				Database:   pulumi.String("EXAMPLE_DB"),
//				FormatType: pulumi.String("CSV"),
//				Schema:     pulumi.String("EXAMPLE_SCHEMA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// format is database name | schema name | file format name
//
// ```sh
//
//	$ pulumi import snowflake:index/fileFormat:FileFormat example 'dbName|schemaName|fileFormatName'
//
// ```
type FileFormat struct {
	pulumi.CustomResourceState

	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate pulumi.BoolPtrOutput `pulumi:"allowDuplicate"`
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText pulumi.BoolPtrOutput `pulumi:"binaryAsText"`
	// Defines the encoding format for binary input or output.
	BinaryFormat pulumi.StringOutput `pulumi:"binaryFormat"`
	// Specifies a comment for the file format.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Specifies the current compression algorithm for the data file.
	Compression pulumi.StringOutput `pulumi:"compression"`
	// The database in which to create the file format.
	Database pulumi.StringOutput `pulumi:"database"`
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat pulumi.StringOutput `pulumi:"dateFormat"`
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert pulumi.BoolPtrOutput `pulumi:"disableAutoConvert"`
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData pulumi.BoolPtrOutput `pulumi:"disableSnowflakeData"`
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull pulumi.BoolPtrOutput `pulumi:"emptyFieldAsNull"`
	// Boolean that enables parsing of octal numbers.
	EnableOctal pulumi.BoolPtrOutput `pulumi:"enableOctal"`
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding pulumi.StringOutput `pulumi:"encoding"`
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch pulumi.BoolPtrOutput `pulumi:"errorOnColumnCountMismatch"`
	// Single character string used as the escape character for field values.
	Escape pulumi.StringOutput `pulumi:"escape"`
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField pulumi.StringOutput `pulumi:"escapeUnenclosedField"`
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter pulumi.StringOutput `pulumi:"fieldDelimiter"`
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy pulumi.StringOutput `pulumi:"fieldOptionallyEnclosedBy"`
	// Specifies the extension for files unloaded to a stage.
	FileExtension pulumi.StringPtrOutput `pulumi:"fileExtension"`
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType pulumi.StringOutput `pulumi:"formatType"`
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUtf8Errors pulumi.BoolPtrOutput `pulumi:"ignoreUtf8Errors"`
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name pulumi.StringOutput `pulumi:"name"`
	// String used to convert to and from SQL NULL.
	NullIfs pulumi.StringArrayOutput `pulumi:"nullIfs"`
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace pulumi.BoolPtrOutput `pulumi:"preserveSpace"`
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter pulumi.StringOutput `pulumi:"recordDelimiter"`
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
	ReplaceInvalidCharacters pulumi.BoolPtrOutput `pulumi:"replaceInvalidCharacters"`
	// The schema in which to create the file format.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines pulumi.BoolPtrOutput `pulumi:"skipBlankLines"`
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark pulumi.BoolPtrOutput `pulumi:"skipByteOrderMark"`
	// Number of lines at the start of the file to skip.
	SkipHeader pulumi.IntPtrOutput `pulumi:"skipHeader"`
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues pulumi.BoolPtrOutput `pulumi:"stripNullValues"`
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray pulumi.BoolPtrOutput `pulumi:"stripOuterArray"`
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement pulumi.BoolPtrOutput `pulumi:"stripOuterElement"`
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat pulumi.StringOutput `pulumi:"timeFormat"`
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat pulumi.StringOutput `pulumi:"timestampFormat"`
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace pulumi.BoolPtrOutput `pulumi:"trimSpace"`
}

// NewFileFormat registers a new resource with the given unique name, arguments, and options.
func NewFileFormat(ctx *pulumi.Context,
	name string, args *FileFormatArgs, opts ...pulumi.ResourceOption) (*FileFormat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.FormatType == nil {
		return nil, errors.New("invalid value for required argument 'FormatType'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileFormat
	err := ctx.RegisterResource("snowflake:index/fileFormat:FileFormat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileFormat gets an existing FileFormat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileFormat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileFormatState, opts ...pulumi.ResourceOption) (*FileFormat, error) {
	var resource FileFormat
	err := ctx.ReadResource("snowflake:index/fileFormat:FileFormat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileFormat resources.
type fileFormatState struct {
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate *bool `pulumi:"allowDuplicate"`
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText *bool `pulumi:"binaryAsText"`
	// Defines the encoding format for binary input or output.
	BinaryFormat *string `pulumi:"binaryFormat"`
	// Specifies a comment for the file format.
	Comment *string `pulumi:"comment"`
	// Specifies the current compression algorithm for the data file.
	Compression *string `pulumi:"compression"`
	// The database in which to create the file format.
	Database *string `pulumi:"database"`
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat *string `pulumi:"dateFormat"`
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert *bool `pulumi:"disableAutoConvert"`
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData *bool `pulumi:"disableSnowflakeData"`
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull *bool `pulumi:"emptyFieldAsNull"`
	// Boolean that enables parsing of octal numbers.
	EnableOctal *bool `pulumi:"enableOctal"`
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding *string `pulumi:"encoding"`
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch *bool `pulumi:"errorOnColumnCountMismatch"`
	// Single character string used as the escape character for field values.
	Escape *string `pulumi:"escape"`
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField *string `pulumi:"escapeUnenclosedField"`
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy *string `pulumi:"fieldOptionallyEnclosedBy"`
	// Specifies the extension for files unloaded to a stage.
	FileExtension *string `pulumi:"fileExtension"`
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType *string `pulumi:"formatType"`
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUtf8Errors *bool `pulumi:"ignoreUtf8Errors"`
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name *string `pulumi:"name"`
	// String used to convert to and from SQL NULL.
	NullIfs []string `pulumi:"nullIfs"`
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace *bool `pulumi:"preserveSpace"`
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter *string `pulumi:"recordDelimiter"`
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The schema in which to create the file format.
	Schema *string `pulumi:"schema"`
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines *bool `pulumi:"skipBlankLines"`
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark *bool `pulumi:"skipByteOrderMark"`
	// Number of lines at the start of the file to skip.
	SkipHeader *int `pulumi:"skipHeader"`
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues *bool `pulumi:"stripNullValues"`
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray *bool `pulumi:"stripOuterArray"`
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement *bool `pulumi:"stripOuterElement"`
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat *string `pulumi:"timeFormat"`
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace *bool `pulumi:"trimSpace"`
}

type FileFormatState struct {
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate pulumi.BoolPtrInput
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText pulumi.BoolPtrInput
	// Defines the encoding format for binary input or output.
	BinaryFormat pulumi.StringPtrInput
	// Specifies a comment for the file format.
	Comment pulumi.StringPtrInput
	// Specifies the current compression algorithm for the data file.
	Compression pulumi.StringPtrInput
	// The database in which to create the file format.
	Database pulumi.StringPtrInput
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat pulumi.StringPtrInput
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert pulumi.BoolPtrInput
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData pulumi.BoolPtrInput
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull pulumi.BoolPtrInput
	// Boolean that enables parsing of octal numbers.
	EnableOctal pulumi.BoolPtrInput
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding pulumi.StringPtrInput
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch pulumi.BoolPtrInput
	// Single character string used as the escape character for field values.
	Escape pulumi.StringPtrInput
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField pulumi.StringPtrInput
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter pulumi.StringPtrInput
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy pulumi.StringPtrInput
	// Specifies the extension for files unloaded to a stage.
	FileExtension pulumi.StringPtrInput
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType pulumi.StringPtrInput
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUtf8Errors pulumi.BoolPtrInput
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name pulumi.StringPtrInput
	// String used to convert to and from SQL NULL.
	NullIfs pulumi.StringArrayInput
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace pulumi.BoolPtrInput
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter pulumi.StringPtrInput
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The schema in which to create the file format.
	Schema pulumi.StringPtrInput
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines pulumi.BoolPtrInput
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark pulumi.BoolPtrInput
	// Number of lines at the start of the file to skip.
	SkipHeader pulumi.IntPtrInput
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues pulumi.BoolPtrInput
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray pulumi.BoolPtrInput
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement pulumi.BoolPtrInput
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat pulumi.StringPtrInput
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat pulumi.StringPtrInput
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace pulumi.BoolPtrInput
}

func (FileFormatState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFormatState)(nil)).Elem()
}

type fileFormatArgs struct {
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate *bool `pulumi:"allowDuplicate"`
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText *bool `pulumi:"binaryAsText"`
	// Defines the encoding format for binary input or output.
	BinaryFormat *string `pulumi:"binaryFormat"`
	// Specifies a comment for the file format.
	Comment *string `pulumi:"comment"`
	// Specifies the current compression algorithm for the data file.
	Compression *string `pulumi:"compression"`
	// The database in which to create the file format.
	Database string `pulumi:"database"`
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat *string `pulumi:"dateFormat"`
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert *bool `pulumi:"disableAutoConvert"`
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData *bool `pulumi:"disableSnowflakeData"`
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull *bool `pulumi:"emptyFieldAsNull"`
	// Boolean that enables parsing of octal numbers.
	EnableOctal *bool `pulumi:"enableOctal"`
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding *string `pulumi:"encoding"`
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch *bool `pulumi:"errorOnColumnCountMismatch"`
	// Single character string used as the escape character for field values.
	Escape *string `pulumi:"escape"`
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField *string `pulumi:"escapeUnenclosedField"`
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy *string `pulumi:"fieldOptionallyEnclosedBy"`
	// Specifies the extension for files unloaded to a stage.
	FileExtension *string `pulumi:"fileExtension"`
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType string `pulumi:"formatType"`
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUtf8Errors *bool `pulumi:"ignoreUtf8Errors"`
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name *string `pulumi:"name"`
	// String used to convert to and from SQL NULL.
	NullIfs []string `pulumi:"nullIfs"`
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace *bool `pulumi:"preserveSpace"`
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter *string `pulumi:"recordDelimiter"`
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The schema in which to create the file format.
	Schema string `pulumi:"schema"`
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines *bool `pulumi:"skipBlankLines"`
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark *bool `pulumi:"skipByteOrderMark"`
	// Number of lines at the start of the file to skip.
	SkipHeader *int `pulumi:"skipHeader"`
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues *bool `pulumi:"stripNullValues"`
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray *bool `pulumi:"stripOuterArray"`
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement *bool `pulumi:"stripOuterElement"`
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat *string `pulumi:"timeFormat"`
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace *bool `pulumi:"trimSpace"`
}

// The set of arguments for constructing a FileFormat resource.
type FileFormatArgs struct {
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate pulumi.BoolPtrInput
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText pulumi.BoolPtrInput
	// Defines the encoding format for binary input or output.
	BinaryFormat pulumi.StringPtrInput
	// Specifies a comment for the file format.
	Comment pulumi.StringPtrInput
	// Specifies the current compression algorithm for the data file.
	Compression pulumi.StringPtrInput
	// The database in which to create the file format.
	Database pulumi.StringInput
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat pulumi.StringPtrInput
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert pulumi.BoolPtrInput
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData pulumi.BoolPtrInput
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull pulumi.BoolPtrInput
	// Boolean that enables parsing of octal numbers.
	EnableOctal pulumi.BoolPtrInput
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding pulumi.StringPtrInput
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch pulumi.BoolPtrInput
	// Single character string used as the escape character for field values.
	Escape pulumi.StringPtrInput
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField pulumi.StringPtrInput
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter pulumi.StringPtrInput
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy pulumi.StringPtrInput
	// Specifies the extension for files unloaded to a stage.
	FileExtension pulumi.StringPtrInput
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType pulumi.StringInput
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUtf8Errors pulumi.BoolPtrInput
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name pulumi.StringPtrInput
	// String used to convert to and from SQL NULL.
	NullIfs pulumi.StringArrayInput
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace pulumi.BoolPtrInput
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter pulumi.StringPtrInput
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The schema in which to create the file format.
	Schema pulumi.StringInput
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines pulumi.BoolPtrInput
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark pulumi.BoolPtrInput
	// Number of lines at the start of the file to skip.
	SkipHeader pulumi.IntPtrInput
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues pulumi.BoolPtrInput
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray pulumi.BoolPtrInput
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement pulumi.BoolPtrInput
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat pulumi.StringPtrInput
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat pulumi.StringPtrInput
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace pulumi.BoolPtrInput
}

func (FileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFormatArgs)(nil)).Elem()
}

type FileFormatInput interface {
	pulumi.Input

	ToFileFormatOutput() FileFormatOutput
	ToFileFormatOutputWithContext(ctx context.Context) FileFormatOutput
}

func (*FileFormat) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFormat)(nil)).Elem()
}

func (i *FileFormat) ToFileFormatOutput() FileFormatOutput {
	return i.ToFileFormatOutputWithContext(context.Background())
}

func (i *FileFormat) ToFileFormatOutputWithContext(ctx context.Context) FileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFormatOutput)
}

func (i *FileFormat) ToOutput(ctx context.Context) pulumix.Output[*FileFormat] {
	return pulumix.Output[*FileFormat]{
		OutputState: i.ToFileFormatOutputWithContext(ctx).OutputState,
	}
}

// FileFormatArrayInput is an input type that accepts FileFormatArray and FileFormatArrayOutput values.
// You can construct a concrete instance of `FileFormatArrayInput` via:
//
//	FileFormatArray{ FileFormatArgs{...} }
type FileFormatArrayInput interface {
	pulumi.Input

	ToFileFormatArrayOutput() FileFormatArrayOutput
	ToFileFormatArrayOutputWithContext(context.Context) FileFormatArrayOutput
}

type FileFormatArray []FileFormatInput

func (FileFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFormat)(nil)).Elem()
}

func (i FileFormatArray) ToFileFormatArrayOutput() FileFormatArrayOutput {
	return i.ToFileFormatArrayOutputWithContext(context.Background())
}

func (i FileFormatArray) ToFileFormatArrayOutputWithContext(ctx context.Context) FileFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFormatArrayOutput)
}

func (i FileFormatArray) ToOutput(ctx context.Context) pulumix.Output[[]*FileFormat] {
	return pulumix.Output[[]*FileFormat]{
		OutputState: i.ToFileFormatArrayOutputWithContext(ctx).OutputState,
	}
}

// FileFormatMapInput is an input type that accepts FileFormatMap and FileFormatMapOutput values.
// You can construct a concrete instance of `FileFormatMapInput` via:
//
//	FileFormatMap{ "key": FileFormatArgs{...} }
type FileFormatMapInput interface {
	pulumi.Input

	ToFileFormatMapOutput() FileFormatMapOutput
	ToFileFormatMapOutputWithContext(context.Context) FileFormatMapOutput
}

type FileFormatMap map[string]FileFormatInput

func (FileFormatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFormat)(nil)).Elem()
}

func (i FileFormatMap) ToFileFormatMapOutput() FileFormatMapOutput {
	return i.ToFileFormatMapOutputWithContext(context.Background())
}

func (i FileFormatMap) ToFileFormatMapOutputWithContext(ctx context.Context) FileFormatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFormatMapOutput)
}

func (i FileFormatMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FileFormat] {
	return pulumix.Output[map[string]*FileFormat]{
		OutputState: i.ToFileFormatMapOutputWithContext(ctx).OutputState,
	}
}

type FileFormatOutput struct{ *pulumi.OutputState }

func (FileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFormat)(nil)).Elem()
}

func (o FileFormatOutput) ToFileFormatOutput() FileFormatOutput {
	return o
}

func (o FileFormatOutput) ToFileFormatOutputWithContext(ctx context.Context) FileFormatOutput {
	return o
}

func (o FileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[*FileFormat] {
	return pulumix.Output[*FileFormat]{
		OutputState: o.OutputState,
	}
}

// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
func (o FileFormatOutput) AllowDuplicate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.AllowDuplicate }).(pulumi.BoolPtrOutput)
}

// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
func (o FileFormatOutput) BinaryAsText() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.BinaryAsText }).(pulumi.BoolPtrOutput)
}

// Defines the encoding format for binary input or output.
func (o FileFormatOutput) BinaryFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.BinaryFormat }).(pulumi.StringOutput)
}

// Specifies a comment for the file format.
func (o FileFormatOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Specifies the current compression algorithm for the data file.
func (o FileFormatOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Compression }).(pulumi.StringOutput)
}

// The database in which to create the file format.
func (o FileFormatOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Defines the format of date values in the data files (data loading) or table (data unloading).
func (o FileFormatOutput) DateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.DateFormat }).(pulumi.StringOutput)
}

// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
func (o FileFormatOutput) DisableAutoConvert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.DisableAutoConvert }).(pulumi.BoolPtrOutput)
}

// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
func (o FileFormatOutput) DisableSnowflakeData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.DisableSnowflakeData }).(pulumi.BoolPtrOutput)
}

// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
func (o FileFormatOutput) EmptyFieldAsNull() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.EmptyFieldAsNull }).(pulumi.BoolPtrOutput)
}

// Boolean that enables parsing of octal numbers.
func (o FileFormatOutput) EnableOctal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.EnableOctal }).(pulumi.BoolPtrOutput)
}

// String (constant) that specifies the character set of the source data when loading data into a table.
func (o FileFormatOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Encoding }).(pulumi.StringOutput)
}

// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
func (o FileFormatOutput) ErrorOnColumnCountMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.ErrorOnColumnCountMismatch }).(pulumi.BoolPtrOutput)
}

// Single character string used as the escape character for field values.
func (o FileFormatOutput) Escape() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Escape }).(pulumi.StringOutput)
}

// Single character string used as the escape character for unenclosed field values only.
func (o FileFormatOutput) EscapeUnenclosedField() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.EscapeUnenclosedField }).(pulumi.StringOutput)
}

// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
func (o FileFormatOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// Character used to enclose strings.
func (o FileFormatOutput) FieldOptionallyEnclosedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.FieldOptionallyEnclosedBy }).(pulumi.StringOutput)
}

// Specifies the extension for files unloaded to a stage.
func (o FileFormatOutput) FileExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringPtrOutput { return v.FileExtension }).(pulumi.StringPtrOutput)
}

// Specifies the format of the input files (for data loading) or output files (for data unloading).
func (o FileFormatOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.FormatType }).(pulumi.StringOutput)
}

// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
func (o FileFormatOutput) IgnoreUtf8Errors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.IgnoreUtf8Errors }).(pulumi.BoolPtrOutput)
}

// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
func (o FileFormatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// String used to convert to and from SQL NULL.
func (o FileFormatOutput) NullIfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringArrayOutput { return v.NullIfs }).(pulumi.StringArrayOutput)
}

// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
func (o FileFormatOutput) PreserveSpace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.PreserveSpace }).(pulumi.BoolPtrOutput)
}

// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
func (o FileFormatOutput) RecordDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.RecordDelimiter }).(pulumi.StringOutput)
}

// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½).
func (o FileFormatOutput) ReplaceInvalidCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.ReplaceInvalidCharacters }).(pulumi.BoolPtrOutput)
}

// The schema in which to create the file format.
func (o FileFormatOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Boolean that specifies to skip any blank lines encountered in the data files.
func (o FileFormatOutput) SkipBlankLines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.SkipBlankLines }).(pulumi.BoolPtrOutput)
}

// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
func (o FileFormatOutput) SkipByteOrderMark() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.SkipByteOrderMark }).(pulumi.BoolPtrOutput)
}

// Number of lines at the start of the file to skip.
func (o FileFormatOutput) SkipHeader() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.IntPtrOutput { return v.SkipHeader }).(pulumi.IntPtrOutput)
}

// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
func (o FileFormatOutput) StripNullValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.StripNullValues }).(pulumi.BoolPtrOutput)
}

// Boolean that instructs the JSON parser to remove outer brackets.
func (o FileFormatOutput) StripOuterArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.StripOuterArray }).(pulumi.BoolPtrOutput)
}

// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
func (o FileFormatOutput) StripOuterElement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.StripOuterElement }).(pulumi.BoolPtrOutput)
}

// Defines the format of time values in the data files (data loading) or table (data unloading).
func (o FileFormatOutput) TimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.TimeFormat }).(pulumi.StringOutput)
}

// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
func (o FileFormatOutput) TimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.StringOutput { return v.TimestampFormat }).(pulumi.StringOutput)
}

// Boolean that specifies whether to remove white space from fields.
func (o FileFormatOutput) TrimSpace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileFormat) pulumi.BoolPtrOutput { return v.TrimSpace }).(pulumi.BoolPtrOutput)
}

type FileFormatArrayOutput struct{ *pulumi.OutputState }

func (FileFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFormat)(nil)).Elem()
}

func (o FileFormatArrayOutput) ToFileFormatArrayOutput() FileFormatArrayOutput {
	return o
}

func (o FileFormatArrayOutput) ToFileFormatArrayOutputWithContext(ctx context.Context) FileFormatArrayOutput {
	return o
}

func (o FileFormatArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FileFormat] {
	return pulumix.Output[[]*FileFormat]{
		OutputState: o.OutputState,
	}
}

func (o FileFormatArrayOutput) Index(i pulumi.IntInput) FileFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileFormat {
		return vs[0].([]*FileFormat)[vs[1].(int)]
	}).(FileFormatOutput)
}

type FileFormatMapOutput struct{ *pulumi.OutputState }

func (FileFormatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFormat)(nil)).Elem()
}

func (o FileFormatMapOutput) ToFileFormatMapOutput() FileFormatMapOutput {
	return o
}

func (o FileFormatMapOutput) ToFileFormatMapOutputWithContext(ctx context.Context) FileFormatMapOutput {
	return o
}

func (o FileFormatMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FileFormat] {
	return pulumix.Output[map[string]*FileFormat]{
		OutputState: o.OutputState,
	}
}

func (o FileFormatMapOutput) MapIndex(k pulumi.StringInput) FileFormatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileFormat {
		return vs[0].(map[string]*FileFormat)[vs[1].(string)]
	}).(FileFormatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileFormatInput)(nil)).Elem(), &FileFormat{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFormatArrayInput)(nil)).Elem(), FileFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFormatMapInput)(nil)).Elem(), FileFormatMap{})
	pulumi.RegisterOutputType(FileFormatOutput{})
	pulumi.RegisterOutputType(FileFormatArrayOutput{})
	pulumi.RegisterOutputType(FileFormatMapOutput{})
}
