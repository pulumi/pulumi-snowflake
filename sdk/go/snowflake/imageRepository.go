// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/imageRepository:ImageRepository example '"<database_name>"."<schema_name>"."<image_repository_name>"'
// ```
type ImageRepository struct {
	pulumi.CustomResourceState

	// Specifies a comment for the object.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.
	ShowOutputs ImageRepositoryShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewImageRepository registers a new resource with the given unique name, arguments, and options.
func NewImageRepository(ctx *pulumi.Context,
	name string, args *ImageRepositoryArgs, opts ...pulumi.ResourceOption) (*ImageRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageRepository
	err := ctx.RegisterResource("snowflake:index/imageRepository:ImageRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRepository gets an existing ImageRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRepositoryState, opts ...pulumi.ResourceOption) (*ImageRepository, error) {
	var resource ImageRepository
	err := ctx.ReadResource("snowflake:index/imageRepository:ImageRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRepository resources.
type imageRepositoryState struct {
	// Specifies a comment for the object.
	Comment *string `pulumi:"comment"`
	// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.
	ShowOutputs []ImageRepositoryShowOutput `pulumi:"showOutputs"`
}

type ImageRepositoryState struct {
	// Specifies a comment for the object.
	Comment pulumi.StringPtrInput
	// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.
	ShowOutputs ImageRepositoryShowOutputArrayInput
}

func (ImageRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryState)(nil)).Elem()
}

type imageRepositoryArgs struct {
	// Specifies a comment for the object.
	Comment *string `pulumi:"comment"`
	// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a ImageRepository resource.
type ImageRepositoryArgs struct {
	// Specifies a comment for the object.
	Comment pulumi.StringPtrInput
	// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
}

func (ImageRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryArgs)(nil)).Elem()
}

type ImageRepositoryInput interface {
	pulumi.Input

	ToImageRepositoryOutput() ImageRepositoryOutput
	ToImageRepositoryOutputWithContext(ctx context.Context) ImageRepositoryOutput
}

func (*ImageRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepository)(nil)).Elem()
}

func (i *ImageRepository) ToImageRepositoryOutput() ImageRepositoryOutput {
	return i.ToImageRepositoryOutputWithContext(context.Background())
}

func (i *ImageRepository) ToImageRepositoryOutputWithContext(ctx context.Context) ImageRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryOutput)
}

// ImageRepositoryArrayInput is an input type that accepts ImageRepositoryArray and ImageRepositoryArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryArrayInput` via:
//
//	ImageRepositoryArray{ ImageRepositoryArgs{...} }
type ImageRepositoryArrayInput interface {
	pulumi.Input

	ToImageRepositoryArrayOutput() ImageRepositoryArrayOutput
	ToImageRepositoryArrayOutputWithContext(context.Context) ImageRepositoryArrayOutput
}

type ImageRepositoryArray []ImageRepositoryInput

func (ImageRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepository)(nil)).Elem()
}

func (i ImageRepositoryArray) ToImageRepositoryArrayOutput() ImageRepositoryArrayOutput {
	return i.ToImageRepositoryArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryArray) ToImageRepositoryArrayOutputWithContext(ctx context.Context) ImageRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryArrayOutput)
}

// ImageRepositoryMapInput is an input type that accepts ImageRepositoryMap and ImageRepositoryMapOutput values.
// You can construct a concrete instance of `ImageRepositoryMapInput` via:
//
//	ImageRepositoryMap{ "key": ImageRepositoryArgs{...} }
type ImageRepositoryMapInput interface {
	pulumi.Input

	ToImageRepositoryMapOutput() ImageRepositoryMapOutput
	ToImageRepositoryMapOutputWithContext(context.Context) ImageRepositoryMapOutput
}

type ImageRepositoryMap map[string]ImageRepositoryInput

func (ImageRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepository)(nil)).Elem()
}

func (i ImageRepositoryMap) ToImageRepositoryMapOutput() ImageRepositoryMapOutput {
	return i.ToImageRepositoryMapOutputWithContext(context.Background())
}

func (i ImageRepositoryMap) ToImageRepositoryMapOutputWithContext(ctx context.Context) ImageRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryMapOutput)
}

type ImageRepositoryOutput struct{ *pulumi.OutputState }

func (ImageRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepository)(nil)).Elem()
}

func (o ImageRepositoryOutput) ToImageRepositoryOutput() ImageRepositoryOutput {
	return o
}

func (o ImageRepositoryOutput) ToImageRepositoryOutputWithContext(ctx context.Context) ImageRepositoryOutput {
	return o
}

// Specifies a comment for the object.
func (o ImageRepositoryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepository) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ImageRepositoryOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepository) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ImageRepositoryOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepository) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the identifier for the image repository; must be unique for the schema in which the image repository is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ImageRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the image repository. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ImageRepositoryOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepository) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW IMAGE REPOSITORIES` for the given image repository.
func (o ImageRepositoryOutput) ShowOutputs() ImageRepositoryShowOutputArrayOutput {
	return o.ApplyT(func(v *ImageRepository) ImageRepositoryShowOutputArrayOutput { return v.ShowOutputs }).(ImageRepositoryShowOutputArrayOutput)
}

type ImageRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepository)(nil)).Elem()
}

func (o ImageRepositoryArrayOutput) ToImageRepositoryArrayOutput() ImageRepositoryArrayOutput {
	return o
}

func (o ImageRepositoryArrayOutput) ToImageRepositoryArrayOutputWithContext(ctx context.Context) ImageRepositoryArrayOutput {
	return o
}

func (o ImageRepositoryArrayOutput) Index(i pulumi.IntInput) ImageRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRepository {
		return vs[0].([]*ImageRepository)[vs[1].(int)]
	}).(ImageRepositoryOutput)
}

type ImageRepositoryMapOutput struct{ *pulumi.OutputState }

func (ImageRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepository)(nil)).Elem()
}

func (o ImageRepositoryMapOutput) ToImageRepositoryMapOutput() ImageRepositoryMapOutput {
	return o
}

func (o ImageRepositoryMapOutput) ToImageRepositoryMapOutputWithContext(ctx context.Context) ImageRepositoryMapOutput {
	return o
}

func (o ImageRepositoryMapOutput) MapIndex(k pulumi.StringInput) ImageRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRepository {
		return vs[0].(map[string]*ImageRepository)[vs[1].(string)]
	}).(ImageRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryInput)(nil)).Elem(), &ImageRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryArrayInput)(nil)).Elem(), ImageRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryMapInput)(nil)).Elem(), ImageRepositoryMap{})
	pulumi.RegisterOutputType(ImageRepositoryOutput{})
	pulumi.RegisterOutputType(ImageRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryMapOutput{})
}
