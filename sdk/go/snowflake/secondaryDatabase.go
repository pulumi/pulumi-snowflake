// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
//
// > **Note** The SecondaryDatabase resource doesn't refresh itself, as the best practice is to use tasks scheduled for a certain interval. Check out the examples to see how to set up the refresh task. For SQL-based replication guide, see the [official documentation](https://docs.snowflake.com/en/user-guide/db-replication-config#replicating-a-database-to-another-account).
//
// A secondary database creates a replica of an existing primary database (i.e. a secondary database). For more information about database replication, see [Introduction to database replication across multiple accounts](https://docs.snowflake.com/en/user-guide/db-replication-intro).
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/secondaryDatabase:SecondaryDatabase example 'secondary_database_name'
// ```
type SecondaryDatabase struct {
	pulumi.CustomResourceState

	// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
	AsReplicaOf pulumi.StringOutput `pulumi:"asReplicaOf"`
	// The database parameter that specifies the default catalog to use for Iceberg tables.
	Catalog pulumi.StringOutput `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntOutput `pulumi:"dataRetentionTimeInDays"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringOutput `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables.
	ExternalVolume pulumi.StringOutput `pulumi:"externalVolume"`
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrOutput `pulumi:"isTransient"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
	MaxDataExtensionTimeInDays pulumi.IntOutput `pulumi:"maxDataExtensionTimeInDays"`
	// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
	Name pulumi.StringOutput `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored.
	QuotedIdentifiersIgnoreCase pulumi.BoolOutput `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
	ReplaceInvalidCharacters pulumi.BoolOutput `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
	StorageSerializationPolicy pulumi.StringOutput `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	SuspendTaskAfterNumFailures pulumi.IntOutput `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task.
	TaskAutoRetryAttempts pulumi.IntOutput `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	UserTaskManagedInitialWarehouseSize pulumi.StringOutput `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntOutput `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds.
	UserTaskTimeoutMs pulumi.IntOutput `pulumi:"userTaskTimeoutMs"`
}

// NewSecondaryDatabase registers a new resource with the given unique name, arguments, and options.
func NewSecondaryDatabase(ctx *pulumi.Context,
	name string, args *SecondaryDatabaseArgs, opts ...pulumi.ResourceOption) (*SecondaryDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AsReplicaOf == nil {
		return nil, errors.New("invalid value for required argument 'AsReplicaOf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecondaryDatabase
	err := ctx.RegisterResource("snowflake:index/secondaryDatabase:SecondaryDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecondaryDatabase gets an existing SecondaryDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecondaryDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecondaryDatabaseState, opts ...pulumi.ResourceOption) (*SecondaryDatabase, error) {
	var resource SecondaryDatabase
	err := ctx.ReadResource("snowflake:index/secondaryDatabase:SecondaryDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecondaryDatabase resources.
type secondaryDatabaseState struct {
	// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
	AsReplicaOf *string `pulumi:"asReplicaOf"`
	// The database parameter that specifies the default catalog to use for Iceberg tables.
	Catalog *string `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays *int `pulumi:"dataRetentionTimeInDays"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation *string `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables.
	ExternalVolume *string `pulumi:"externalVolume"`
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `pulumi:"isTransient"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
	MaxDataExtensionTimeInDays *int `pulumi:"maxDataExtensionTimeInDays"`
	// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
	Name *string `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored.
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
	StorageSerializationPolicy *string `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task.
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds.
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
}

type SecondaryDatabaseState struct {
	// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
	AsReplicaOf pulumi.StringPtrInput
	// The database parameter that specifies the default catalog to use for Iceberg tables.
	Catalog pulumi.StringPtrInput
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntPtrInput
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringPtrInput
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolPtrInput
	// The database parameter that specifies the default external volume to use for Iceberg tables.
	ExternalVolume pulumi.StringPtrInput
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringPtrInput
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
	MaxDataExtensionTimeInDays pulumi.IntPtrInput
	// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
	Name pulumi.StringPtrInput
	// If true, the case of quoted identifiers is ignored.
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
	StorageSerializationPolicy pulumi.StringPtrInput
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Maximum automatic retries allowed for a user task.
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringPtrInput
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// User task execution timeout in milliseconds.
	UserTaskTimeoutMs pulumi.IntPtrInput
}

func (SecondaryDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*secondaryDatabaseState)(nil)).Elem()
}

type secondaryDatabaseArgs struct {
	// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
	AsReplicaOf string `pulumi:"asReplicaOf"`
	// The database parameter that specifies the default catalog to use for Iceberg tables.
	Catalog *string `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays *int `pulumi:"dataRetentionTimeInDays"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation *string `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables.
	ExternalVolume *string `pulumi:"externalVolume"`
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient *bool `pulumi:"isTransient"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
	MaxDataExtensionTimeInDays *int `pulumi:"maxDataExtensionTimeInDays"`
	// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
	Name *string `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored.
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
	StorageSerializationPolicy *string `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task.
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds.
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
}

// The set of arguments for constructing a SecondaryDatabase resource.
type SecondaryDatabaseArgs struct {
	// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
	AsReplicaOf pulumi.StringInput
	// The database parameter that specifies the default catalog to use for Iceberg tables.
	Catalog pulumi.StringPtrInput
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
	DataRetentionTimeInDays pulumi.IntPtrInput
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringPtrInput
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolPtrInput
	// The database parameter that specifies the default external volume to use for Iceberg tables.
	ExternalVolume pulumi.StringPtrInput
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
	IsTransient pulumi.BoolPtrInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringPtrInput
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
	MaxDataExtensionTimeInDays pulumi.IntPtrInput
	// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
	Name pulumi.StringPtrInput
	// If true, the case of quoted identifiers is ignored.
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
	StorageSerializationPolicy pulumi.StringPtrInput
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Maximum automatic retries allowed for a user task.
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringPtrInput
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// User task execution timeout in milliseconds.
	UserTaskTimeoutMs pulumi.IntPtrInput
}

func (SecondaryDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secondaryDatabaseArgs)(nil)).Elem()
}

type SecondaryDatabaseInput interface {
	pulumi.Input

	ToSecondaryDatabaseOutput() SecondaryDatabaseOutput
	ToSecondaryDatabaseOutputWithContext(ctx context.Context) SecondaryDatabaseOutput
}

func (*SecondaryDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SecondaryDatabase)(nil)).Elem()
}

func (i *SecondaryDatabase) ToSecondaryDatabaseOutput() SecondaryDatabaseOutput {
	return i.ToSecondaryDatabaseOutputWithContext(context.Background())
}

func (i *SecondaryDatabase) ToSecondaryDatabaseOutputWithContext(ctx context.Context) SecondaryDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryDatabaseOutput)
}

// SecondaryDatabaseArrayInput is an input type that accepts SecondaryDatabaseArray and SecondaryDatabaseArrayOutput values.
// You can construct a concrete instance of `SecondaryDatabaseArrayInput` via:
//
//	SecondaryDatabaseArray{ SecondaryDatabaseArgs{...} }
type SecondaryDatabaseArrayInput interface {
	pulumi.Input

	ToSecondaryDatabaseArrayOutput() SecondaryDatabaseArrayOutput
	ToSecondaryDatabaseArrayOutputWithContext(context.Context) SecondaryDatabaseArrayOutput
}

type SecondaryDatabaseArray []SecondaryDatabaseInput

func (SecondaryDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecondaryDatabase)(nil)).Elem()
}

func (i SecondaryDatabaseArray) ToSecondaryDatabaseArrayOutput() SecondaryDatabaseArrayOutput {
	return i.ToSecondaryDatabaseArrayOutputWithContext(context.Background())
}

func (i SecondaryDatabaseArray) ToSecondaryDatabaseArrayOutputWithContext(ctx context.Context) SecondaryDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryDatabaseArrayOutput)
}

// SecondaryDatabaseMapInput is an input type that accepts SecondaryDatabaseMap and SecondaryDatabaseMapOutput values.
// You can construct a concrete instance of `SecondaryDatabaseMapInput` via:
//
//	SecondaryDatabaseMap{ "key": SecondaryDatabaseArgs{...} }
type SecondaryDatabaseMapInput interface {
	pulumi.Input

	ToSecondaryDatabaseMapOutput() SecondaryDatabaseMapOutput
	ToSecondaryDatabaseMapOutputWithContext(context.Context) SecondaryDatabaseMapOutput
}

type SecondaryDatabaseMap map[string]SecondaryDatabaseInput

func (SecondaryDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecondaryDatabase)(nil)).Elem()
}

func (i SecondaryDatabaseMap) ToSecondaryDatabaseMapOutput() SecondaryDatabaseMapOutput {
	return i.ToSecondaryDatabaseMapOutputWithContext(context.Background())
}

func (i SecondaryDatabaseMap) ToSecondaryDatabaseMapOutputWithContext(ctx context.Context) SecondaryDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryDatabaseMapOutput)
}

type SecondaryDatabaseOutput struct{ *pulumi.OutputState }

func (SecondaryDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecondaryDatabase)(nil)).Elem()
}

func (o SecondaryDatabaseOutput) ToSecondaryDatabaseOutput() SecondaryDatabaseOutput {
	return o
}

func (o SecondaryDatabaseOutput) ToSecondaryDatabaseOutputWithContext(ctx context.Context) SecondaryDatabaseOutput {
	return o
}

// A fully qualified path to a database to create a replica from. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<database_name>"`.
func (o SecondaryDatabaseOutput) AsReplicaOf() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.AsReplicaOf }).(pulumi.StringOutput)
}

// The database parameter that specifies the default catalog to use for Iceberg tables.
func (o SecondaryDatabaseOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.Catalog }).(pulumi.StringOutput)
}

// Specifies a comment for the database.
func (o SecondaryDatabaseOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, as well as specifying the default Time Travel retention time for all schemas created in the database. For more details, see [Understanding & Using Time Travel](https://docs.snowflake.com/en/user-guide/data-time-travel).
func (o SecondaryDatabaseOutput) DataRetentionTimeInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.DataRetentionTimeInDays }).(pulumi.IntOutput)
}

// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
func (o SecondaryDatabaseOutput) DefaultDdlCollation() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.DefaultDdlCollation }).(pulumi.StringOutput)
}

// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
func (o SecondaryDatabaseOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// The database parameter that specifies the default external volume to use for Iceberg tables.
func (o SecondaryDatabaseOutput) ExternalVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.ExternalVolume }).(pulumi.StringOutput)
}

// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.
func (o SecondaryDatabaseOutput) IsTransient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.BoolPtrOutput { return v.IsTransient }).(pulumi.BoolPtrOutput)
}

// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
func (o SecondaryDatabaseOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for tables in the database to prevent streams on the tables from becoming stale. For a detailed description of this parameter, see [MAX*DATA*EXTENSION*TIME*IN_DAYS](https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days).
func (o SecondaryDatabaseOutput) MaxDataExtensionTimeInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.MaxDataExtensionTimeInDays }).(pulumi.IntOutput)
}

// Specifies the identifier for the database; must be unique for your account. As a best practice for [Database Replication and Failover](https://docs.snowflake.com/en/user-guide/db-replication-intro), it is recommended to give each secondary database the same name as its primary database. This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the same database, such as querying a fully-qualified table name in a view. If a secondary database has a different name from the primary database, then these object references would break in the secondary database.
func (o SecondaryDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If true, the case of quoted identifiers is ignored.
func (o SecondaryDatabaseOutput) QuotedIdentifiersIgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.BoolOutput { return v.QuotedIdentifiersIgnoreCase }).(pulumi.BoolOutput)
}

// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog.
func (o SecondaryDatabaseOutput) ReplaceInvalidCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.BoolOutput { return v.ReplaceInvalidCharacters }).(pulumi.BoolOutput)
}

// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake.
func (o SecondaryDatabaseOutput) StorageSerializationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.StorageSerializationPolicy }).(pulumi.StringOutput)
}

// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
func (o SecondaryDatabaseOutput) SuspendTaskAfterNumFailures() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.SuspendTaskAfterNumFailures }).(pulumi.IntOutput)
}

// Maximum automatic retries allowed for a user task.
func (o SecondaryDatabaseOutput) TaskAutoRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.TaskAutoRetryAttempts }).(pulumi.IntOutput)
}

// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
func (o SecondaryDatabaseOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

// The initial size of warehouse to use for managed warehouses in the absence of history.
func (o SecondaryDatabaseOutput) UserTaskManagedInitialWarehouseSize() pulumi.StringOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.StringOutput { return v.UserTaskManagedInitialWarehouseSize }).(pulumi.StringOutput)
}

// Minimum amount of time between Triggered Task executions in seconds.
func (o SecondaryDatabaseOutput) UserTaskMinimumTriggerIntervalInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.UserTaskMinimumTriggerIntervalInSeconds }).(pulumi.IntOutput)
}

// User task execution timeout in milliseconds.
func (o SecondaryDatabaseOutput) UserTaskTimeoutMs() pulumi.IntOutput {
	return o.ApplyT(func(v *SecondaryDatabase) pulumi.IntOutput { return v.UserTaskTimeoutMs }).(pulumi.IntOutput)
}

type SecondaryDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SecondaryDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecondaryDatabase)(nil)).Elem()
}

func (o SecondaryDatabaseArrayOutput) ToSecondaryDatabaseArrayOutput() SecondaryDatabaseArrayOutput {
	return o
}

func (o SecondaryDatabaseArrayOutput) ToSecondaryDatabaseArrayOutputWithContext(ctx context.Context) SecondaryDatabaseArrayOutput {
	return o
}

func (o SecondaryDatabaseArrayOutput) Index(i pulumi.IntInput) SecondaryDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecondaryDatabase {
		return vs[0].([]*SecondaryDatabase)[vs[1].(int)]
	}).(SecondaryDatabaseOutput)
}

type SecondaryDatabaseMapOutput struct{ *pulumi.OutputState }

func (SecondaryDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecondaryDatabase)(nil)).Elem()
}

func (o SecondaryDatabaseMapOutput) ToSecondaryDatabaseMapOutput() SecondaryDatabaseMapOutput {
	return o
}

func (o SecondaryDatabaseMapOutput) ToSecondaryDatabaseMapOutputWithContext(ctx context.Context) SecondaryDatabaseMapOutput {
	return o
}

func (o SecondaryDatabaseMapOutput) MapIndex(k pulumi.StringInput) SecondaryDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecondaryDatabase {
		return vs[0].(map[string]*SecondaryDatabase)[vs[1].(string)]
	}).(SecondaryDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecondaryDatabaseInput)(nil)).Elem(), &SecondaryDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecondaryDatabaseArrayInput)(nil)).Elem(), SecondaryDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecondaryDatabaseMapInput)(nil)).Elem(), SecondaryDatabaseMap{})
	pulumi.RegisterOutputType(SecondaryDatabaseOutput{})
	pulumi.RegisterOutputType(SecondaryDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SecondaryDatabaseMapOutput{})
}
