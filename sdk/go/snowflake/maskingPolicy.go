// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := snowflake.NewMaskingPolicy(ctx, "exampleMaskingPolicy", &snowflake.MaskingPolicyArgs{
// 			Database:          pulumi.String("EXAMPLE_DB"),
// 			MaskingExpression: pulumi.String("case when current_role() in ('ANALYST') then val else sha2(val, 512) end"),
// 			ReturnDataType:    pulumi.String("string"),
// 			Schema:            pulumi.String("EXAMPLE_SCHEMA"),
// 			ValueDataType:     pulumi.String("string"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// # format is database name | schema name | policy name
//
// ```sh
//  $ pulumi import snowflake:index/maskingPolicy:MaskingPolicy example 'dbName|schemaName|policyName'
// ```
type MaskingPolicy struct {
	pulumi.CustomResourceState

	// Specifies a comment for the masking policy.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the masking policy.
	Database pulumi.StringOutput `pulumi:"database"`
	// Specifies the SQL expression that transforms the data.
	MaskingExpression pulumi.StringOutput `pulumi:"maskingExpression"`
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the data type to return.
	ReturnDataType pulumi.StringOutput `pulumi:"returnDataType"`
	// The schema in which to create the masking policy.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies the data type to mask.
	ValueDataType pulumi.StringOutput `pulumi:"valueDataType"`
}

// NewMaskingPolicy registers a new resource with the given unique name, arguments, and options.
func NewMaskingPolicy(ctx *pulumi.Context,
	name string, args *MaskingPolicyArgs, opts ...pulumi.ResourceOption) (*MaskingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.MaskingExpression == nil {
		return nil, errors.New("invalid value for required argument 'MaskingExpression'")
	}
	if args.ReturnDataType == nil {
		return nil, errors.New("invalid value for required argument 'ReturnDataType'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.ValueDataType == nil {
		return nil, errors.New("invalid value for required argument 'ValueDataType'")
	}
	var resource MaskingPolicy
	err := ctx.RegisterResource("snowflake:index/maskingPolicy:MaskingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaskingPolicy gets an existing MaskingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaskingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaskingPolicyState, opts ...pulumi.ResourceOption) (*MaskingPolicy, error) {
	var resource MaskingPolicy
	err := ctx.ReadResource("snowflake:index/maskingPolicy:MaskingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaskingPolicy resources.
type maskingPolicyState struct {
	// Specifies a comment for the masking policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the masking policy.
	Database *string `pulumi:"database"`
	// Specifies the SQL expression that transforms the data.
	MaskingExpression *string `pulumi:"maskingExpression"`
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name *string `pulumi:"name"`
	// Specifies the data type to return.
	ReturnDataType *string `pulumi:"returnDataType"`
	// The schema in which to create the masking policy.
	Schema *string `pulumi:"schema"`
	// Specifies the data type to mask.
	ValueDataType *string `pulumi:"valueDataType"`
}

type MaskingPolicyState struct {
	// Specifies a comment for the masking policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the masking policy.
	Database pulumi.StringPtrInput
	// Specifies the SQL expression that transforms the data.
	MaskingExpression pulumi.StringPtrInput
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name pulumi.StringPtrInput
	// Specifies the data type to return.
	ReturnDataType pulumi.StringPtrInput
	// The schema in which to create the masking policy.
	Schema pulumi.StringPtrInput
	// Specifies the data type to mask.
	ValueDataType pulumi.StringPtrInput
}

func (MaskingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingPolicyState)(nil)).Elem()
}

type maskingPolicyArgs struct {
	// Specifies a comment for the masking policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the masking policy.
	Database string `pulumi:"database"`
	// Specifies the SQL expression that transforms the data.
	MaskingExpression string `pulumi:"maskingExpression"`
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name *string `pulumi:"name"`
	// Specifies the data type to return.
	ReturnDataType string `pulumi:"returnDataType"`
	// The schema in which to create the masking policy.
	Schema string `pulumi:"schema"`
	// Specifies the data type to mask.
	ValueDataType string `pulumi:"valueDataType"`
}

// The set of arguments for constructing a MaskingPolicy resource.
type MaskingPolicyArgs struct {
	// Specifies a comment for the masking policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the masking policy.
	Database pulumi.StringInput
	// Specifies the SQL expression that transforms the data.
	MaskingExpression pulumi.StringInput
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.
	Name pulumi.StringPtrInput
	// Specifies the data type to return.
	ReturnDataType pulumi.StringInput
	// The schema in which to create the masking policy.
	Schema pulumi.StringInput
	// Specifies the data type to mask.
	ValueDataType pulumi.StringInput
}

func (MaskingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingPolicyArgs)(nil)).Elem()
}

type MaskingPolicyInput interface {
	pulumi.Input

	ToMaskingPolicyOutput() MaskingPolicyOutput
	ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput
}

func (*MaskingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicy)(nil)).Elem()
}

func (i *MaskingPolicy) ToMaskingPolicyOutput() MaskingPolicyOutput {
	return i.ToMaskingPolicyOutputWithContext(context.Background())
}

func (i *MaskingPolicy) ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyOutput)
}

// MaskingPolicyArrayInput is an input type that accepts MaskingPolicyArray and MaskingPolicyArrayOutput values.
// You can construct a concrete instance of `MaskingPolicyArrayInput` via:
//
//          MaskingPolicyArray{ MaskingPolicyArgs{...} }
type MaskingPolicyArrayInput interface {
	pulumi.Input

	ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput
	ToMaskingPolicyArrayOutputWithContext(context.Context) MaskingPolicyArrayOutput
}

type MaskingPolicyArray []MaskingPolicyInput

func (MaskingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingPolicy)(nil)).Elem()
}

func (i MaskingPolicyArray) ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput {
	return i.ToMaskingPolicyArrayOutputWithContext(context.Background())
}

func (i MaskingPolicyArray) ToMaskingPolicyArrayOutputWithContext(ctx context.Context) MaskingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyArrayOutput)
}

// MaskingPolicyMapInput is an input type that accepts MaskingPolicyMap and MaskingPolicyMapOutput values.
// You can construct a concrete instance of `MaskingPolicyMapInput` via:
//
//          MaskingPolicyMap{ "key": MaskingPolicyArgs{...} }
type MaskingPolicyMapInput interface {
	pulumi.Input

	ToMaskingPolicyMapOutput() MaskingPolicyMapOutput
	ToMaskingPolicyMapOutputWithContext(context.Context) MaskingPolicyMapOutput
}

type MaskingPolicyMap map[string]MaskingPolicyInput

func (MaskingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingPolicy)(nil)).Elem()
}

func (i MaskingPolicyMap) ToMaskingPolicyMapOutput() MaskingPolicyMapOutput {
	return i.ToMaskingPolicyMapOutputWithContext(context.Background())
}

func (i MaskingPolicyMap) ToMaskingPolicyMapOutputWithContext(ctx context.Context) MaskingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyMapOutput)
}

type MaskingPolicyOutput struct{ *pulumi.OutputState }

func (MaskingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyOutput) ToMaskingPolicyOutput() MaskingPolicyOutput {
	return o
}

func (o MaskingPolicyOutput) ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput {
	return o
}

type MaskingPolicyArrayOutput struct{ *pulumi.OutputState }

func (MaskingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyArrayOutput) ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput {
	return o
}

func (o MaskingPolicyArrayOutput) ToMaskingPolicyArrayOutputWithContext(ctx context.Context) MaskingPolicyArrayOutput {
	return o
}

func (o MaskingPolicyArrayOutput) Index(i pulumi.IntInput) MaskingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaskingPolicy {
		return vs[0].([]*MaskingPolicy)[vs[1].(int)]
	}).(MaskingPolicyOutput)
}

type MaskingPolicyMapOutput struct{ *pulumi.OutputState }

func (MaskingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyMapOutput) ToMaskingPolicyMapOutput() MaskingPolicyMapOutput {
	return o
}

func (o MaskingPolicyMapOutput) ToMaskingPolicyMapOutputWithContext(ctx context.Context) MaskingPolicyMapOutput {
	return o
}

func (o MaskingPolicyMapOutput) MapIndex(k pulumi.StringInput) MaskingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaskingPolicy {
		return vs[0].(map[string]*MaskingPolicy)[vs[1].(string)]
	}).(MaskingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyInput)(nil)).Elem(), &MaskingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyArrayInput)(nil)).Elem(), MaskingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyMapInput)(nil)).Elem(), MaskingPolicyMap{})
	pulumi.RegisterOutputType(MaskingPolicyOutput{})
	pulumi.RegisterOutputType(MaskingPolicyArrayOutput{})
	pulumi.RegisterOutputType(MaskingPolicyMapOutput{})
}
