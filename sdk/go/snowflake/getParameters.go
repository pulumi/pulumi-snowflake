// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			database, err := snowflake.NewDatabase(ctx, "database", nil)
//			if err != nil {
//				return err
//			}
//			_ = snowflake.GetParametersOutput(ctx, snowflake.GetParametersOutputArgs{
//				ParameterType: pulumi.String("OBJECT"),
//				ObjectType:    pulumi.String("DATABASE"),
//				ObjectName:    database.Name,
//			}, nil)
//			_, err = snowflake.GetParameters(ctx, &snowflake.GetParametersArgs{
//				ParameterType: pulumi.StringRef("ACCOUNT"),
//				Pattern:       pulumi.StringRef("%TIMESTAMP%"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = snowflake.GetParameters(ctx, &snowflake.GetParametersArgs{
//				ParameterType: pulumi.StringRef("SESSION"),
//				Pattern:       pulumi.StringRef("ROWS_PER_RESULTSET"),
//				User:          pulumi.StringRef("TEST_USER"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetParameters(ctx *pulumi.Context, args *GetParametersArgs, opts ...pulumi.InvokeOption) (*GetParametersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetParametersResult
	err := ctx.Invoke("snowflake:index/getParameters:getParameters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getParameters.
type GetParametersArgs struct {
	// If parameter*type is set to "OBJECT" then object*name is the name of the object to display object parameters for.
	ObjectName *string `pulumi:"objectName"`
	// If parameter*type is set to "OBJECT" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
	ObjectType *string `pulumi:"objectType"`
	// The type of parameter to filter by. Valid values are: "ACCOUNT", "SESSION", "OBJECT".
	ParameterType *string `pulumi:"parameterType"`
	// Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
	Pattern *string `pulumi:"pattern"`
	// If parameterType is set to "SESSION" then user is the name of the user to display session parameters for.
	User *string `pulumi:"user"`
}

// A collection of values returned by getParameters.
type GetParametersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// If parameter*type is set to "OBJECT" then object*name is the name of the object to display object parameters for.
	ObjectName *string `pulumi:"objectName"`
	// If parameter*type is set to "OBJECT" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
	ObjectType *string `pulumi:"objectType"`
	// The type of parameter to filter by. Valid values are: "ACCOUNT", "SESSION", "OBJECT".
	ParameterType *string `pulumi:"parameterType"`
	// The pipes in the schema
	Parameters []GetParametersParameter `pulumi:"parameters"`
	// Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
	Pattern *string `pulumi:"pattern"`
	// If parameterType is set to "SESSION" then user is the name of the user to display session parameters for.
	User *string `pulumi:"user"`
}

func GetParametersOutput(ctx *pulumi.Context, args GetParametersOutputArgs, opts ...pulumi.InvokeOption) GetParametersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetParametersResult, error) {
			args := v.(GetParametersArgs)
			r, err := GetParameters(ctx, &args, opts...)
			var s GetParametersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetParametersResultOutput)
}

// A collection of arguments for invoking getParameters.
type GetParametersOutputArgs struct {
	// If parameter*type is set to "OBJECT" then object*name is the name of the object to display object parameters for.
	ObjectName pulumi.StringPtrInput `pulumi:"objectName"`
	// If parameter*type is set to "OBJECT" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
	ObjectType pulumi.StringPtrInput `pulumi:"objectType"`
	// The type of parameter to filter by. Valid values are: "ACCOUNT", "SESSION", "OBJECT".
	ParameterType pulumi.StringPtrInput `pulumi:"parameterType"`
	// Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// If parameterType is set to "SESSION" then user is the name of the user to display session parameters for.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (GetParametersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParametersArgs)(nil)).Elem()
}

// A collection of values returned by getParameters.
type GetParametersResultOutput struct{ *pulumi.OutputState }

func (GetParametersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParametersResult)(nil)).Elem()
}

func (o GetParametersResultOutput) ToGetParametersResultOutput() GetParametersResultOutput {
	return o
}

func (o GetParametersResultOutput) ToGetParametersResultOutputWithContext(ctx context.Context) GetParametersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetParametersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetParametersResult) string { return v.Id }).(pulumi.StringOutput)
}

// If parameter*type is set to "OBJECT" then object*name is the name of the object to display object parameters for.
func (o GetParametersResultOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParametersResult) *string { return v.ObjectName }).(pulumi.StringPtrOutput)
}

// If parameter*type is set to "OBJECT" then object*type is the type of object to display object parameters for. Valid values are any object supported by the IN clause of the [SHOW PARAMETERS](https://docs.snowflake.com/en/sql-reference/sql/show-parameters.html#parameters) statement, including: WAREHOUSE | DATABASE | SCHEMA | TASK | TABLE
func (o GetParametersResultOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParametersResult) *string { return v.ObjectType }).(pulumi.StringPtrOutput)
}

// The type of parameter to filter by. Valid values are: "ACCOUNT", "SESSION", "OBJECT".
func (o GetParametersResultOutput) ParameterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParametersResult) *string { return v.ParameterType }).(pulumi.StringPtrOutput)
}

// The pipes in the schema
func (o GetParametersResultOutput) Parameters() GetParametersParameterArrayOutput {
	return o.ApplyT(func(v GetParametersResult) []GetParametersParameter { return v.Parameters }).(GetParametersParameterArrayOutput)
}

// Allows limiting the list of parameters by name using LIKE clause. Refer to [Limiting the List of Parameters by Name](https://docs.snowflake.com/en/sql-reference/parameters.html#limiting-the-list-of-parameters-by-name)
func (o GetParametersResultOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParametersResult) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// If parameterType is set to "SESSION" then user is the name of the user to display session parameters for.
func (o GetParametersResultOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParametersResult) *string { return v.User }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetParametersResultOutput{})
}
