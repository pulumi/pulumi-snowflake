// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FailoverGroupGrant struct {
	pulumi.CustomResourceState

	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrOutput `pulumi:"enableMultipleGrants"`
	// The name of the failover group on which to grant privileges.
	FailoverGroupName pulumi.StringPtrOutput `pulumi:"failoverGroupName"`
	// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrOutput `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrOutput `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrOutput `pulumi:"withGrantOption"`
}

// NewFailoverGroupGrant registers a new resource with the given unique name, arguments, and options.
func NewFailoverGroupGrant(ctx *pulumi.Context,
	name string, args *FailoverGroupGrantArgs, opts ...pulumi.ResourceOption) (*FailoverGroupGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FailoverGroupGrant
	err := ctx.RegisterResource("snowflake:index/failoverGroupGrant:FailoverGroupGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFailoverGroupGrant gets an existing FailoverGroupGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailoverGroupGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FailoverGroupGrantState, opts ...pulumi.ResourceOption) (*FailoverGroupGrant, error) {
	var resource FailoverGroupGrant
	err := ctx.ReadResource("snowflake:index/failoverGroupGrant:FailoverGroupGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FailoverGroupGrant resources.
type failoverGroupGrantState struct {
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants *bool `pulumi:"enableMultipleGrants"`
	// The name of the failover group on which to grant privileges.
	FailoverGroupName *string `pulumi:"failoverGroupName"`
	// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege *string `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName *string `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

type FailoverGroupGrantState struct {
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrInput
	// The name of the failover group on which to grant privileges.
	FailoverGroupName pulumi.StringPtrInput
	// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrInput
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (FailoverGroupGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverGroupGrantState)(nil)).Elem()
}

type failoverGroupGrantArgs struct {
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants *bool `pulumi:"enableMultipleGrants"`
	// The name of the failover group on which to grant privileges.
	FailoverGroupName *string `pulumi:"failoverGroupName"`
	// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege *string `pulumi:"privilege"`
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName *string `pulumi:"revertOwnershipToRoleName"`
	// Grants privilege to these roles.
	Roles []string `pulumi:"roles"`
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `pulumi:"withGrantOption"`
}

// The set of arguments for constructing a FailoverGroupGrant resource.
type FailoverGroupGrantArgs struct {
	// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
	// grants applied to roles and objects outside Terraform.
	EnableMultipleGrants pulumi.BoolPtrInput
	// The name of the failover group on which to grant privileges.
	FailoverGroupName pulumi.StringPtrInput
	// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
	Privilege pulumi.StringPtrInput
	// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
	RevertOwnershipToRoleName pulumi.StringPtrInput
	// Grants privilege to these roles.
	Roles pulumi.StringArrayInput
	// When this is set to true, allows the recipient role to grant the privileges to other roles.
	WithGrantOption pulumi.BoolPtrInput
}

func (FailoverGroupGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverGroupGrantArgs)(nil)).Elem()
}

type FailoverGroupGrantInput interface {
	pulumi.Input

	ToFailoverGroupGrantOutput() FailoverGroupGrantOutput
	ToFailoverGroupGrantOutputWithContext(ctx context.Context) FailoverGroupGrantOutput
}

func (*FailoverGroupGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupGrant)(nil)).Elem()
}

func (i *FailoverGroupGrant) ToFailoverGroupGrantOutput() FailoverGroupGrantOutput {
	return i.ToFailoverGroupGrantOutputWithContext(context.Background())
}

func (i *FailoverGroupGrant) ToFailoverGroupGrantOutputWithContext(ctx context.Context) FailoverGroupGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupGrantOutput)
}

func (i *FailoverGroupGrant) ToOutput(ctx context.Context) pulumix.Output[*FailoverGroupGrant] {
	return pulumix.Output[*FailoverGroupGrant]{
		OutputState: i.ToFailoverGroupGrantOutputWithContext(ctx).OutputState,
	}
}

// FailoverGroupGrantArrayInput is an input type that accepts FailoverGroupGrantArray and FailoverGroupGrantArrayOutput values.
// You can construct a concrete instance of `FailoverGroupGrantArrayInput` via:
//
//	FailoverGroupGrantArray{ FailoverGroupGrantArgs{...} }
type FailoverGroupGrantArrayInput interface {
	pulumi.Input

	ToFailoverGroupGrantArrayOutput() FailoverGroupGrantArrayOutput
	ToFailoverGroupGrantArrayOutputWithContext(context.Context) FailoverGroupGrantArrayOutput
}

type FailoverGroupGrantArray []FailoverGroupGrantInput

func (FailoverGroupGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailoverGroupGrant)(nil)).Elem()
}

func (i FailoverGroupGrantArray) ToFailoverGroupGrantArrayOutput() FailoverGroupGrantArrayOutput {
	return i.ToFailoverGroupGrantArrayOutputWithContext(context.Background())
}

func (i FailoverGroupGrantArray) ToFailoverGroupGrantArrayOutputWithContext(ctx context.Context) FailoverGroupGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupGrantArrayOutput)
}

func (i FailoverGroupGrantArray) ToOutput(ctx context.Context) pulumix.Output[[]*FailoverGroupGrant] {
	return pulumix.Output[[]*FailoverGroupGrant]{
		OutputState: i.ToFailoverGroupGrantArrayOutputWithContext(ctx).OutputState,
	}
}

// FailoverGroupGrantMapInput is an input type that accepts FailoverGroupGrantMap and FailoverGroupGrantMapOutput values.
// You can construct a concrete instance of `FailoverGroupGrantMapInput` via:
//
//	FailoverGroupGrantMap{ "key": FailoverGroupGrantArgs{...} }
type FailoverGroupGrantMapInput interface {
	pulumi.Input

	ToFailoverGroupGrantMapOutput() FailoverGroupGrantMapOutput
	ToFailoverGroupGrantMapOutputWithContext(context.Context) FailoverGroupGrantMapOutput
}

type FailoverGroupGrantMap map[string]FailoverGroupGrantInput

func (FailoverGroupGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailoverGroupGrant)(nil)).Elem()
}

func (i FailoverGroupGrantMap) ToFailoverGroupGrantMapOutput() FailoverGroupGrantMapOutput {
	return i.ToFailoverGroupGrantMapOutputWithContext(context.Background())
}

func (i FailoverGroupGrantMap) ToFailoverGroupGrantMapOutputWithContext(ctx context.Context) FailoverGroupGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupGrantMapOutput)
}

func (i FailoverGroupGrantMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FailoverGroupGrant] {
	return pulumix.Output[map[string]*FailoverGroupGrant]{
		OutputState: i.ToFailoverGroupGrantMapOutputWithContext(ctx).OutputState,
	}
}

type FailoverGroupGrantOutput struct{ *pulumi.OutputState }

func (FailoverGroupGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupGrant)(nil)).Elem()
}

func (o FailoverGroupGrantOutput) ToFailoverGroupGrantOutput() FailoverGroupGrantOutput {
	return o
}

func (o FailoverGroupGrantOutput) ToFailoverGroupGrantOutputWithContext(ctx context.Context) FailoverGroupGrantOutput {
	return o
}

func (o FailoverGroupGrantOutput) ToOutput(ctx context.Context) pulumix.Output[*FailoverGroupGrant] {
	return pulumix.Output[*FailoverGroupGrant]{
		OutputState: o.OutputState,
	}
}

// When this is set to true, multiple grants of the same type can be created. This will cause Terraform to not revoke
// grants applied to roles and objects outside Terraform.
func (o FailoverGroupGrantOutput) EnableMultipleGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.BoolPtrOutput { return v.EnableMultipleGrants }).(pulumi.BoolPtrOutput)
}

// The name of the failover group on which to grant privileges.
func (o FailoverGroupGrantOutput) FailoverGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.StringPtrOutput { return v.FailoverGroupName }).(pulumi.StringPtrOutput)
}

// The privilege to grant on the failover group. To grant all privileges, use the value `ALL PRIVILEGES`
func (o FailoverGroupGrantOutput) Privilege() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.StringPtrOutput { return v.Privilege }).(pulumi.StringPtrOutput)
}

// The name of the role to revert ownership to on destroy. Has no effect unless `privilege` is set to `OWNERSHIP`
func (o FailoverGroupGrantOutput) RevertOwnershipToRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.StringPtrOutput { return v.RevertOwnershipToRoleName }).(pulumi.StringPtrOutput)
}

// Grants privilege to these roles.
func (o FailoverGroupGrantOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// When this is set to true, allows the recipient role to grant the privileges to other roles.
func (o FailoverGroupGrantOutput) WithGrantOption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FailoverGroupGrant) pulumi.BoolPtrOutput { return v.WithGrantOption }).(pulumi.BoolPtrOutput)
}

type FailoverGroupGrantArrayOutput struct{ *pulumi.OutputState }

func (FailoverGroupGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailoverGroupGrant)(nil)).Elem()
}

func (o FailoverGroupGrantArrayOutput) ToFailoverGroupGrantArrayOutput() FailoverGroupGrantArrayOutput {
	return o
}

func (o FailoverGroupGrantArrayOutput) ToFailoverGroupGrantArrayOutputWithContext(ctx context.Context) FailoverGroupGrantArrayOutput {
	return o
}

func (o FailoverGroupGrantArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FailoverGroupGrant] {
	return pulumix.Output[[]*FailoverGroupGrant]{
		OutputState: o.OutputState,
	}
}

func (o FailoverGroupGrantArrayOutput) Index(i pulumi.IntInput) FailoverGroupGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FailoverGroupGrant {
		return vs[0].([]*FailoverGroupGrant)[vs[1].(int)]
	}).(FailoverGroupGrantOutput)
}

type FailoverGroupGrantMapOutput struct{ *pulumi.OutputState }

func (FailoverGroupGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailoverGroupGrant)(nil)).Elem()
}

func (o FailoverGroupGrantMapOutput) ToFailoverGroupGrantMapOutput() FailoverGroupGrantMapOutput {
	return o
}

func (o FailoverGroupGrantMapOutput) ToFailoverGroupGrantMapOutputWithContext(ctx context.Context) FailoverGroupGrantMapOutput {
	return o
}

func (o FailoverGroupGrantMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FailoverGroupGrant] {
	return pulumix.Output[map[string]*FailoverGroupGrant]{
		OutputState: o.OutputState,
	}
}

func (o FailoverGroupGrantMapOutput) MapIndex(k pulumi.StringInput) FailoverGroupGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FailoverGroupGrant {
		return vs[0].(map[string]*FailoverGroupGrant)[vs[1].(string)]
	}).(FailoverGroupGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupGrantInput)(nil)).Elem(), &FailoverGroupGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupGrantArrayInput)(nil)).Elem(), FailoverGroupGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupGrantMapInput)(nil)).Elem(), FailoverGroupGrantMap{})
	pulumi.RegisterOutputType(FailoverGroupGrantOutput{})
	pulumi.RegisterOutputType(FailoverGroupGrantArrayOutput{})
	pulumi.RegisterOutputType(FailoverGroupGrantMapOutput{})
}
