// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/accountRole:AccountRole example '"<account_role_name>"'
// ```
type AccountRole struct {
	pulumi.CustomResourceState

	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs AccountRoleShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewAccountRole registers a new resource with the given unique name, arguments, and options.
func NewAccountRole(ctx *pulumi.Context,
	name string, args *AccountRoleArgs, opts ...pulumi.ResourceOption) (*AccountRole, error) {
	if args == nil {
		args = &AccountRoleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountRole
	err := ctx.RegisterResource("snowflake:index/accountRole:AccountRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountRole gets an existing AccountRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountRoleState, opts ...pulumi.ResourceOption) (*AccountRole, error) {
	var resource AccountRole
	err := ctx.ReadResource("snowflake:index/accountRole:AccountRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountRole resources.
type accountRoleState struct {
	Comment *string `pulumi:"comment"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs []AccountRoleShowOutput `pulumi:"showOutputs"`
}

type AccountRoleState struct {
	Comment pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs AccountRoleShowOutputArrayInput
}

func (AccountRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRoleState)(nil)).Elem()
}

type accountRoleArgs struct {
	Comment *string `pulumi:"comment"`
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AccountRole resource.
type AccountRoleArgs struct {
	Comment pulumi.StringPtrInput
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
}

func (AccountRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRoleArgs)(nil)).Elem()
}

type AccountRoleInput interface {
	pulumi.Input

	ToAccountRoleOutput() AccountRoleOutput
	ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput
}

func (*AccountRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRole)(nil)).Elem()
}

func (i *AccountRole) ToAccountRoleOutput() AccountRoleOutput {
	return i.ToAccountRoleOutputWithContext(context.Background())
}

func (i *AccountRole) ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleOutput)
}

// AccountRoleArrayInput is an input type that accepts AccountRoleArray and AccountRoleArrayOutput values.
// You can construct a concrete instance of `AccountRoleArrayInput` via:
//
//	AccountRoleArray{ AccountRoleArgs{...} }
type AccountRoleArrayInput interface {
	pulumi.Input

	ToAccountRoleArrayOutput() AccountRoleArrayOutput
	ToAccountRoleArrayOutputWithContext(context.Context) AccountRoleArrayOutput
}

type AccountRoleArray []AccountRoleInput

func (AccountRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRole)(nil)).Elem()
}

func (i AccountRoleArray) ToAccountRoleArrayOutput() AccountRoleArrayOutput {
	return i.ToAccountRoleArrayOutputWithContext(context.Background())
}

func (i AccountRoleArray) ToAccountRoleArrayOutputWithContext(ctx context.Context) AccountRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleArrayOutput)
}

// AccountRoleMapInput is an input type that accepts AccountRoleMap and AccountRoleMapOutput values.
// You can construct a concrete instance of `AccountRoleMapInput` via:
//
//	AccountRoleMap{ "key": AccountRoleArgs{...} }
type AccountRoleMapInput interface {
	pulumi.Input

	ToAccountRoleMapOutput() AccountRoleMapOutput
	ToAccountRoleMapOutputWithContext(context.Context) AccountRoleMapOutput
}

type AccountRoleMap map[string]AccountRoleInput

func (AccountRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRole)(nil)).Elem()
}

func (i AccountRoleMap) ToAccountRoleMapOutput() AccountRoleMapOutput {
	return i.ToAccountRoleMapOutputWithContext(context.Background())
}

func (i AccountRoleMap) ToAccountRoleMapOutputWithContext(ctx context.Context) AccountRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleMapOutput)
}

type AccountRoleOutput struct{ *pulumi.OutputState }

func (AccountRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRole)(nil)).Elem()
}

func (o AccountRoleOutput) ToAccountRoleOutput() AccountRoleOutput {
	return o
}

func (o AccountRoleOutput) ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput {
	return o
}

func (o AccountRoleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountRole) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o AccountRoleOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRole) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o AccountRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW ROLES` for the given role.
func (o AccountRoleOutput) ShowOutputs() AccountRoleShowOutputArrayOutput {
	return o.ApplyT(func(v *AccountRole) AccountRoleShowOutputArrayOutput { return v.ShowOutputs }).(AccountRoleShowOutputArrayOutput)
}

type AccountRoleArrayOutput struct{ *pulumi.OutputState }

func (AccountRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRole)(nil)).Elem()
}

func (o AccountRoleArrayOutput) ToAccountRoleArrayOutput() AccountRoleArrayOutput {
	return o
}

func (o AccountRoleArrayOutput) ToAccountRoleArrayOutputWithContext(ctx context.Context) AccountRoleArrayOutput {
	return o
}

func (o AccountRoleArrayOutput) Index(i pulumi.IntInput) AccountRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountRole {
		return vs[0].([]*AccountRole)[vs[1].(int)]
	}).(AccountRoleOutput)
}

type AccountRoleMapOutput struct{ *pulumi.OutputState }

func (AccountRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRole)(nil)).Elem()
}

func (o AccountRoleMapOutput) ToAccountRoleMapOutput() AccountRoleMapOutput {
	return o
}

func (o AccountRoleMapOutput) ToAccountRoleMapOutputWithContext(ctx context.Context) AccountRoleMapOutput {
	return o
}

func (o AccountRoleMapOutput) MapIndex(k pulumi.StringInput) AccountRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountRole {
		return vs[0].(map[string]*AccountRole)[vs[1].(string)]
	}).(AccountRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleInput)(nil)).Elem(), &AccountRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleArrayInput)(nil)).Elem(), AccountRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleMapInput)(nil)).Elem(), AccountRoleMap{})
	pulumi.RegisterOutputType(AccountRoleOutput{})
	pulumi.RegisterOutputType(AccountRoleArrayOutput{})
	pulumi.RegisterOutputType(AccountRoleMapOutput{})
}
