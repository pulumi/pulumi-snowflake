// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
//
// The resource is used for role management, where roles can be assigned privileges and, in turn, granted to users and other roles. When granted to roles they can create hierarchies of privilege structures. For more details, refer to the [official documentation](https://docs.snowflake.com/en/user-guide/security-access-control-overview).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// # Minimal
//			_, err := snowflake.NewAccountRole(ctx, "minimal", &snowflake.AccountRoleArgs{
//				Name: pulumi.String("role_name"),
//			})
//			if err != nil {
//				return err
//			}
//			// # Complete (with every optional set)
//			_, err = snowflake.NewAccountRole(ctx, "complete", &snowflake.AccountRoleArgs{
//				Name:    pulumi.String("role_name"),
//				Comment: pulumi.String("my account role"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/accountRole:AccountRole example "name"
// ```
type AccountRole struct {
	pulumi.CustomResourceState

	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	Name    pulumi.StringOutput    `pulumi:"name"`
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs AccountRoleShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewAccountRole registers a new resource with the given unique name, arguments, and options.
func NewAccountRole(ctx *pulumi.Context,
	name string, args *AccountRoleArgs, opts ...pulumi.ResourceOption) (*AccountRole, error) {
	if args == nil {
		args = &AccountRoleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountRole
	err := ctx.RegisterResource("snowflake:index/accountRole:AccountRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountRole gets an existing AccountRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountRoleState, opts ...pulumi.ResourceOption) (*AccountRole, error) {
	var resource AccountRole
	err := ctx.ReadResource("snowflake:index/accountRole:AccountRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountRole resources.
type accountRoleState struct {
	Comment *string `pulumi:"comment"`
	Name    *string `pulumi:"name"`
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs []AccountRoleShowOutput `pulumi:"showOutputs"`
}

type AccountRoleState struct {
	Comment pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutputs AccountRoleShowOutputArrayInput
}

func (AccountRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRoleState)(nil)).Elem()
}

type accountRoleArgs struct {
	Comment *string `pulumi:"comment"`
	Name    *string `pulumi:"name"`
}

// The set of arguments for constructing a AccountRole resource.
type AccountRoleArgs struct {
	Comment pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
}

func (AccountRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRoleArgs)(nil)).Elem()
}

type AccountRoleInput interface {
	pulumi.Input

	ToAccountRoleOutput() AccountRoleOutput
	ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput
}

func (*AccountRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRole)(nil)).Elem()
}

func (i *AccountRole) ToAccountRoleOutput() AccountRoleOutput {
	return i.ToAccountRoleOutputWithContext(context.Background())
}

func (i *AccountRole) ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleOutput)
}

// AccountRoleArrayInput is an input type that accepts AccountRoleArray and AccountRoleArrayOutput values.
// You can construct a concrete instance of `AccountRoleArrayInput` via:
//
//	AccountRoleArray{ AccountRoleArgs{...} }
type AccountRoleArrayInput interface {
	pulumi.Input

	ToAccountRoleArrayOutput() AccountRoleArrayOutput
	ToAccountRoleArrayOutputWithContext(context.Context) AccountRoleArrayOutput
}

type AccountRoleArray []AccountRoleInput

func (AccountRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRole)(nil)).Elem()
}

func (i AccountRoleArray) ToAccountRoleArrayOutput() AccountRoleArrayOutput {
	return i.ToAccountRoleArrayOutputWithContext(context.Background())
}

func (i AccountRoleArray) ToAccountRoleArrayOutputWithContext(ctx context.Context) AccountRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleArrayOutput)
}

// AccountRoleMapInput is an input type that accepts AccountRoleMap and AccountRoleMapOutput values.
// You can construct a concrete instance of `AccountRoleMapInput` via:
//
//	AccountRoleMap{ "key": AccountRoleArgs{...} }
type AccountRoleMapInput interface {
	pulumi.Input

	ToAccountRoleMapOutput() AccountRoleMapOutput
	ToAccountRoleMapOutputWithContext(context.Context) AccountRoleMapOutput
}

type AccountRoleMap map[string]AccountRoleInput

func (AccountRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRole)(nil)).Elem()
}

func (i AccountRoleMap) ToAccountRoleMapOutput() AccountRoleMapOutput {
	return i.ToAccountRoleMapOutputWithContext(context.Background())
}

func (i AccountRoleMap) ToAccountRoleMapOutputWithContext(ctx context.Context) AccountRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRoleMapOutput)
}

type AccountRoleOutput struct{ *pulumi.OutputState }

func (AccountRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRole)(nil)).Elem()
}

func (o AccountRoleOutput) ToAccountRoleOutput() AccountRoleOutput {
	return o
}

func (o AccountRoleOutput) ToAccountRoleOutputWithContext(ctx context.Context) AccountRoleOutput {
	return o
}

func (o AccountRoleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountRole) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o AccountRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW ROLES` for the given role.
func (o AccountRoleOutput) ShowOutputs() AccountRoleShowOutputArrayOutput {
	return o.ApplyT(func(v *AccountRole) AccountRoleShowOutputArrayOutput { return v.ShowOutputs }).(AccountRoleShowOutputArrayOutput)
}

type AccountRoleArrayOutput struct{ *pulumi.OutputState }

func (AccountRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRole)(nil)).Elem()
}

func (o AccountRoleArrayOutput) ToAccountRoleArrayOutput() AccountRoleArrayOutput {
	return o
}

func (o AccountRoleArrayOutput) ToAccountRoleArrayOutputWithContext(ctx context.Context) AccountRoleArrayOutput {
	return o
}

func (o AccountRoleArrayOutput) Index(i pulumi.IntInput) AccountRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountRole {
		return vs[0].([]*AccountRole)[vs[1].(int)]
	}).(AccountRoleOutput)
}

type AccountRoleMapOutput struct{ *pulumi.OutputState }

func (AccountRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRole)(nil)).Elem()
}

func (o AccountRoleMapOutput) ToAccountRoleMapOutput() AccountRoleMapOutput {
	return o
}

func (o AccountRoleMapOutput) ToAccountRoleMapOutputWithContext(ctx context.Context) AccountRoleMapOutput {
	return o
}

func (o AccountRoleMapOutput) MapIndex(k pulumi.StringInput) AccountRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountRole {
		return vs[0].(map[string]*AccountRole)[vs[1].(string)]
	}).(AccountRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleInput)(nil)).Elem(), &AccountRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleArrayInput)(nil)).Elem(), AccountRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRoleMapInput)(nil)).Elem(), AccountRoleMap{})
	pulumi.RegisterOutputType(AccountRoleOutput{})
	pulumi.RegisterOutputType(AccountRoleArrayOutput{})
	pulumi.RegisterOutputType(AccountRoleMapOutput{})
}
