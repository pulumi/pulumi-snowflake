// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionScala struct {
	pulumi.CustomResourceState

	// List of the arguments for the function. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionScalaArgumentArrayOutput `pulumi:"arguments"`
	// Specifies a comment for the function.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
	// For more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this function’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayOutput `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
	// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
	// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
	// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringPtrOutput `pulumi:"functionDefinition"`
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage pulumi.StringOutput `pulumi:"functionLanguage"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
	// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
	// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
	// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
	// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
	// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
	Imports  FunctionScalaImportArrayOutput `pulumi:"imports"`
	IsSecure pulumi.StringPtrOutput         `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringOutput `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created
	// because UDFs are identified and resolved by the combination of the name and argument types. Check the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrOutput `pulumi:"nullInputBehavior"`
	// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
	// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters FunctionScalaParameterArrayOutput `pulumi:"parameters"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
	// `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrOutput `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
	// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
	// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
	// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringOutput `pulumi:"returnType"`
	// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets FunctionScalaSecretArrayOutput `pulumi:"secrets"`
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs FunctionScalaShowOutputArrayOutput `pulumi:"showOutputs"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	TargetPath FunctionScalaTargetPathPtrOutput `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
}

// NewFunctionScala registers a new resource with the given unique name, arguments, and options.
func NewFunctionScala(ctx *pulumi.Context,
	name string, args *FunctionScalaArgs, opts ...pulumi.ResourceOption) (*FunctionScala, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.ReturnType == nil {
		return nil, errors.New("invalid value for required argument 'ReturnType'")
	}
	if args.RuntimeVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeVersion'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionScala
	err := ctx.RegisterResource("snowflake:index/functionScala:FunctionScala", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionScala gets an existing FunctionScala resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionScala(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionScalaState, opts ...pulumi.ResourceOption) (*FunctionScala, error) {
	var resource FunctionScala
	err := ctx.ReadResource("snowflake:index/functionScala:FunctionScala", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionScala resources.
type functionScalaState struct {
	// List of the arguments for the function. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments []FunctionScalaArgument `pulumi:"arguments"`
	// Specifies a comment for the function.
	Comment *string `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
	// For more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this function’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
	// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
	// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
	// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	FunctionDefinition *string `pulumi:"functionDefinition"`
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage *string `pulumi:"functionLanguage"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	Handler *string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
	// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
	// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
	// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
	// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
	// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
	Imports  []FunctionScalaImport `pulumi:"imports"`
	IsSecure *string               `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created
	// because UDFs are identified and resolved by the combination of the name and argument types. Check the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
	// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
	Packages []string `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters []FunctionScalaParameter `pulumi:"parameters"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
	// `IMMUTABLE`.
	ReturnResultsBehavior *string `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
	// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
	// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
	// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType *string `pulumi:"returnType"`
	// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets []FunctionScalaSecret `pulumi:"secrets"`
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs []FunctionScalaShowOutput `pulumi:"showOutputs"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	TargetPath *FunctionScalaTargetPath `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

type FunctionScalaState struct {
	// List of the arguments for the function. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionScalaArgumentArrayInput
	// Specifies a comment for the function.
	Comment pulumi.StringPtrInput
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
	// For more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this function’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
	// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
	// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
	// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringPtrInput
	// Specifies language for the user. Used to detect external changes.
	FunctionLanguage pulumi.StringPtrInput
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	Handler pulumi.StringPtrInput
	// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
	// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
	// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
	// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
	// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
	// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
	Imports  FunctionScalaImportArrayInput
	IsSecure pulumi.StringPtrInput
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created
	// because UDFs are identified and resolved by the combination of the name and argument types. Check the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
	// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
	Packages pulumi.StringArrayInput
	// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
	Parameters FunctionScalaParameterArrayInput
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
	// `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrInput
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
	// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
	// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
	// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringPtrInput
	// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
	RuntimeVersion pulumi.StringPtrInput
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets FunctionScalaSecretArrayInput
	// Outputs the result of `SHOW FUNCTION` for the given function.
	ShowOutputs FunctionScalaShowOutputArrayInput
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	TargetPath FunctionScalaTargetPathPtrInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (FunctionScalaState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionScalaState)(nil)).Elem()
}

type functionScalaArgs struct {
	// List of the arguments for the function. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments []FunctionScalaArgument `pulumi:"arguments"`
	// Specifies a comment for the function.
	Comment *string `pulumi:"comment"`
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
	// For more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this function’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
	// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
	// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
	// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	FunctionDefinition *string `pulumi:"functionDefinition"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	Handler string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
	// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
	// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
	// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
	// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
	// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
	Imports  []FunctionScalaImport `pulumi:"imports"`
	IsSecure *string               `pulumi:"isSecure"`
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created
	// because UDFs are identified and resolved by the combination of the name and argument types. Check the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
	// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
	Packages []string `pulumi:"packages"`
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
	// `IMMUTABLE`.
	ReturnResultsBehavior *string `pulumi:"returnResultsBehavior"`
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
	// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
	// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
	// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType string `pulumi:"returnType"`
	// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets []FunctionScalaSecret `pulumi:"secrets"`
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	TargetPath *FunctionScalaTargetPath `pulumi:"targetPath"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

// The set of arguments for constructing a FunctionScala resource.
type FunctionScalaArgs struct {
	// List of the arguments for the function. Consult the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
	Arguments FunctionScalaArgumentArrayInput
	// Specifies a comment for the function.
	Comment pulumi.StringPtrInput
	// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
	// For more information, check [ENABLE_CONSOLE_OUTPUT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// The names of [external access
	// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
	// this function’s handler code to access external networks. An external access integration specifies [network
	// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
	// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
	// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
	// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
	// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
	// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
	// change in case or run of whitespace is semantically significant.
	FunctionDefinition pulumi.StringPtrInput
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	Handler pulumi.StringInput
	// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
	// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
	// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
	// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
	// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
	// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
	Imports  FunctionScalaImportArrayInput
	IsSecure pulumi.StringPtrInput
	// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the function; the identifier does not need to be unique for the schema in which the function is created
	// because UDFs are identified and resolved by the combination of the name and argument types. Check the
	// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
	// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
	// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
	Packages pulumi.StringArrayInput
	// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
	// `IMMUTABLE`.
	ReturnResultsBehavior pulumi.StringPtrInput
	// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
	// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
	// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
	// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
	ReturnType pulumi.StringInput
	// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
	RuntimeVersion pulumi.StringInput
	// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
	// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
	// specify here must be allowed by the [external access
	// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
	// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
	Secrets FunctionScalaSecretArrayInput
	// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
	// value should be a method name, as in the following form: `MyClass.myMethod`.
	TargetPath FunctionScalaTargetPathPtrInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (FunctionScalaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionScalaArgs)(nil)).Elem()
}

type FunctionScalaInput interface {
	pulumi.Input

	ToFunctionScalaOutput() FunctionScalaOutput
	ToFunctionScalaOutputWithContext(ctx context.Context) FunctionScalaOutput
}

func (*FunctionScala) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionScala)(nil)).Elem()
}

func (i *FunctionScala) ToFunctionScalaOutput() FunctionScalaOutput {
	return i.ToFunctionScalaOutputWithContext(context.Background())
}

func (i *FunctionScala) ToFunctionScalaOutputWithContext(ctx context.Context) FunctionScalaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionScalaOutput)
}

// FunctionScalaArrayInput is an input type that accepts FunctionScalaArray and FunctionScalaArrayOutput values.
// You can construct a concrete instance of `FunctionScalaArrayInput` via:
//
//	FunctionScalaArray{ FunctionScalaArgs{...} }
type FunctionScalaArrayInput interface {
	pulumi.Input

	ToFunctionScalaArrayOutput() FunctionScalaArrayOutput
	ToFunctionScalaArrayOutputWithContext(context.Context) FunctionScalaArrayOutput
}

type FunctionScalaArray []FunctionScalaInput

func (FunctionScalaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionScala)(nil)).Elem()
}

func (i FunctionScalaArray) ToFunctionScalaArrayOutput() FunctionScalaArrayOutput {
	return i.ToFunctionScalaArrayOutputWithContext(context.Background())
}

func (i FunctionScalaArray) ToFunctionScalaArrayOutputWithContext(ctx context.Context) FunctionScalaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionScalaArrayOutput)
}

// FunctionScalaMapInput is an input type that accepts FunctionScalaMap and FunctionScalaMapOutput values.
// You can construct a concrete instance of `FunctionScalaMapInput` via:
//
//	FunctionScalaMap{ "key": FunctionScalaArgs{...} }
type FunctionScalaMapInput interface {
	pulumi.Input

	ToFunctionScalaMapOutput() FunctionScalaMapOutput
	ToFunctionScalaMapOutputWithContext(context.Context) FunctionScalaMapOutput
}

type FunctionScalaMap map[string]FunctionScalaInput

func (FunctionScalaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionScala)(nil)).Elem()
}

func (i FunctionScalaMap) ToFunctionScalaMapOutput() FunctionScalaMapOutput {
	return i.ToFunctionScalaMapOutputWithContext(context.Background())
}

func (i FunctionScalaMap) ToFunctionScalaMapOutputWithContext(ctx context.Context) FunctionScalaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionScalaMapOutput)
}

type FunctionScalaOutput struct{ *pulumi.OutputState }

func (FunctionScalaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionScala)(nil)).Elem()
}

func (o FunctionScalaOutput) ToFunctionScalaOutput() FunctionScalaOutput {
	return o
}

func (o FunctionScalaOutput) ToFunctionScalaOutputWithContext(ctx context.Context) FunctionScalaOutput {
	return o
}

// List of the arguments for the function. Consult the
// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages) for more details.
func (o FunctionScalaOutput) Arguments() FunctionScalaArgumentArrayOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaArgumentArrayOutput { return v.Arguments }).(FunctionScalaArgumentArrayOutput)
}

// Specifies a comment for the function.
func (o FunctionScalaOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the function. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o FunctionScalaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Enable stdout/stderr fast path logging for anonymous stored procs. This is a public parameter (similar to LOG_LEVEL).
// For more information, check [ENABLE_CONSOLE_OUTPUT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
func (o FunctionScalaOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// The names of [external access
// integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for
// this function’s handler code to access external networks. An external access integration specifies [network
// rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and
// [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials
// (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
func (o FunctionScalaOutput) ExternalAccessIntegrations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringArrayOutput { return v.ExternalAccessIntegrations }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name
// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o FunctionScalaOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Defines the handler code executed when the UDF is called. Wrapping `$$` signs are added by the provider automatically;
// do not include them. The `functionDefinition` value must be Scala source code. For more information, see [Introduction
// to Scala UDFs](https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-introduction). To mitigate permadiff on
// this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a
// change in case or run of whitespace is semantically significant.
func (o FunctionScalaOutput) FunctionDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringPtrOutput { return v.FunctionDefinition }).(pulumi.StringPtrOutput)
}

// Specifies language for the user. Used to detect external changes.
func (o FunctionScalaOutput) FunctionLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.FunctionLanguage }).(pulumi.StringOutput)
}

// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
// value should be a method name, as in the following form: `MyClass.myMethod`.
func (o FunctionScalaOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// The location (stage), path, and name of the file(s) to import, such as a JAR or other kind of file. The JAR file might
// contain handler dependency libraries. It can contain one or more .class files and zero or more resource files. JNI (Java
// Native Interface) is not supported. Snowflake prohibits loading libraries that contain native code (as opposed to Java
// bytecode). A non-JAR file might a file read by handler code. For an example, see [Reading a file specified statically in
// IMPORTS](https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-cookbook.html#label-reading-file-from-java-udf-imports).
// Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#scala).
func (o FunctionScalaOutput) Imports() FunctionScalaImportArrayOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaImportArrayOutput { return v.Imports }).(FunctionScalaImportArrayOutput)
}

func (o FunctionScalaOutput) IsSecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringPtrOutput { return v.IsSecure }).(pulumi.StringPtrOutput)
}

// LOG_LEVEL to use when filtering events For more information, check [LOG_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
func (o FunctionScalaOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// METRIC_LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
func (o FunctionScalaOutput) MetricLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.MetricLevel }).(pulumi.StringOutput)
}

// The name of the function; the identifier does not need to be unique for the schema in which the function is created
// because UDFs are identified and resolved by the combination of the name and argument types. Check the
// [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages). Due to technical limitations
// (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o FunctionScalaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the behavior of the function when called with null inputs. Valid values are (case-insensitive): `CALLED ON
// NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
func (o FunctionScalaOutput) NullInputBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringPtrOutput { return v.NullInputBehavior }).(pulumi.StringPtrOutput)
}

// The name and version number of Snowflake system packages required as dependencies. The value should be of the form
// `package_name:version_number`, where `packageName` is `snowflake_domain:package`.
func (o FunctionScalaOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// Outputs the result of `SHOW PARAMETERS IN FUNCTION` for the given function.
func (o FunctionScalaOutput) Parameters() FunctionScalaParameterArrayOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaParameterArrayOutput { return v.Parameters }).(FunctionScalaParameterArrayOutput)
}

// Specifies the behavior of the function when returning results. Valid values are (case-insensitive): `VOLATILE` |
// `IMMUTABLE`.
func (o FunctionScalaOutput) ReturnResultsBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringPtrOutput { return v.ReturnResultsBehavior }).(pulumi.StringPtrOutput)
}

// Specifies the results returned by the UDF, which determines the UDF type. Use `<result_data_type>` to create a scalar
// UDF that returns a single value with the specified data type. Use `TABLE (col_name col_data_type, ...)` to creates a
// table UDF that returns tabular results with the specified table column(s) and column type(s). For the details, consult
// the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-function#all-languages).
func (o FunctionScalaOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.ReturnType }).(pulumi.StringOutput)
}

// Specifies the Scala runtime version to use. The supported versions of Scala are: 2.12.
func (o FunctionScalaOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The schema in which to create the function. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o FunctionScalaOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you
// can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you
// specify here must be allowed by the [external access
// integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of
// this CREATE FUNCTION command’s EXTERNAL_ACCESS_INTEGRATIONS parameter.
func (o FunctionScalaOutput) Secrets() FunctionScalaSecretArrayOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaSecretArrayOutput { return v.Secrets }).(FunctionScalaSecretArrayOutput)
}

// Outputs the result of `SHOW FUNCTION` for the given function.
func (o FunctionScalaOutput) ShowOutputs() FunctionScalaShowOutputArrayOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaShowOutputArrayOutput { return v.ShowOutputs }).(FunctionScalaShowOutputArrayOutput)
}

// The name of the handler method or class. If the handler is for a scalar UDF, returning a non-tabular value, the HANDLER
// value should be a method name, as in the following form: `MyClass.myMethod`.
func (o FunctionScalaOutput) TargetPath() FunctionScalaTargetPathPtrOutput {
	return o.ApplyT(func(v *FunctionScala) FunctionScalaTargetPathPtrOutput { return v.TargetPath }).(FunctionScalaTargetPathPtrOutput)
}

// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
func (o FunctionScalaOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionScala) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

type FunctionScalaArrayOutput struct{ *pulumi.OutputState }

func (FunctionScalaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionScala)(nil)).Elem()
}

func (o FunctionScalaArrayOutput) ToFunctionScalaArrayOutput() FunctionScalaArrayOutput {
	return o
}

func (o FunctionScalaArrayOutput) ToFunctionScalaArrayOutputWithContext(ctx context.Context) FunctionScalaArrayOutput {
	return o
}

func (o FunctionScalaArrayOutput) Index(i pulumi.IntInput) FunctionScalaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionScala {
		return vs[0].([]*FunctionScala)[vs[1].(int)]
	}).(FunctionScalaOutput)
}

type FunctionScalaMapOutput struct{ *pulumi.OutputState }

func (FunctionScalaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionScala)(nil)).Elem()
}

func (o FunctionScalaMapOutput) ToFunctionScalaMapOutput() FunctionScalaMapOutput {
	return o
}

func (o FunctionScalaMapOutput) ToFunctionScalaMapOutputWithContext(ctx context.Context) FunctionScalaMapOutput {
	return o
}

func (o FunctionScalaMapOutput) MapIndex(k pulumi.StringInput) FunctionScalaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionScala {
		return vs[0].(map[string]*FunctionScala)[vs[1].(string)]
	}).(FunctionScalaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionScalaInput)(nil)).Elem(), &FunctionScala{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionScalaArrayInput)(nil)).Elem(), FunctionScalaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionScalaMapInput)(nil)).Elem(), FunctionScalaMap{})
	pulumi.RegisterOutputType(FunctionScalaOutput{})
	pulumi.RegisterOutputType(FunctionScalaArrayOutput{})
	pulumi.RegisterOutputType(FunctionScalaMapOutput{})
}
