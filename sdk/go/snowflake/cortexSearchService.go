// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/cortexSearchService:CortexSearchService example 'dbName|schemaName|fileFormatName'
// ```
type CortexSearchService struct {
	pulumi.CustomResourceState

	// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
	Attributes pulumi.StringArrayOutput `pulumi:"attributes"`
	// Specifies a comment for the Cortex search service.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Creation date for the given Cortex search service.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The database in which to create the Cortex search service.
	Database pulumi.StringOutput `pulumi:"database"`
	// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the column to use as the search column for the Cortex search service; must be a text value.
	On pulumi.StringOutput `pulumi:"on"`
	// Specifies the query to use to populate the Cortex search service.
	Query pulumi.StringOutput `pulumi:"query"`
	// The schema in which to create the Cortex search service.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies the maximum target lag time for the Cortex search service.
	TargetLag pulumi.StringOutput `pulumi:"targetLag"`
	// The warehouse in which to create the Cortex search service.
	Warehouse pulumi.StringOutput `pulumi:"warehouse"`
}

// NewCortexSearchService registers a new resource with the given unique name, arguments, and options.
func NewCortexSearchService(ctx *pulumi.Context,
	name string, args *CortexSearchServiceArgs, opts ...pulumi.ResourceOption) (*CortexSearchService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.On == nil {
		return nil, errors.New("invalid value for required argument 'On'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.TargetLag == nil {
		return nil, errors.New("invalid value for required argument 'TargetLag'")
	}
	if args.Warehouse == nil {
		return nil, errors.New("invalid value for required argument 'Warehouse'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CortexSearchService
	err := ctx.RegisterResource("snowflake:index/cortexSearchService:CortexSearchService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCortexSearchService gets an existing CortexSearchService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCortexSearchService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CortexSearchServiceState, opts ...pulumi.ResourceOption) (*CortexSearchService, error) {
	var resource CortexSearchService
	err := ctx.ReadResource("snowflake:index/cortexSearchService:CortexSearchService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CortexSearchService resources.
type cortexSearchServiceState struct {
	// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
	Attributes []string `pulumi:"attributes"`
	// Specifies a comment for the Cortex search service.
	Comment *string `pulumi:"comment"`
	// Creation date for the given Cortex search service.
	CreatedOn *string `pulumi:"createdOn"`
	// The database in which to create the Cortex search service.
	Database *string `pulumi:"database"`
	// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
	Name *string `pulumi:"name"`
	// Specifies the column to use as the search column for the Cortex search service; must be a text value.
	On *string `pulumi:"on"`
	// Specifies the query to use to populate the Cortex search service.
	Query *string `pulumi:"query"`
	// The schema in which to create the Cortex search service.
	Schema *string `pulumi:"schema"`
	// Specifies the maximum target lag time for the Cortex search service.
	TargetLag *string `pulumi:"targetLag"`
	// The warehouse in which to create the Cortex search service.
	Warehouse *string `pulumi:"warehouse"`
}

type CortexSearchServiceState struct {
	// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
	Attributes pulumi.StringArrayInput
	// Specifies a comment for the Cortex search service.
	Comment pulumi.StringPtrInput
	// Creation date for the given Cortex search service.
	CreatedOn pulumi.StringPtrInput
	// The database in which to create the Cortex search service.
	Database pulumi.StringPtrInput
	// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
	Name pulumi.StringPtrInput
	// Specifies the column to use as the search column for the Cortex search service; must be a text value.
	On pulumi.StringPtrInput
	// Specifies the query to use to populate the Cortex search service.
	Query pulumi.StringPtrInput
	// The schema in which to create the Cortex search service.
	Schema pulumi.StringPtrInput
	// Specifies the maximum target lag time for the Cortex search service.
	TargetLag pulumi.StringPtrInput
	// The warehouse in which to create the Cortex search service.
	Warehouse pulumi.StringPtrInput
}

func (CortexSearchServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cortexSearchServiceState)(nil)).Elem()
}

type cortexSearchServiceArgs struct {
	// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
	Attributes []string `pulumi:"attributes"`
	// Specifies a comment for the Cortex search service.
	Comment *string `pulumi:"comment"`
	// The database in which to create the Cortex search service.
	Database string `pulumi:"database"`
	// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
	Name *string `pulumi:"name"`
	// Specifies the column to use as the search column for the Cortex search service; must be a text value.
	On string `pulumi:"on"`
	// Specifies the query to use to populate the Cortex search service.
	Query string `pulumi:"query"`
	// The schema in which to create the Cortex search service.
	Schema string `pulumi:"schema"`
	// Specifies the maximum target lag time for the Cortex search service.
	TargetLag string `pulumi:"targetLag"`
	// The warehouse in which to create the Cortex search service.
	Warehouse string `pulumi:"warehouse"`
}

// The set of arguments for constructing a CortexSearchService resource.
type CortexSearchServiceArgs struct {
	// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
	Attributes pulumi.StringArrayInput
	// Specifies a comment for the Cortex search service.
	Comment pulumi.StringPtrInput
	// The database in which to create the Cortex search service.
	Database pulumi.StringInput
	// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
	Name pulumi.StringPtrInput
	// Specifies the column to use as the search column for the Cortex search service; must be a text value.
	On pulumi.StringInput
	// Specifies the query to use to populate the Cortex search service.
	Query pulumi.StringInput
	// The schema in which to create the Cortex search service.
	Schema pulumi.StringInput
	// Specifies the maximum target lag time for the Cortex search service.
	TargetLag pulumi.StringInput
	// The warehouse in which to create the Cortex search service.
	Warehouse pulumi.StringInput
}

func (CortexSearchServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cortexSearchServiceArgs)(nil)).Elem()
}

type CortexSearchServiceInput interface {
	pulumi.Input

	ToCortexSearchServiceOutput() CortexSearchServiceOutput
	ToCortexSearchServiceOutputWithContext(ctx context.Context) CortexSearchServiceOutput
}

func (*CortexSearchService) ElementType() reflect.Type {
	return reflect.TypeOf((**CortexSearchService)(nil)).Elem()
}

func (i *CortexSearchService) ToCortexSearchServiceOutput() CortexSearchServiceOutput {
	return i.ToCortexSearchServiceOutputWithContext(context.Background())
}

func (i *CortexSearchService) ToCortexSearchServiceOutputWithContext(ctx context.Context) CortexSearchServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CortexSearchServiceOutput)
}

// CortexSearchServiceArrayInput is an input type that accepts CortexSearchServiceArray and CortexSearchServiceArrayOutput values.
// You can construct a concrete instance of `CortexSearchServiceArrayInput` via:
//
//	CortexSearchServiceArray{ CortexSearchServiceArgs{...} }
type CortexSearchServiceArrayInput interface {
	pulumi.Input

	ToCortexSearchServiceArrayOutput() CortexSearchServiceArrayOutput
	ToCortexSearchServiceArrayOutputWithContext(context.Context) CortexSearchServiceArrayOutput
}

type CortexSearchServiceArray []CortexSearchServiceInput

func (CortexSearchServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CortexSearchService)(nil)).Elem()
}

func (i CortexSearchServiceArray) ToCortexSearchServiceArrayOutput() CortexSearchServiceArrayOutput {
	return i.ToCortexSearchServiceArrayOutputWithContext(context.Background())
}

func (i CortexSearchServiceArray) ToCortexSearchServiceArrayOutputWithContext(ctx context.Context) CortexSearchServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CortexSearchServiceArrayOutput)
}

// CortexSearchServiceMapInput is an input type that accepts CortexSearchServiceMap and CortexSearchServiceMapOutput values.
// You can construct a concrete instance of `CortexSearchServiceMapInput` via:
//
//	CortexSearchServiceMap{ "key": CortexSearchServiceArgs{...} }
type CortexSearchServiceMapInput interface {
	pulumi.Input

	ToCortexSearchServiceMapOutput() CortexSearchServiceMapOutput
	ToCortexSearchServiceMapOutputWithContext(context.Context) CortexSearchServiceMapOutput
}

type CortexSearchServiceMap map[string]CortexSearchServiceInput

func (CortexSearchServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CortexSearchService)(nil)).Elem()
}

func (i CortexSearchServiceMap) ToCortexSearchServiceMapOutput() CortexSearchServiceMapOutput {
	return i.ToCortexSearchServiceMapOutputWithContext(context.Background())
}

func (i CortexSearchServiceMap) ToCortexSearchServiceMapOutputWithContext(ctx context.Context) CortexSearchServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CortexSearchServiceMapOutput)
}

type CortexSearchServiceOutput struct{ *pulumi.OutputState }

func (CortexSearchServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CortexSearchService)(nil)).Elem()
}

func (o CortexSearchServiceOutput) ToCortexSearchServiceOutput() CortexSearchServiceOutput {
	return o
}

func (o CortexSearchServiceOutput) ToCortexSearchServiceOutputWithContext(ctx context.Context) CortexSearchServiceOutput {
	return o
}

// Specifies the list of columns in the base table to enable filtering on when issuing queries to the service.
func (o CortexSearchServiceOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringArrayOutput { return v.Attributes }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the Cortex search service.
func (o CortexSearchServiceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Creation date for the given Cortex search service.
func (o CortexSearchServiceOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The database in which to create the Cortex search service.
func (o CortexSearchServiceOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Specifies the name of the Cortex search service. The name must be unique for the schema in which the service is created.
func (o CortexSearchServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the column to use as the search column for the Cortex search service; must be a text value.
func (o CortexSearchServiceOutput) On() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.On }).(pulumi.StringOutput)
}

// Specifies the query to use to populate the Cortex search service.
func (o CortexSearchServiceOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// The schema in which to create the Cortex search service.
func (o CortexSearchServiceOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies the maximum target lag time for the Cortex search service.
func (o CortexSearchServiceOutput) TargetLag() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.TargetLag }).(pulumi.StringOutput)
}

// The warehouse in which to create the Cortex search service.
func (o CortexSearchServiceOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v *CortexSearchService) pulumi.StringOutput { return v.Warehouse }).(pulumi.StringOutput)
}

type CortexSearchServiceArrayOutput struct{ *pulumi.OutputState }

func (CortexSearchServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CortexSearchService)(nil)).Elem()
}

func (o CortexSearchServiceArrayOutput) ToCortexSearchServiceArrayOutput() CortexSearchServiceArrayOutput {
	return o
}

func (o CortexSearchServiceArrayOutput) ToCortexSearchServiceArrayOutputWithContext(ctx context.Context) CortexSearchServiceArrayOutput {
	return o
}

func (o CortexSearchServiceArrayOutput) Index(i pulumi.IntInput) CortexSearchServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CortexSearchService {
		return vs[0].([]*CortexSearchService)[vs[1].(int)]
	}).(CortexSearchServiceOutput)
}

type CortexSearchServiceMapOutput struct{ *pulumi.OutputState }

func (CortexSearchServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CortexSearchService)(nil)).Elem()
}

func (o CortexSearchServiceMapOutput) ToCortexSearchServiceMapOutput() CortexSearchServiceMapOutput {
	return o
}

func (o CortexSearchServiceMapOutput) ToCortexSearchServiceMapOutputWithContext(ctx context.Context) CortexSearchServiceMapOutput {
	return o
}

func (o CortexSearchServiceMapOutput) MapIndex(k pulumi.StringInput) CortexSearchServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CortexSearchService {
		return vs[0].(map[string]*CortexSearchService)[vs[1].(string)]
	}).(CortexSearchServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CortexSearchServiceInput)(nil)).Elem(), &CortexSearchService{})
	pulumi.RegisterInputType(reflect.TypeOf((*CortexSearchServiceArrayInput)(nil)).Elem(), CortexSearchServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CortexSearchServiceMapInput)(nil)).Elem(), CortexSearchServiceMap{})
	pulumi.RegisterOutputType(CortexSearchServiceOutput{})
	pulumi.RegisterOutputType(CortexSearchServiceArrayOutput{})
	pulumi.RegisterOutputType(CortexSearchServiceMapOutput{})
}
