// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/view:View example '"<database_name>"."<schema_name>"."<view_name>"'
// ```
type View struct {
	pulumi.CustomResourceState

	// Specifies the aggregation policy to set on a view.
	AggregationPolicy ViewAggregationPolicyPtrOutput `pulumi:"aggregationPolicy"`
	// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking pulumi.StringPtrOutput `pulumi:"changeTracking"`
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Columns ViewColumnArrayOutput `pulumi:"columns"`
	// Specifies a comment for the view.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants pulumi.BoolPtrOutput `pulumi:"copyGrants"`
	// Data metric functions used for the view.
	DataMetricFunctions ViewDataMetricFunctionArrayOutput `pulumi:"dataMetricFunctions"`
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule ViewDataMetricSchedulePtrOutput `pulumi:"dataMetricSchedule"`
	// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE VIEW` for the given view.
	DescribeOutputs ViewDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive pulumi.StringPtrOutput `pulumi:"isRecursive"`
	IsSecure    pulumi.StringPtrOutput `pulumi:"isSecure"`
	IsTemporary pulumi.StringPtrOutput `pulumi:"isTemporary"`
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the row access policy to set on a view.
	RowAccessPolicy ViewRowAccessPolicyPtrOutput `pulumi:"rowAccessPolicy"`
	// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW VIEW` for the given view.
	ShowOutputs ViewShowOutputArrayOutput `pulumi:"showOutputs"`
	// Specifies the query used to create the view.
	Statement pulumi.StringOutput `pulumi:"statement"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Statement == nil {
		return nil, errors.New("invalid value for required argument 'Statement'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("snowflake:index/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("snowflake:index/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy *ViewAggregationPolicy `pulumi:"aggregationPolicy"`
	// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking *string `pulumi:"changeTracking"`
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Columns []ViewColumn `pulumi:"columns"`
	// Specifies a comment for the view.
	Comment *string `pulumi:"comment"`
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants *bool `pulumi:"copyGrants"`
	// Data metric functions used for the view.
	DataMetricFunctions []ViewDataMetricFunction `pulumi:"dataMetricFunctions"`
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule *ViewDataMetricSchedule `pulumi:"dataMetricSchedule"`
	// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE VIEW` for the given view.
	DescribeOutputs []ViewDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive *string `pulumi:"isRecursive"`
	IsSecure    *string `pulumi:"isSecure"`
	IsTemporary *string `pulumi:"isTemporary"`
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name *string `pulumi:"name"`
	// Specifies the row access policy to set on a view.
	RowAccessPolicy *ViewRowAccessPolicy `pulumi:"rowAccessPolicy"`
	// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW VIEW` for the given view.
	ShowOutputs []ViewShowOutput `pulumi:"showOutputs"`
	// Specifies the query used to create the view.
	Statement *string `pulumi:"statement"`
}

type ViewState struct {
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy ViewAggregationPolicyPtrInput
	// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking pulumi.StringPtrInput
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Columns ViewColumnArrayInput
	// Specifies a comment for the view.
	Comment pulumi.StringPtrInput
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants pulumi.BoolPtrInput
	// Data metric functions used for the view.
	DataMetricFunctions ViewDataMetricFunctionArrayInput
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule ViewDataMetricSchedulePtrInput
	// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE VIEW` for the given view.
	DescribeOutputs ViewDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive pulumi.StringPtrInput
	IsSecure    pulumi.StringPtrInput
	IsTemporary pulumi.StringPtrInput
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name pulumi.StringPtrInput
	// Specifies the row access policy to set on a view.
	RowAccessPolicy ViewRowAccessPolicyPtrInput
	// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW VIEW` for the given view.
	ShowOutputs ViewShowOutputArrayInput
	// Specifies the query used to create the view.
	Statement pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy *ViewAggregationPolicy `pulumi:"aggregationPolicy"`
	// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking *string `pulumi:"changeTracking"`
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Columns []ViewColumn `pulumi:"columns"`
	// Specifies a comment for the view.
	Comment *string `pulumi:"comment"`
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants *bool `pulumi:"copyGrants"`
	// Data metric functions used for the view.
	DataMetricFunctions []ViewDataMetricFunction `pulumi:"dataMetricFunctions"`
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule *ViewDataMetricSchedule `pulumi:"dataMetricSchedule"`
	// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database string `pulumi:"database"`
	// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive *string `pulumi:"isRecursive"`
	IsSecure    *string `pulumi:"isSecure"`
	IsTemporary *string `pulumi:"isTemporary"`
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name *string `pulumi:"name"`
	// Specifies the row access policy to set on a view.
	RowAccessPolicy *ViewRowAccessPolicy `pulumi:"rowAccessPolicy"`
	// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema string `pulumi:"schema"`
	// Specifies the query used to create the view.
	Statement string `pulumi:"statement"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy ViewAggregationPolicyPtrInput
	// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking pulumi.StringPtrInput
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Columns ViewColumnArrayInput
	// Specifies a comment for the view.
	Comment pulumi.StringPtrInput
	// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
	CopyGrants pulumi.BoolPtrInput
	// Data metric functions used for the view.
	DataMetricFunctions ViewDataMetricFunctionArrayInput
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule ViewDataMetricSchedulePtrInput
	// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Database pulumi.StringInput
	// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive pulumi.StringPtrInput
	IsSecure    pulumi.StringPtrInput
	IsTemporary pulumi.StringPtrInput
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Name pulumi.StringPtrInput
	// Specifies the row access policy to set on a view.
	RowAccessPolicy ViewRowAccessPolicyPtrInput
	// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
	Schema pulumi.StringInput
	// Specifies the query used to create the view.
	Statement pulumi.StringInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// Specifies the aggregation policy to set on a view.
func (o ViewOutput) AggregationPolicy() ViewAggregationPolicyPtrOutput {
	return o.ApplyT(func(v *View) ViewAggregationPolicyPtrOutput { return v.AggregationPolicy }).(ViewAggregationPolicyPtrOutput)
}

// Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ViewOutput) ChangeTracking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.ChangeTracking }).(pulumi.StringPtrOutput)
}

// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
func (o ViewOutput) Columns() ViewColumnArrayOutput {
	return o.ApplyT(func(v *View) ViewColumnArrayOutput { return v.Columns }).(ViewColumnArrayOutput)
}

// Specifies a comment for the view.
func (o ViewOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.
func (o ViewOutput) CopyGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *View) pulumi.BoolPtrOutput { return v.CopyGrants }).(pulumi.BoolPtrOutput)
}

// Data metric functions used for the view.
func (o ViewOutput) DataMetricFunctions() ViewDataMetricFunctionArrayOutput {
	return o.ApplyT(func(v *View) ViewDataMetricFunctionArrayOutput { return v.DataMetricFunctions }).(ViewDataMetricFunctionArrayOutput)
}

// Specifies the schedule to run the data metric functions periodically.
func (o ViewOutput) DataMetricSchedule() ViewDataMetricSchedulePtrOutput {
	return o.ApplyT(func(v *View) ViewDataMetricSchedulePtrOutput { return v.DataMetricSchedule }).(ViewDataMetricSchedulePtrOutput)
}

// The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o ViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE VIEW` for the given view.
func (o ViewOutput) DescribeOutputs() ViewDescribeOutputArrayOutput {
	return o.ApplyT(func(v *View) ViewDescribeOutputArrayOutput { return v.DescribeOutputs }).(ViewDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ViewOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ViewOutput) IsRecursive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.IsRecursive }).(pulumi.StringPtrOutput)
}

func (o ViewOutput) IsSecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.IsSecure }).(pulumi.StringPtrOutput)
}

func (o ViewOutput) IsTemporary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.IsTemporary }).(pulumi.StringPtrOutput)
}

// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the row access policy to set on a view.
func (o ViewOutput) RowAccessPolicy() ViewRowAccessPolicyPtrOutput {
	return o.ApplyT(func(v *View) ViewRowAccessPolicyPtrOutput { return v.RowAccessPolicy }).(ViewRowAccessPolicyPtrOutput)
}

// The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `(`, `)`, `"`
func (o ViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW VIEW` for the given view.
func (o ViewOutput) ShowOutputs() ViewShowOutputArrayOutput {
	return o.ApplyT(func(v *View) ViewShowOutputArrayOutput { return v.ShowOutputs }).(ViewShowOutputArrayOutput)
}

// Specifies the query used to create the view.
func (o ViewOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Statement }).(pulumi.StringOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
