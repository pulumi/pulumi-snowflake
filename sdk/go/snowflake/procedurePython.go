// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/procedurePython:ProcedurePython example '"<database_name>"."<schema_name>"."<function_name>"(varchar, varchar, varchar)'
// ```
//
// Note: Snowflake is not returning all information needed to populate the state correctly after import (e.g. data types with attributes like NUMBER(32, 10) are returned as NUMBER, default values for arguments are not returned at all).
//
// Also, `ALTER` for functions is very limited so most of the attributes on this resource are marked as force new. Because of that, in multiple situations plan won't be empty after importing and manual state operations may be required.
type ProcedurePython struct {
	pulumi.CustomResourceState

	// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedurePythonArgumentArrayOutput `pulumi:"arguments"`
	// (Default: `user-defined procedure`) Specifies a comment for the procedure.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrOutput `pulumi:"executeAs"`
	// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayOutput `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedurePythonImportArrayOutput `pulumi:"imports"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrOutput `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringOutput `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrOutput `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters ProcedurePythonParameterArrayOutput `pulumi:"parameters"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrOutput `pulumi:"procedureDefinition"`
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage pulumi.StringOutput `pulumi:"procedureLanguage"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringOutput `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
	Secrets ProcedurePythonSecretArrayOutput `pulumi:"secrets"`
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs ProcedurePythonShowOutputArrayOutput `pulumi:"showOutputs"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringOutput `pulumi:"snowparkPackage"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
}

// NewProcedurePython registers a new resource with the given unique name, arguments, and options.
func NewProcedurePython(ctx *pulumi.Context,
	name string, args *ProcedurePythonArgs, opts ...pulumi.ResourceOption) (*ProcedurePython, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.ReturnType == nil {
		return nil, errors.New("invalid value for required argument 'ReturnType'")
	}
	if args.RuntimeVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeVersion'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.SnowparkPackage == nil {
		return nil, errors.New("invalid value for required argument 'SnowparkPackage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcedurePython
	err := ctx.RegisterResource("snowflake:index/procedurePython:ProcedurePython", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcedurePython gets an existing ProcedurePython resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcedurePython(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcedurePythonState, opts ...pulumi.ResourceOption) (*ProcedurePython, error) {
	var resource ProcedurePython
	err := ctx.ReadResource("snowflake:index/procedurePython:ProcedurePython", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcedurePython resources.
type procedurePythonState struct {
	// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments []ProcedurePythonArgument `pulumi:"arguments"`
	// (Default: `user-defined procedure`) Specifies a comment for the procedure.
	Comment *string `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs *string `pulumi:"executeAs"`
	// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
	Handler *string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports []ProcedurePythonImport `pulumi:"imports"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure *string `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages []string `pulumi:"packages"`
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters []ProcedurePythonParameter `pulumi:"parameters"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	ProcedureDefinition *string `pulumi:"procedureDefinition"`
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage *string `pulumi:"procedureLanguage"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType *string `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
	Secrets []ProcedurePythonSecret `pulumi:"secrets"`
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs []ProcedurePythonShowOutput `pulumi:"showOutputs"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage *string `pulumi:"snowparkPackage"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

type ProcedurePythonState struct {
	// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedurePythonArgumentArrayInput
	// (Default: `user-defined procedure`) Specifies a comment for the procedure.
	Comment pulumi.StringPtrInput
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrInput
	// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
	Handler pulumi.StringPtrInput
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedurePythonImportArrayInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrInput
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayInput
	// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
	Parameters ProcedurePythonParameterArrayInput
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrInput
	// Specifies language for the procedure. Used to detect external changes.
	ProcedureLanguage pulumi.StringPtrInput
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringPtrInput
	// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
	RuntimeVersion pulumi.StringPtrInput
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
	Secrets ProcedurePythonSecretArrayInput
	// Outputs the result of `SHOW PROCEDURE` for the given procedure.
	ShowOutputs ProcedurePythonShowOutputArrayInput
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringPtrInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (ProcedurePythonState) ElementType() reflect.Type {
	return reflect.TypeOf((*procedurePythonState)(nil)).Elem()
}

type procedurePythonArgs struct {
	// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments []ProcedurePythonArgument `pulumi:"arguments"`
	// (Default: `user-defined procedure`) Specifies a comment for the procedure.
	Comment *string `pulumi:"comment"`
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs *string `pulumi:"executeAs"`
	// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations []string `pulumi:"externalAccessIntegrations"`
	// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
	Handler string `pulumi:"handler"`
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports []ProcedurePythonImport `pulumi:"imports"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure *string `pulumi:"isSecure"`
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel *string `pulumi:"metricLevel"`
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior *string `pulumi:"nullInputBehavior"`
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages []string `pulumi:"packages"`
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	ProcedureDefinition *string `pulumi:"procedureDefinition"`
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType string `pulumi:"returnType"`
	// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
	Secrets []ProcedurePythonSecret `pulumi:"secrets"`
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage string `pulumi:"snowparkPackage"`
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
}

// The set of arguments for constructing a ProcedurePython resource.
type ProcedurePythonArgs struct {
	// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
	Arguments ProcedurePythonArgumentArrayInput
	// (Default: `user-defined procedure`) Specifies a comment for the procedure.
	Comment pulumi.StringPtrInput
	// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
	EnableConsoleOutput pulumi.BoolPtrInput
	// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
	ExecuteAs pulumi.StringPtrInput
	// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
	ExternalAccessIntegrations pulumi.StringArrayInput
	// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
	Handler pulumi.StringInput
	// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
	Imports ProcedurePythonImportArrayInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure pulumi.StringPtrInput
	// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
	MetricLevel pulumi.StringPtrInput
	// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
	NullInputBehavior pulumi.StringPtrInput
	// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	Packages pulumi.StringArrayInput
	// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	ProcedureDefinition pulumi.StringPtrInput
	// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
	ReturnType pulumi.StringInput
	// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
	RuntimeVersion pulumi.StringInput
	// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
	Secrets ProcedurePythonSecretArrayInput
	// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
	SnowparkPackage pulumi.StringInput
	// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
}

func (ProcedurePythonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*procedurePythonArgs)(nil)).Elem()
}

type ProcedurePythonInput interface {
	pulumi.Input

	ToProcedurePythonOutput() ProcedurePythonOutput
	ToProcedurePythonOutputWithContext(ctx context.Context) ProcedurePythonOutput
}

func (*ProcedurePython) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedurePython)(nil)).Elem()
}

func (i *ProcedurePython) ToProcedurePythonOutput() ProcedurePythonOutput {
	return i.ToProcedurePythonOutputWithContext(context.Background())
}

func (i *ProcedurePython) ToProcedurePythonOutputWithContext(ctx context.Context) ProcedurePythonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedurePythonOutput)
}

// ProcedurePythonArrayInput is an input type that accepts ProcedurePythonArray and ProcedurePythonArrayOutput values.
// You can construct a concrete instance of `ProcedurePythonArrayInput` via:
//
//	ProcedurePythonArray{ ProcedurePythonArgs{...} }
type ProcedurePythonArrayInput interface {
	pulumi.Input

	ToProcedurePythonArrayOutput() ProcedurePythonArrayOutput
	ToProcedurePythonArrayOutputWithContext(context.Context) ProcedurePythonArrayOutput
}

type ProcedurePythonArray []ProcedurePythonInput

func (ProcedurePythonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedurePython)(nil)).Elem()
}

func (i ProcedurePythonArray) ToProcedurePythonArrayOutput() ProcedurePythonArrayOutput {
	return i.ToProcedurePythonArrayOutputWithContext(context.Background())
}

func (i ProcedurePythonArray) ToProcedurePythonArrayOutputWithContext(ctx context.Context) ProcedurePythonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedurePythonArrayOutput)
}

// ProcedurePythonMapInput is an input type that accepts ProcedurePythonMap and ProcedurePythonMapOutput values.
// You can construct a concrete instance of `ProcedurePythonMapInput` via:
//
//	ProcedurePythonMap{ "key": ProcedurePythonArgs{...} }
type ProcedurePythonMapInput interface {
	pulumi.Input

	ToProcedurePythonMapOutput() ProcedurePythonMapOutput
	ToProcedurePythonMapOutputWithContext(context.Context) ProcedurePythonMapOutput
}

type ProcedurePythonMap map[string]ProcedurePythonInput

func (ProcedurePythonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedurePython)(nil)).Elem()
}

func (i ProcedurePythonMap) ToProcedurePythonMapOutput() ProcedurePythonMapOutput {
	return i.ToProcedurePythonMapOutputWithContext(context.Background())
}

func (i ProcedurePythonMap) ToProcedurePythonMapOutputWithContext(ctx context.Context) ProcedurePythonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedurePythonMapOutput)
}

type ProcedurePythonOutput struct{ *pulumi.OutputState }

func (ProcedurePythonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedurePython)(nil)).Elem()
}

func (o ProcedurePythonOutput) ToProcedurePythonOutput() ProcedurePythonOutput {
	return o
}

func (o ProcedurePythonOutput) ToProcedurePythonOutputWithContext(ctx context.Context) ProcedurePythonOutput {
	return o
}

// List of the arguments for the procedure. Consult the [docs](https://docs.snowflake.com/en/sql-reference/sql/create-procedure#all-languages) for more details.
func (o ProcedurePythonOutput) Arguments() ProcedurePythonArgumentArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) ProcedurePythonArgumentArrayOutput { return v.Arguments }).(ProcedurePythonArgumentArrayOutput)
}

// (Default: `user-defined procedure`) Specifies a comment for the procedure.
func (o ProcedurePythonOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ProcedurePythonOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG*LEVEL). For more information, check *CONSOLE_OUTPUT docs[ENABLE](https://docs.snowflake.com/en/sql-reference/parameters#enable-console-output).
func (o ProcedurePythonOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// Specifies whether the stored procedure executes with the privileges of the owner (an “owner’s rights” stored procedure) or with the privileges of the caller (a “caller’s rights” stored procedure). If you execute the statement CREATE PROCEDURE … EXECUTE AS CALLER, then in the future the procedure will execute as a caller’s rights procedure. If you execute CREATE PROCEDURE … EXECUTE AS OWNER, then the procedure will execute as an owner’s rights procedure. For more information, see [Understanding caller’s rights and owner’s rights stored procedures](https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-rights). Valid values are (case-insensitive): `CALLER` | `OWNER`.
func (o ProcedurePythonOutput) ExecuteAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringPtrOutput { return v.ExecuteAs }).(pulumi.StringPtrOutput)
}

// The names of [external access integrations](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) needed in order for this procedure’s handler code to access external networks. An external access integration specifies [network rules](https://docs.snowflake.com/en/sql-reference/sql/create-network-rule) and [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) that specify external locations and credentials (if any) allowed for use by handler code when making requests of an external network, such as an external REST API.
func (o ProcedurePythonOutput) ExternalAccessIntegrations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringArrayOutput { return v.ExternalAccessIntegrations }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ProcedurePythonOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Use the name of the stored procedure’s function or method. This can differ depending on whether the code is in-line or referenced at a stage. When the code is in-line, you can specify just the function name. When the code is imported from a stage, specify the fully-qualified handler function name as `<module_name>.<function_name>`.
func (o ProcedurePythonOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that your stored procedure depends on. If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside the stored procedure or resource files. If your stored procedure’s code will be on a stage, you must also include a path to the module file your code is in. The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure. Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.
func (o ProcedurePythonOutput) Imports() ProcedurePythonImportArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) ProcedurePythonImportArrayOutput { return v.Imports }).(ProcedurePythonImportArrayOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the procedure is secure. For more information about secure procedures, see [Protecting Sensitive Information with Secure UDFs and Stored Procedures](https://docs.snowflake.com/en/developer-guide/secure-udf-procedure). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ProcedurePythonOutput) IsSecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringPtrOutput { return v.IsSecure }).(pulumi.StringPtrOutput)
}

// LOG*LEVEL to use when filtering events For more information, check [LOG*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
func (o ProcedurePythonOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// METRIC*LEVEL value to control whether to emit metrics to Event Table For more information, check [METRIC*LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#metric-level).
func (o ProcedurePythonOutput) MetricLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.MetricLevel }).(pulumi.StringOutput)
}

// The name of the procedure; the identifier does not need to be unique for the schema in which the procedure is created because stored procedures are [identified and resolved by the combination of the name and argument types](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions.html#label-procedure-function-name-overloading). Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ProcedurePythonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the behavior of the procedure when called with null inputs. Valid values are (case-insensitive): `CALLED ON NULL INPUT` | `RETURNS NULL ON NULL INPUT`.
func (o ProcedurePythonOutput) NullInputBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringPtrOutput { return v.NullInputBehavior }).(pulumi.StringPtrOutput)
}

// List of the names of packages deployed in Snowflake that should be included in the handler code’s execution environment. The Snowpark package is required for stored procedures, but is specified in the `snowparkPackage` attribute. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
func (o ProcedurePythonOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// Outputs the result of `SHOW PARAMETERS IN PROCEDURE` for the given procedure.
func (o ProcedurePythonOutput) Parameters() ProcedurePythonParameterArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) ProcedurePythonParameterArrayOutput { return v.Parameters }).(ProcedurePythonParameterArrayOutput)
}

// Defines the code executed by the stored procedure. The definition can consist of any valid code. Wrapping `$$` signs are added by the provider automatically; do not include them. The `procedureDefinition` value must be Python source code. For more information, see [Python (using Snowpark)](https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-overview). To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
func (o ProcedurePythonOutput) ProcedureDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringPtrOutput { return v.ProcedureDefinition }).(pulumi.StringPtrOutput)
}

// Specifies language for the procedure. Used to detect external changes.
func (o ProcedurePythonOutput) ProcedureLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.ProcedureLanguage }).(pulumi.StringOutput)
}

// Specifies the type of the result returned by the stored procedure. For `<result_data_type>`, use the Snowflake data type that corresponds to the type of the language that you are using (see [SQL-Python Data Type Mappings](https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-data-type-mapping.html#label-sql-python-data-type-mappings)). For `RETURNS TABLE ( [ colName col_data_type [ , ... ] ] )`, if you know the Snowflake data types of the columns in the returned table, specify the column names and types. Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types (i.e. `TABLE ()`).
func (o ProcedurePythonOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.ReturnType }).(pulumi.StringOutput)
}

// The language runtime version to use. Currently, the supported versions are: 3.9, 3.10, and 3.11.
func (o ProcedurePythonOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The schema in which to create the procedure. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ProcedurePythonOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Assigns the names of [secrets](https://docs.snowflake.com/en/sql-reference/sql/create-secret) to variables so that you can use the variables to reference the secrets when retrieving information from secrets in handler code. Secrets you specify here must be allowed by the [external access integration](https://docs.snowflake.com/en/sql-reference/sql/create-external-access-integration) specified as a value of this CREATE FUNCTION command’s EXTERNAL*ACCESS*INTEGRATIONS parameter.
func (o ProcedurePythonOutput) Secrets() ProcedurePythonSecretArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) ProcedurePythonSecretArrayOutput { return v.Secrets }).(ProcedurePythonSecretArrayOutput)
}

// Outputs the result of `SHOW PROCEDURE` for the given procedure.
func (o ProcedurePythonOutput) ShowOutputs() ProcedurePythonShowOutputArrayOutput {
	return o.ApplyT(func(v *ProcedurePython) ProcedurePythonShowOutputArrayOutput { return v.ShowOutputs }).(ProcedurePythonShowOutputArrayOutput)
}

// The Snowpark package is required for stored procedures, so it must always be present. For more information about Snowpark, see [Snowpark API](https://docs.snowflake.com/en/developer-guide/snowpark/index).
func (o ProcedurePythonOutput) SnowparkPackage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.SnowparkPackage }).(pulumi.StringOutput)
}

// Trace level value to use when generating/filtering trace events For more information, check [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
func (o ProcedurePythonOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedurePython) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

type ProcedurePythonArrayOutput struct{ *pulumi.OutputState }

func (ProcedurePythonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedurePython)(nil)).Elem()
}

func (o ProcedurePythonArrayOutput) ToProcedurePythonArrayOutput() ProcedurePythonArrayOutput {
	return o
}

func (o ProcedurePythonArrayOutput) ToProcedurePythonArrayOutputWithContext(ctx context.Context) ProcedurePythonArrayOutput {
	return o
}

func (o ProcedurePythonArrayOutput) Index(i pulumi.IntInput) ProcedurePythonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcedurePython {
		return vs[0].([]*ProcedurePython)[vs[1].(int)]
	}).(ProcedurePythonOutput)
}

type ProcedurePythonMapOutput struct{ *pulumi.OutputState }

func (ProcedurePythonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedurePython)(nil)).Elem()
}

func (o ProcedurePythonMapOutput) ToProcedurePythonMapOutput() ProcedurePythonMapOutput {
	return o
}

func (o ProcedurePythonMapOutput) ToProcedurePythonMapOutputWithContext(ctx context.Context) ProcedurePythonMapOutput {
	return o
}

func (o ProcedurePythonMapOutput) MapIndex(k pulumi.StringInput) ProcedurePythonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcedurePython {
		return vs[0].(map[string]*ProcedurePython)[vs[1].(string)]
	}).(ProcedurePythonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedurePythonInput)(nil)).Elem(), &ProcedurePython{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedurePythonArrayInput)(nil)).Elem(), ProcedurePythonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedurePythonMapInput)(nil)).Elem(), ProcedurePythonMap{})
	pulumi.RegisterOutputType(ProcedurePythonOutput{})
	pulumi.RegisterOutputType(ProcedurePythonArrayOutput{})
	pulumi.RegisterOutputType(ProcedurePythonMapOutput{})
}
