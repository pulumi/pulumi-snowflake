// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **V1 release candidate** This resource was reworked and is a release candidate for the V1. We do not expect significant changes in it before the V1. We will welcome any feedback and adjust the resource if needed. Any errors reported will be resolved with a higher priority. We encourage checking this resource out before the V1 release. Please follow the migration guide to use it.
//
// A shared database creates a database from a share provided by another Snowflake account. For more information about shares, see [Introduction to Secure Data Sharing](https://docs.snowflake.com/en/user-guide/data-sharing-intro).
//
// ## Import
//
// ```sh
// $ pulumi import snowflake:index/sharedDatabase:SharedDatabase example 'shared_database_name'
// ```
type SharedDatabase struct {
	pulumi.CustomResourceState

	// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
	Catalog pulumi.StringOutput `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringOutput `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolOutput `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
	ExternalVolume pulumi.StringOutput `pulumi:"externalVolume"`
	// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
	FromShare pulumi.StringOutput `pulumi:"fromShare"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringOutput `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolOutput `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
	ReplaceInvalidCharacters pulumi.BoolOutput `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
	StorageSerializationPolicy pulumi.StringOutput `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntOutput `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntOutput `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringOutput `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntOutput `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntOutput `pulumi:"userTaskTimeoutMs"`
}

// NewSharedDatabase registers a new resource with the given unique name, arguments, and options.
func NewSharedDatabase(ctx *pulumi.Context,
	name string, args *SharedDatabaseArgs, opts ...pulumi.ResourceOption) (*SharedDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FromShare == nil {
		return nil, errors.New("invalid value for required argument 'FromShare'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedDatabase
	err := ctx.RegisterResource("snowflake:index/sharedDatabase:SharedDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedDatabase gets an existing SharedDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedDatabaseState, opts ...pulumi.ResourceOption) (*SharedDatabase, error) {
	var resource SharedDatabase
	err := ctx.ReadResource("snowflake:index/sharedDatabase:SharedDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedDatabase resources.
type sharedDatabaseState struct {
	// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
	Catalog *string `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation *string `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
	ExternalVolume *string `pulumi:"externalVolume"`
	// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
	FromShare *string `pulumi:"fromShare"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Specifies the identifier for the database; must be unique for your account.
	Name *string `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
	StorageSerializationPolicy *string `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
}

type SharedDatabaseState struct {
	// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
	Catalog pulumi.StringPtrInput
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringPtrInput
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolPtrInput
	// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
	ExternalVolume pulumi.StringPtrInput
	// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
	FromShare pulumi.StringPtrInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringPtrInput
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringPtrInput
	// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
	StorageSerializationPolicy pulumi.StringPtrInput
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringPtrInput
	// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntPtrInput
}

func (SharedDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDatabaseState)(nil)).Elem()
}

type sharedDatabaseArgs struct {
	// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
	Catalog *string `pulumi:"catalog"`
	// Specifies a comment for the database.
	Comment *string `pulumi:"comment"`
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation *string `pulumi:"defaultDdlCollation"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput *bool `pulumi:"enableConsoleOutput"`
	// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
	ExternalVolume *string `pulumi:"externalVolume"`
	// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
	FromShare string `pulumi:"fromShare"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Specifies the identifier for the database; must be unique for your account.
	Name *string `pulumi:"name"`
	// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
	ReplaceInvalidCharacters *bool `pulumi:"replaceInvalidCharacters"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
	StorageSerializationPolicy *string `pulumi:"storageSerializationPolicy"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
}

// The set of arguments for constructing a SharedDatabase resource.
type SharedDatabaseArgs struct {
	// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
	Catalog pulumi.StringPtrInput
	// Specifies a comment for the database.
	Comment pulumi.StringPtrInput
	// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
	DefaultDdlCollation pulumi.StringPtrInput
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	EnableConsoleOutput pulumi.BoolPtrInput
	// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
	ExternalVolume pulumi.StringPtrInput
	// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
	FromShare pulumi.StringInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
	LogLevel pulumi.StringPtrInput
	// Specifies the identifier for the database; must be unique for your account.
	Name pulumi.StringPtrInput
	// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
	ReplaceInvalidCharacters pulumi.BoolPtrInput
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
	StorageSerializationPolicy pulumi.StringPtrInput
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
	TraceLevel pulumi.StringPtrInput
	// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds.
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntPtrInput
}

func (SharedDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDatabaseArgs)(nil)).Elem()
}

type SharedDatabaseInput interface {
	pulumi.Input

	ToSharedDatabaseOutput() SharedDatabaseOutput
	ToSharedDatabaseOutputWithContext(ctx context.Context) SharedDatabaseOutput
}

func (*SharedDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDatabase)(nil)).Elem()
}

func (i *SharedDatabase) ToSharedDatabaseOutput() SharedDatabaseOutput {
	return i.ToSharedDatabaseOutputWithContext(context.Background())
}

func (i *SharedDatabase) ToSharedDatabaseOutputWithContext(ctx context.Context) SharedDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDatabaseOutput)
}

// SharedDatabaseArrayInput is an input type that accepts SharedDatabaseArray and SharedDatabaseArrayOutput values.
// You can construct a concrete instance of `SharedDatabaseArrayInput` via:
//
//	SharedDatabaseArray{ SharedDatabaseArgs{...} }
type SharedDatabaseArrayInput interface {
	pulumi.Input

	ToSharedDatabaseArrayOutput() SharedDatabaseArrayOutput
	ToSharedDatabaseArrayOutputWithContext(context.Context) SharedDatabaseArrayOutput
}

type SharedDatabaseArray []SharedDatabaseInput

func (SharedDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDatabase)(nil)).Elem()
}

func (i SharedDatabaseArray) ToSharedDatabaseArrayOutput() SharedDatabaseArrayOutput {
	return i.ToSharedDatabaseArrayOutputWithContext(context.Background())
}

func (i SharedDatabaseArray) ToSharedDatabaseArrayOutputWithContext(ctx context.Context) SharedDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDatabaseArrayOutput)
}

// SharedDatabaseMapInput is an input type that accepts SharedDatabaseMap and SharedDatabaseMapOutput values.
// You can construct a concrete instance of `SharedDatabaseMapInput` via:
//
//	SharedDatabaseMap{ "key": SharedDatabaseArgs{...} }
type SharedDatabaseMapInput interface {
	pulumi.Input

	ToSharedDatabaseMapOutput() SharedDatabaseMapOutput
	ToSharedDatabaseMapOutputWithContext(context.Context) SharedDatabaseMapOutput
}

type SharedDatabaseMap map[string]SharedDatabaseInput

func (SharedDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDatabase)(nil)).Elem()
}

func (i SharedDatabaseMap) ToSharedDatabaseMapOutput() SharedDatabaseMapOutput {
	return i.ToSharedDatabaseMapOutputWithContext(context.Background())
}

func (i SharedDatabaseMap) ToSharedDatabaseMapOutputWithContext(ctx context.Context) SharedDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDatabaseMapOutput)
}

type SharedDatabaseOutput struct{ *pulumi.OutputState }

func (SharedDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDatabase)(nil)).Elem()
}

func (o SharedDatabaseOutput) ToSharedDatabaseOutput() SharedDatabaseOutput {
	return o
}

func (o SharedDatabaseOutput) ToSharedDatabaseOutputWithContext(ctx context.Context) SharedDatabaseOutput {
	return o
}

// The database parameter that specifies the default catalog to use for Iceberg tables. For more information, see [CATALOG](https://docs.snowflake.com/en/sql-reference/parameters#catalog).
func (o SharedDatabaseOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.Catalog }).(pulumi.StringOutput)
}

// Specifies a comment for the database.
func (o SharedDatabaseOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Specifies a default collation specification for all schemas and tables added to the database. It can be overridden on schema or table level. For more information, see [collation specification](https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification).
func (o SharedDatabaseOutput) DefaultDdlCollation() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.DefaultDdlCollation }).(pulumi.StringOutput)
}

// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
func (o SharedDatabaseOutput) EnableConsoleOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.BoolOutput { return v.EnableConsoleOutput }).(pulumi.BoolOutput)
}

// The database parameter that specifies the default external volume to use for Iceberg tables. For more information, see [EXTERNAL_VOLUME](https://docs.snowflake.com/en/sql-reference/parameters#external-volume).
func (o SharedDatabaseOutput) ExternalVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.ExternalVolume }).(pulumi.StringOutput)
}

// A fully qualified path to a share from which the database will be created. A fully qualified path follows the format of `"<organization_name>"."<account_name>"."<share_name>"`.
func (o SharedDatabaseOutput) FromShare() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.FromShare }).(pulumi.StringOutput)
}

// Specifies the severity level of messages that should be ingested and made available in the active event table. Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested. For more information, see [LOG_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level).
func (o SharedDatabaseOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// Specifies the identifier for the database; must be unique for your account.
func (o SharedDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If true, the case of quoted identifiers is ignored. For more information, see [QUOTED*IDENTIFIERS*IGNORE_CASE](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
func (o SharedDatabaseOutput) QuotedIdentifiersIgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.BoolOutput { return v.QuotedIdentifiersIgnoreCase }).(pulumi.BoolOutput)
}

// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�) in query results for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog. For more information, see [REPLACE*INVALID*CHARACTERS](https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters).
func (o SharedDatabaseOutput) ReplaceInvalidCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.BoolOutput { return v.ReplaceInvalidCharacters }).(pulumi.BoolOutput)
}

// The storage serialization policy for Iceberg tables that use Snowflake as the catalog. Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and compression of data files that ensures the best table performance within Snowflake. For more information, see [STORAGE*SERIALIZATION*POLICY](https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy).
func (o SharedDatabaseOutput) StorageSerializationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.StorageSerializationPolicy }).(pulumi.StringOutput)
}

// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending. For more information, see [SUSPEND*TASK*AFTER*NUM*FAILURES](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
func (o SharedDatabaseOutput) SuspendTaskAfterNumFailures() pulumi.IntOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.IntOutput { return v.SuspendTaskAfterNumFailures }).(pulumi.IntOutput)
}

// Maximum automatic retries allowed for a user task. For more information, see [TASK*AUTO*RETRY_ATTEMPTS](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
func (o SharedDatabaseOutput) TaskAutoRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.IntOutput { return v.TaskAutoRetryAttempts }).(pulumi.IntOutput)
}

// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]. For information about levels, see [TRACE*LEVEL](https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level).
func (o SharedDatabaseOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

// The initial size of warehouse to use for managed warehouses in the absence of history. For more information, see [USER*TASK*MANAGED*INITIAL*WAREHOUSE_SIZE](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
func (o SharedDatabaseOutput) UserTaskManagedInitialWarehouseSize() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.StringOutput { return v.UserTaskManagedInitialWarehouseSize }).(pulumi.StringOutput)
}

// Minimum amount of time between Triggered Task executions in seconds.
func (o SharedDatabaseOutput) UserTaskMinimumTriggerIntervalInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.IntOutput { return v.UserTaskMinimumTriggerIntervalInSeconds }).(pulumi.IntOutput)
}

// User task execution timeout in milliseconds. For more information, see [USER*TASK*TIMEOUT_MS](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
func (o SharedDatabaseOutput) UserTaskTimeoutMs() pulumi.IntOutput {
	return o.ApplyT(func(v *SharedDatabase) pulumi.IntOutput { return v.UserTaskTimeoutMs }).(pulumi.IntOutput)
}

type SharedDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SharedDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDatabase)(nil)).Elem()
}

func (o SharedDatabaseArrayOutput) ToSharedDatabaseArrayOutput() SharedDatabaseArrayOutput {
	return o
}

func (o SharedDatabaseArrayOutput) ToSharedDatabaseArrayOutputWithContext(ctx context.Context) SharedDatabaseArrayOutput {
	return o
}

func (o SharedDatabaseArrayOutput) Index(i pulumi.IntInput) SharedDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedDatabase {
		return vs[0].([]*SharedDatabase)[vs[1].(int)]
	}).(SharedDatabaseOutput)
}

type SharedDatabaseMapOutput struct{ *pulumi.OutputState }

func (SharedDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDatabase)(nil)).Elem()
}

func (o SharedDatabaseMapOutput) ToSharedDatabaseMapOutput() SharedDatabaseMapOutput {
	return o
}

func (o SharedDatabaseMapOutput) ToSharedDatabaseMapOutputWithContext(ctx context.Context) SharedDatabaseMapOutput {
	return o
}

func (o SharedDatabaseMapOutput) MapIndex(k pulumi.StringInput) SharedDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedDatabase {
		return vs[0].(map[string]*SharedDatabase)[vs[1].(string)]
	}).(SharedDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDatabaseInput)(nil)).Elem(), &SharedDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDatabaseArrayInput)(nil)).Elem(), SharedDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDatabaseMapInput)(nil)).Elem(), SharedDatabaseMap{})
	pulumi.RegisterOutputType(SharedDatabaseOutput{})
	pulumi.RegisterOutputType(SharedDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SharedDatabaseMapOutput{})
}
