// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/computePool:ComputePool example '"<compute_pool_name>"'
// ```
type ComputePool struct {
	pulumi.CustomResourceState

	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume pulumi.StringPtrOutput `pulumi:"autoResume"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
	AutoSuspendSecs pulumi.IntPtrOutput `pulumi:"autoSuspendSecs"`
	// Specifies a comment for the compute pool.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
	DescribeOutputs ComputePoolDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Specifies the Snowflake Native App name.
	ForApplication pulumi.StringPtrOutput `pulumi:"forApplication"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
	InitiallySuspended pulumi.StringPtrOutput `pulumi:"initiallySuspended"`
	// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
	InstanceFamily pulumi.StringOutput `pulumi:"instanceFamily"`
	// Specifies the maximum number of nodes for the compute pool.
	MaxNodes pulumi.IntOutput `pulumi:"maxNodes"`
	// Specifies the minimum number of nodes for the compute pool.
	MinNodes pulumi.IntOutput `pulumi:"minNodes"`
	// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
	ShowOutputs ComputePoolShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewComputePool registers a new resource with the given unique name, arguments, and options.
func NewComputePool(ctx *pulumi.Context,
	name string, args *ComputePoolArgs, opts ...pulumi.ResourceOption) (*ComputePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceFamily == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFamily'")
	}
	if args.MaxNodes == nil {
		return nil, errors.New("invalid value for required argument 'MaxNodes'")
	}
	if args.MinNodes == nil {
		return nil, errors.New("invalid value for required argument 'MinNodes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputePool
	err := ctx.RegisterResource("snowflake:index/computePool:ComputePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputePool gets an existing ComputePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputePoolState, opts ...pulumi.ResourceOption) (*ComputePool, error) {
	var resource ComputePool
	err := ctx.ReadResource("snowflake:index/computePool:ComputePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputePool resources.
type computePoolState struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume *string `pulumi:"autoResume"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
	AutoSuspendSecs *int `pulumi:"autoSuspendSecs"`
	// Specifies a comment for the compute pool.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
	DescribeOutputs []ComputePoolDescribeOutput `pulumi:"describeOutputs"`
	// Specifies the Snowflake Native App name.
	ForApplication *string `pulumi:"forApplication"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
	InitiallySuspended *string `pulumi:"initiallySuspended"`
	// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
	InstanceFamily *string `pulumi:"instanceFamily"`
	// Specifies the maximum number of nodes for the compute pool.
	MaxNodes *int `pulumi:"maxNodes"`
	// Specifies the minimum number of nodes for the compute pool.
	MinNodes *int `pulumi:"minNodes"`
	// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
	ShowOutputs []ComputePoolShowOutput `pulumi:"showOutputs"`
}

type ComputePoolState struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
	AutoSuspendSecs pulumi.IntPtrInput
	// Specifies a comment for the compute pool.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
	DescribeOutputs ComputePoolDescribeOutputArrayInput
	// Specifies the Snowflake Native App name.
	ForApplication pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
	InitiallySuspended pulumi.StringPtrInput
	// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
	InstanceFamily pulumi.StringPtrInput
	// Specifies the maximum number of nodes for the compute pool.
	MaxNodes pulumi.IntPtrInput
	// Specifies the minimum number of nodes for the compute pool.
	MinNodes pulumi.IntPtrInput
	// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
	ShowOutputs ComputePoolShowOutputArrayInput
}

func (ComputePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*computePoolState)(nil)).Elem()
}

type computePoolArgs struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume *string `pulumi:"autoResume"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
	AutoSuspendSecs *int `pulumi:"autoSuspendSecs"`
	// Specifies a comment for the compute pool.
	Comment *string `pulumi:"comment"`
	// Specifies the Snowflake Native App name.
	ForApplication *string `pulumi:"forApplication"`
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
	InitiallySuspended *string `pulumi:"initiallySuspended"`
	// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
	InstanceFamily string `pulumi:"instanceFamily"`
	// Specifies the maximum number of nodes for the compute pool.
	MaxNodes int `pulumi:"maxNodes"`
	// Specifies the minimum number of nodes for the compute pool.
	MinNodes int `pulumi:"minNodes"`
	// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ComputePool resource.
type ComputePoolArgs struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
	AutoSuspendSecs pulumi.IntPtrInput
	// Specifies a comment for the compute pool.
	Comment pulumi.StringPtrInput
	// Specifies the Snowflake Native App name.
	ForApplication pulumi.StringPtrInput
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
	InitiallySuspended pulumi.StringPtrInput
	// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
	InstanceFamily pulumi.StringInput
	// Specifies the maximum number of nodes for the compute pool.
	MaxNodes pulumi.IntInput
	// Specifies the minimum number of nodes for the compute pool.
	MinNodes pulumi.IntInput
	// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
}

func (ComputePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computePoolArgs)(nil)).Elem()
}

type ComputePoolInput interface {
	pulumi.Input

	ToComputePoolOutput() ComputePoolOutput
	ToComputePoolOutputWithContext(ctx context.Context) ComputePoolOutput
}

func (*ComputePool) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputePool)(nil)).Elem()
}

func (i *ComputePool) ToComputePoolOutput() ComputePoolOutput {
	return i.ToComputePoolOutputWithContext(context.Background())
}

func (i *ComputePool) ToComputePoolOutputWithContext(ctx context.Context) ComputePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputePoolOutput)
}

// ComputePoolArrayInput is an input type that accepts ComputePoolArray and ComputePoolArrayOutput values.
// You can construct a concrete instance of `ComputePoolArrayInput` via:
//
//	ComputePoolArray{ ComputePoolArgs{...} }
type ComputePoolArrayInput interface {
	pulumi.Input

	ToComputePoolArrayOutput() ComputePoolArrayOutput
	ToComputePoolArrayOutputWithContext(context.Context) ComputePoolArrayOutput
}

type ComputePoolArray []ComputePoolInput

func (ComputePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputePool)(nil)).Elem()
}

func (i ComputePoolArray) ToComputePoolArrayOutput() ComputePoolArrayOutput {
	return i.ToComputePoolArrayOutputWithContext(context.Background())
}

func (i ComputePoolArray) ToComputePoolArrayOutputWithContext(ctx context.Context) ComputePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputePoolArrayOutput)
}

// ComputePoolMapInput is an input type that accepts ComputePoolMap and ComputePoolMapOutput values.
// You can construct a concrete instance of `ComputePoolMapInput` via:
//
//	ComputePoolMap{ "key": ComputePoolArgs{...} }
type ComputePoolMapInput interface {
	pulumi.Input

	ToComputePoolMapOutput() ComputePoolMapOutput
	ToComputePoolMapOutputWithContext(context.Context) ComputePoolMapOutput
}

type ComputePoolMap map[string]ComputePoolInput

func (ComputePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputePool)(nil)).Elem()
}

func (i ComputePoolMap) ToComputePoolMapOutput() ComputePoolMapOutput {
	return i.ToComputePoolMapOutputWithContext(context.Background())
}

func (i ComputePoolMap) ToComputePoolMapOutputWithContext(ctx context.Context) ComputePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputePoolMapOutput)
}

type ComputePoolOutput struct{ *pulumi.OutputState }

func (ComputePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputePool)(nil)).Elem()
}

func (o ComputePoolOutput) ToComputePoolOutput() ComputePoolOutput {
	return o
}

func (o ComputePoolOutput) ToComputePoolOutputWithContext(ctx context.Context) ComputePoolOutput {
	return o
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a compute pool when a service or job is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ComputePoolOutput) AutoResume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringPtrOutput { return v.AutoResume }).(pulumi.StringPtrOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Number of seconds of inactivity after which you want Snowflake to automatically suspend the compute pool.
func (o ComputePoolOutput) AutoSuspendSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.IntPtrOutput { return v.AutoSuspendSecs }).(pulumi.IntPtrOutput)
}

// Specifies a comment for the compute pool.
func (o ComputePoolOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE COMPUTE POOL` for the given compute pool.
func (o ComputePoolOutput) DescribeOutputs() ComputePoolDescribeOutputArrayOutput {
	return o.ApplyT(func(v *ComputePool) ComputePoolDescribeOutputArrayOutput { return v.DescribeOutputs }).(ComputePoolDescribeOutputArrayOutput)
}

// Specifies the Snowflake Native App name.
func (o ComputePoolOutput) ForApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringPtrOutput { return v.ForApplication }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ComputePoolOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the compute pool is created initially in the suspended state. This field is used only when creating a compute pool. Changes on this field are ignored after creation.
func (o ComputePoolOutput) InitiallySuspended() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringPtrOutput { return v.InitiallySuspended }).(pulumi.StringPtrOutput)
}

// Identifies the type of machine you want to provision for the nodes in the compute pool. Valid values are (case-insensitive): `CPU_X64_XS` | `CPU_X64_S` | `CPU_X64_M` | `CPU_X64_L` | `HIGHMEM_X64_S` | `HIGHMEM_X64_M` | `HIGHMEM_X64_L` | `HIGHMEM_X64_SL` | `GPU_NV_S` | `GPU_NV_M` | `GPU_NV_L` | `GPU_NV_XS` | `GPU_NV_SM` | `GPU_NV_2M` | `GPU_NV_3M` | `GPU_NV_SL`.
func (o ComputePoolOutput) InstanceFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringOutput { return v.InstanceFamily }).(pulumi.StringOutput)
}

// Specifies the maximum number of nodes for the compute pool.
func (o ComputePoolOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.IntOutput { return v.MaxNodes }).(pulumi.IntOutput)
}

// Specifies the minimum number of nodes for the compute pool.
func (o ComputePoolOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.IntOutput { return v.MinNodes }).(pulumi.IntOutput)
}

// Specifies the identifier for the compute pool; must be unique for the account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ComputePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW COMPUTE POOLS` for the given compute pool.
func (o ComputePoolOutput) ShowOutputs() ComputePoolShowOutputArrayOutput {
	return o.ApplyT(func(v *ComputePool) ComputePoolShowOutputArrayOutput { return v.ShowOutputs }).(ComputePoolShowOutputArrayOutput)
}

type ComputePoolArrayOutput struct{ *pulumi.OutputState }

func (ComputePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputePool)(nil)).Elem()
}

func (o ComputePoolArrayOutput) ToComputePoolArrayOutput() ComputePoolArrayOutput {
	return o
}

func (o ComputePoolArrayOutput) ToComputePoolArrayOutputWithContext(ctx context.Context) ComputePoolArrayOutput {
	return o
}

func (o ComputePoolArrayOutput) Index(i pulumi.IntInput) ComputePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputePool {
		return vs[0].([]*ComputePool)[vs[1].(int)]
	}).(ComputePoolOutput)
}

type ComputePoolMapOutput struct{ *pulumi.OutputState }

func (ComputePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputePool)(nil)).Elem()
}

func (o ComputePoolMapOutput) ToComputePoolMapOutput() ComputePoolMapOutput {
	return o
}

func (o ComputePoolMapOutput) ToComputePoolMapOutputWithContext(ctx context.Context) ComputePoolMapOutput {
	return o
}

func (o ComputePoolMapOutput) MapIndex(k pulumi.StringInput) ComputePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputePool {
		return vs[0].(map[string]*ComputePool)[vs[1].(string)]
	}).(ComputePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputePoolInput)(nil)).Elem(), &ComputePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputePoolArrayInput)(nil)).Elem(), ComputePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputePoolMapInput)(nil)).Elem(), ComputePoolMap{})
	pulumi.RegisterOutputType(ComputePoolOutput{})
	pulumi.RegisterOutputType(ComputePoolArrayOutput{})
	pulumi.RegisterOutputType(ComputePoolMapOutput{})
}
