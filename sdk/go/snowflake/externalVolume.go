// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **Caution: Preview Feature** This feature is considered a preview feature in the provider, regardless of the state of the resource in Snowflake. We do not guarantee its stability. It will be reworked and marked as a stable feature in future releases. Breaking changes are expected, even without bumping the major version. To use this feature, add the relevant feature name to `previewFeaturesEnabled field` in the provider configuration. Please always refer to the Getting Help section in our Github repo to best determine how to get help for your questions.
//
// Resource used to manage external volume objects. For more information, check [external volume documentation](https://docs.snowflake.com/en/sql-reference/commands-data-loading#external-volume).
type ExternalVolume struct {
	pulumi.CustomResourceState

	// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowWrites pulumi.StringPtrOutput `pulumi:"allowWrites"`
	// Specifies a comment for the external volume.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.
	DescribeOutputs ExternalVolumeDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.
	ShowOutputs ExternalVolumeShowOutputArrayOutput `pulumi:"showOutputs"`
	// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
	StorageLocations ExternalVolumeStorageLocationArrayOutput `pulumi:"storageLocations"`
}

// NewExternalVolume registers a new resource with the given unique name, arguments, and options.
func NewExternalVolume(ctx *pulumi.Context,
	name string, args *ExternalVolumeArgs, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageLocations == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocations'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalVolume
	err := ctx.RegisterResource("snowflake:index/externalVolume:ExternalVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalVolume gets an existing ExternalVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalVolumeState, opts ...pulumi.ResourceOption) (*ExternalVolume, error) {
	var resource ExternalVolume
	err := ctx.ReadResource("snowflake:index/externalVolume:ExternalVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalVolume resources.
type externalVolumeState struct {
	// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowWrites *string `pulumi:"allowWrites"`
	// Specifies a comment for the external volume.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.
	DescribeOutputs []ExternalVolumeDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.
	ShowOutputs []ExternalVolumeShowOutput `pulumi:"showOutputs"`
	// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
	StorageLocations []ExternalVolumeStorageLocation `pulumi:"storageLocations"`
}

type ExternalVolumeState struct {
	// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowWrites pulumi.StringPtrInput
	// Specifies a comment for the external volume.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.
	DescribeOutputs ExternalVolumeDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.
	ShowOutputs ExternalVolumeShowOutputArrayInput
	// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
	StorageLocations ExternalVolumeStorageLocationArrayInput
}

func (ExternalVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeState)(nil)).Elem()
}

type externalVolumeArgs struct {
	// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowWrites *string `pulumi:"allowWrites"`
	// Specifies a comment for the external volume.
	Comment *string `pulumi:"comment"`
	// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
	StorageLocations []ExternalVolumeStorageLocation `pulumi:"storageLocations"`
}

// The set of arguments for constructing a ExternalVolume resource.
type ExternalVolumeArgs struct {
	// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowWrites pulumi.StringPtrInput
	// Specifies a comment for the external volume.
	Comment pulumi.StringPtrInput
	// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
	StorageLocations ExternalVolumeStorageLocationArrayInput
}

func (ExternalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalVolumeArgs)(nil)).Elem()
}

type ExternalVolumeInput interface {
	pulumi.Input

	ToExternalVolumeOutput() ExternalVolumeOutput
	ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput
}

func (*ExternalVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (i *ExternalVolume) ToExternalVolumeOutput() ExternalVolumeOutput {
	return i.ToExternalVolumeOutputWithContext(context.Background())
}

func (i *ExternalVolume) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeOutput)
}

// ExternalVolumeArrayInput is an input type that accepts ExternalVolumeArray and ExternalVolumeArrayOutput values.
// You can construct a concrete instance of `ExternalVolumeArrayInput` via:
//
//	ExternalVolumeArray{ ExternalVolumeArgs{...} }
type ExternalVolumeArrayInput interface {
	pulumi.Input

	ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput
	ToExternalVolumeArrayOutputWithContext(context.Context) ExternalVolumeArrayOutput
}

type ExternalVolumeArray []ExternalVolumeInput

func (ExternalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return i.ToExternalVolumeArrayOutputWithContext(context.Background())
}

func (i ExternalVolumeArray) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeArrayOutput)
}

// ExternalVolumeMapInput is an input type that accepts ExternalVolumeMap and ExternalVolumeMapOutput values.
// You can construct a concrete instance of `ExternalVolumeMapInput` via:
//
//	ExternalVolumeMap{ "key": ExternalVolumeArgs{...} }
type ExternalVolumeMapInput interface {
	pulumi.Input

	ToExternalVolumeMapOutput() ExternalVolumeMapOutput
	ToExternalVolumeMapOutputWithContext(context.Context) ExternalVolumeMapOutput
}

type ExternalVolumeMap map[string]ExternalVolumeInput

func (ExternalVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return i.ToExternalVolumeMapOutputWithContext(context.Background())
}

func (i ExternalVolumeMap) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVolumeMapOutput)
}

type ExternalVolumeOutput struct{ *pulumi.OutputState }

func (ExternalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeOutput) ToExternalVolumeOutput() ExternalVolumeOutput {
	return o
}

func (o ExternalVolumeOutput) ToExternalVolumeOutputWithContext(ctx context.Context) ExternalVolumeOutput {
	return o
}

// Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o ExternalVolumeOutput) AllowWrites() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.AllowWrites }).(pulumi.StringPtrOutput)
}

// Specifies a comment for the external volume.
func (o ExternalVolumeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE EXTERNAL VOLUME` for the given external volume.
func (o ExternalVolumeOutput) DescribeOutputs() ExternalVolumeDescribeOutputArrayOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeDescribeOutputArrayOutput { return v.DescribeOutputs }).(ExternalVolumeDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o ExternalVolumeOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Identifier for the external volume; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o ExternalVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW EXTERNAL VOLUMES` for the given external volume.
func (o ExternalVolumeOutput) ShowOutputs() ExternalVolumeShowOutputArrayOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeShowOutputArrayOutput { return v.ShowOutputs }).(ExternalVolumeShowOutputArrayOutput)
}

// List of named cloud storage locations in different regions and, optionally, cloud platforms. Minimum 1 required. The order of the list is important as it impacts the active storage location, and updates will be triggered if it changes. Note that not all parameter combinations are valid as they depend on the given storage*provider. Consult [the docs](https://docs.snowflake.com/en/sql-reference/sql/create-external-volume#cloud-provider-parameters-cloudproviderparams) for more details on this.
func (o ExternalVolumeOutput) StorageLocations() ExternalVolumeStorageLocationArrayOutput {
	return o.ApplyT(func(v *ExternalVolume) ExternalVolumeStorageLocationArrayOutput { return v.StorageLocations }).(ExternalVolumeStorageLocationArrayOutput)
}

type ExternalVolumeArrayOutput struct{ *pulumi.OutputState }

func (ExternalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutput() ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) ToExternalVolumeArrayOutputWithContext(ctx context.Context) ExternalVolumeArrayOutput {
	return o
}

func (o ExternalVolumeArrayOutput) Index(i pulumi.IntInput) ExternalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].([]*ExternalVolume)[vs[1].(int)]
	}).(ExternalVolumeOutput)
}

type ExternalVolumeMapOutput struct{ *pulumi.OutputState }

func (ExternalVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalVolume)(nil)).Elem()
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutput() ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) ToExternalVolumeMapOutputWithContext(ctx context.Context) ExternalVolumeMapOutput {
	return o
}

func (o ExternalVolumeMapOutput) MapIndex(k pulumi.StringInput) ExternalVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalVolume {
		return vs[0].(map[string]*ExternalVolume)[vs[1].(string)]
	}).(ExternalVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeInput)(nil)).Elem(), &ExternalVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeArrayInput)(nil)).Elem(), ExternalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalVolumeMapInput)(nil)).Elem(), ExternalVolumeMap{})
	pulumi.RegisterOutputType(ExternalVolumeOutput{})
	pulumi.RegisterOutputType(ExternalVolumeArrayOutput{})
	pulumi.RegisterOutputType(ExternalVolumeMapOutput{})
}
