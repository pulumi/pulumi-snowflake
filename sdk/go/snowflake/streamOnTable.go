// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/streamOnTable:StreamOnTable example '"<database_name>"."<schema_name>"."<stream_name>"'
// ```
type StreamOnTable struct {
	pulumi.CustomResourceState

	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AppendOnly pulumi.StringPtrOutput       `pulumi:"appendOnly"`
	At         StreamOnTableAtPtrOutput     `pulumi:"at"`
	Before     StreamOnTableBeforePtrOutput `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrOutput `pulumi:"comment"`
	CopyGrants pulumi.BoolPtrOutput   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnTableDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema          pulumi.StringOutput    `pulumi:"schema"`
	ShowInitialRows pulumi.StringPtrOutput `pulumi:"showInitialRows"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnTableShowOutputArrayOutput `pulumi:"showOutputs"`
	Stale       pulumi.BoolOutput                  `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringOutput `pulumi:"streamType"`
	// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewStreamOnTable registers a new resource with the given unique name, arguments, and options.
func NewStreamOnTable(ctx *pulumi.Context,
	name string, args *StreamOnTableArgs, opts ...pulumi.ResourceOption) (*StreamOnTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamOnTable
	err := ctx.RegisterResource("snowflake:index/streamOnTable:StreamOnTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamOnTable gets an existing StreamOnTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamOnTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamOnTableState, opts ...pulumi.ResourceOption) (*StreamOnTable, error) {
	var resource StreamOnTable
	err := ctx.ReadResource("snowflake:index/streamOnTable:StreamOnTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamOnTable resources.
type streamOnTableState struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AppendOnly *string              `pulumi:"appendOnly"`
	At         *StreamOnTableAt     `pulumi:"at"`
	Before     *StreamOnTableBefore `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs []StreamOnTableDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema          *string `pulumi:"schema"`
	ShowInitialRows *string `pulumi:"showInitialRows"`
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs []StreamOnTableShowOutput `pulumi:"showOutputs"`
	Stale       *bool                     `pulumi:"stale"`
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType *string `pulumi:"streamType"`
	// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Table *string `pulumi:"table"`
}

type StreamOnTableState struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AppendOnly pulumi.StringPtrInput
	At         StreamOnTableAtPtrInput
	Before     StreamOnTableBeforePtrInput
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE STREAM` for the given stream.
	DescribeOutputs StreamOnTableDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema          pulumi.StringPtrInput
	ShowInitialRows pulumi.StringPtrInput
	// Outputs the result of `SHOW STREAMS` for the given stream.
	ShowOutputs StreamOnTableShowOutputArrayInput
	Stale       pulumi.BoolPtrInput
	// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
	StreamType pulumi.StringPtrInput
	// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Table pulumi.StringPtrInput
}

func (StreamOnTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnTableState)(nil)).Elem()
}

type streamOnTableArgs struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AppendOnly *string              `pulumi:"appendOnly"`
	At         *StreamOnTableAt     `pulumi:"at"`
	Before     *StreamOnTableBefore `pulumi:"before"`
	// Specifies a comment for the stream.
	Comment    *string `pulumi:"comment"`
	CopyGrants *bool   `pulumi:"copyGrants"`
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema          string  `pulumi:"schema"`
	ShowInitialRows *string `pulumi:"showInitialRows"`
	// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a StreamOnTable resource.
type StreamOnTableArgs struct {
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AppendOnly pulumi.StringPtrInput
	At         StreamOnTableAtPtrInput
	Before     StreamOnTableBeforePtrInput
	// Specifies a comment for the stream.
	Comment    pulumi.StringPtrInput
	CopyGrants pulumi.BoolPtrInput
	// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Schema          pulumi.StringInput
	ShowInitialRows pulumi.StringPtrInput
	// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	Table pulumi.StringInput
}

func (StreamOnTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamOnTableArgs)(nil)).Elem()
}

type StreamOnTableInput interface {
	pulumi.Input

	ToStreamOnTableOutput() StreamOnTableOutput
	ToStreamOnTableOutputWithContext(ctx context.Context) StreamOnTableOutput
}

func (*StreamOnTable) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnTable)(nil)).Elem()
}

func (i *StreamOnTable) ToStreamOnTableOutput() StreamOnTableOutput {
	return i.ToStreamOnTableOutputWithContext(context.Background())
}

func (i *StreamOnTable) ToStreamOnTableOutputWithContext(ctx context.Context) StreamOnTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnTableOutput)
}

// StreamOnTableArrayInput is an input type that accepts StreamOnTableArray and StreamOnTableArrayOutput values.
// You can construct a concrete instance of `StreamOnTableArrayInput` via:
//
//	StreamOnTableArray{ StreamOnTableArgs{...} }
type StreamOnTableArrayInput interface {
	pulumi.Input

	ToStreamOnTableArrayOutput() StreamOnTableArrayOutput
	ToStreamOnTableArrayOutputWithContext(context.Context) StreamOnTableArrayOutput
}

type StreamOnTableArray []StreamOnTableInput

func (StreamOnTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnTable)(nil)).Elem()
}

func (i StreamOnTableArray) ToStreamOnTableArrayOutput() StreamOnTableArrayOutput {
	return i.ToStreamOnTableArrayOutputWithContext(context.Background())
}

func (i StreamOnTableArray) ToStreamOnTableArrayOutputWithContext(ctx context.Context) StreamOnTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnTableArrayOutput)
}

// StreamOnTableMapInput is an input type that accepts StreamOnTableMap and StreamOnTableMapOutput values.
// You can construct a concrete instance of `StreamOnTableMapInput` via:
//
//	StreamOnTableMap{ "key": StreamOnTableArgs{...} }
type StreamOnTableMapInput interface {
	pulumi.Input

	ToStreamOnTableMapOutput() StreamOnTableMapOutput
	ToStreamOnTableMapOutputWithContext(context.Context) StreamOnTableMapOutput
}

type StreamOnTableMap map[string]StreamOnTableInput

func (StreamOnTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnTable)(nil)).Elem()
}

func (i StreamOnTableMap) ToStreamOnTableMapOutput() StreamOnTableMapOutput {
	return i.ToStreamOnTableMapOutputWithContext(context.Background())
}

func (i StreamOnTableMap) ToStreamOnTableMapOutputWithContext(ctx context.Context) StreamOnTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOnTableMapOutput)
}

type StreamOnTableOutput struct{ *pulumi.OutputState }

func (StreamOnTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamOnTable)(nil)).Elem()
}

func (o StreamOnTableOutput) ToStreamOnTableOutput() StreamOnTableOutput {
	return o
}

func (o StreamOnTableOutput) ToStreamOnTableOutputWithContext(ctx context.Context) StreamOnTableOutput {
	return o
}

// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether this is an append-only stream. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o StreamOnTableOutput) AppendOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringPtrOutput { return v.AppendOnly }).(pulumi.StringPtrOutput)
}

func (o StreamOnTableOutput) At() StreamOnTableAtPtrOutput {
	return o.ApplyT(func(v *StreamOnTable) StreamOnTableAtPtrOutput { return v.At }).(StreamOnTableAtPtrOutput)
}

func (o StreamOnTableOutput) Before() StreamOnTableBeforePtrOutput {
	return o.ApplyT(func(v *StreamOnTable) StreamOnTableBeforePtrOutput { return v.Before }).(StreamOnTableBeforePtrOutput)
}

// Specifies a comment for the stream.
func (o StreamOnTableOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o StreamOnTableOutput) CopyGrants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.BoolPtrOutput { return v.CopyGrants }).(pulumi.BoolPtrOutput)
}

// The database in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE STREAM` for the given stream.
func (o StreamOnTableOutput) DescribeOutputs() StreamOnTableDescribeOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnTable) StreamOnTableDescribeOutputArrayOutput { return v.DescribeOutputs }).(StreamOnTableDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o StreamOnTableOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the stream. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o StreamOnTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

func (o StreamOnTableOutput) ShowInitialRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringPtrOutput { return v.ShowInitialRows }).(pulumi.StringPtrOutput)
}

// Outputs the result of `SHOW STREAMS` for the given stream.
func (o StreamOnTableOutput) ShowOutputs() StreamOnTableShowOutputArrayOutput {
	return o.ApplyT(func(v *StreamOnTable) StreamOnTableShowOutputArrayOutput { return v.ShowOutputs }).(StreamOnTableShowOutputArrayOutput)
}

func (o StreamOnTableOutput) Stale() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.BoolOutput { return v.Stale }).(pulumi.BoolOutput)
}

// Specifies a type for the stream. This field is used for checking external changes and recreating the resources if needed.
func (o StreamOnTableOutput) StreamType() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.StreamType }).(pulumi.StringOutput)
}

// Specifies an identifier for the table the stream will monitor. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
func (o StreamOnTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamOnTable) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type StreamOnTableArrayOutput struct{ *pulumi.OutputState }

func (StreamOnTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamOnTable)(nil)).Elem()
}

func (o StreamOnTableArrayOutput) ToStreamOnTableArrayOutput() StreamOnTableArrayOutput {
	return o
}

func (o StreamOnTableArrayOutput) ToStreamOnTableArrayOutputWithContext(ctx context.Context) StreamOnTableArrayOutput {
	return o
}

func (o StreamOnTableArrayOutput) Index(i pulumi.IntInput) StreamOnTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamOnTable {
		return vs[0].([]*StreamOnTable)[vs[1].(int)]
	}).(StreamOnTableOutput)
}

type StreamOnTableMapOutput struct{ *pulumi.OutputState }

func (StreamOnTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamOnTable)(nil)).Elem()
}

func (o StreamOnTableMapOutput) ToStreamOnTableMapOutput() StreamOnTableMapOutput {
	return o
}

func (o StreamOnTableMapOutput) ToStreamOnTableMapOutputWithContext(ctx context.Context) StreamOnTableMapOutput {
	return o
}

func (o StreamOnTableMapOutput) MapIndex(k pulumi.StringInput) StreamOnTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamOnTable {
		return vs[0].(map[string]*StreamOnTable)[vs[1].(string)]
	}).(StreamOnTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnTableInput)(nil)).Elem(), &StreamOnTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnTableArrayInput)(nil)).Elem(), StreamOnTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamOnTableMapInput)(nil)).Elem(), StreamOnTableMap{})
	pulumi.RegisterOutputType(StreamOnTableOutput{})
	pulumi.RegisterOutputType(StreamOnTableArrayOutput{})
	pulumi.RegisterOutputType(StreamOnTableMapOutput{})
}
