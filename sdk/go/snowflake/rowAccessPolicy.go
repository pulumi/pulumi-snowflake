// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RowAccessPolicy struct {
	pulumi.CustomResourceState

	// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
	// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
	// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
	Arguments RowAccessPolicyArgumentArrayOutput `pulumi:"arguments"`
	// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
	// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
	// case or run of whitespace is semantically significant.
	Body pulumi.StringOutput `pulumi:"body"`
	// Specifies a comment for the row access policy.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.
	DescribeOutputs RowAccessPolicyDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
	// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.
	ShowOutputs RowAccessPolicyShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewRowAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewRowAccessPolicy(ctx *pulumi.Context,
	name string, args *RowAccessPolicyArgs, opts ...pulumi.ResourceOption) (*RowAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Arguments == nil {
		return nil, errors.New("invalid value for required argument 'Arguments'")
	}
	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RowAccessPolicy
	err := ctx.RegisterResource("snowflake:index/rowAccessPolicy:RowAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRowAccessPolicy gets an existing RowAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRowAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RowAccessPolicyState, opts ...pulumi.ResourceOption) (*RowAccessPolicy, error) {
	var resource RowAccessPolicy
	err := ctx.ReadResource("snowflake:index/rowAccessPolicy:RowAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RowAccessPolicy resources.
type rowAccessPolicyState struct {
	// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
	// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
	// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
	Arguments []RowAccessPolicyArgument `pulumi:"arguments"`
	// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
	// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
	// case or run of whitespace is semantically significant.
	Body *string `pulumi:"body"`
	// Specifies a comment for the row access policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.
	DescribeOutputs []RowAccessPolicyDescribeOutput `pulumi:"describeOutputs"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
	// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.
	ShowOutputs []RowAccessPolicyShowOutput `pulumi:"showOutputs"`
}

type RowAccessPolicyState struct {
	// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
	// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
	// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
	Arguments RowAccessPolicyArgumentArrayInput
	// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
	// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
	// case or run of whitespace is semantically significant.
	Body pulumi.StringPtrInput
	// Specifies a comment for the row access policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.
	DescribeOutputs RowAccessPolicyDescribeOutputArrayInput
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
	// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.
	ShowOutputs RowAccessPolicyShowOutputArrayInput
}

func (RowAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rowAccessPolicyState)(nil)).Elem()
}

type rowAccessPolicyArgs struct {
	// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
	// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
	// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
	Arguments []RowAccessPolicyArgument `pulumi:"arguments"`
	// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
	// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
	// case or run of whitespace is semantically significant.
	Body string `pulumi:"body"`
	// Specifies a comment for the row access policy.
	Comment *string `pulumi:"comment"`
	// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
	// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a RowAccessPolicy resource.
type RowAccessPolicyArgs struct {
	// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
	// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
	// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
	Arguments RowAccessPolicyArgumentArrayInput
	// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
	// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
	// case or run of whitespace is semantically significant.
	Body pulumi.StringInput
	// Specifies a comment for the row access policy.
	Comment pulumi.StringPtrInput
	// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
	// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
	// following characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
}

func (RowAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rowAccessPolicyArgs)(nil)).Elem()
}

type RowAccessPolicyInput interface {
	pulumi.Input

	ToRowAccessPolicyOutput() RowAccessPolicyOutput
	ToRowAccessPolicyOutputWithContext(ctx context.Context) RowAccessPolicyOutput
}

func (*RowAccessPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RowAccessPolicy)(nil)).Elem()
}

func (i *RowAccessPolicy) ToRowAccessPolicyOutput() RowAccessPolicyOutput {
	return i.ToRowAccessPolicyOutputWithContext(context.Background())
}

func (i *RowAccessPolicy) ToRowAccessPolicyOutputWithContext(ctx context.Context) RowAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyOutput)
}

// RowAccessPolicyArrayInput is an input type that accepts RowAccessPolicyArray and RowAccessPolicyArrayOutput values.
// You can construct a concrete instance of `RowAccessPolicyArrayInput` via:
//
//	RowAccessPolicyArray{ RowAccessPolicyArgs{...} }
type RowAccessPolicyArrayInput interface {
	pulumi.Input

	ToRowAccessPolicyArrayOutput() RowAccessPolicyArrayOutput
	ToRowAccessPolicyArrayOutputWithContext(context.Context) RowAccessPolicyArrayOutput
}

type RowAccessPolicyArray []RowAccessPolicyInput

func (RowAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RowAccessPolicy)(nil)).Elem()
}

func (i RowAccessPolicyArray) ToRowAccessPolicyArrayOutput() RowAccessPolicyArrayOutput {
	return i.ToRowAccessPolicyArrayOutputWithContext(context.Background())
}

func (i RowAccessPolicyArray) ToRowAccessPolicyArrayOutputWithContext(ctx context.Context) RowAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyArrayOutput)
}

// RowAccessPolicyMapInput is an input type that accepts RowAccessPolicyMap and RowAccessPolicyMapOutput values.
// You can construct a concrete instance of `RowAccessPolicyMapInput` via:
//
//	RowAccessPolicyMap{ "key": RowAccessPolicyArgs{...} }
type RowAccessPolicyMapInput interface {
	pulumi.Input

	ToRowAccessPolicyMapOutput() RowAccessPolicyMapOutput
	ToRowAccessPolicyMapOutputWithContext(context.Context) RowAccessPolicyMapOutput
}

type RowAccessPolicyMap map[string]RowAccessPolicyInput

func (RowAccessPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RowAccessPolicy)(nil)).Elem()
}

func (i RowAccessPolicyMap) ToRowAccessPolicyMapOutput() RowAccessPolicyMapOutput {
	return i.ToRowAccessPolicyMapOutputWithContext(context.Background())
}

func (i RowAccessPolicyMap) ToRowAccessPolicyMapOutputWithContext(ctx context.Context) RowAccessPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyMapOutput)
}

type RowAccessPolicyOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RowAccessPolicy)(nil)).Elem()
}

func (o RowAccessPolicyOutput) ToRowAccessPolicyOutput() RowAccessPolicyOutput {
	return o
}

func (o RowAccessPolicyOutput) ToRowAccessPolicyOutputWithContext(ctx context.Context) RowAccessPolicyOutput {
	return o
}

// List of the arguments for the row access policy. A signature specifies a set of attributes that must be considered to
// determine whether the row is accessible. The attribute values come from the database object (e.g. table or view) to be
// protected by the row access policy. If any argument name or type is changed, the resource is recreated.
func (o RowAccessPolicyOutput) Arguments() RowAccessPolicyArgumentArrayOutput {
	return o.ApplyT(func(v *RowAccessPolicy) RowAccessPolicyArgumentArrayOutput { return v.Arguments }).(RowAccessPolicyArgumentArrayOutput)
}

// Specifies the SQL expression. The expression can be any boolean-valued SQL expression. To mitigate permadiff on this
// field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in
// case or run of whitespace is semantically significant.
func (o RowAccessPolicyOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// Specifies a comment for the row access policy.
func (o RowAccessPolicyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The database in which to create the row access policy. Due to technical limitations (read more here), avoid using the
// following characters: `|`, `.`, `"`.
func (o RowAccessPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Outputs the result of `DESCRIBE ROW ACCESS POLICY` for the given row access policy.
func (o RowAccessPolicyOutput) DescribeOutputs() RowAccessPolicyDescribeOutputArrayOutput {
	return o.ApplyT(func(v *RowAccessPolicy) RowAccessPolicyDescribeOutputArrayOutput { return v.DescribeOutputs }).(RowAccessPolicyDescribeOutputArrayOutput)
}

// Fully qualified name of the resource. For more information, see [object name
// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o RowAccessPolicyOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the identifier for the row access policy; must be unique for the database and schema in which the row access
// policy is created. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o RowAccessPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema in which to create the row access policy. Due to technical limitations (read more here), avoid using the
// following characters: `|`, `.`, `"`.
func (o RowAccessPolicyOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *RowAccessPolicy) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW ROW ACCESS POLICIES` for the given row access policy.
func (o RowAccessPolicyOutput) ShowOutputs() RowAccessPolicyShowOutputArrayOutput {
	return o.ApplyT(func(v *RowAccessPolicy) RowAccessPolicyShowOutputArrayOutput { return v.ShowOutputs }).(RowAccessPolicyShowOutputArrayOutput)
}

type RowAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RowAccessPolicy)(nil)).Elem()
}

func (o RowAccessPolicyArrayOutput) ToRowAccessPolicyArrayOutput() RowAccessPolicyArrayOutput {
	return o
}

func (o RowAccessPolicyArrayOutput) ToRowAccessPolicyArrayOutputWithContext(ctx context.Context) RowAccessPolicyArrayOutput {
	return o
}

func (o RowAccessPolicyArrayOutput) Index(i pulumi.IntInput) RowAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RowAccessPolicy {
		return vs[0].([]*RowAccessPolicy)[vs[1].(int)]
	}).(RowAccessPolicyOutput)
}

type RowAccessPolicyMapOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RowAccessPolicy)(nil)).Elem()
}

func (o RowAccessPolicyMapOutput) ToRowAccessPolicyMapOutput() RowAccessPolicyMapOutput {
	return o
}

func (o RowAccessPolicyMapOutput) ToRowAccessPolicyMapOutputWithContext(ctx context.Context) RowAccessPolicyMapOutput {
	return o
}

func (o RowAccessPolicyMapOutput) MapIndex(k pulumi.StringInput) RowAccessPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RowAccessPolicy {
		return vs[0].(map[string]*RowAccessPolicy)[vs[1].(string)]
	}).(RowAccessPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RowAccessPolicyInput)(nil)).Elem(), &RowAccessPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RowAccessPolicyArrayInput)(nil)).Elem(), RowAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RowAccessPolicyMapInput)(nil)).Elem(), RowAccessPolicyMap{})
	pulumi.RegisterOutputType(RowAccessPolicyOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyMapOutput{})
}
