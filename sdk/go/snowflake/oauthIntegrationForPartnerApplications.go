// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
// $ pulumi import snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications example "name"
// ```
type OauthIntegrationForPartnerApplications struct {
	pulumi.CustomResourceState

	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayOutput `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs OauthIntegrationForPartnerApplicationsDescribeOutputArrayOutput `pulumi:"describeOutputs"`
	// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrOutput `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
	OauthClient pulumi.StringOutput `pulumi:"oauthClient"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrOutput `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
	OauthRedirectUri pulumi.StringPtrOutput `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrOutput `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrOutput `pulumi:"oauthUseSecondaryRoles"`
	// Parameters related to this security integration.
	RelatedParameters OauthIntegrationForPartnerApplicationsRelatedParameterArrayOutput `pulumi:"relatedParameters"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs OauthIntegrationForPartnerApplicationsShowOutputArrayOutput `pulumi:"showOutputs"`
}

// NewOauthIntegrationForPartnerApplications registers a new resource with the given unique name, arguments, and options.
func NewOauthIntegrationForPartnerApplications(ctx *pulumi.Context,
	name string, args *OauthIntegrationForPartnerApplicationsArgs, opts ...pulumi.ResourceOption) (*OauthIntegrationForPartnerApplications, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OauthClient == nil {
		return nil, errors.New("invalid value for required argument 'OauthClient'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OauthIntegrationForPartnerApplications
	err := ctx.RegisterResource("snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOauthIntegrationForPartnerApplications gets an existing OauthIntegrationForPartnerApplications resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOauthIntegrationForPartnerApplications(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OauthIntegrationForPartnerApplicationsState, opts ...pulumi.ResourceOption) (*OauthIntegrationForPartnerApplications, error) {
	var resource OauthIntegrationForPartnerApplications
	err := ctx.ReadResource("snowflake:index/oauthIntegrationForPartnerApplications:OauthIntegrationForPartnerApplications", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OauthIntegrationForPartnerApplications resources.
type oauthIntegrationForPartnerApplicationsState struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs []OauthIntegrationForPartnerApplicationsDescribeOutput `pulumi:"describeOutputs"`
	// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
	OauthClient *string `pulumi:"oauthClient"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens *string `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
	OauthRedirectUri *string `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
	// Parameters related to this security integration.
	RelatedParameters []OauthIntegrationForPartnerApplicationsRelatedParameter `pulumi:"relatedParameters"`
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs []OauthIntegrationForPartnerApplicationsShowOutput `pulumi:"showOutputs"`
}

type OauthIntegrationForPartnerApplicationsState struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
	DescribeOutputs OauthIntegrationForPartnerApplicationsDescribeOutputArrayInput
	// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
	OauthClient pulumi.StringPtrInput
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
	OauthRedirectUri pulumi.StringPtrInput
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrInput
	// Parameters related to this security integration.
	RelatedParameters OauthIntegrationForPartnerApplicationsRelatedParameterArrayInput
	// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
	ShowOutputs OauthIntegrationForPartnerApplicationsShowOutputArrayInput
}

func (OauthIntegrationForPartnerApplicationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationForPartnerApplicationsState)(nil)).Elem()
}

type oauthIntegrationForPartnerApplicationsArgs struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists []string `pulumi:"blockedRolesLists"`
	// Specifies a comment for the OAuth integration.
	Comment *string `pulumi:"comment"`
	// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled *string `pulumi:"enabled"`
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
	OauthClient string `pulumi:"oauthClient"`
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens *string `pulumi:"oauthIssueRefreshTokens"`
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
	OauthRedirectUri *string `pulumi:"oauthRedirectUri"`
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity *int `pulumi:"oauthRefreshTokenValidity"`
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles *string `pulumi:"oauthUseSecondaryRoles"`
}

// The set of arguments for constructing a OauthIntegrationForPartnerApplications resource.
type OauthIntegrationForPartnerApplicationsArgs struct {
	// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
	BlockedRolesLists pulumi.StringArrayInput
	// Specifies a comment for the OAuth integration.
	Comment pulumi.StringPtrInput
	// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	Enabled pulumi.StringPtrInput
	// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
	OauthClient pulumi.StringInput
	// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	OauthIssueRefreshTokens pulumi.StringPtrInput
	// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
	OauthRedirectUri pulumi.StringPtrInput
	// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
	OauthRefreshTokenValidity pulumi.IntPtrInput
	// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
	OauthUseSecondaryRoles pulumi.StringPtrInput
}

func (OauthIntegrationForPartnerApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oauthIntegrationForPartnerApplicationsArgs)(nil)).Elem()
}

type OauthIntegrationForPartnerApplicationsInput interface {
	pulumi.Input

	ToOauthIntegrationForPartnerApplicationsOutput() OauthIntegrationForPartnerApplicationsOutput
	ToOauthIntegrationForPartnerApplicationsOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsOutput
}

func (*OauthIntegrationForPartnerApplications) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (i *OauthIntegrationForPartnerApplications) ToOauthIntegrationForPartnerApplicationsOutput() OauthIntegrationForPartnerApplicationsOutput {
	return i.ToOauthIntegrationForPartnerApplicationsOutputWithContext(context.Background())
}

func (i *OauthIntegrationForPartnerApplications) ToOauthIntegrationForPartnerApplicationsOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForPartnerApplicationsOutput)
}

// OauthIntegrationForPartnerApplicationsArrayInput is an input type that accepts OauthIntegrationForPartnerApplicationsArray and OauthIntegrationForPartnerApplicationsArrayOutput values.
// You can construct a concrete instance of `OauthIntegrationForPartnerApplicationsArrayInput` via:
//
//	OauthIntegrationForPartnerApplicationsArray{ OauthIntegrationForPartnerApplicationsArgs{...} }
type OauthIntegrationForPartnerApplicationsArrayInput interface {
	pulumi.Input

	ToOauthIntegrationForPartnerApplicationsArrayOutput() OauthIntegrationForPartnerApplicationsArrayOutput
	ToOauthIntegrationForPartnerApplicationsArrayOutputWithContext(context.Context) OauthIntegrationForPartnerApplicationsArrayOutput
}

type OauthIntegrationForPartnerApplicationsArray []OauthIntegrationForPartnerApplicationsInput

func (OauthIntegrationForPartnerApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (i OauthIntegrationForPartnerApplicationsArray) ToOauthIntegrationForPartnerApplicationsArrayOutput() OauthIntegrationForPartnerApplicationsArrayOutput {
	return i.ToOauthIntegrationForPartnerApplicationsArrayOutputWithContext(context.Background())
}

func (i OauthIntegrationForPartnerApplicationsArray) ToOauthIntegrationForPartnerApplicationsArrayOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForPartnerApplicationsArrayOutput)
}

// OauthIntegrationForPartnerApplicationsMapInput is an input type that accepts OauthIntegrationForPartnerApplicationsMap and OauthIntegrationForPartnerApplicationsMapOutput values.
// You can construct a concrete instance of `OauthIntegrationForPartnerApplicationsMapInput` via:
//
//	OauthIntegrationForPartnerApplicationsMap{ "key": OauthIntegrationForPartnerApplicationsArgs{...} }
type OauthIntegrationForPartnerApplicationsMapInput interface {
	pulumi.Input

	ToOauthIntegrationForPartnerApplicationsMapOutput() OauthIntegrationForPartnerApplicationsMapOutput
	ToOauthIntegrationForPartnerApplicationsMapOutputWithContext(context.Context) OauthIntegrationForPartnerApplicationsMapOutput
}

type OauthIntegrationForPartnerApplicationsMap map[string]OauthIntegrationForPartnerApplicationsInput

func (OauthIntegrationForPartnerApplicationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (i OauthIntegrationForPartnerApplicationsMap) ToOauthIntegrationForPartnerApplicationsMapOutput() OauthIntegrationForPartnerApplicationsMapOutput {
	return i.ToOauthIntegrationForPartnerApplicationsMapOutputWithContext(context.Background())
}

func (i OauthIntegrationForPartnerApplicationsMap) ToOauthIntegrationForPartnerApplicationsMapOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OauthIntegrationForPartnerApplicationsMapOutput)
}

type OauthIntegrationForPartnerApplicationsOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForPartnerApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (o OauthIntegrationForPartnerApplicationsOutput) ToOauthIntegrationForPartnerApplicationsOutput() OauthIntegrationForPartnerApplicationsOutput {
	return o
}

func (o OauthIntegrationForPartnerApplicationsOutput) ToOauthIntegrationForPartnerApplicationsOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsOutput {
	return o
}

// A set of Snowflake roles that a user cannot explicitly consent to using after authenticating. By default, this list includes the ACCOUNTADMIN, ORGADMIN and SECURITYADMIN roles. To remove these privileged roles from the list, use the ALTER ACCOUNT command to set the OAUTH*ADD*PRIVILEGED*ROLES*TO*BLOCKED*LIST account parameter to FALSE. For more information about this resource, see docs.
func (o OauthIntegrationForPartnerApplicationsOutput) BlockedRolesLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringArrayOutput { return v.BlockedRolesLists }).(pulumi.StringArrayOutput)
}

// Specifies a comment for the OAuth integration.
func (o OauthIntegrationForPartnerApplicationsOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Outputs the result of `DESCRIBE SECURITY INTEGRATION` for the given integration.
func (o OauthIntegrationForPartnerApplicationsOutput) DescribeOutputs() OauthIntegrationForPartnerApplicationsDescribeOutputArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) OauthIntegrationForPartnerApplicationsDescribeOutputArrayOutput {
		return v.DescribeOutputs
	}).(OauthIntegrationForPartnerApplicationsDescribeOutputArrayOutput)
}

// Specifies whether this OAuth integration is enabled or disabled. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForPartnerApplicationsOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringPtrOutput { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o OauthIntegrationForPartnerApplicationsOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Specifies the name of the OAuth integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account. Due to technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o OauthIntegrationForPartnerApplicationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates an OAuth interface between Snowflake and a partner application. Valid options are: `LOOKER` | `TABLEAU_DESKTOP` | `TABLEAU_SERVER`.
func (o OauthIntegrationForPartnerApplicationsOutput) OauthClient() pulumi.StringOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringOutput { return v.OauthClient }).(pulumi.StringOutput)
}

// Specifies whether to allow the client to exchange a refresh token for an access token when the current access token has expired. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o OauthIntegrationForPartnerApplicationsOutput) OauthIssueRefreshTokens() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringPtrOutput {
		return v.OauthIssueRefreshTokens
	}).(pulumi.StringPtrOutput)
}

// Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The field should be only set when OAUTH_CLIENT = LOOKER. In any other case the field should be left out empty.
func (o OauthIntegrationForPartnerApplicationsOutput) OauthRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringPtrOutput { return v.OauthRedirectUri }).(pulumi.StringPtrOutput)
}

// Specifies how long refresh tokens should be valid (in seconds). OAUTH*ISSUE*REFRESH_TOKENS must be set to TRUE.
func (o OauthIntegrationForPartnerApplicationsOutput) OauthRefreshTokenValidity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.IntPtrOutput {
		return v.OauthRefreshTokenValidity
	}).(pulumi.IntPtrOutput)
}

// Specifies whether default secondary roles set in the user properties are activated by default in the session being opened. Valid options are: `IMPLICIT` | `NONE`.
func (o OauthIntegrationForPartnerApplicationsOutput) OauthUseSecondaryRoles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) pulumi.StringPtrOutput {
		return v.OauthUseSecondaryRoles
	}).(pulumi.StringPtrOutput)
}

// Parameters related to this security integration.
func (o OauthIntegrationForPartnerApplicationsOutput) RelatedParameters() OauthIntegrationForPartnerApplicationsRelatedParameterArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) OauthIntegrationForPartnerApplicationsRelatedParameterArrayOutput {
		return v.RelatedParameters
	}).(OauthIntegrationForPartnerApplicationsRelatedParameterArrayOutput)
}

// Outputs the result of `SHOW SECURITY INTEGRATION` for the given integration.
func (o OauthIntegrationForPartnerApplicationsOutput) ShowOutputs() OauthIntegrationForPartnerApplicationsShowOutputArrayOutput {
	return o.ApplyT(func(v *OauthIntegrationForPartnerApplications) OauthIntegrationForPartnerApplicationsShowOutputArrayOutput {
		return v.ShowOutputs
	}).(OauthIntegrationForPartnerApplicationsShowOutputArrayOutput)
}

type OauthIntegrationForPartnerApplicationsArrayOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForPartnerApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (o OauthIntegrationForPartnerApplicationsArrayOutput) ToOauthIntegrationForPartnerApplicationsArrayOutput() OauthIntegrationForPartnerApplicationsArrayOutput {
	return o
}

func (o OauthIntegrationForPartnerApplicationsArrayOutput) ToOauthIntegrationForPartnerApplicationsArrayOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsArrayOutput {
	return o
}

func (o OauthIntegrationForPartnerApplicationsArrayOutput) Index(i pulumi.IntInput) OauthIntegrationForPartnerApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OauthIntegrationForPartnerApplications {
		return vs[0].([]*OauthIntegrationForPartnerApplications)[vs[1].(int)]
	}).(OauthIntegrationForPartnerApplicationsOutput)
}

type OauthIntegrationForPartnerApplicationsMapOutput struct{ *pulumi.OutputState }

func (OauthIntegrationForPartnerApplicationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OauthIntegrationForPartnerApplications)(nil)).Elem()
}

func (o OauthIntegrationForPartnerApplicationsMapOutput) ToOauthIntegrationForPartnerApplicationsMapOutput() OauthIntegrationForPartnerApplicationsMapOutput {
	return o
}

func (o OauthIntegrationForPartnerApplicationsMapOutput) ToOauthIntegrationForPartnerApplicationsMapOutputWithContext(ctx context.Context) OauthIntegrationForPartnerApplicationsMapOutput {
	return o
}

func (o OauthIntegrationForPartnerApplicationsMapOutput) MapIndex(k pulumi.StringInput) OauthIntegrationForPartnerApplicationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OauthIntegrationForPartnerApplications {
		return vs[0].(map[string]*OauthIntegrationForPartnerApplications)[vs[1].(string)]
	}).(OauthIntegrationForPartnerApplicationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForPartnerApplicationsInput)(nil)).Elem(), &OauthIntegrationForPartnerApplications{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForPartnerApplicationsArrayInput)(nil)).Elem(), OauthIntegrationForPartnerApplicationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OauthIntegrationForPartnerApplicationsMapInput)(nil)).Elem(), OauthIntegrationForPartnerApplicationsMap{})
	pulumi.RegisterOutputType(OauthIntegrationForPartnerApplicationsOutput{})
	pulumi.RegisterOutputType(OauthIntegrationForPartnerApplicationsArrayOutput{})
	pulumi.RegisterOutputType(OauthIntegrationForPartnerApplicationsMapOutput{})
}
