// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-snowflake/sdk/v2/go/snowflake/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Task struct {
	pulumi.CustomResourceState

	// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
	// of a session (e.g. network outage, browser termination, service interruption). For more information, check
	// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
	AbortDetachedQuery pulumi.BoolOutput `pulumi:"abortDetachedQuery"`
	// Specifies one or more predecessor tasks for the current task. Use this option to [create a
	// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
	// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Afters pulumi.StringArrayOutput `pulumi:"afters"`
	// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
	// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
	// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowOverlappingExecution pulumi.StringPtrOutput `pulumi:"allowOverlappingExecution"`
	// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
	// without an active transaction, is automatically committed after the statement successfully completes. For more
	// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
	// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
	Autocommit pulumi.BoolOutput `pulumi:"autocommit"`
	// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
	BinaryInputFormat pulumi.StringOutput `pulumi:"binaryInputFormat"`
	// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
	BinaryOutputFormat pulumi.StringOutput `pulumi:"binaryOutputFormat"`
	// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
	// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
	ClientMemoryLimit pulumi.IntOutput `pulumi:"clientMemoryLimit"`
	// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
	// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
	// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
	ClientMetadataRequestUseConnectionCtx pulumi.BoolOutput `pulumi:"clientMetadataRequestUseConnectionCtx"`
	// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
	// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
	// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
	ClientPrefetchThreads pulumi.IntOutput `pulumi:"clientPrefetchThreads"`
	// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
	// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
	ClientResultChunkSize pulumi.IntOutput `pulumi:"clientResultChunkSize"`
	// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
	// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
	ClientResultColumnCaseInsensitive pulumi.BoolOutput `pulumi:"clientResultColumnCaseInsensitive"`
	// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
	// information, check [CLIENT_SESSION_KEEP_ALIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
	ClientSessionKeepAlive pulumi.BoolOutput `pulumi:"clientSessionKeepAlive"`
	// Number of seconds in-between client attempts to update the token for the session. For more information, check
	// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
	ClientSessionKeepAliveHeartbeatFrequency pulumi.IntOutput `pulumi:"clientSessionKeepAliveHeartbeatFrequency"`
	// Specifies the [TIMESTAMP_*
	// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
	// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
	// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
	ClientTimestampTypeMapping pulumi.StringOutput `pulumi:"clientTimestampTypeMapping"`
	// Specifies a comment for the task.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
	// JSON format.
	Config pulumi.StringPtrOutput `pulumi:"config"`
	// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringOutput `pulumi:"database"`
	// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
	DateInputFormat pulumi.StringOutput `pulumi:"dateInputFormat"`
	// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
	DateOutputFormat pulumi.StringOutput `pulumi:"dateOutputFormat"`
	// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
	// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
	// support the values in the output columns of the unload SQL statement or source table). For more information, check
	// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
	EnableUnloadPhysicalTypeOptimization pulumi.BoolOutput `pulumi:"enableUnloadPhysicalTypeOptimization"`
	// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
	// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ErrorIntegration pulumi.StringPtrOutput `pulumi:"errorIntegration"`
	// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
	// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
	// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
	ErrorOnNondeterministicMerge pulumi.BoolOutput `pulumi:"errorOnNondeterministicMerge"`
	// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
	// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
	// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
	ErrorOnNondeterministicUpdate pulumi.BoolOutput `pulumi:"errorOnNondeterministicUpdate"`
	// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
	// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
	// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
	// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Finalize pulumi.StringPtrOutput `pulumi:"finalize"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringOutput `pulumi:"fullyQualifiedName"`
	// Display format for [GEOGRAPHY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
	// information, check [GEOGRAPHY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
	GeographyOutputFormat pulumi.StringOutput `pulumi:"geographyOutputFormat"`
	// Display format for [GEOMETRY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
	// information, check [GEOMETRY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
	GeometryOutputFormat pulumi.StringOutput `pulumi:"geometryOutputFormat"`
	// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
	JdbcTreatTimestampNtzAsUtc pulumi.BoolOutput `pulumi:"jdbcTreatTimestampNtzAsUtc"`
	// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
	// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
	// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
	JdbcUseSessionTimezone pulumi.BoolOutput `pulumi:"jdbcUseSessionTimezone"`
	// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
	// insert newline characters after each element. For more information, check [JSON_INDENT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
	JsonIndent pulumi.IntOutput `pulumi:"jsonIndent"`
	// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
	// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
	LockTimeout pulumi.IntOutput `pulumi:"lockTimeout"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
	// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
	// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// Number of statements to execute when using the multi-statement capability. For more information, check
	// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
	MultiStatementCount pulumi.IntOutput `pulumi:"multiStatementCount"`
	// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
	// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
	// auto-incremented column in [increasing or decreasing
	// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
	// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
	NoorderSequenceAsDefault pulumi.BoolOutput `pulumi:"noorderSequenceAsDefault"`
	// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
	// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
	OdbcTreatDecimalAsInt pulumi.BoolOutput `pulumi:"odbcTreatDecimalAsInt"`
	// Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.
	Parameters TaskParameterArrayOutput `pulumi:"parameters"`
	// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
	// displayed in the output of the [QUERY_HISTORY,
	// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
	// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
	QueryTag pulumi.StringOutput `pulumi:"queryTag"`
	// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
	// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
	// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
	// You can use this parameter in situations in which [third-party applications always use double quotes around
	// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
	// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolOutput `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
	// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
	RowsPerResultset pulumi.IntOutput `pulumi:"rowsPerResultset"`
	// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
	// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
	// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
	// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
	// For more information, check [S3_STAGE_VPCE_DNS_NAME
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
	S3StageVpceDnsName pulumi.StringOutput `pulumi:"s3StageVpceDnsName"`
	// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
	// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
	Schedule TaskSchedulePtrOutput `pulumi:"schedule"`
	// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
	// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
	// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
	// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
	SearchPath pulumi.StringOutput `pulumi:"searchPath"`
	// Outputs the result of `SHOW TASKS` for the given task.
	ShowOutputs TaskShowOutputArrayOutput `pulumi:"showOutputs"`
	// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
	SqlStatement pulumi.StringOutput `pulumi:"sqlStatement"`
	// Specifies if the task should be started or suspended.
	Started pulumi.BoolOutput `pulumi:"started"`
	// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
	// by the system. This parameter can be used in conjunction with the
	// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
	// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
	StatementQueuedTimeoutInSeconds pulumi.IntOutput `pulumi:"statementQueuedTimeoutInSeconds"`
	// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
	// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
	StatementTimeoutInSeconds pulumi.IntOutput `pulumi:"statementTimeoutInSeconds"`
	// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
	// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
	// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
	// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
	// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
	StrictJsonOutput pulumi.BoolOutput `pulumi:"strictJsonOutput"`
	// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
	// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntOutput `pulumi:"suspendTaskAfterNumFailures"`
	// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
	// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
	// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntOutput `pulumi:"taskAutoRetryAttempts"`
	// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
	// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
	// session). For more information, check [TIME_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
	TimeInputFormat pulumi.StringOutput `pulumi:"timeInputFormat"`
	// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
	TimeOutputFormat pulumi.StringOutput `pulumi:"timeOutputFormat"`
	// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
	// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
	// check [TIMESTAMP_DAY_IS_ALWAYS_24H
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
	TimestampDayIsAlways24h pulumi.BoolOutput `pulumi:"timestampDayIsAlways24h"`
	// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
	// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
	// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
	TimestampInputFormat pulumi.StringOutput `pulumi:"timestampInputFormat"`
	// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
	TimestampLtzOutputFormat pulumi.StringOutput `pulumi:"timestampLtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
	TimestampNtzOutputFormat pulumi.StringOutput `pulumi:"timestampNtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
	// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
	TimestampOutputFormat pulumi.StringOutput `pulumi:"timestampOutputFormat"`
	// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
	// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
	TimestampTypeMapping pulumi.StringOutput `pulumi:"timestampTypeMapping"`
	// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
	TimestampTzOutputFormat pulumi.StringOutput `pulumi:"timestampTzOutputFormat"`
	// Specifies the time zone for the session. You can specify a [time zone
	// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
	// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
	// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
	// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
	// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringOutput `pulumi:"traceLevel"`
	// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
	// more information, check [TRANSACTION_ABORT_ON_ERROR
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
	TransactionAbortOnError pulumi.BoolOutput `pulumi:"transactionAbortOnError"`
	// Specifies the isolation level for transactions in the user session. For more information, check
	// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
	TransactionDefaultIsolationLevel pulumi.StringOutput `pulumi:"transactionDefaultIsolationLevel"`
	// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
	// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
	// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
	TwoDigitCenturyStart pulumi.IntOutput `pulumi:"twoDigitCenturyStart"`
	// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
	// information, check [UNSUPPORTED_DDL_ACTION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
	UnsupportedDdlAction pulumi.StringOutput `pulumi:"unsupportedDdlAction"`
	// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
	// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
	UseCachedResult pulumi.BoolOutput `pulumi:"useCachedResult"`
	// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
	// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
	// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
	// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringOutput `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds For more information, check
	// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntOutput `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
	// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntOutput `pulumi:"userTaskTimeoutMs"`
	// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
	// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
	// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
	Warehouse pulumi.StringPtrOutput `pulumi:"warehouse"`
	// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
	// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
	// first week of the year and December 31 is included in the last week of the year. For more information, check
	// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
	WeekOfYearPolicy pulumi.IntOutput `pulumi:"weekOfYearPolicy"`
	// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
	// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
	// day of the week. For more information, check [WEEK_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
	WeekStart pulumi.IntOutput `pulumi:"weekStart"`
	// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
	// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
	// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
	// as a predecessor also don’t run.
	When pulumi.StringPtrOutput `pulumi:"when"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.SqlStatement == nil {
		return nil, errors.New("invalid value for required argument 'SqlStatement'")
	}
	if args.Started == nil {
		return nil, errors.New("invalid value for required argument 'Started'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Task
	err := ctx.RegisterResource("snowflake:index/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("snowflake:index/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
	// of a session (e.g. network outage, browser termination, service interruption). For more information, check
	// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
	AbortDetachedQuery *bool `pulumi:"abortDetachedQuery"`
	// Specifies one or more predecessor tasks for the current task. Use this option to [create a
	// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
	// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Afters []string `pulumi:"afters"`
	// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
	// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
	// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowOverlappingExecution *string `pulumi:"allowOverlappingExecution"`
	// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
	// without an active transaction, is automatically committed after the statement successfully completes. For more
	// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
	// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
	Autocommit *bool `pulumi:"autocommit"`
	// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
	BinaryInputFormat *string `pulumi:"binaryInputFormat"`
	// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
	BinaryOutputFormat *string `pulumi:"binaryOutputFormat"`
	// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
	// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
	ClientMemoryLimit *int `pulumi:"clientMemoryLimit"`
	// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
	// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
	// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
	ClientMetadataRequestUseConnectionCtx *bool `pulumi:"clientMetadataRequestUseConnectionCtx"`
	// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
	// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
	// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
	ClientPrefetchThreads *int `pulumi:"clientPrefetchThreads"`
	// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
	// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
	ClientResultChunkSize *int `pulumi:"clientResultChunkSize"`
	// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
	// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
	ClientResultColumnCaseInsensitive *bool `pulumi:"clientResultColumnCaseInsensitive"`
	// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
	// information, check [CLIENT_SESSION_KEEP_ALIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
	ClientSessionKeepAlive *bool `pulumi:"clientSessionKeepAlive"`
	// Number of seconds in-between client attempts to update the token for the session. For more information, check
	// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
	ClientSessionKeepAliveHeartbeatFrequency *int `pulumi:"clientSessionKeepAliveHeartbeatFrequency"`
	// Specifies the [TIMESTAMP_*
	// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
	// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
	// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
	ClientTimestampTypeMapping *string `pulumi:"clientTimestampTypeMapping"`
	// Specifies a comment for the task.
	Comment *string `pulumi:"comment"`
	// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
	// JSON format.
	Config *string `pulumi:"config"`
	// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database *string `pulumi:"database"`
	// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
	DateInputFormat *string `pulumi:"dateInputFormat"`
	// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
	DateOutputFormat *string `pulumi:"dateOutputFormat"`
	// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
	// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
	// support the values in the output columns of the unload SQL statement or source table). For more information, check
	// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
	EnableUnloadPhysicalTypeOptimization *bool `pulumi:"enableUnloadPhysicalTypeOptimization"`
	// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
	// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ErrorIntegration *string `pulumi:"errorIntegration"`
	// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
	// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
	// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
	ErrorOnNondeterministicMerge *bool `pulumi:"errorOnNondeterministicMerge"`
	// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
	// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
	// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
	ErrorOnNondeterministicUpdate *bool `pulumi:"errorOnNondeterministicUpdate"`
	// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
	// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
	// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
	// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Finalize *string `pulumi:"finalize"`
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `pulumi:"fullyQualifiedName"`
	// Display format for [GEOGRAPHY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
	// information, check [GEOGRAPHY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
	GeographyOutputFormat *string `pulumi:"geographyOutputFormat"`
	// Display format for [GEOMETRY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
	// information, check [GEOMETRY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
	GeometryOutputFormat *string `pulumi:"geometryOutputFormat"`
	// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
	JdbcTreatTimestampNtzAsUtc *bool `pulumi:"jdbcTreatTimestampNtzAsUtc"`
	// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
	// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
	// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
	JdbcUseSessionTimezone *bool `pulumi:"jdbcUseSessionTimezone"`
	// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
	// insert newline characters after each element. For more information, check [JSON_INDENT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
	JsonIndent *int `pulumi:"jsonIndent"`
	// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
	// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
	LockTimeout *int `pulumi:"lockTimeout"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
	// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
	// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Number of statements to execute when using the multi-statement capability. For more information, check
	// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
	MultiStatementCount *int `pulumi:"multiStatementCount"`
	// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
	// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
	// auto-incremented column in [increasing or decreasing
	// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
	// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
	NoorderSequenceAsDefault *bool `pulumi:"noorderSequenceAsDefault"`
	// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
	// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
	OdbcTreatDecimalAsInt *bool `pulumi:"odbcTreatDecimalAsInt"`
	// Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.
	Parameters []TaskParameter `pulumi:"parameters"`
	// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
	// displayed in the output of the [QUERY_HISTORY,
	// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
	// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
	QueryTag *string `pulumi:"queryTag"`
	// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
	// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
	// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
	// You can use this parameter in situations in which [third-party applications always use double quotes around
	// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
	// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
	// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
	RowsPerResultset *int `pulumi:"rowsPerResultset"`
	// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
	// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
	// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
	// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
	// For more information, check [S3_STAGE_VPCE_DNS_NAME
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
	S3StageVpceDnsName *string `pulumi:"s3StageVpceDnsName"`
	// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
	// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
	Schedule *TaskSchedule `pulumi:"schedule"`
	// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema *string `pulumi:"schema"`
	// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
	// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
	// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
	// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
	SearchPath *string `pulumi:"searchPath"`
	// Outputs the result of `SHOW TASKS` for the given task.
	ShowOutputs []TaskShowOutput `pulumi:"showOutputs"`
	// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
	SqlStatement *string `pulumi:"sqlStatement"`
	// Specifies if the task should be started or suspended.
	Started *bool `pulumi:"started"`
	// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
	// by the system. This parameter can be used in conjunction with the
	// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
	// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
	StatementQueuedTimeoutInSeconds *int `pulumi:"statementQueuedTimeoutInSeconds"`
	// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
	// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
	StatementTimeoutInSeconds *int `pulumi:"statementTimeoutInSeconds"`
	// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
	// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
	// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
	// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
	// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
	StrictJsonOutput *bool `pulumi:"strictJsonOutput"`
	// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
	// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
	// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
	// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
	// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
	// session). For more information, check [TIME_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
	TimeInputFormat *string `pulumi:"timeInputFormat"`
	// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
	TimeOutputFormat *string `pulumi:"timeOutputFormat"`
	// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
	// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
	// check [TIMESTAMP_DAY_IS_ALWAYS_24H
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
	TimestampDayIsAlways24h *bool `pulumi:"timestampDayIsAlways24h"`
	// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
	// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
	// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
	TimestampInputFormat *string `pulumi:"timestampInputFormat"`
	// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
	TimestampLtzOutputFormat *string `pulumi:"timestampLtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
	TimestampNtzOutputFormat *string `pulumi:"timestampNtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
	// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
	TimestampOutputFormat *string `pulumi:"timestampOutputFormat"`
	// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
	// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
	TimestampTypeMapping *string `pulumi:"timestampTypeMapping"`
	// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
	TimestampTzOutputFormat *string `pulumi:"timestampTzOutputFormat"`
	// Specifies the time zone for the session. You can specify a [time zone
	// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
	// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
	// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
	// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
	Timezone *string `pulumi:"timezone"`
	// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
	// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
	// more information, check [TRANSACTION_ABORT_ON_ERROR
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
	TransactionAbortOnError *bool `pulumi:"transactionAbortOnError"`
	// Specifies the isolation level for transactions in the user session. For more information, check
	// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
	TransactionDefaultIsolationLevel *string `pulumi:"transactionDefaultIsolationLevel"`
	// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
	// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
	// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
	TwoDigitCenturyStart *int `pulumi:"twoDigitCenturyStart"`
	// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
	// information, check [UNSUPPORTED_DDL_ACTION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
	UnsupportedDdlAction *string `pulumi:"unsupportedDdlAction"`
	// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
	// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
	UseCachedResult *bool `pulumi:"useCachedResult"`
	// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
	// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
	// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
	// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds For more information, check
	// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
	// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
	// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
	// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
	// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
	Warehouse *string `pulumi:"warehouse"`
	// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
	// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
	// first week of the year and December 31 is included in the last week of the year. For more information, check
	// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
	WeekOfYearPolicy *int `pulumi:"weekOfYearPolicy"`
	// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
	// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
	// day of the week. For more information, check [WEEK_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
	WeekStart *int `pulumi:"weekStart"`
	// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
	// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
	// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
	// as a predecessor also don’t run.
	When *string `pulumi:"when"`
}

type TaskState struct {
	// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
	// of a session (e.g. network outage, browser termination, service interruption). For more information, check
	// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
	AbortDetachedQuery pulumi.BoolPtrInput
	// Specifies one or more predecessor tasks for the current task. Use this option to [create a
	// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
	// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Afters pulumi.StringArrayInput
	// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
	// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
	// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowOverlappingExecution pulumi.StringPtrInput
	// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
	// without an active transaction, is automatically committed after the statement successfully completes. For more
	// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
	// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
	Autocommit pulumi.BoolPtrInput
	// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
	BinaryInputFormat pulumi.StringPtrInput
	// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
	BinaryOutputFormat pulumi.StringPtrInput
	// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
	// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
	ClientMemoryLimit pulumi.IntPtrInput
	// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
	// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
	// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
	ClientMetadataRequestUseConnectionCtx pulumi.BoolPtrInput
	// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
	// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
	// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
	ClientPrefetchThreads pulumi.IntPtrInput
	// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
	// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
	ClientResultChunkSize pulumi.IntPtrInput
	// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
	// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
	ClientResultColumnCaseInsensitive pulumi.BoolPtrInput
	// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
	// information, check [CLIENT_SESSION_KEEP_ALIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
	ClientSessionKeepAlive pulumi.BoolPtrInput
	// Number of seconds in-between client attempts to update the token for the session. For more information, check
	// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
	ClientSessionKeepAliveHeartbeatFrequency pulumi.IntPtrInput
	// Specifies the [TIMESTAMP_*
	// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
	// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
	// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
	ClientTimestampTypeMapping pulumi.StringPtrInput
	// Specifies a comment for the task.
	Comment pulumi.StringPtrInput
	// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
	// JSON format.
	Config pulumi.StringPtrInput
	// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringPtrInput
	// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
	DateInputFormat pulumi.StringPtrInput
	// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
	DateOutputFormat pulumi.StringPtrInput
	// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
	// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
	// support the values in the output columns of the unload SQL statement or source table). For more information, check
	// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
	EnableUnloadPhysicalTypeOptimization pulumi.BoolPtrInput
	// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
	// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ErrorIntegration pulumi.StringPtrInput
	// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
	// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
	// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
	ErrorOnNondeterministicMerge pulumi.BoolPtrInput
	// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
	// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
	// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
	ErrorOnNondeterministicUpdate pulumi.BoolPtrInput
	// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
	// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
	// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
	// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Finalize pulumi.StringPtrInput
	// Fully qualified name of the resource. For more information, see [object name
	// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName pulumi.StringPtrInput
	// Display format for [GEOGRAPHY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
	// information, check [GEOGRAPHY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
	GeographyOutputFormat pulumi.StringPtrInput
	// Display format for [GEOMETRY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
	// information, check [GEOMETRY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
	GeometryOutputFormat pulumi.StringPtrInput
	// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
	JdbcTreatTimestampNtzAsUtc pulumi.BoolPtrInput
	// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
	// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
	// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
	JdbcUseSessionTimezone pulumi.BoolPtrInput
	// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
	// insert newline characters after each element. For more information, check [JSON_INDENT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
	JsonIndent pulumi.IntPtrInput
	// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
	// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
	LockTimeout pulumi.IntPtrInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
	// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
	// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// Number of statements to execute when using the multi-statement capability. For more information, check
	// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
	MultiStatementCount pulumi.IntPtrInput
	// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
	// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
	// auto-incremented column in [increasing or decreasing
	// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
	// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
	NoorderSequenceAsDefault pulumi.BoolPtrInput
	// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
	// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
	OdbcTreatDecimalAsInt pulumi.BoolPtrInput
	// Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.
	Parameters TaskParameterArrayInput
	// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
	// displayed in the output of the [QUERY_HISTORY,
	// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
	// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
	QueryTag pulumi.StringPtrInput
	// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
	// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
	// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
	// You can use this parameter in situations in which [third-party applications always use double quotes around
	// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
	// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
	// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
	RowsPerResultset pulumi.IntPtrInput
	// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
	// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
	// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
	// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
	// For more information, check [S3_STAGE_VPCE_DNS_NAME
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
	S3StageVpceDnsName pulumi.StringPtrInput
	// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
	// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
	Schedule TaskSchedulePtrInput
	// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringPtrInput
	// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
	// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
	// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
	// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
	SearchPath pulumi.StringPtrInput
	// Outputs the result of `SHOW TASKS` for the given task.
	ShowOutputs TaskShowOutputArrayInput
	// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
	SqlStatement pulumi.StringPtrInput
	// Specifies if the task should be started or suspended.
	Started pulumi.BoolPtrInput
	// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
	// by the system. This parameter can be used in conjunction with the
	// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
	// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
	StatementQueuedTimeoutInSeconds pulumi.IntPtrInput
	// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
	// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
	StatementTimeoutInSeconds pulumi.IntPtrInput
	// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
	// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
	// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
	// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
	// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
	StrictJsonOutput pulumi.BoolPtrInput
	// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
	// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
	// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
	// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
	// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
	// session). For more information, check [TIME_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
	TimeInputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
	TimeOutputFormat pulumi.StringPtrInput
	// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
	// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
	// check [TIMESTAMP_DAY_IS_ALWAYS_24H
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
	TimestampDayIsAlways24h pulumi.BoolPtrInput
	// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
	// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
	// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
	TimestampInputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
	TimestampLtzOutputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
	TimestampNtzOutputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
	// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
	TimestampOutputFormat pulumi.StringPtrInput
	// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
	// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
	TimestampTypeMapping pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
	TimestampTzOutputFormat pulumi.StringPtrInput
	// Specifies the time zone for the session. You can specify a [time zone
	// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
	// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
	// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
	// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
	Timezone pulumi.StringPtrInput
	// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
	// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
	// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
	// more information, check [TRANSACTION_ABORT_ON_ERROR
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
	TransactionAbortOnError pulumi.BoolPtrInput
	// Specifies the isolation level for transactions in the user session. For more information, check
	// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
	TransactionDefaultIsolationLevel pulumi.StringPtrInput
	// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
	// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
	// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
	TwoDigitCenturyStart pulumi.IntPtrInput
	// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
	// information, check [UNSUPPORTED_DDL_ACTION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
	UnsupportedDdlAction pulumi.StringPtrInput
	// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
	// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
	UseCachedResult pulumi.BoolPtrInput
	// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
	// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
	// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
	// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds For more information, check
	// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
	// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntPtrInput
	// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
	// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
	// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
	Warehouse pulumi.StringPtrInput
	// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
	// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
	// first week of the year and December 31 is included in the last week of the year. For more information, check
	// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
	WeekOfYearPolicy pulumi.IntPtrInput
	// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
	// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
	// day of the week. For more information, check [WEEK_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
	WeekStart pulumi.IntPtrInput
	// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
	// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
	// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
	// as a predecessor also don’t run.
	When pulumi.StringPtrInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
	// of a session (e.g. network outage, browser termination, service interruption). For more information, check
	// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
	AbortDetachedQuery *bool `pulumi:"abortDetachedQuery"`
	// Specifies one or more predecessor tasks for the current task. Use this option to [create a
	// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
	// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Afters []string `pulumi:"afters"`
	// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
	// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
	// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowOverlappingExecution *string `pulumi:"allowOverlappingExecution"`
	// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
	// without an active transaction, is automatically committed after the statement successfully completes. For more
	// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
	// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
	Autocommit *bool `pulumi:"autocommit"`
	// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
	BinaryInputFormat *string `pulumi:"binaryInputFormat"`
	// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
	BinaryOutputFormat *string `pulumi:"binaryOutputFormat"`
	// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
	// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
	ClientMemoryLimit *int `pulumi:"clientMemoryLimit"`
	// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
	// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
	// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
	ClientMetadataRequestUseConnectionCtx *bool `pulumi:"clientMetadataRequestUseConnectionCtx"`
	// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
	// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
	// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
	ClientPrefetchThreads *int `pulumi:"clientPrefetchThreads"`
	// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
	// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
	ClientResultChunkSize *int `pulumi:"clientResultChunkSize"`
	// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
	// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
	ClientResultColumnCaseInsensitive *bool `pulumi:"clientResultColumnCaseInsensitive"`
	// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
	// information, check [CLIENT_SESSION_KEEP_ALIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
	ClientSessionKeepAlive *bool `pulumi:"clientSessionKeepAlive"`
	// Number of seconds in-between client attempts to update the token for the session. For more information, check
	// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
	ClientSessionKeepAliveHeartbeatFrequency *int `pulumi:"clientSessionKeepAliveHeartbeatFrequency"`
	// Specifies the [TIMESTAMP_*
	// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
	// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
	// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
	ClientTimestampTypeMapping *string `pulumi:"clientTimestampTypeMapping"`
	// Specifies a comment for the task.
	Comment *string `pulumi:"comment"`
	// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
	// JSON format.
	Config *string `pulumi:"config"`
	// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database string `pulumi:"database"`
	// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
	DateInputFormat *string `pulumi:"dateInputFormat"`
	// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
	DateOutputFormat *string `pulumi:"dateOutputFormat"`
	// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
	// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
	// support the values in the output columns of the unload SQL statement or source table). For more information, check
	// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
	EnableUnloadPhysicalTypeOptimization *bool `pulumi:"enableUnloadPhysicalTypeOptimization"`
	// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
	// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ErrorIntegration *string `pulumi:"errorIntegration"`
	// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
	// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
	// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
	ErrorOnNondeterministicMerge *bool `pulumi:"errorOnNondeterministicMerge"`
	// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
	// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
	// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
	ErrorOnNondeterministicUpdate *bool `pulumi:"errorOnNondeterministicUpdate"`
	// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
	// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
	// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
	// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Finalize *string `pulumi:"finalize"`
	// Display format for [GEOGRAPHY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
	// information, check [GEOGRAPHY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
	GeographyOutputFormat *string `pulumi:"geographyOutputFormat"`
	// Display format for [GEOMETRY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
	// information, check [GEOMETRY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
	GeometryOutputFormat *string `pulumi:"geometryOutputFormat"`
	// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
	JdbcTreatTimestampNtzAsUtc *bool `pulumi:"jdbcTreatTimestampNtzAsUtc"`
	// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
	// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
	// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
	JdbcUseSessionTimezone *bool `pulumi:"jdbcUseSessionTimezone"`
	// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
	// insert newline characters after each element. For more information, check [JSON_INDENT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
	JsonIndent *int `pulumi:"jsonIndent"`
	// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
	// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
	LockTimeout *int `pulumi:"lockTimeout"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
	// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
	// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel *string `pulumi:"logLevel"`
	// Number of statements to execute when using the multi-statement capability. For more information, check
	// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
	MultiStatementCount *int `pulumi:"multiStatementCount"`
	// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name *string `pulumi:"name"`
	// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
	// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
	// auto-incremented column in [increasing or decreasing
	// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
	// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
	NoorderSequenceAsDefault *bool `pulumi:"noorderSequenceAsDefault"`
	// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
	// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
	OdbcTreatDecimalAsInt *bool `pulumi:"odbcTreatDecimalAsInt"`
	// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
	// displayed in the output of the [QUERY_HISTORY,
	// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
	// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
	QueryTag *string `pulumi:"queryTag"`
	// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
	// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
	// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
	// You can use this parameter in situations in which [third-party applications always use double quotes around
	// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
	// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase *bool `pulumi:"quotedIdentifiersIgnoreCase"`
	// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
	// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
	RowsPerResultset *int `pulumi:"rowsPerResultset"`
	// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
	// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
	// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
	// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
	// For more information, check [S3_STAGE_VPCE_DNS_NAME
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
	S3StageVpceDnsName *string `pulumi:"s3StageVpceDnsName"`
	// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
	// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
	Schedule *TaskSchedule `pulumi:"schedule"`
	// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema string `pulumi:"schema"`
	// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
	// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
	// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
	// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
	SearchPath *string `pulumi:"searchPath"`
	// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
	SqlStatement string `pulumi:"sqlStatement"`
	// Specifies if the task should be started or suspended.
	Started bool `pulumi:"started"`
	// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
	// by the system. This parameter can be used in conjunction with the
	// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
	// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
	StatementQueuedTimeoutInSeconds *int `pulumi:"statementQueuedTimeoutInSeconds"`
	// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
	// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
	StatementTimeoutInSeconds *int `pulumi:"statementTimeoutInSeconds"`
	// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
	// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
	// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
	// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
	// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
	StrictJsonOutput *bool `pulumi:"strictJsonOutput"`
	// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
	// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures *int `pulumi:"suspendTaskAfterNumFailures"`
	// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
	// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
	// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts *int `pulumi:"taskAutoRetryAttempts"`
	// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
	// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
	// session). For more information, check [TIME_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
	TimeInputFormat *string `pulumi:"timeInputFormat"`
	// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
	TimeOutputFormat *string `pulumi:"timeOutputFormat"`
	// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
	// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
	// check [TIMESTAMP_DAY_IS_ALWAYS_24H
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
	TimestampDayIsAlways24h *bool `pulumi:"timestampDayIsAlways24h"`
	// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
	// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
	// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
	TimestampInputFormat *string `pulumi:"timestampInputFormat"`
	// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
	TimestampLtzOutputFormat *string `pulumi:"timestampLtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
	TimestampNtzOutputFormat *string `pulumi:"timestampNtzOutputFormat"`
	// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
	// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
	TimestampOutputFormat *string `pulumi:"timestampOutputFormat"`
	// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
	// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
	TimestampTypeMapping *string `pulumi:"timestampTypeMapping"`
	// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
	TimestampTzOutputFormat *string `pulumi:"timestampTzOutputFormat"`
	// Specifies the time zone for the session. You can specify a [time zone
	// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
	// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
	// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
	// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
	Timezone *string `pulumi:"timezone"`
	// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
	// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel *string `pulumi:"traceLevel"`
	// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
	// more information, check [TRANSACTION_ABORT_ON_ERROR
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
	TransactionAbortOnError *bool `pulumi:"transactionAbortOnError"`
	// Specifies the isolation level for transactions in the user session. For more information, check
	// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
	TransactionDefaultIsolationLevel *string `pulumi:"transactionDefaultIsolationLevel"`
	// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
	// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
	// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
	TwoDigitCenturyStart *int `pulumi:"twoDigitCenturyStart"`
	// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
	// information, check [UNSUPPORTED_DDL_ACTION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
	UnsupportedDdlAction *string `pulumi:"unsupportedDdlAction"`
	// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
	// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
	UseCachedResult *bool `pulumi:"useCachedResult"`
	// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
	// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
	// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
	// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize *string `pulumi:"userTaskManagedInitialWarehouseSize"`
	// Minimum amount of time between Triggered Task executions in seconds For more information, check
	// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
	UserTaskMinimumTriggerIntervalInSeconds *int `pulumi:"userTaskMinimumTriggerIntervalInSeconds"`
	// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
	// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs *int `pulumi:"userTaskTimeoutMs"`
	// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
	// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
	// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
	Warehouse *string `pulumi:"warehouse"`
	// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
	// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
	// first week of the year and December 31 is included in the last week of the year. For more information, check
	// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
	WeekOfYearPolicy *int `pulumi:"weekOfYearPolicy"`
	// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
	// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
	// day of the week. For more information, check [WEEK_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
	WeekStart *int `pulumi:"weekStart"`
	// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
	// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
	// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
	// as a predecessor also don’t run.
	When *string `pulumi:"when"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
	// of a session (e.g. network outage, browser termination, service interruption). For more information, check
	// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
	AbortDetachedQuery pulumi.BoolPtrInput
	// Specifies one or more predecessor tasks for the current task. Use this option to [create a
	// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
	// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Afters pulumi.StringArrayInput
	// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
	// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
	// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AllowOverlappingExecution pulumi.StringPtrInput
	// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
	// without an active transaction, is automatically committed after the statement successfully completes. For more
	// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
	// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
	Autocommit pulumi.BoolPtrInput
	// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
	BinaryInputFormat pulumi.StringPtrInput
	// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
	// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
	// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
	BinaryOutputFormat pulumi.StringPtrInput
	// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
	// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
	ClientMemoryLimit pulumi.IntPtrInput
	// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
	// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
	// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
	ClientMetadataRequestUseConnectionCtx pulumi.BoolPtrInput
	// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
	// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
	// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
	ClientPrefetchThreads pulumi.IntPtrInput
	// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
	// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
	ClientResultChunkSize pulumi.IntPtrInput
	// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
	// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
	ClientResultColumnCaseInsensitive pulumi.BoolPtrInput
	// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
	// information, check [CLIENT_SESSION_KEEP_ALIVE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
	ClientSessionKeepAlive pulumi.BoolPtrInput
	// Number of seconds in-between client attempts to update the token for the session. For more information, check
	// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
	ClientSessionKeepAliveHeartbeatFrequency pulumi.IntPtrInput
	// Specifies the [TIMESTAMP_*
	// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
	// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
	// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
	ClientTimestampTypeMapping pulumi.StringPtrInput
	// Specifies a comment for the task.
	Comment pulumi.StringPtrInput
	// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
	// JSON format.
	Config pulumi.StringPtrInput
	// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Database pulumi.StringInput
	// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
	DateInputFormat pulumi.StringPtrInput
	// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
	DateOutputFormat pulumi.StringPtrInput
	// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
	// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
	// support the values in the output columns of the unload SQL statement or source table). For more information, check
	// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
	EnableUnloadPhysicalTypeOptimization pulumi.BoolPtrInput
	// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
	// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
	ErrorIntegration pulumi.StringPtrInput
	// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
	// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
	// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
	ErrorOnNondeterministicMerge pulumi.BoolPtrInput
	// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
	// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
	// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
	ErrorOnNondeterministicUpdate pulumi.BoolPtrInput
	// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
	// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
	// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
	// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
	// (read more here), avoid using the following characters: `|`, `.`, `"`.
	Finalize pulumi.StringPtrInput
	// Display format for [GEOGRAPHY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
	// information, check [GEOGRAPHY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
	GeographyOutputFormat pulumi.StringPtrInput
	// Display format for [GEOMETRY
	// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
	// information, check [GEOMETRY_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
	GeometryOutputFormat pulumi.StringPtrInput
	// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
	JdbcTreatTimestampNtzAsUtc pulumi.BoolPtrInput
	// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
	// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
	// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
	JdbcUseSessionTimezone pulumi.BoolPtrInput
	// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
	// insert newline characters after each element. For more information, check [JSON_INDENT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
	JsonIndent pulumi.IntPtrInput
	// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
	// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
	LockTimeout pulumi.IntPtrInput
	// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
	// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
	// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
	LogLevel pulumi.StringPtrInput
	// Number of statements to execute when using the multi-statement capability. For more information, check
	// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
	MultiStatementCount pulumi.IntPtrInput
	// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
	// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
	Name pulumi.StringPtrInput
	// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
	// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
	// auto-incremented column in [increasing or decreasing
	// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
	// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
	NoorderSequenceAsDefault pulumi.BoolPtrInput
	// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
	// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
	OdbcTreatDecimalAsInt pulumi.BoolPtrInput
	// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
	// displayed in the output of the [QUERY_HISTORY,
	// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
	// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
	QueryTag pulumi.StringPtrInput
	// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
	// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
	// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
	// You can use this parameter in situations in which [third-party applications always use double quotes around
	// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
	// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
	QuotedIdentifiersIgnoreCase pulumi.BoolPtrInput
	// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
	// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
	RowsPerResultset pulumi.IntPtrInput
	// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
	// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
	// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
	// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
	// For more information, check [S3_STAGE_VPCE_DNS_NAME
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
	S3StageVpceDnsName pulumi.StringPtrInput
	// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
	// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
	Schedule TaskSchedulePtrInput
	// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
	// characters: `|`, `.`, `"`.
	Schema pulumi.StringInput
	// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
	// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
	// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
	// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
	SearchPath pulumi.StringPtrInput
	// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
	SqlStatement pulumi.StringInput
	// Specifies if the task should be started or suspended.
	Started pulumi.BoolInput
	// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
	// by the system. This parameter can be used in conjunction with the
	// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
	// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
	StatementQueuedTimeoutInSeconds pulumi.IntPtrInput
	// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
	// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
	StatementTimeoutInSeconds pulumi.IntPtrInput
	// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
	// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
	// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
	// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
	// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
	StrictJsonOutput pulumi.BoolPtrInput
	// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
	// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
	SuspendTaskAfterNumFailures pulumi.IntPtrInput
	// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
	// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
	// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
	TaskAutoRetryAttempts pulumi.IntPtrInput
	// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
	// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
	// session). For more information, check [TIME_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
	TimeInputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
	TimeOutputFormat pulumi.StringPtrInput
	// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
	// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
	// check [TIMESTAMP_DAY_IS_ALWAYS_24H
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
	TimestampDayIsAlways24h pulumi.BoolPtrInput
	// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
	// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
	// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
	TimestampInputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
	TimestampLtzOutputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
	TimestampNtzOutputFormat pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
	// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
	TimestampOutputFormat pulumi.StringPtrInput
	// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
	// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
	TimestampTypeMapping pulumi.StringPtrInput
	// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
	// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
	// more information, see [Date and time input and output
	// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
	// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
	TimestampTzOutputFormat pulumi.StringPtrInput
	// Specifies the time zone for the session. You can specify a [time zone
	// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
	// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
	// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
	// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
	Timezone pulumi.StringPtrInput
	// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
	// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
	// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
	TraceLevel pulumi.StringPtrInput
	// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
	// more information, check [TRANSACTION_ABORT_ON_ERROR
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
	TransactionAbortOnError pulumi.BoolPtrInput
	// Specifies the isolation level for transactions in the user session. For more information, check
	// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
	TransactionDefaultIsolationLevel pulumi.StringPtrInput
	// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
	// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
	// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
	TwoDigitCenturyStart pulumi.IntPtrInput
	// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
	// information, check [UNSUPPORTED_DDL_ACTION
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
	UnsupportedDdlAction pulumi.StringPtrInput
	// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
	// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
	UseCachedResult pulumi.BoolPtrInput
	// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
	// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
	// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
	// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
	UserTaskManagedInitialWarehouseSize pulumi.StringPtrInput
	// Minimum amount of time between Triggered Task executions in seconds For more information, check
	// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
	UserTaskMinimumTriggerIntervalInSeconds pulumi.IntPtrInput
	// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
	// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
	UserTaskTimeoutMs pulumi.IntPtrInput
	// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
	// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
	// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
	Warehouse pulumi.StringPtrInput
	// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
	// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
	// first week of the year and December 31 is included in the last week of the year. For more information, check
	// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
	WeekOfYearPolicy pulumi.IntPtrInput
	// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
	// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
	// day of the week. For more information, check [WEEK_START
	// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
	WeekStart pulumi.IntPtrInput
	// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
	// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
	// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
	// as a predecessor also don’t run.
	When pulumi.StringPtrInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// Specifies the action that Snowflake performs for in-progress queries if connectivity is lost due to abrupt termination
// of a session (e.g. network outage, browser termination, service interruption). For more information, check
// [ABORT_DETACHED_QUERY docs](https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query).
func (o TaskOutput) AbortDetachedQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.AbortDetachedQuery }).(pulumi.BoolOutput)
}

// Specifies one or more predecessor tasks for the current task. Use this option to [create a
// DAG](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-task-dag) of tasks or add this task to an existing
// DAG. A DAG is a series of tasks that starts with a scheduled root task and is linked together by dependencies. Due to
// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o TaskOutput) Afters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Task) pulumi.StringArrayOutput { return v.Afters }).(pulumi.StringArrayOutput)
}

// By default, Snowflake ensures that only one instance of a particular DAG is allowed to run at a time, setting the
// parameter value to TRUE permits DAG runs to overlap. Available options are: "true" or "false". When the value is not set
// in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
func (o TaskOutput) AllowOverlappingExecution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.AllowOverlappingExecution }).(pulumi.StringPtrOutput)
}

// Specifies whether autocommit is enabled for the session. Autocommit determines whether a DML statement, when executed
// without an active transaction, is automatically committed after the statement successfully completes. For more
// information, see [Transactions](https://docs.snowflake.com/en/sql-reference/transactions). For more information, check
// [AUTOCOMMIT docs](https://docs.snowflake.com/en/sql-reference/parameters#autocommit).
func (o TaskOutput) Autocommit() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.Autocommit }).(pulumi.BoolOutput)
}

// The format of VARCHAR values passed as input to VARCHAR-to-BINARY conversion functions. For more information, see
// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
// [BINARY_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-input-format).
func (o TaskOutput) BinaryInputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.BinaryInputFormat }).(pulumi.StringOutput)
}

// The format for VARCHAR values returned as output by BINARY-to-VARCHAR conversion functions. For more information, see
// [Binary input and output](https://docs.snowflake.com/en/sql-reference/binary-input-output). For more information, check
// [BINARY_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#binary-output-format).
func (o TaskOutput) BinaryOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.BinaryOutputFormat }).(pulumi.StringOutput)
}

// Parameter that specifies the maximum amount of memory the JDBC driver or ODBC driver should use for the result set from
// queries (in MB). For more information, check [CLIENT_MEMORY_LIMIT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-memory-limit).
func (o TaskOutput) ClientMemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.ClientMemoryLimit }).(pulumi.IntOutput)
}

// For specific ODBC functions and JDBC methods, this parameter can change the default search scope from all
// databases/schemas to the current database/schema. The narrower search typically returns fewer rows and executes more
// quickly. For more information, check [CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-metadata-request-use-connection-ctx).
func (o TaskOutput) ClientMetadataRequestUseConnectionCtx() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.ClientMetadataRequestUseConnectionCtx }).(pulumi.BoolOutput)
}

// Parameter that specifies the number of threads used by the client to pre-fetch large result sets. The driver will
// attempt to honor the parameter value, but defines the minimum and maximum values (depending on your system’s
// resources) to improve performance. For more information, check [CLIENT_PREFETCH_THREADS
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-prefetch-threads).
func (o TaskOutput) ClientPrefetchThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.ClientPrefetchThreads }).(pulumi.IntOutput)
}

// Parameter that specifies the maximum size of each set (or chunk) of query results to download (in MB). The JDBC driver
// downloads query results in chunks. For more information, check [CLIENT_RESULT_CHUNK_SIZE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-chunk-size).
func (o TaskOutput) ClientResultChunkSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.ClientResultChunkSize }).(pulumi.IntOutput)
}

// Parameter that indicates whether to match column name case-insensitively in ResultSet.get* methods in JDBC. For more
// information, check [CLIENT_RESULT_COLUMN_CASE_INSENSITIVE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-result-column-case-insensitive).
func (o TaskOutput) ClientResultColumnCaseInsensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.ClientResultColumnCaseInsensitive }).(pulumi.BoolOutput)
}

// Parameter that indicates whether to force a user to log in again after a period of inactivity in the session. For more
// information, check [CLIENT_SESSION_KEEP_ALIVE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive).
func (o TaskOutput) ClientSessionKeepAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.ClientSessionKeepAlive }).(pulumi.BoolOutput)
}

// Number of seconds in-between client attempts to update the token for the session. For more information, check
// [CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive-heartbeat-frequency).
func (o TaskOutput) ClientSessionKeepAliveHeartbeatFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.ClientSessionKeepAliveHeartbeatFrequency }).(pulumi.IntOutput)
}

// Specifies the [TIMESTAMP_*
// variation](https://docs.snowflake.com/en/sql-reference/data-types-datetime.html#label-datatypes-timestamp-variations) to
// use when binding timestamp variables for JDBC or ODBC applications that use the bind API to load data. For more
// information, check [CLIENT_TIMESTAMP_TYPE_MAPPING
// docs](https://docs.snowflake.com/en/sql-reference/parameters#client-timestamp-type-mapping).
func (o TaskOutput) ClientTimestampTypeMapping() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.ClientTimestampTypeMapping }).(pulumi.StringOutput)
}

// Specifies a comment for the task.
func (o TaskOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Specifies a string representation of key value pairs that can be accessed by all tasks in the task graph. Must be in
// JSON format.
func (o TaskOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Config }).(pulumi.StringPtrOutput)
}

// The database in which to create the task. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o TaskOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Specifies the input format for the DATE data type. For more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [DATE_INPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-input-format).
func (o TaskOutput) DateInputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.DateInputFormat }).(pulumi.StringOutput)
}

// Specifies the display format for the DATE data type. For more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [DATE_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#date-output-format).
func (o TaskOutput) DateOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.DateOutputFormat }).(pulumi.StringOutput)
}

// Specifies whether to set the schema for unloaded Parquet files based on the logical column data types (i.e. the types in
// the unload SQL query or source table) or on the unloaded column values (i.e. the smallest data types and precision that
// support the values in the output columns of the unload SQL statement or source table). For more information, check
// [ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION
// docs](https://docs.snowflake.com/en/sql-reference/parameters#enable-unload-physical-type-optimization).
func (o TaskOutput) EnableUnloadPhysicalTypeOptimization() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.EnableUnloadPhysicalTypeOptimization }).(pulumi.BoolOutput)
}

// Specifies the name of the notification integration used for error notifications. Due to technical limitations (read more
// here), avoid using the following characters: `|`, `.`, `"`. For more information about this resource, see docs.
func (o TaskOutput) ErrorIntegration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.ErrorIntegration }).(pulumi.StringPtrOutput)
}

// Specifies whether to return an error when the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) command is
// used to update or delete a target row that joins multiple source rows and the system cannot determine the action to
// perform on the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_MERGE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge).
func (o TaskOutput) ErrorOnNondeterministicMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.ErrorOnNondeterministicMerge }).(pulumi.BoolOutput)
}

// Specifies whether to return an error when the [UPDATE](https://docs.snowflake.com/en/sql-reference/sql/update) command
// is used to update a target row that joins multiple source rows and the system cannot determine the action to perform on
// the target row. For more information, check [ERROR_ON_NONDETERMINISTIC_UPDATE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-update).
func (o TaskOutput) ErrorOnNondeterministicUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.ErrorOnNondeterministicUpdate }).(pulumi.BoolOutput)
}

// Specifies the name of a root task that the finalizer task is associated with. Finalizer tasks run after all other tasks
// in the task graph run to completion. You can define the SQL of a finalizer task to handle notifications and the release
// and cleanup of resources that a task graph uses. For more information, see [Release and cleanup of task
// graphs](https://docs.snowflake.com/en/user-guide/tasks-graphs.html#label-finalizer-task). Due to technical limitations
// (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o TaskOutput) Finalize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Finalize }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the resource. For more information, see [object name
// resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
func (o TaskOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

// Display format for [GEOGRAPHY
// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geography). For more
// information, check [GEOGRAPHY_OUTPUT_FORMAT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#geography-output-format).
func (o TaskOutput) GeographyOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.GeographyOutputFormat }).(pulumi.StringOutput)
}

// Display format for [GEOMETRY
// values](https://docs.snowflake.com/en/sql-reference/data-types-geospatial.html#label-data-types-geometry). For more
// information, check [GEOMETRY_OUTPUT_FORMAT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#geometry-output-format).
func (o TaskOutput) GeometryOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.GeometryOutputFormat }).(pulumi.StringOutput)
}

// Specifies how JDBC processes TIMESTAMP_NTZ values. For more information, check [JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC
// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-treat-timestamp-ntz-as-utc).
func (o TaskOutput) JdbcTreatTimestampNtzAsUtc() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.JdbcTreatTimestampNtzAsUtc }).(pulumi.BoolOutput)
}

// Specifies whether the JDBC Driver uses the time zone of the JVM or the time zone of the session (specified by the
// [TIMEZONE](https://docs.snowflake.com/en/sql-reference/parameters#label-timezone) parameter) for the getDate(),
// getTime(), and getTimestamp() methods of the ResultSet class. For more information, check [JDBC_USE_SESSION_TIMEZONE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#jdbc-use-session-timezone).
func (o TaskOutput) JdbcUseSessionTimezone() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.JdbcUseSessionTimezone }).(pulumi.BoolOutput)
}

// Specifies the number of blank spaces to indent each new element in JSON output in the session. Also specifies whether to
// insert newline characters after each element. For more information, check [JSON_INDENT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#json-indent).
func (o TaskOutput) JsonIndent() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.JsonIndent }).(pulumi.IntOutput)
}

// Number of seconds to wait while trying to lock a resource, before timing out and aborting the statement. For more
// information, check [LOCK_TIMEOUT docs](https://docs.snowflake.com/en/sql-reference/parameters#lock-timeout).
func (o TaskOutput) LockTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.LockTimeout }).(pulumi.IntOutput)
}

// Specifies the severity level of messages that should be ingested and made available in the active event table. Messages
// at the specified level (and at more severe levels) are ingested. For more information about log levels, see [Setting log
// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-log-level). For more information, check
// [LOG_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#log-level).
func (o TaskOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// Number of statements to execute when using the multi-statement capability. For more information, check
// [MULTI_STATEMENT_COUNT docs](https://docs.snowflake.com/en/sql-reference/parameters#multi-statement-count).
func (o TaskOutput) MultiStatementCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.MultiStatementCount }).(pulumi.IntOutput)
}

// Specifies the identifier for the task; must be unique for the database and schema in which the task is created. Due to
// technical limitations (read more here), avoid using the following characters: `|`, `.`, `"`.
func (o TaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the ORDER or NOORDER property is set by default when you create a new sequence or add a new table
// column. The ORDER and NOORDER properties determine whether or not the values are generated for the sequence or
// auto-incremented column in [increasing or decreasing
// order](https://docs.snowflake.com/en/user-guide/querying-sequences.html#label-querying-sequences-increasing-values). For
// more information, check [NOORDER_SEQUENCE_AS_DEFAULT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#noorder-sequence-as-default).
func (o TaskOutput) NoorderSequenceAsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.NoorderSequenceAsDefault }).(pulumi.BoolOutput)
}

// Specifies how ODBC processes columns that have a scale of zero (0). For more information, check
// [ODBC_TREAT_DECIMAL_AS_INT docs](https://docs.snowflake.com/en/sql-reference/parameters#odbc-treat-decimal-as-int).
func (o TaskOutput) OdbcTreatDecimalAsInt() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.OdbcTreatDecimalAsInt }).(pulumi.BoolOutput)
}

// Outputs the result of `SHOW PARAMETERS IN TASK` for the given task.
func (o TaskOutput) Parameters() TaskParameterArrayOutput {
	return o.ApplyT(func(v *Task) TaskParameterArrayOutput { return v.Parameters }).(TaskParameterArrayOutput)
}

// Optional string that can be used to tag queries and other SQL statements executed within a session. The tags are
// displayed in the output of the [QUERY_HISTORY,
// QUERY_HISTORY_BY_*](https://docs.snowflake.com/en/sql-reference/functions/query_history) functions. For more
// information, check [QUERY_TAG docs](https://docs.snowflake.com/en/sql-reference/parameters#query-tag).
func (o TaskOutput) QueryTag() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.QueryTag }).(pulumi.StringOutput)
}

// Specifies whether letters in double-quoted object identifiers are stored and resolved as uppercase letters. By default,
// Snowflake preserves the case of alphabetic characters when storing and resolving double-quoted identifiers (see
// [Identifier resolution](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing)).
// You can use this parameter in situations in which [third-party applications always use double quotes around
// identifiers](https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html#label-identifier-casing-parameter). For
// more information, check [QUOTED_IDENTIFIERS_IGNORE_CASE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case).
func (o TaskOutput) QuotedIdentifiersIgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.QuotedIdentifiersIgnoreCase }).(pulumi.BoolOutput)
}

// Specifies the maximum number of rows returned in a result set. A value of 0 specifies no maximum. For more information,
// check [ROWS_PER_RESULTSET docs](https://docs.snowflake.com/en/sql-reference/parameters#rows-per-resultset).
func (o TaskOutput) RowsPerResultset() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.RowsPerResultset }).(pulumi.IntOutput)
}

// Specifies the DNS name of an Amazon S3 interface endpoint. Requests sent to the internal stage of an account via [AWS
// PrivateLink for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html)
// use this endpoint to connect. For more information, see [Accessing Internal stages with dedicated interface
// endpoints](https://docs.snowflake.com/en/user-guide/private-internal-stages-aws.html#label-aws-privatelink-internal-stage-network-isolation).
// For more information, check [S3_STAGE_VPCE_DNS_NAME
// docs](https://docs.snowflake.com/en/sql-reference/parameters#s3-stage-vpce-dns-name).
func (o TaskOutput) S3StageVpceDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.S3StageVpceDnsName }).(pulumi.StringOutput)
}

// The schedule for periodically running the task. This can be a cron or interval in minutes. (Conflicts with finalize and
// after; when set, one of the sub-fields `minutes` or `usingCron` should be set)
func (o TaskOutput) Schedule() TaskSchedulePtrOutput {
	return o.ApplyT(func(v *Task) TaskSchedulePtrOutput { return v.Schedule }).(TaskSchedulePtrOutput)
}

// The schema in which to create the task. Due to technical limitations (read more here), avoid using the following
// characters: `|`, `.`, `"`.
func (o TaskOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies the path to search to resolve unqualified object names in queries. For more information, see [Name resolution
// in queries](https://docs.snowflake.com/en/sql-reference/name-resolution.html#label-object-name-resolution-search-path).
// Comma-separated list of identifiers. An identifier can be a fully or partially qualified schema name. For more
// information, check [SEARCH_PATH docs](https://docs.snowflake.com/en/sql-reference/parameters#search-path).
func (o TaskOutput) SearchPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SearchPath }).(pulumi.StringOutput)
}

// Outputs the result of `SHOW TASKS` for the given task.
func (o TaskOutput) ShowOutputs() TaskShowOutputArrayOutput {
	return o.ApplyT(func(v *Task) TaskShowOutputArrayOutput { return v.ShowOutputs }).(TaskShowOutputArrayOutput)
}

// Any single SQL statement, or a call to a stored procedure, executed when the task runs.
func (o TaskOutput) SqlStatement() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SqlStatement }).(pulumi.StringOutput)
}

// Specifies if the task should be started or suspended.
func (o TaskOutput) Started() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.Started }).(pulumi.BoolOutput)
}

// Amount of time, in seconds, a SQL statement (query, DDL, DML, etc.) remains queued for a warehouse before it is canceled
// by the system. This parameter can be used in conjunction with the
// [MAX_CONCURRENCY_LEVEL](https://docs.snowflake.com/en/sql-reference/parameters#label-max-concurrency-level) parameter to
// ensure a warehouse is never backlogged. For more information, check [STATEMENT_QUEUED_TIMEOUT_IN_SECONDS
// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds).
func (o TaskOutput) StatementQueuedTimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.StatementQueuedTimeoutInSeconds }).(pulumi.IntOutput)
}

// Amount of time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system. For
// more information, check [STATEMENT_TIMEOUT_IN_SECONDS
// docs](https://docs.snowflake.com/en/sql-reference/parameters#statement-timeout-in-seconds).
func (o TaskOutput) StatementTimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.StatementTimeoutInSeconds }).(pulumi.IntOutput)
}

// This parameter specifies whether JSON output in a session is compatible with the general standard (as described by
// [http://json.org](http://json.org)). By design, Snowflake allows JSON input that contains non-standard values; however,
// these non-standard values might result in Snowflake outputting JSON that is incompatible with other platforms and
// languages. This parameter, when enabled, ensures that Snowflake outputs valid/compatible JSON. For more information,
// check [STRICT_JSON_OUTPUT docs](https://docs.snowflake.com/en/sql-reference/parameters#strict-json-output).
func (o TaskOutput) StrictJsonOutput() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.StrictJsonOutput }).(pulumi.BoolOutput)
}

// Specifies the number of consecutive failed task runs after which the current task is suspended automatically. The
// default is 0 (no automatic suspension). For more information, check [SUSPEND_TASK_AFTER_NUM_FAILURES
// docs](https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures).
func (o TaskOutput) SuspendTaskAfterNumFailures() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.SuspendTaskAfterNumFailures }).(pulumi.IntOutput)
}

// Specifies the number of automatic task graph retry attempts. If any task graphs complete in a FAILED state, Snowflake
// can automatically retry the task graphs from the last task in the graph that failed. For more information, check
// [TASK_AUTO_RETRY_ATTEMPTS docs](https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts).
func (o TaskOutput) TaskAutoRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.TaskAutoRetryAttempts }).(pulumi.IntOutput)
}

// Specifies the input format for the TIME data type. For more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported time format or AUTO
// (AUTO specifies that Snowflake attempts to automatically detect the format of times stored in the system during the
// session). For more information, check [TIME_INPUT_FORMAT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#time-input-format).
func (o TaskOutput) TimeInputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimeInputFormat }).(pulumi.StringOutput)
}

// Specifies the display format for the TIME data type. For more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [TIME_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#time-output-format).
func (o TaskOutput) TimeOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimeOutputFormat }).(pulumi.StringOutput)
}

// Specifies whether the [DATEADD](https://docs.snowflake.com/en/sql-reference/functions/dateadd) function (and its
// aliases) always consider a day to be exactly 24 hours for expressions that span multiple days. For more information,
// check [TIMESTAMP_DAY_IS_ALWAYS_24H
// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-day-is-always-24h).
func (o TaskOutput) TimestampDayIsAlways24h() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.TimestampDayIsAlways24h }).(pulumi.BoolOutput)
}

// Specifies the input format for the TIMESTAMP data type alias. For more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). Any valid, supported timestamp format or
// AUTO (AUTO specifies that Snowflake attempts to automatically detect the format of timestamps stored in the system
// during the session). For more information, check [TIMESTAMP_INPUT_FORMAT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-input-format).
func (o TaskOutput) TimestampInputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampInputFormat }).(pulumi.StringOutput)
}

// Specifies the display format for the TIMESTAMP_LTZ data type. If no format is specified, defaults to
// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
// more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [TIMESTAMP_LTZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ltz-output-format).
func (o TaskOutput) TimestampLtzOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampLtzOutputFormat }).(pulumi.StringOutput)
}

// Specifies the display format for the TIMESTAMP_NTZ data type. For more information, check [TIMESTAMP_NTZ_OUTPUT_FORMAT
// docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-ntz-output-format).
func (o TaskOutput) TimestampNtzOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampNtzOutputFormat }).(pulumi.StringOutput)
}

// Specifies the display format for the TIMESTAMP data type alias. For more information, see [Date and time input and
// output formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [TIMESTAMP_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-output-format).
func (o TaskOutput) TimestampOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampOutputFormat }).(pulumi.StringOutput)
}

// Specifies the TIMESTAMP_* variation that the TIMESTAMP data type alias maps to. For more information, check
// [TIMESTAMP_TYPE_MAPPING docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-type-mapping).
func (o TaskOutput) TimestampTypeMapping() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampTypeMapping }).(pulumi.StringOutput)
}

// Specifies the display format for the TIMESTAMP_TZ data type. If no format is specified, defaults to
// [TIMESTAMP_OUTPUT_FORMAT](https://docs.snowflake.com/en/sql-reference/parameters#label-timestamp-output-format). For
// more information, see [Date and time input and output
// formats](https://docs.snowflake.com/en/sql-reference/date-time-input-output). For more information, check
// [TIMESTAMP_TZ_OUTPUT_FORMAT docs](https://docs.snowflake.com/en/sql-reference/parameters#timestamp-tz-output-format).
func (o TaskOutput) TimestampTzOutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TimestampTzOutputFormat }).(pulumi.StringOutput)
}

// Specifies the time zone for the session. You can specify a [time zone
// name](https://data.iana.org/time-zones/tzdb-2021a/zone1970.tab) or a [link
// name](https://data.iana.org/time-zones/tzdb-2021a/backward) from release 2021a of the [IANA Time Zone
// Database](https://www.iana.org/time-zones) (e.g. America/Los_Angeles, Europe/London, UTC, Etc/GMT, etc.). For more
// information, check [TIMEZONE docs](https://docs.snowflake.com/en/sql-reference/parameters#timezone).
func (o TaskOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Controls how trace events are ingested into the event table. For more information about trace levels, see [Setting trace
// level](https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-trace-level). For more information, check
// [TRACE_LEVEL docs](https://docs.snowflake.com/en/sql-reference/parameters#trace-level).
func (o TaskOutput) TraceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TraceLevel }).(pulumi.StringOutput)
}

// Specifies the action to perform when a statement issued within a non-autocommit transaction returns with an error. For
// more information, check [TRANSACTION_ABORT_ON_ERROR
// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-abort-on-error).
func (o TaskOutput) TransactionAbortOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.TransactionAbortOnError }).(pulumi.BoolOutput)
}

// Specifies the isolation level for transactions in the user session. For more information, check
// [TRANSACTION_DEFAULT_ISOLATION_LEVEL
// docs](https://docs.snowflake.com/en/sql-reference/parameters#transaction-default-isolation-level).
func (o TaskOutput) TransactionDefaultIsolationLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TransactionDefaultIsolationLevel }).(pulumi.StringOutput)
}

// Specifies the “century start” year for 2-digit years (i.e. the earliest year such dates can represent). This
// parameter prevents ambiguous dates when importing or converting data with the `YY` date format component (i.e. years
// represented as 2 digits). For more information, check [TWO_DIGIT_CENTURY_START
// docs](https://docs.snowflake.com/en/sql-reference/parameters#two-digit-century-start).
func (o TaskOutput) TwoDigitCenturyStart() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.TwoDigitCenturyStart }).(pulumi.IntOutput)
}

// Determines if an unsupported (i.e. non-default) value specified for a constraint property returns an error. For more
// information, check [UNSUPPORTED_DDL_ACTION
// docs](https://docs.snowflake.com/en/sql-reference/parameters#unsupported-ddl-action).
func (o TaskOutput) UnsupportedDdlAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.UnsupportedDdlAction }).(pulumi.StringOutput)
}

// Specifies whether to reuse persisted query results, if available, when a matching query is submitted. For more
// information, check [USE_CACHED_RESULT docs](https://docs.snowflake.com/en/sql-reference/parameters#use-cached-result).
func (o TaskOutput) UseCachedResult() pulumi.BoolOutput {
	return o.ApplyT(func(v *Task) pulumi.BoolOutput { return v.UseCachedResult }).(pulumi.BoolOutput)
}

// Specifies the size of the compute resources to provision for the first run of the task, before a task history is
// available for Snowflake to determine an ideal size. Once a task has successfully completed a few runs, Snowflake ignores
// this parameter setting. Valid values are (case-insensitive): %s. (Conflicts with warehouse). For more information about
// warehouses, see docs. For more information, check [USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE
// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size).
func (o TaskOutput) UserTaskManagedInitialWarehouseSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.UserTaskManagedInitialWarehouseSize }).(pulumi.StringOutput)
}

// Minimum amount of time between Triggered Task executions in seconds For more information, check
// [USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS
// docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-minimum-trigger-interval-in-seconds).
func (o TaskOutput) UserTaskMinimumTriggerIntervalInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.UserTaskMinimumTriggerIntervalInSeconds }).(pulumi.IntOutput)
}

// Specifies the time limit on a single run of the task before it times out (in milliseconds). For more information, check
// [USER_TASK_TIMEOUT_MS docs](https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms).
func (o TaskOutput) UserTaskTimeoutMs() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.UserTaskTimeoutMs }).(pulumi.IntOutput)
}

// The warehouse the task will use. Omit this parameter to use Snowflake-managed compute resources for runs of this task.
// Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. (Conflicts with
// user_task_managed_initial_warehouse_size) For more information about this resource, see docs.
func (o TaskOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Warehouse }).(pulumi.StringPtrOutput)
}

// Specifies how the weeks in a given year are computed. `0`: The semantics used are equivalent to the ISO semantics, in
// which a week belongs to a given year if at least 4 days of that week are in that year. `1`: January 1 is included in the
// first week of the year and December 31 is included in the last week of the year. For more information, check
// [WEEK_OF_YEAR_POLICY docs](https://docs.snowflake.com/en/sql-reference/parameters#week-of-year-policy).
func (o TaskOutput) WeekOfYearPolicy() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.WeekOfYearPolicy }).(pulumi.IntOutput)
}

// Specifies the first day of the week (used by week-related date functions). `0`: Legacy Snowflake behavior is used (i.e.
// ISO-like semantics). `1` (Monday) to `7` (Sunday): All the week-related functions use weeks that start on the specified
// day of the week. For more information, check [WEEK_START
// docs](https://docs.snowflake.com/en/sql-reference/parameters#week-start).
func (o TaskOutput) WeekStart() pulumi.IntOutput {
	return o.ApplyT(func(v *Task) pulumi.IntOutput { return v.WeekStart }).(pulumi.IntOutput)
}

// Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported. When a task is triggered
// (based on its SCHEDULE or AFTER setting), it validates the conditions of the expression to determine whether to execute.
// If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task
// as a predecessor also don’t run.
func (o TaskOutput) When() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.When }).(pulumi.StringPtrOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}
