// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamlitsStreamlitDescribeOutput {
    private String defaultPackages;
    private List<String> externalAccessIntegrations;
    private String externalAccessSecrets;
    private List<String> importUrls;
    private String mainFile;
    private String name;
    private String queryWarehouse;
    private String rootLocation;
    private String title;
    private String urlId;
    private List<String> userPackages;

    private GetStreamlitsStreamlitDescribeOutput() {}
    public String defaultPackages() {
        return this.defaultPackages;
    }
    public List<String> externalAccessIntegrations() {
        return this.externalAccessIntegrations;
    }
    public String externalAccessSecrets() {
        return this.externalAccessSecrets;
    }
    public List<String> importUrls() {
        return this.importUrls;
    }
    public String mainFile() {
        return this.mainFile;
    }
    public String name() {
        return this.name;
    }
    public String queryWarehouse() {
        return this.queryWarehouse;
    }
    public String rootLocation() {
        return this.rootLocation;
    }
    public String title() {
        return this.title;
    }
    public String urlId() {
        return this.urlId;
    }
    public List<String> userPackages() {
        return this.userPackages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamlitsStreamlitDescribeOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultPackages;
        private List<String> externalAccessIntegrations;
        private String externalAccessSecrets;
        private List<String> importUrls;
        private String mainFile;
        private String name;
        private String queryWarehouse;
        private String rootLocation;
        private String title;
        private String urlId;
        private List<String> userPackages;
        public Builder() {}
        public Builder(GetStreamlitsStreamlitDescribeOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultPackages = defaults.defaultPackages;
    	      this.externalAccessIntegrations = defaults.externalAccessIntegrations;
    	      this.externalAccessSecrets = defaults.externalAccessSecrets;
    	      this.importUrls = defaults.importUrls;
    	      this.mainFile = defaults.mainFile;
    	      this.name = defaults.name;
    	      this.queryWarehouse = defaults.queryWarehouse;
    	      this.rootLocation = defaults.rootLocation;
    	      this.title = defaults.title;
    	      this.urlId = defaults.urlId;
    	      this.userPackages = defaults.userPackages;
        }

        @CustomType.Setter
        public Builder defaultPackages(String defaultPackages) {
            if (defaultPackages == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "defaultPackages");
            }
            this.defaultPackages = defaultPackages;
            return this;
        }
        @CustomType.Setter
        public Builder externalAccessIntegrations(List<String> externalAccessIntegrations) {
            if (externalAccessIntegrations == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "externalAccessIntegrations");
            }
            this.externalAccessIntegrations = externalAccessIntegrations;
            return this;
        }
        public Builder externalAccessIntegrations(String... externalAccessIntegrations) {
            return externalAccessIntegrations(List.of(externalAccessIntegrations));
        }
        @CustomType.Setter
        public Builder externalAccessSecrets(String externalAccessSecrets) {
            if (externalAccessSecrets == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "externalAccessSecrets");
            }
            this.externalAccessSecrets = externalAccessSecrets;
            return this;
        }
        @CustomType.Setter
        public Builder importUrls(List<String> importUrls) {
            if (importUrls == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "importUrls");
            }
            this.importUrls = importUrls;
            return this;
        }
        public Builder importUrls(String... importUrls) {
            return importUrls(List.of(importUrls));
        }
        @CustomType.Setter
        public Builder mainFile(String mainFile) {
            if (mainFile == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "mainFile");
            }
            this.mainFile = mainFile;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder queryWarehouse(String queryWarehouse) {
            if (queryWarehouse == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "queryWarehouse");
            }
            this.queryWarehouse = queryWarehouse;
            return this;
        }
        @CustomType.Setter
        public Builder rootLocation(String rootLocation) {
            if (rootLocation == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "rootLocation");
            }
            this.rootLocation = rootLocation;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder urlId(String urlId) {
            if (urlId == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "urlId");
            }
            this.urlId = urlId;
            return this;
        }
        @CustomType.Setter
        public Builder userPackages(List<String> userPackages) {
            if (userPackages == null) {
              throw new MissingRequiredPropertyException("GetStreamlitsStreamlitDescribeOutput", "userPackages");
            }
            this.userPackages = userPackages;
            return this;
        }
        public Builder userPackages(String... userPackages) {
            return userPackages(List.of(userPackages));
        }
        public GetStreamlitsStreamlitDescribeOutput build() {
            final var _resultValue = new GetStreamlitsStreamlitDescribeOutput();
            _resultValue.defaultPackages = defaultPackages;
            _resultValue.externalAccessIntegrations = externalAccessIntegrations;
            _resultValue.externalAccessSecrets = externalAccessSecrets;
            _resultValue.importUrls = importUrls;
            _resultValue.mainFile = mainFile;
            _resultValue.name = name;
            _resultValue.queryWarehouse = queryWarehouse;
            _resultValue.rootLocation = rootLocation;
            _resultValue.title = title;
            _resultValue.urlId = urlId;
            _resultValue.userPackages = userPackages;
            return _resultValue;
        }
    }
}
