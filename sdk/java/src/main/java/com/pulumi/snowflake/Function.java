// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.snowflake;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.snowflake.FunctionArgs;
import com.pulumi.snowflake.Utilities;
import com.pulumi.snowflake.inputs.FunctionState;
import com.pulumi.snowflake.outputs.FunctionArgument;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.snowflake.Database;
 * import com.pulumi.snowflake.DatabaseArgs;
 * import com.pulumi.snowflake.Schema;
 * import com.pulumi.snowflake.SchemaArgs;
 * import com.pulumi.snowflake.Function;
 * import com.pulumi.snowflake.FunctionArgs;
 * import com.pulumi.snowflake.inputs.FunctionArgumentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var db = new Database(&#34;db&#34;, DatabaseArgs.builder()        
 *             .dataRetentionDays(1)
 *             .build());
 * 
 *         var schema = new Schema(&#34;schema&#34;, SchemaArgs.builder()        
 *             .database(db.name())
 *             .dataRetentionDays(1)
 *             .build());
 * 
 *         var testFunctJava = new Function(&#34;testFunctJava&#34;, FunctionArgs.builder()        
 *             .database(&#34;MY_DB&#34;)
 *             .schema(&#34;MY_SCHEMA&#34;)
 *             .arguments(FunctionArgumentArgs.builder()
 *                 .name(&#34;arg1&#34;)
 *                 .type(&#34;number&#34;)
 *                 .build())
 *             .comment(&#34;Example for java language&#34;)
 *             .returnType(&#34;varchar&#34;)
 *             .language(&#34;java&#34;)
 *             .handler(&#34;CoolFunc.test&#34;)
 *             .statement(&#34;class CoolFunc {public static String test(int n) {return \&#34;hello!\&#34;;}}&#34;)
 *             .build());
 * 
 *         var pythonTest = new Function(&#34;pythonTest&#34;, FunctionArgs.builder()        
 *             .database(&#34;MY_DB&#34;)
 *             .schema(&#34;MY_SCHEMA&#34;)
 *             .arguments(FunctionArgumentArgs.builder()
 *                 .name(&#34;arg1&#34;)
 *                 .type(&#34;number&#34;)
 *                 .build())
 *             .comment(&#34;Example for Python language&#34;)
 *             .returnType(&#34;NUMBER(38,0)&#34;)
 *             .nullInputBehavior(&#34;CALLED ON NULL INPUT&#34;)
 *             .returnBehavior(&#34;VOLATILE&#34;)
 *             .language(&#34;python&#34;)
 *             .runtimeVersion(&#34;3.8&#34;)
 *             .handler(&#34;add_py&#34;)
 *             .statement(&#34;def add_py(i): return i+1&#34;)
 *             .build());
 * 
 *         var sqlTest = new Function(&#34;sqlTest&#34;, FunctionArgs.builder()        
 *             .database(&#34;MY_DB&#34;)
 *             .schema(&#34;MY_SCHEMA&#34;)
 *             .arguments(FunctionArgumentArgs.builder()
 *                 .name(&#34;arg1&#34;)
 *                 .type(&#34;number&#34;)
 *                 .build())
 *             .comment(&#34;Example for SQL language&#34;)
 *             .returnType(&#34;NUMBER(38,0)&#34;)
 *             .nullInputBehavior(&#34;CALLED ON NULL INPUT&#34;)
 *             .returnBehavior(&#34;VOLATILE&#34;)
 *             .statement(&#34;select arg1 + 1&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * format is database name | schema name | function name | &lt;list of arg types, separated with &#39;-&#39;&gt;
 * 
 * ```sh
 * $ pulumi import snowflake:index/function:Function example &#39;dbName|schemaName|functionName|varchar-varchar-varchar&#39;
 * ```
 * 
 */
@ResourceType(type="snowflake:index/function:Function")
public class Function extends com.pulumi.resources.CustomResource {
    /**
     * List of the arguments for the function
     * 
     */
    @Export(name="arguments", refs={List.class,FunctionArgument.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FunctionArgument>> arguments;

    /**
     * @return List of the arguments for the function
     * 
     */
    public Output<Optional<List<FunctionArgument>>> arguments() {
        return Codegen.optional(this.arguments);
    }
    /**
     * Specifies a comment for the function.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Specifies a comment for the function.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * The database in which to create the function. Don&#39;t use the | character.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database in which to create the function. Don&#39;t use the | character.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * The handler method for Java / Python function.
     * 
     */
    @Export(name="handler", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> handler;

    /**
     * @return The handler method for Java / Python function.
     * 
     */
    public Output<Optional<String>> handler() {
        return Codegen.optional(this.handler);
    }
    /**
     * Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.
     * 
     */
    @Export(name="imports", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> imports;

    /**
     * @return Imports for Java / Python functions. For Java this a list of jar files, for Python this is a list of Python files.
     * 
     */
    public Output<Optional<List<String>>> imports() {
        return Codegen.optional(this.imports);
    }
    /**
     * Specifies that the function is secure.
     * 
     */
    @Export(name="isSecure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isSecure;

    /**
     * @return Specifies that the function is secure.
     * 
     */
    public Output<Optional<Boolean>> isSecure() {
        return Codegen.optional(this.isSecure);
    }
    /**
     * Specifies the language of the stored function code.
     * 
     */
    @Export(name="language", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> language;

    /**
     * @return Specifies the language of the stored function code.
     * 
     */
    public Output<Optional<String>> language() {
        return Codegen.optional(this.language);
    }
    /**
     * The argument name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The argument name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the behavior of the function when called with null inputs.
     * 
     */
    @Export(name="nullInputBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nullInputBehavior;

    /**
     * @return Specifies the behavior of the function when called with null inputs.
     * 
     */
    public Output<Optional<String>> nullInputBehavior() {
        return Codegen.optional(this.nullInputBehavior);
    }
    /**
     * List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: (&#39;numpy&#39;,&#39;pandas&#39;,&#39;xgboost==1.5.0&#39;).
     * 
     */
    @Export(name="packages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> packages;

    /**
     * @return List of package imports to use for Java / Python functions. For Java, package imports should be of the form: package*name:version*number, where package*name is snowflake*domain:package. For Python use it should be: (&#39;numpy&#39;,&#39;pandas&#39;,&#39;xgboost==1.5.0&#39;).
     * 
     */
    public Output<Optional<List<String>>> packages() {
        return Codegen.optional(this.packages);
    }
    /**
     * Specifies the behavior of the function when returning results
     * 
     */
    @Export(name="returnBehavior", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> returnBehavior;

    /**
     * @return Specifies the behavior of the function when returning results
     * 
     */
    public Output<Optional<String>> returnBehavior() {
        return Codegen.optional(this.returnBehavior);
    }
    /**
     * The return type of the function
     * 
     */
    @Export(name="returnType", refs={String.class}, tree="[0]")
    private Output<String> returnType;

    /**
     * @return The return type of the function
     * 
     */
    public Output<String> returnType() {
        return this.returnType;
    }
    /**
     * Required for Python functions. Specifies Python runtime version.
     * 
     */
    @Export(name="runtimeVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runtimeVersion;

    /**
     * @return Required for Python functions. Specifies Python runtime version.
     * 
     */
    public Output<Optional<String>> runtimeVersion() {
        return Codegen.optional(this.runtimeVersion);
    }
    /**
     * The schema in which to create the function. Don&#39;t use the | character.
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output<String> schema;

    /**
     * @return The schema in which to create the function. Don&#39;t use the | character.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }
    /**
     * Specifies the javascript / java / scala / sql / python code used to create the function.
     * 
     */
    @Export(name="statement", refs={String.class}, tree="[0]")
    private Output<String> statement;

    /**
     * @return Specifies the javascript / java / scala / sql / python code used to create the function.
     * 
     */
    public Output<String> statement() {
        return this.statement;
    }
    /**
     * The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.
     * 
     */
    @Export(name="targetPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetPath;

    /**
     * @return The target path for the Java / Python functions. For Java, it is the path of compiled jar files and for the Python it is the path of the Python files.
     * 
     */
    public Output<Optional<String>> targetPath() {
        return Codegen.optional(this.targetPath);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Function(String name) {
        this(name, FunctionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Function(String name, FunctionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Function(String name, FunctionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/function:Function", name, args == null ? FunctionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Function(String name, Output<String> id, @Nullable FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("snowflake:index/function:Function", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Function get(String name, Output<String> id, @Nullable FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Function(name, id, state, options);
    }
}
